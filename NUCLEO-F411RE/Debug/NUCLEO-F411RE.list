
NUCLEO-F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af8  0800e028  0800e028  0001e028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb20  0800eb20  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb20  0800eb20  0001eb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb28  0800eb28  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb28  0800eb28  0001eb28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb2c  0800eb2c  0001eb2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000080  0800eb30  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .noinit       00000044  20000000  20000000  00030000  2**2
                  ALLOC
 10 .ip_code      00000000  08060000  08060000  0002025c  2**0
                  CONTENTS
 11 .bss          000006ac  2000025c  2000025c  0002025c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000908  20000908  0002025c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026b7a  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004543  00000000  00000000  00046e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001ee0  00000000  00000000  0004b350  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001cb8  00000000  00000000  0004d230  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0001b60d  00000000  00000000  0004eee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001b757  00000000  00000000  0006a4f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0009d3d8  00000000  00000000  00085c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00123024  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008ae8  00000000  00000000  001230a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000025c 	.word	0x2000025c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e010 	.word	0x0800e010

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000260 	.word	0x20000260
 80001dc:	0800e010 	.word	0x0800e010

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_Init+0x40>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_Init+0x40>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_Init+0x40>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f8d9 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f00a f9de 	bl	800b2a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f00a f9b4 	bl	800b258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000084 	.word	0x20000084
 8000f20:	200006e4 	.word	0x200006e4

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	200006e4 	.word	0x200006e4

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b07      	cmp	r3, #7
 80010a4:	d00f      	beq.n	80010c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b06      	cmp	r3, #6
 80010aa:	d00c      	beq.n	80010c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b05      	cmp	r3, #5
 80010b0:	d009      	beq.n	80010c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b04      	cmp	r3, #4
 80010b6:	d006      	beq.n	80010c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d003      	beq.n	80010c6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80010be:	2192      	movs	r1, #146	; 0x92
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80010c2:	f009 ffff 	bl	800b0c4 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ff38 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	0800e028 	.word	0x0800e028

080010d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d903      	bls.n	80010f8 <HAL_NVIC_SetPriority+0x20>
 80010f0:	21aa      	movs	r1, #170	; 0xaa
 80010f2:	480e      	ldr	r0, [pc, #56]	; (800112c <HAL_NVIC_SetPriority+0x54>)
 80010f4:	f009 ffe6 	bl	800b0c4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2b0f      	cmp	r3, #15
 80010fc:	d903      	bls.n	8001106 <HAL_NVIC_SetPriority+0x2e>
 80010fe:	21ab      	movs	r1, #171	; 0xab
 8001100:	480a      	ldr	r0, [pc, #40]	; (800112c <HAL_NVIC_SetPriority+0x54>)
 8001102:	f009 ffdf 	bl	800b0c4 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001106:	f7ff ff3d 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 800110a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	6978      	ldr	r0, [r7, #20]
 8001112:	f7ff ff8d 	bl	8001030 <NVIC_EncodePriority>
 8001116:	4602      	mov	r2, r0
 8001118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff5c 	bl	8000fdc <__NVIC_SetPriority>
}
 8001124:	bf00      	nop
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	0800e028 	.word	0x0800e028

08001130 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	da03      	bge.n	800114a <HAL_NVIC_EnableIRQ+0x1a>
 8001142:	21be      	movs	r1, #190	; 0xbe
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_NVIC_EnableIRQ+0x2c>)
 8001146:	f009 ffbd 	bl	800b0c4 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff26 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	0800e028 	.word	0x0800e028

08001160 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e017      	b.n	80011a2 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <HAL_CRC_Init+0x4c>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d003      	beq.n	8001184 <HAL_CRC_Init+0x24>
 800117c:	2168      	movs	r1, #104	; 0x68
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <HAL_CRC_Init+0x50>)
 8001180:	f009 ffa0 	bl	800b0c4 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	795b      	ldrb	r3, [r3, #5]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d105      	bne.n	800119a <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f008 f86f 	bl	8009278 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023000 	.word	0x40023000
 80011b0:	0800e064 	.word	0x0800e064

080011b4 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2202      	movs	r2, #2
 80011c8:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 0201 	orr.w	r2, r2, #1
 80011d8:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e00a      	b.n	80011f6 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	441a      	add	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3301      	adds	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d3f0      	bcc.n	80011e0 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2201      	movs	r2, #1
 800120a:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800120c:	693b      	ldr	r3, [r7, #16]
}
 800120e:	4618      	mov	r0, r3
 8001210:	371c      	adds	r7, #28
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff fe7c 	bl	8000f24 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e204      	b.n	8001642 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a97      	ldr	r2, [pc, #604]	; (800149c <HAL_DMA_Init+0x280>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d04e      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a96      	ldr	r2, [pc, #600]	; (80014a0 <HAL_DMA_Init+0x284>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d049      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a94      	ldr	r2, [pc, #592]	; (80014a4 <HAL_DMA_Init+0x288>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d044      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a93      	ldr	r2, [pc, #588]	; (80014a8 <HAL_DMA_Init+0x28c>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d03f      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a91      	ldr	r2, [pc, #580]	; (80014ac <HAL_DMA_Init+0x290>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d03a      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a90      	ldr	r2, [pc, #576]	; (80014b0 <HAL_DMA_Init+0x294>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d035      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a8e      	ldr	r2, [pc, #568]	; (80014b4 <HAL_DMA_Init+0x298>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d030      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a8d      	ldr	r2, [pc, #564]	; (80014b8 <HAL_DMA_Init+0x29c>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d02b      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a8b      	ldr	r2, [pc, #556]	; (80014bc <HAL_DMA_Init+0x2a0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d026      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a8a      	ldr	r2, [pc, #552]	; (80014c0 <HAL_DMA_Init+0x2a4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d021      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a88      	ldr	r2, [pc, #544]	; (80014c4 <HAL_DMA_Init+0x2a8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d01c      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a87      	ldr	r2, [pc, #540]	; (80014c8 <HAL_DMA_Init+0x2ac>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d017      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a85      	ldr	r2, [pc, #532]	; (80014cc <HAL_DMA_Init+0x2b0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d012      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a84      	ldr	r2, [pc, #528]	; (80014d0 <HAL_DMA_Init+0x2b4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d00d      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a82      	ldr	r2, [pc, #520]	; (80014d4 <HAL_DMA_Init+0x2b8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d008      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a81      	ldr	r2, [pc, #516]	; (80014d8 <HAL_DMA_Init+0x2bc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d003      	beq.n	80012e0 <HAL_DMA_Init+0xc4>
 80012d8:	21b8      	movs	r1, #184	; 0xb8
 80012da:	4880      	ldr	r0, [pc, #512]	; (80014dc <HAL_DMA_Init+0x2c0>)
 80012dc:	f009 fef2 	bl	800b0c4 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d026      	beq.n	8001336 <HAL_DMA_Init+0x11a>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80012f0:	d021      	beq.n	8001336 <HAL_DMA_Init+0x11a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80012fa:	d01c      	beq.n	8001336 <HAL_DMA_Init+0x11a>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001304:	d017      	beq.n	8001336 <HAL_DMA_Init+0x11a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800130e:	d012      	beq.n	8001336 <HAL_DMA_Init+0x11a>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001318:	d00d      	beq.n	8001336 <HAL_DMA_Init+0x11a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001322:	d008      	beq.n	8001336 <HAL_DMA_Init+0x11a>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800132c:	d003      	beq.n	8001336 <HAL_DMA_Init+0x11a>
 800132e:	21b9      	movs	r1, #185	; 0xb9
 8001330:	486a      	ldr	r0, [pc, #424]	; (80014dc <HAL_DMA_Init+0x2c0>)
 8001332:	f009 fec7 	bl	800b0c4 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <HAL_DMA_Init+0x13a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b40      	cmp	r3, #64	; 0x40
 8001344:	d007      	beq.n	8001356 <HAL_DMA_Init+0x13a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b80      	cmp	r3, #128	; 0x80
 800134c:	d003      	beq.n	8001356 <HAL_DMA_Init+0x13a>
 800134e:	21ba      	movs	r1, #186	; 0xba
 8001350:	4862      	ldr	r0, [pc, #392]	; (80014dc <HAL_DMA_Init+0x2c0>)
 8001352:	f009 feb7 	bl	800b0c4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800135e:	d007      	beq.n	8001370 <HAL_DMA_Init+0x154>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_DMA_Init+0x154>
 8001368:	21bb      	movs	r1, #187	; 0xbb
 800136a:	485c      	ldr	r0, [pc, #368]	; (80014dc <HAL_DMA_Init+0x2c0>)
 800136c:	f009 feaa 	bl	800b0c4 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001378:	d007      	beq.n	800138a <HAL_DMA_Init+0x16e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_DMA_Init+0x16e>
 8001382:	21bc      	movs	r1, #188	; 0xbc
 8001384:	4855      	ldr	r0, [pc, #340]	; (80014dc <HAL_DMA_Init+0x2c0>)
 8001386:	f009 fe9d 	bl	800b0c4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00d      	beq.n	80013ae <HAL_DMA_Init+0x192>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800139a:	d008      	beq.n	80013ae <HAL_DMA_Init+0x192>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013a4:	d003      	beq.n	80013ae <HAL_DMA_Init+0x192>
 80013a6:	21bd      	movs	r1, #189	; 0xbd
 80013a8:	484c      	ldr	r0, [pc, #304]	; (80014dc <HAL_DMA_Init+0x2c0>)
 80013aa:	f009 fe8b 	bl	800b0c4 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00d      	beq.n	80013d2 <HAL_DMA_Init+0x1b6>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013be:	d008      	beq.n	80013d2 <HAL_DMA_Init+0x1b6>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013c8:	d003      	beq.n	80013d2 <HAL_DMA_Init+0x1b6>
 80013ca:	21be      	movs	r1, #190	; 0xbe
 80013cc:	4843      	ldr	r0, [pc, #268]	; (80014dc <HAL_DMA_Init+0x2c0>)
 80013ce:	f009 fe79 	bl	800b0c4 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00c      	beq.n	80013f4 <HAL_DMA_Init+0x1d8>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013e2:	d007      	beq.n	80013f4 <HAL_DMA_Init+0x1d8>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	2b20      	cmp	r3, #32
 80013ea:	d003      	beq.n	80013f4 <HAL_DMA_Init+0x1d8>
 80013ec:	21bf      	movs	r1, #191	; 0xbf
 80013ee:	483b      	ldr	r0, [pc, #236]	; (80014dc <HAL_DMA_Init+0x2c0>)
 80013f0:	f009 fe68 	bl	800b0c4 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d012      	beq.n	8001422 <HAL_DMA_Init+0x206>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001404:	d00d      	beq.n	8001422 <HAL_DMA_Init+0x206>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800140e:	d008      	beq.n	8001422 <HAL_DMA_Init+0x206>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001418:	d003      	beq.n	8001422 <HAL_DMA_Init+0x206>
 800141a:	21c0      	movs	r1, #192	; 0xc0
 800141c:	482f      	ldr	r0, [pc, #188]	; (80014dc <HAL_DMA_Init+0x2c0>)
 800141e:	f009 fe51 	bl	800b0c4 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <HAL_DMA_Init+0x21e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	2b04      	cmp	r3, #4
 8001430:	d003      	beq.n	800143a <HAL_DMA_Init+0x21e>
 8001432:	21c1      	movs	r1, #193	; 0xc1
 8001434:	4829      	ldr	r0, [pc, #164]	; (80014dc <HAL_DMA_Init+0x2c0>)
 8001436:	f009 fe45 	bl	800b0c4 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	2b00      	cmp	r3, #0
 8001440:	d065      	beq.n	800150e <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00f      	beq.n	800146a <HAL_DMA_Init+0x24e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	2b01      	cmp	r3, #1
 8001450:	d00b      	beq.n	800146a <HAL_DMA_Init+0x24e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	2b02      	cmp	r3, #2
 8001458:	d007      	beq.n	800146a <HAL_DMA_Init+0x24e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	2b03      	cmp	r3, #3
 8001460:	d003      	beq.n	800146a <HAL_DMA_Init+0x24e>
 8001462:	21c6      	movs	r1, #198	; 0xc6
 8001464:	481d      	ldr	r0, [pc, #116]	; (80014dc <HAL_DMA_Init+0x2c0>)
 8001466:	f009 fe2d 	bl	800b0c4 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146e:	2b00      	cmp	r3, #0
 8001470:	d036      	beq.n	80014e0 <HAL_DMA_Init+0x2c4>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800147a:	d031      	beq.n	80014e0 <HAL_DMA_Init+0x2c4>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001484:	d02c      	beq.n	80014e0 <HAL_DMA_Init+0x2c4>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800148e:	d027      	beq.n	80014e0 <HAL_DMA_Init+0x2c4>
 8001490:	21c7      	movs	r1, #199	; 0xc7
 8001492:	4812      	ldr	r0, [pc, #72]	; (80014dc <HAL_DMA_Init+0x2c0>)
 8001494:	f009 fe16 	bl	800b0c4 <assert_failed>
 8001498:	e022      	b.n	80014e0 <HAL_DMA_Init+0x2c4>
 800149a:	bf00      	nop
 800149c:	40026010 	.word	0x40026010
 80014a0:	40026028 	.word	0x40026028
 80014a4:	40026040 	.word	0x40026040
 80014a8:	40026058 	.word	0x40026058
 80014ac:	40026070 	.word	0x40026070
 80014b0:	40026088 	.word	0x40026088
 80014b4:	400260a0 	.word	0x400260a0
 80014b8:	400260b8 	.word	0x400260b8
 80014bc:	40026410 	.word	0x40026410
 80014c0:	40026428 	.word	0x40026428
 80014c4:	40026440 	.word	0x40026440
 80014c8:	40026458 	.word	0x40026458
 80014cc:	40026470 	.word	0x40026470
 80014d0:	40026488 	.word	0x40026488
 80014d4:	400264a0 	.word	0x400264a0
 80014d8:	400264b8 	.word	0x400264b8
 80014dc:	0800e09c 	.word	0x0800e09c
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d012      	beq.n	800150e <HAL_DMA_Init+0x2f2>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014f0:	d00d      	beq.n	800150e <HAL_DMA_Init+0x2f2>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014fa:	d008      	beq.n	800150e <HAL_DMA_Init+0x2f2>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001504:	d003      	beq.n	800150e <HAL_DMA_Init+0x2f2>
 8001506:	21c8      	movs	r1, #200	; 0xc8
 8001508:	4850      	ldr	r0, [pc, #320]	; (800164c <HAL_DMA_Init+0x430>)
 800150a:	f009 fddb 	bl	800b0c4 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2202      	movs	r2, #2
 800151a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 0201 	bic.w	r2, r2, #1
 800152c:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800152e:	e00f      	b.n	8001550 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001530:	f7ff fcf8 	bl	8000f24 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b05      	cmp	r3, #5
 800153c:	d908      	bls.n	8001550 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2220      	movs	r2, #32
 8001542:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2203      	movs	r2, #3
 8001548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e078      	b.n	8001642 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1e8      	bne.n	8001530 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4b39      	ldr	r3, [pc, #228]	; (8001650 <HAL_DMA_Init+0x434>)
 800156a:	4013      	ands	r3, r2
 800156c:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800157c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001588:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001594:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	4313      	orrs	r3, r2
 80015a0:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d107      	bne.n	80015ba <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4313      	orrs	r3, r2
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f023 0307 	bic.w	r3, r3, #7
 80015d0:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4313      	orrs	r3, r2
 80015da:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d117      	bne.n	8001614 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00e      	beq.n	8001614 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 faa2 	bl	8001b40 <DMA_CheckFifoParam>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d008      	beq.n	8001614 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2240      	movs	r2, #64	; 0x40
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001610:	2301      	movs	r3, #1
 8001612:	e016      	b.n	8001642 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fa59 	bl	8001ad4 <DMA_CalcBaseAndBitshift>
 8001622:	4603      	mov	r3, r0
 8001624:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162a:	223f      	movs	r2, #63	; 0x3f
 800162c:	409a      	lsls	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	0800e09c 	.word	0x0800e09c
 8001650:	f010803f 	.word	0xf010803f

08001654 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_DMA_Start_IT+0x26>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001678:	d304      	bcc.n	8001684 <HAL_DMA_Start_IT+0x30>
 800167a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800167e:	4827      	ldr	r0, [pc, #156]	; (800171c <HAL_DMA_Start_IT+0xc8>)
 8001680:	f009 fd20 	bl	800b0c4 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_DMA_Start_IT+0x3e>
 800168e:	2302      	movs	r3, #2
 8001690:	e040      	b.n	8001714 <HAL_DMA_Start_IT+0xc0>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d12f      	bne.n	8001706 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2202      	movs	r2, #2
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f9dc 	bl	8001a78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c4:	223f      	movs	r2, #63	; 0x3f
 80016c6:	409a      	lsls	r2, r3
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0216 	orr.w	r2, r2, #22
 80016da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d007      	beq.n	80016f4 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0208 	orr.w	r2, r2, #8
 80016f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e005      	b.n	8001712 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800170e:	2302      	movs	r3, #2
 8001710:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001712:	7dfb      	ldrb	r3, [r7, #23]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	0800e09c 	.word	0x0800e09c

08001720 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d004      	beq.n	800173e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2280      	movs	r2, #128	; 0x80
 8001738:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e00c      	b.n	8001758 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2205      	movs	r2, #5
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001770:	4b92      	ldr	r3, [pc, #584]	; (80019bc <HAL_DMA_IRQHandler+0x258>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a92      	ldr	r2, [pc, #584]	; (80019c0 <HAL_DMA_IRQHandler+0x25c>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	0a9b      	lsrs	r3, r3, #10
 800177c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	2208      	movs	r2, #8
 8001790:	409a      	lsls	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4013      	ands	r3, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d01a      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d013      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0204 	bic.w	r2, r2, #4
 80017b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017bc:	2208      	movs	r2, #8
 80017be:	409a      	lsls	r2, r3
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c8:	f043 0201 	orr.w	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d4:	2201      	movs	r2, #1
 80017d6:	409a      	lsls	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d012      	beq.n	8001806 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f2:	2201      	movs	r2, #1
 80017f4:	409a      	lsls	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fe:	f043 0202 	orr.w	r2, r3, #2
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180a:	2204      	movs	r2, #4
 800180c:	409a      	lsls	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4013      	ands	r3, r2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d012      	beq.n	800183c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00b      	beq.n	800183c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001828:	2204      	movs	r2, #4
 800182a:	409a      	lsls	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001834:	f043 0204 	orr.w	r2, r3, #4
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001840:	2210      	movs	r2, #16
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d043      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d03c      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185e:	2210      	movs	r2, #16
 8001860:	409a      	lsls	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d018      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d108      	bne.n	8001894 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	2b00      	cmp	r3, #0
 8001888:	d024      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	4798      	blx	r3
 8001892:	e01f      	b.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01b      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
 80018a4:	e016      	b.n	80018d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d107      	bne.n	80018c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0208 	bic.w	r2, r2, #8
 80018c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d8:	2220      	movs	r2, #32
 80018da:	409a      	lsls	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 808e 	beq.w	8001a02 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8086 	beq.w	8001a02 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fa:	2220      	movs	r2, #32
 80018fc:	409a      	lsls	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b05      	cmp	r3, #5
 800190c:	d136      	bne.n	800197c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0216 	bic.w	r2, r2, #22
 800191c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800192c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <HAL_DMA_IRQHandler+0x1da>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0208 	bic.w	r2, r2, #8
 800194c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001952:	223f      	movs	r2, #63	; 0x3f
 8001954:	409a      	lsls	r2, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196e:	2b00      	cmp	r3, #0
 8001970:	d07d      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	4798      	blx	r3
        }
        return;
 800197a:	e078      	b.n	8001a6e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d01c      	beq.n	80019c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d108      	bne.n	80019aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199c:	2b00      	cmp	r3, #0
 800199e:	d030      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	4798      	blx	r3
 80019a8:	e02b      	b.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d027      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4798      	blx	r3
 80019ba:	e022      	b.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
 80019bc:	20000088 	.word	0x20000088
 80019c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10f      	bne.n	80019f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0210 	bic.w	r2, r2, #16
 80019e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d032      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d022      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2205      	movs	r2, #5
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	3301      	adds	r3, #1
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d307      	bcc.n	8001a4a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f2      	bne.n	8001a2e <HAL_DMA_IRQHandler+0x2ca>
 8001a48:	e000      	b.n	8001a4c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a4a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	4798      	blx	r3
 8001a6c:	e000      	b.n	8001a70 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a6e:	bf00      	nop
    }
  }
}
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop

08001a78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b40      	cmp	r3, #64	; 0x40
 8001aa4:	d108      	bne.n	8001ab8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ab6:	e007      	b.n	8001ac8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	60da      	str	r2, [r3, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	3b10      	subs	r3, #16
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <DMA_CalcBaseAndBitshift+0x64>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aee:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <DMA_CalcBaseAndBitshift+0x68>)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d909      	bls.n	8001b16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b0a:	f023 0303 	bic.w	r3, r3, #3
 8001b0e:	1d1a      	adds	r2, r3, #4
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	659a      	str	r2, [r3, #88]	; 0x58
 8001b14:	e007      	b.n	8001b26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b1e:	f023 0303 	bic.w	r3, r3, #3
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	aaaaaaab 	.word	0xaaaaaaab
 8001b3c:	0800e7bc 	.word	0x0800e7bc

08001b40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d11f      	bne.n	8001b9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d855      	bhi.n	8001c0c <DMA_CheckFifoParam+0xcc>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <DMA_CheckFifoParam+0x28>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b79 	.word	0x08001b79
 8001b6c:	08001b8b 	.word	0x08001b8b
 8001b70:	08001b79 	.word	0x08001b79
 8001b74:	08001c0d 	.word	0x08001c0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d045      	beq.n	8001c10 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b88:	e042      	b.n	8001c10 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b92:	d13f      	bne.n	8001c14 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b98:	e03c      	b.n	8001c14 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba2:	d121      	bne.n	8001be8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d836      	bhi.n	8001c18 <DMA_CheckFifoParam+0xd8>
 8001baa:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <DMA_CheckFifoParam+0x70>)
 8001bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb0:	08001bc1 	.word	0x08001bc1
 8001bb4:	08001bc7 	.word	0x08001bc7
 8001bb8:	08001bc1 	.word	0x08001bc1
 8001bbc:	08001bd9 	.word	0x08001bd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001bc4:	e02f      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d024      	beq.n	8001c1c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bd6:	e021      	b.n	8001c1c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001be0:	d11e      	bne.n	8001c20 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001be6:	e01b      	b.n	8001c20 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d902      	bls.n	8001bf4 <DMA_CheckFifoParam+0xb4>
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d003      	beq.n	8001bfa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bf2:	e018      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf8:	e015      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00e      	beq.n	8001c24 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
      break;
 8001c0a:	e00b      	b.n	8001c24 <DMA_CheckFifoParam+0xe4>
      break;
 8001c0c:	bf00      	nop
 8001c0e:	e00a      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c10:	bf00      	nop
 8001c12:	e008      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c14:	bf00      	nop
 8001c16:	e006      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c18:	bf00      	nop
 8001c1a:	e004      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c1c:	bf00      	nop
 8001c1e:	e002      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;   
 8001c20:	bf00      	nop
 8001c22:	e000      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c24:	bf00      	nop
    }
  } 
  
  return status; 
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c46:	4b2b      	ldr	r3, [pc, #172]	; (8001cf4 <HAL_FLASH_Program+0xc0>)
 8001c48:	7e1b      	ldrb	r3, [r3, #24]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_FLASH_Program+0x1e>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e04b      	b.n	8001cea <HAL_FLASH_Program+0xb6>
 8001c52:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <HAL_FLASH_Program+0xc0>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00c      	beq.n	8001c78 <HAL_FLASH_Program+0x44>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d009      	beq.n	8001c78 <HAL_FLASH_Program+0x44>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d006      	beq.n	8001c78 <HAL_FLASH_Program+0x44>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d003      	beq.n	8001c78 <HAL_FLASH_Program+0x44>
 8001c70:	21a4      	movs	r1, #164	; 0xa4
 8001c72:	4821      	ldr	r0, [pc, #132]	; (8001cf8 <HAL_FLASH_Program+0xc4>)
 8001c74:	f009 fa26 	bl	800b0c4 <assert_failed>
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c7c:	f000 f8b2 	bl	8001de4 <FLASH_WaitForLastOperation>
 8001c80:	4603      	mov	r3, r0
 8001c82:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d12b      	bne.n	8001ce2 <HAL_FLASH_Program+0xae>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d105      	bne.n	8001c9c <HAL_FLASH_Program+0x68>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001c90:	783b      	ldrb	r3, [r7, #0]
 8001c92:	4619      	mov	r1, r3
 8001c94:	68b8      	ldr	r0, [r7, #8]
 8001c96:	f000 f9ad 	bl	8001ff4 <FLASH_Program_Byte>
 8001c9a:	e016      	b.n	8001cca <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d105      	bne.n	8001cae <HAL_FLASH_Program+0x7a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001ca2:	883b      	ldrh	r3, [r7, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	68b8      	ldr	r0, [r7, #8]
 8001ca8:	f000 f966 	bl	8001f78 <FLASH_Program_HalfWord>
 8001cac:	e00d      	b.n	8001cca <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d105      	bne.n	8001cc0 <HAL_FLASH_Program+0x8c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	68b8      	ldr	r0, [r7, #8]
 8001cba:	f000 f91f 	bl	8001efc <FLASH_Program_Word>
 8001cbe:	e004      	b.n	8001cca <HAL_FLASH_Program+0x96>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cc4:	68b8      	ldr	r0, [r7, #8]
 8001cc6:	f000 f8cd 	bl	8001e64 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cce:	f000 f889 	bl	8001de4 <FLASH_WaitForLastOperation>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_FLASH_Program+0xc8>)
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	4a08      	ldr	r2, [pc, #32]	; (8001cfc <HAL_FLASH_Program+0xc8>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_FLASH_Program+0xc0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200006e8 	.word	0x200006e8
 8001cf8:	0800e0d4 	.word	0x0800e0d4
 8001cfc:	40023c00 	.word	0x40023c00

08001d00 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_FLASH_Unlock+0x38>)
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	da0b      	bge.n	8001d2a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_FLASH_Unlock+0x38>)
 8001d14:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <HAL_FLASH_Unlock+0x3c>)
 8001d16:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_FLASH_Unlock+0x38>)
 8001d1a:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <HAL_FLASH_Unlock+0x40>)
 8001d1c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_FLASH_Unlock+0x38>)
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	da01      	bge.n	8001d2a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40023c00 	.word	0x40023c00
 8001d3c:	45670123 	.word	0x45670123
 8001d40:	cdef89ab 	.word	0xcdef89ab

08001d44 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_FLASH_Lock+0x1c>)
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_FLASH_Lock+0x1c>)
 8001d4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d52:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40023c00 	.word	0x40023c00

08001d64 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_FLASH_OB_Unlock+0x2c>)
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_FLASH_OB_Unlock+0x2c>)
 8001d76:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_FLASH_OB_Unlock+0x30>)
 8001d78:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001d7a:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_FLASH_OB_Unlock+0x2c>)
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <HAL_FLASH_OB_Unlock+0x34>)
 8001d7e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001d80:	2300      	movs	r3, #0
 8001d82:	e000      	b.n	8001d86 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	40023c00 	.word	0x40023c00
 8001d94:	08192a3b 	.word	0x08192a3b
 8001d98:	4c5d6e7f 	.word	0x4c5d6e7f

08001d9c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_FLASH_OB_Lock+0x1c>)
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	4a04      	ldr	r2, [pc, #16]	; (8001db8 <HAL_FLASH_OB_Lock+0x1c>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	40023c00 	.word	0x40023c00

08001dbc <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <HAL_FLASH_OB_Launch+0x24>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_FLASH_OB_Launch+0x24>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8001dd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dd4:	f000 f806 	bl	8001de4 <FLASH_WaitForLastOperation>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40023c14 	.word	0x40023c14

08001de4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <FLASH_WaitForLastOperation+0x78>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001df6:	f7ff f895 	bl	8000f24 <HAL_GetTick>
 8001dfa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001dfc:	e010      	b.n	8001e20 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d00c      	beq.n	8001e20 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d007      	beq.n	8001e1c <FLASH_WaitForLastOperation+0x38>
 8001e0c:	f7ff f88a 	bl	8000f24 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d201      	bcs.n	8001e20 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e019      	b.n	8001e54 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <FLASH_WaitForLastOperation+0x7c>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1e8      	bne.n	8001dfe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <FLASH_WaitForLastOperation+0x7c>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <FLASH_WaitForLastOperation+0x7c>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <FLASH_WaitForLastOperation+0x7c>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001e4a:	f000 f90f 	bl	800206c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
  
}  
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200006e8 	.word	0x200006e8
 8001e60:	40023c00 	.word	0x40023c00

08001e64 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e76:	d303      	bcc.n	8001e80 <FLASH_Program_DoubleWord+0x1c>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <FLASH_Program_DoubleWord+0x84>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d90c      	bls.n	8001e9a <FLASH_Program_DoubleWord+0x36>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4a1a      	ldr	r2, [pc, #104]	; (8001eec <FLASH_Program_DoubleWord+0x88>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d903      	bls.n	8001e90 <FLASH_Program_DoubleWord+0x2c>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <FLASH_Program_DoubleWord+0x8c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d904      	bls.n	8001e9a <FLASH_Program_DoubleWord+0x36>
 8001e90:	f240 2167 	movw	r1, #615	; 0x267
 8001e94:	4817      	ldr	r0, [pc, #92]	; (8001ef4 <FLASH_Program_DoubleWord+0x90>)
 8001e96:	f009 f915 	bl	800b0c4 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <FLASH_Program_DoubleWord+0x94>)
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	4a16      	ldr	r2, [pc, #88]	; (8001ef8 <FLASH_Program_DoubleWord+0x94>)
 8001ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <FLASH_Program_DoubleWord+0x94>)
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <FLASH_Program_DoubleWord+0x94>)
 8001eac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001eb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <FLASH_Program_DoubleWord+0x94>)
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	4a10      	ldr	r2, [pc, #64]	; (8001ef8 <FLASH_Program_DoubleWord+0x94>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001ec4:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001ec8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	f04f 0400 	mov.w	r4, #0
 8001ed4:	0013      	movs	r3, r2
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	3204      	adds	r2, #4
 8001edc:	6013      	str	r3, [r2, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd90      	pop	{r4, r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	0807ffff 	.word	0x0807ffff
 8001eec:	1fff77ff 	.word	0x1fff77ff
 8001ef0:	1fff7a0f 	.word	0x1fff7a0f
 8001ef4:	0800e0d4 	.word	0x0800e0d4
 8001ef8:	40023c00 	.word	0x40023c00

08001efc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f0c:	d303      	bcc.n	8001f16 <FLASH_Program_Word+0x1a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <FLASH_Program_Word+0x68>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d90c      	bls.n	8001f30 <FLASH_Program_Word+0x34>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <FLASH_Program_Word+0x6c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d903      	bls.n	8001f26 <FLASH_Program_Word+0x2a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <FLASH_Program_Word+0x70>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d904      	bls.n	8001f30 <FLASH_Program_Word+0x34>
 8001f26:	f240 2189 	movw	r1, #649	; 0x289
 8001f2a:	4811      	ldr	r0, [pc, #68]	; (8001f70 <FLASH_Program_Word+0x74>)
 8001f2c:	f009 f8ca 	bl	800b0c4 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <FLASH_Program_Word+0x78>)
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <FLASH_Program_Word+0x78>)
 8001f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <FLASH_Program_Word+0x78>)
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <FLASH_Program_Word+0x78>)
 8001f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <FLASH_Program_Word+0x78>)
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <FLASH_Program_Word+0x78>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	601a      	str	r2, [r3, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	0807ffff 	.word	0x0807ffff
 8001f68:	1fff77ff 	.word	0x1fff77ff
 8001f6c:	1fff7a0f 	.word	0x1fff7a0f
 8001f70:	0800e0d4 	.word	0x0800e0d4
 8001f74:	40023c00 	.word	0x40023c00

08001f78 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f8a:	d303      	bcc.n	8001f94 <FLASH_Program_HalfWord+0x1c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <FLASH_Program_HalfWord+0x68>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d90c      	bls.n	8001fae <FLASH_Program_HalfWord+0x36>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a13      	ldr	r2, [pc, #76]	; (8001fe4 <FLASH_Program_HalfWord+0x6c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d903      	bls.n	8001fa4 <FLASH_Program_HalfWord+0x2c>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <FLASH_Program_HalfWord+0x70>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d904      	bls.n	8001fae <FLASH_Program_HalfWord+0x36>
 8001fa4:	f240 21a2 	movw	r1, #674	; 0x2a2
 8001fa8:	4810      	ldr	r0, [pc, #64]	; (8001fec <FLASH_Program_HalfWord+0x74>)
 8001faa:	f009 f88b 	bl	800b0c4 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <FLASH_Program_HalfWord+0x78>)
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ff0 <FLASH_Program_HalfWord+0x78>)
 8001fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <FLASH_Program_HalfWord+0x78>)
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <FLASH_Program_HalfWord+0x78>)
 8001fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <FLASH_Program_HalfWord+0x78>)
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <FLASH_Program_HalfWord+0x78>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	887a      	ldrh	r2, [r7, #2]
 8001fd6:	801a      	strh	r2, [r3, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	0807ffff 	.word	0x0807ffff
 8001fe4:	1fff77ff 	.word	0x1fff77ff
 8001fe8:	1fff7a0f 	.word	0x1fff7a0f
 8001fec:	0800e0d4 	.word	0x0800e0d4
 8001ff0:	40023c00 	.word	0x40023c00

08001ff4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002006:	d303      	bcc.n	8002010 <FLASH_Program_Byte+0x1c>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <FLASH_Program_Byte+0x64>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d90c      	bls.n	800202a <FLASH_Program_Byte+0x36>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <FLASH_Program_Byte+0x68>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d903      	bls.n	8002020 <FLASH_Program_Byte+0x2c>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a11      	ldr	r2, [pc, #68]	; (8002060 <FLASH_Program_Byte+0x6c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d904      	bls.n	800202a <FLASH_Program_Byte+0x36>
 8002020:	f240 21bb 	movw	r1, #699	; 0x2bb
 8002024:	480f      	ldr	r0, [pc, #60]	; (8002064 <FLASH_Program_Byte+0x70>)
 8002026:	f009 f84d 	bl	800b0c4 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <FLASH_Program_Byte+0x74>)
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <FLASH_Program_Byte+0x74>)
 8002030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002034:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <FLASH_Program_Byte+0x74>)
 8002038:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <FLASH_Program_Byte+0x74>)
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <FLASH_Program_Byte+0x74>)
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <FLASH_Program_Byte+0x74>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	701a      	strb	r2, [r3, #0]
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	0807ffff 	.word	0x0807ffff
 800205c:	1fff77ff 	.word	0x1fff77ff
 8002060:	1fff7a0f 	.word	0x1fff7a0f
 8002064:	0800e0d4 	.word	0x0800e0d4
 8002068:	40023c00 	.word	0x40023c00

0800206c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002070:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800207c:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	f043 0310 	orr.w	r3, r3, #16
 8002084:	4a2b      	ldr	r2, [pc, #172]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 8002086:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002088:	4b29      	ldr	r3, [pc, #164]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 800208a:	2210      	movs	r2, #16
 800208c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800208e:	4b28      	ldr	r3, [pc, #160]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d008      	beq.n	80020ac <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800209a:	4b26      	ldr	r3, [pc, #152]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f043 0308 	orr.w	r3, r3, #8
 80020a2:	4a24      	ldr	r2, [pc, #144]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 80020a4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80020a6:	4b22      	ldr	r3, [pc, #136]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 80020a8:	2220      	movs	r2, #32
 80020aa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80020ac:	4b20      	ldr	r3, [pc, #128]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	f043 0304 	orr.w	r3, r3, #4
 80020c0:	4a1c      	ldr	r2, [pc, #112]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 80020c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 80020c6:	2240      	movs	r2, #64	; 0x40
 80020c8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	4a15      	ldr	r2, [pc, #84]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 80020e0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d009      	beq.n	8002108 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 80020fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 8002102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002106:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	f043 0320 	orr.w	r3, r3, #32
 800211c:	4a05      	ldr	r2, [pc, #20]	; (8002134 <FLASH_SetErrorCode+0xc8>)
 800211e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <FLASH_SetErrorCode+0xc4>)
 8002122:	2202      	movs	r2, #2
 8002124:	60da      	str	r2, [r3, #12]
  }
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	40023c00 	.word	0x40023c00
 8002134:	200006e8 	.word	0x200006e8

08002138 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002144:	4b3d      	ldr	r3, [pc, #244]	; (800223c <HAL_FLASHEx_OBProgram+0x104>)
 8002146:	7e1b      	ldrb	r3, [r3, #24]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_FLASHEx_OBProgram+0x18>
 800214c:	2302      	movs	r3, #2
 800214e:	e071      	b.n	8002234 <HAL_FLASHEx_OBProgram+0xfc>
 8002150:	4b3a      	ldr	r3, [pc, #232]	; (800223c <HAL_FLASHEx_OBProgram+0x104>)
 8002152:	2201      	movs	r2, #1
 8002154:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b0f      	cmp	r3, #15
 800215c:	d904      	bls.n	8002168 <HAL_FLASHEx_OBProgram+0x30>
 800215e:	f44f 7193 	mov.w	r1, #294	; 0x126
 8002162:	4837      	ldr	r0, [pc, #220]	; (8002240 <HAL_FLASHEx_OBProgram+0x108>)
 8002164:	f008 ffae 	bl	800b0c4 <assert_failed>

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d025      	beq.n	80021c0 <HAL_FLASHEx_OBProgram+0x88>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_FLASHEx_OBProgram+0x56>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d004      	beq.n	800218e <HAL_FLASHEx_OBProgram+0x56>
 8002184:	f240 112b 	movw	r1, #299	; 0x12b
 8002188:	482d      	ldr	r0, [pc, #180]	; (8002240 <HAL_FLASHEx_OBProgram+0x108>)
 800218a:	f008 ff9b 	bl	800b0c4 <assert_failed>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d10a      	bne.n	80021ac <HAL_FLASHEx_OBProgram+0x74>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	4619      	mov	r1, r3
 80021a0:	4610      	mov	r0, r2
 80021a2:	f000 f8e9 	bl	8002378 <FLASH_OB_EnableWRP>
 80021a6:	4603      	mov	r3, r0
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	e009      	b.n	80021c0 <HAL_FLASHEx_OBProgram+0x88>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4619      	mov	r1, r3
 80021b6:	4610      	mov	r0, r2
 80021b8:	f000 f91a 	bl	80023f0 <FLASH_OB_DisableWRP>
 80021bc:	4603      	mov	r3, r0
 80021be:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <HAL_FLASHEx_OBProgram+0xa4>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f946 	bl	8002464 <FLASH_OB_RDP_LevelConfig>
 80021d8:	4603      	mov	r3, r0
 80021da:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d013      	beq.n	8002210 <HAL_FLASHEx_OBProgram+0xd8>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7e1b      	ldrb	r3, [r3, #24]
 80021ec:	f003 0320 	and.w	r3, r3, #32
 80021f0:	b2d8      	uxtb	r0, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 80021f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fa:	b2d9      	uxtb	r1, r3
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8002200:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	f000 f956 	bl	80024b8 <FLASH_OB_UserConfig>
 800220c:	4603      	mov	r3, r0
 800220e:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d007      	beq.n	800222c <HAL_FLASHEx_OBProgram+0xf4>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f99a 	bl	800255c <FLASH_OB_BOR_LevelConfig>
 8002228:	4603      	mov	r3, r0
 800222a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <HAL_FLASHEx_OBProgram+0x104>)
 800222e:	2200      	movs	r2, #0
 8002230:	761a      	strb	r2, [r3, #24]

  return status;
 8002232:	7bfb      	ldrb	r3, [r7, #15]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200006e8 	.word	0x200006e8
 8002240:	0800e110 	.word	0x0800e110

08002244 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	220f      	movs	r2, #15
 8002250:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8002252:	f000 f9c3 	bl	80025dc <FLASH_OB_GetWRP>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800225e:	f000 f9c9 	bl	80025f4 <FLASH_OB_GetRDP>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800226a:	f000 f9a7 	bl	80025bc <FLASH_OB_GetUser>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8002276:	f000 f9dd 	bl	8002634 <FLASH_OB_GetBOR>
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	615a      	str	r2, [r3, #20]
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d019      	beq.n	80022d6 <FLASH_Erase_Sector+0x4a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d016      	beq.n	80022d6 <FLASH_Erase_Sector+0x4a>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d013      	beq.n	80022d6 <FLASH_Erase_Sector+0x4a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d010      	beq.n	80022d6 <FLASH_Erase_Sector+0x4a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d00d      	beq.n	80022d6 <FLASH_Erase_Sector+0x4a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d00a      	beq.n	80022d6 <FLASH_Erase_Sector+0x4a>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d007      	beq.n	80022d6 <FLASH_Erase_Sector+0x4a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b07      	cmp	r3, #7
 80022ca:	d004      	beq.n	80022d6 <FLASH_Erase_Sector+0x4a>
 80022cc:	f240 31db 	movw	r1, #987	; 0x3db
 80022d0:	4827      	ldr	r0, [pc, #156]	; (8002370 <FLASH_Erase_Sector+0xe4>)
 80022d2:	f008 fef7 	bl	800b0c4 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00d      	beq.n	80022f8 <FLASH_Erase_Sector+0x6c>
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d00a      	beq.n	80022f8 <FLASH_Erase_Sector+0x6c>
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d007      	beq.n	80022f8 <FLASH_Erase_Sector+0x6c>
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d004      	beq.n	80022f8 <FLASH_Erase_Sector+0x6c>
 80022ee:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 80022f2:	481f      	ldr	r0, [pc, #124]	; (8002370 <FLASH_Erase_Sector+0xe4>)
 80022f4:	f008 fee6 	bl	800b0c4 <assert_failed>
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <FLASH_Erase_Sector+0x78>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	e010      	b.n	8002326 <FLASH_Erase_Sector+0x9a>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d103      	bne.n	8002312 <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800230a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	e009      	b.n	8002326 <FLASH_Erase_Sector+0x9a>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d103      	bne.n	8002320 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002318:	f44f 7300 	mov.w	r3, #512	; 0x200
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	e002      	b.n	8002326 <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002320:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002324:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 800232c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002330:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	490f      	ldr	r1, [pc, #60]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	4a0c      	ldr	r2, [pc, #48]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 8002344:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002348:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4313      	orrs	r3, r2
 8002354:	4a07      	ldr	r2, [pc, #28]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	4a04      	ldr	r2, [pc, #16]	; (8002374 <FLASH_Erase_Sector+0xe8>)
 8002362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002366:	6113      	str	r3, [r2, #16]
}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	0800e110 	.word	0x0800e110
 8002374:	40023c00 	.word	0x40023c00

08002378 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800238c:	f023 030f 	bic.w	r3, r3, #15
 8002390:	2b00      	cmp	r3, #0
 8002392:	d102      	bne.n	800239a <FLASH_OB_EnableWRP+0x22>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d104      	bne.n	80023a4 <FLASH_OB_EnableWRP+0x2c>
 800239a:	f240 410d 	movw	r1, #1037	; 0x40d
 800239e:	4812      	ldr	r0, [pc, #72]	; (80023e8 <FLASH_OB_EnableWRP+0x70>)
 80023a0:	f008 fe90 	bl	800b0c4 <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d004      	beq.n	80023b4 <FLASH_OB_EnableWRP+0x3c>
 80023aa:	f240 410e 	movw	r1, #1038	; 0x40e
 80023ae:	480e      	ldr	r0, [pc, #56]	; (80023e8 <FLASH_OB_EnableWRP+0x70>)
 80023b0:	f008 fe88 	bl	800b0c4 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023b8:	f7ff fd14 	bl	8001de4 <FLASH_WaitForLastOperation>
 80023bc:	4603      	mov	r3, r0
 80023be:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <FLASH_OB_EnableWRP+0x64>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <FLASH_OB_EnableWRP+0x74>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	4905      	ldr	r1, [pc, #20]	; (80023ec <FLASH_OB_EnableWRP+0x74>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	b29b      	uxth	r3, r3
 80023da:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	0800e110 	.word	0x0800e110
 80023ec:	40023c16 	.word	0x40023c16

080023f0 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002404:	f023 030f 	bic.w	r3, r3, #15
 8002408:	2b00      	cmp	r3, #0
 800240a:	d102      	bne.n	8002412 <FLASH_OB_DisableWRP+0x22>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d104      	bne.n	800241c <FLASH_OB_DisableWRP+0x2c>
 8002412:	f240 4131 	movw	r1, #1073	; 0x431
 8002416:	4811      	ldr	r0, [pc, #68]	; (800245c <FLASH_OB_DisableWRP+0x6c>)
 8002418:	f008 fe54 	bl	800b0c4 <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d004      	beq.n	800242c <FLASH_OB_DisableWRP+0x3c>
 8002422:	f240 4132 	movw	r1, #1074	; 0x432
 8002426:	480d      	ldr	r0, [pc, #52]	; (800245c <FLASH_OB_DisableWRP+0x6c>)
 8002428:	f008 fe4c 	bl	800b0c4 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800242c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002430:	f7ff fcd8 	bl	8001de4 <FLASH_WaitForLastOperation>
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d108      	bne.n	8002450 <FLASH_OB_DisableWRP+0x60>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <FLASH_OB_DisableWRP+0x70>)
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	b29a      	uxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	b29b      	uxth	r3, r3
 8002448:	4905      	ldr	r1, [pc, #20]	; (8002460 <FLASH_OB_DisableWRP+0x70>)
 800244a:	4313      	orrs	r3, r2
 800244c:	b29b      	uxth	r3, r3
 800244e:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	0800e110 	.word	0x0800e110
 8002460:	40023c16 	.word	0x40023c16

08002464 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2baa      	cmp	r3, #170	; 0xaa
 8002476:	d00a      	beq.n	800248e <FLASH_OB_RDP_LevelConfig+0x2a>
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	2b55      	cmp	r3, #85	; 0x55
 800247c:	d007      	beq.n	800248e <FLASH_OB_RDP_LevelConfig+0x2a>
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	2bcc      	cmp	r3, #204	; 0xcc
 8002482:	d004      	beq.n	800248e <FLASH_OB_RDP_LevelConfig+0x2a>
 8002484:	f240 418f 	movw	r1, #1167	; 0x48f
 8002488:	4809      	ldr	r0, [pc, #36]	; (80024b0 <FLASH_OB_RDP_LevelConfig+0x4c>)
 800248a:	f008 fe1b 	bl	800b0c4 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800248e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002492:	f7ff fca7 	bl	8001de4 <FLASH_WaitForLastOperation>
 8002496:	4603      	mov	r3, r0
 8002498:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <FLASH_OB_RDP_LevelConfig+0x42>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <FLASH_OB_RDP_LevelConfig+0x50>)
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	0800e110 	.word	0x0800e110
 80024b4:	40023c15 	.word	0x40023c15

080024b8 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
 80024c2:	460b      	mov	r3, r1
 80024c4:	71bb      	strb	r3, [r7, #6]
 80024c6:	4613      	mov	r3, r2
 80024c8:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 80024ca:	23ff      	movs	r3, #255	; 0xff
 80024cc:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d007      	beq.n	80024e8 <FLASH_OB_UserConfig+0x30>
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d004      	beq.n	80024e8 <FLASH_OB_UserConfig+0x30>
 80024de:	f240 41b2 	movw	r1, #1202	; 0x4b2
 80024e2:	481c      	ldr	r0, [pc, #112]	; (8002554 <FLASH_OB_UserConfig+0x9c>)
 80024e4:	f008 fdee 	bl	800b0c4 <assert_failed>
  assert_param(IS_OB_STOP_SOURCE(Stop));
 80024e8:	79bb      	ldrb	r3, [r7, #6]
 80024ea:	2b40      	cmp	r3, #64	; 0x40
 80024ec:	d007      	beq.n	80024fe <FLASH_OB_UserConfig+0x46>
 80024ee:	79bb      	ldrb	r3, [r7, #6]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d004      	beq.n	80024fe <FLASH_OB_UserConfig+0x46>
 80024f4:	f240 41b3 	movw	r1, #1203	; 0x4b3
 80024f8:	4816      	ldr	r0, [pc, #88]	; (8002554 <FLASH_OB_UserConfig+0x9c>)
 80024fa:	f008 fde3 	bl	800b0c4 <assert_failed>
  assert_param(IS_OB_STDBY_SOURCE(Stdby));
 80024fe:	797b      	ldrb	r3, [r7, #5]
 8002500:	2b80      	cmp	r3, #128	; 0x80
 8002502:	d007      	beq.n	8002514 <FLASH_OB_UserConfig+0x5c>
 8002504:	797b      	ldrb	r3, [r7, #5]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <FLASH_OB_UserConfig+0x5c>
 800250a:	f240 41b4 	movw	r1, #1204	; 0x4b4
 800250e:	4811      	ldr	r0, [pc, #68]	; (8002554 <FLASH_OB_UserConfig+0x9c>)
 8002510:	f008 fdd8 	bl	800b0c4 <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002514:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002518:	f7ff fc64 	bl	8001de4 <FLASH_WaitForLastOperation>
 800251c:	4603      	mov	r3, r0
 800251e:	73bb      	strb	r3, [r7, #14]
  
  if(status == HAL_OK)
 8002520:	7bbb      	ldrb	r3, [r7, #14]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d111      	bne.n	800254a <FLASH_OB_UserConfig+0x92>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <FLASH_OB_UserConfig+0xa0>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 8002532:	79ba      	ldrb	r2, [r7, #6]
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	4313      	orrs	r3, r2
 8002538:	b2da      	uxtb	r2, r3
 800253a:	797b      	ldrb	r3, [r7, #5]
 800253c:	4313      	orrs	r3, r2
 800253e:	b2da      	uxtb	r2, r3
 8002540:	4905      	ldr	r1, [pc, #20]	; (8002558 <FLASH_OB_UserConfig+0xa0>)
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	4313      	orrs	r3, r2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	700b      	strb	r3, [r1, #0]
  }
  
  return status; 
 800254a:	7bbb      	ldrb	r3, [r7, #14]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	0800e110 	.word	0x0800e110
 8002558:	40023c14 	.word	0x40023c14

0800255c <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	2b08      	cmp	r3, #8
 800256a:	d00d      	beq.n	8002588 <FLASH_OB_BOR_LevelConfig+0x2c>
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	2b04      	cmp	r3, #4
 8002570:	d00a      	beq.n	8002588 <FLASH_OB_BOR_LevelConfig+0x2c>
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <FLASH_OB_BOR_LevelConfig+0x2c>
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d004      	beq.n	8002588 <FLASH_OB_BOR_LevelConfig+0x2c>
 800257e:	f240 41d2 	movw	r1, #1234	; 0x4d2
 8002582:	480c      	ldr	r0, [pc, #48]	; (80025b4 <FLASH_OB_BOR_LevelConfig+0x58>)
 8002584:	f008 fd9e 	bl	800b0c4 <assert_failed>

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <FLASH_OB_BOR_LevelConfig+0x5c>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <FLASH_OB_BOR_LevelConfig+0x5c>)
 8002590:	f023 030c 	bic.w	r3, r3, #12
 8002594:	b2db      	uxtb	r3, r3
 8002596:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 8002598:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <FLASH_OB_BOR_LevelConfig+0x5c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4906      	ldr	r1, [pc, #24]	; (80025b8 <FLASH_OB_BOR_LevelConfig+0x5c>)
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	700b      	strb	r3, [r1, #0]
  
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
  
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	0800e110 	.word	0x0800e110
 80025b8:	40023c14 	.word	0x40023c14

080025bc <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <FLASH_OB_GetUser+0x1c>)
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f023 031f 	bic.w	r3, r3, #31
 80025ca:	b2db      	uxtb	r3, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40023c00 	.word	0x40023c00

080025dc <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <FLASH_OB_GetWRP+0x14>)
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	b29b      	uxth	r3, r3
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40023c16 	.word	0x40023c16

080025f4 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 80025fa:	23aa      	movs	r3, #170	; 0xaa
 80025fc:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 80025fe:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <FLASH_OB_GetRDP+0x3c>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2bcc      	cmp	r3, #204	; 0xcc
 8002606:	d102      	bne.n	800260e <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002608:	23cc      	movs	r3, #204	; 0xcc
 800260a:	71fb      	strb	r3, [r7, #7]
 800260c:	e009      	b.n	8002622 <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <FLASH_OB_GetRDP+0x3c>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2baa      	cmp	r3, #170	; 0xaa
 8002616:	d102      	bne.n	800261e <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002618:	23aa      	movs	r3, #170	; 0xaa
 800261a:	71fb      	strb	r3, [r7, #7]
 800261c:	e001      	b.n	8002622 <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 800261e:	2355      	movs	r3, #85	; 0x55
 8002620:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002622:	79fb      	ldrb	r3, [r7, #7]
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40023c15 	.word	0x40023c15

08002634 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <FLASH_OB_GetBOR+0x1c>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	b2db      	uxtb	r3, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40023c14 	.word	0x40023c14

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a3b      	ldr	r2, [pc, #236]	; (800275c <HAL_GPIO_Init+0x108>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d017      	beq.n	80026a2 <HAL_GPIO_Init+0x4e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a3a      	ldr	r2, [pc, #232]	; (8002760 <HAL_GPIO_Init+0x10c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_GPIO_Init+0x4e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a39      	ldr	r2, [pc, #228]	; (8002764 <HAL_GPIO_Init+0x110>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00f      	beq.n	80026a2 <HAL_GPIO_Init+0x4e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a38      	ldr	r2, [pc, #224]	; (8002768 <HAL_GPIO_Init+0x114>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00b      	beq.n	80026a2 <HAL_GPIO_Init+0x4e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a37      	ldr	r2, [pc, #220]	; (800276c <HAL_GPIO_Init+0x118>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <HAL_GPIO_Init+0x4e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a36      	ldr	r2, [pc, #216]	; (8002770 <HAL_GPIO_Init+0x11c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x4e>
 800269a:	21b3      	movs	r1, #179	; 0xb3
 800269c:	4835      	ldr	r0, [pc, #212]	; (8002774 <HAL_GPIO_Init+0x120>)
 800269e:	f008 fd11 	bl	800b0c4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_GPIO_Init+0x64>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	0c1b      	lsrs	r3, r3, #16
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x6c>
 80026b8:	21b4      	movs	r1, #180	; 0xb4
 80026ba:	482e      	ldr	r0, [pc, #184]	; (8002774 <HAL_GPIO_Init+0x120>)
 80026bc:	f008 fd02 	bl	800b0c4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d035      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d031      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b11      	cmp	r3, #17
 80026d6:	d02d      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d029      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b12      	cmp	r3, #18
 80026e6:	d025      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4a22      	ldr	r2, [pc, #136]	; (8002778 <HAL_GPIO_Init+0x124>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d020      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4a21      	ldr	r2, [pc, #132]	; (800277c <HAL_GPIO_Init+0x128>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d01b      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a1f      	ldr	r2, [pc, #124]	; (8002780 <HAL_GPIO_Init+0x12c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d016      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4a1e      	ldr	r2, [pc, #120]	; (8002784 <HAL_GPIO_Init+0x130>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d011      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a1c      	ldr	r2, [pc, #112]	; (8002788 <HAL_GPIO_Init+0x134>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00c      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4a1b      	ldr	r2, [pc, #108]	; (800278c <HAL_GPIO_Init+0x138>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d007      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0xe0>
 800272c:	21b5      	movs	r1, #181	; 0xb5
 800272e:	4811      	ldr	r0, [pc, #68]	; (8002774 <HAL_GPIO_Init+0x120>)
 8002730:	f008 fcc8 	bl	800b0c4 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00b      	beq.n	8002754 <HAL_GPIO_Init+0x100>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d007      	beq.n	8002754 <HAL_GPIO_Init+0x100>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x100>
 800274c:	21b6      	movs	r1, #182	; 0xb6
 800274e:	4809      	ldr	r0, [pc, #36]	; (8002774 <HAL_GPIO_Init+0x120>)
 8002750:	f008 fcb8 	bl	800b0c4 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	e211      	b.n	8002b7e <HAL_GPIO_Init+0x52a>
 800275a:	bf00      	nop
 800275c:	40020000 	.word	0x40020000
 8002760:	40020400 	.word	0x40020400
 8002764:	40020800 	.word	0x40020800
 8002768:	40020c00 	.word	0x40020c00
 800276c:	40021000 	.word	0x40021000
 8002770:	40021c00 	.word	0x40021c00
 8002774:	0800e150 	.word	0x0800e150
 8002778:	10110000 	.word	0x10110000
 800277c:	10210000 	.word	0x10210000
 8002780:	10310000 	.word	0x10310000
 8002784:	10120000 	.word	0x10120000
 8002788:	10220000 	.word	0x10220000
 800278c:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002790:	2201      	movs	r2, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	f040 81e5 	bne.w	8002b78 <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d00b      	beq.n	80027ce <HAL_GPIO_Init+0x17a>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d007      	beq.n	80027ce <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027c2:	2b11      	cmp	r3, #17
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b12      	cmp	r3, #18
 80027cc:	d144      	bne.n	8002858 <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00f      	beq.n	80027f6 <HAL_GPIO_Init+0x1a2>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d00b      	beq.n	80027f6 <HAL_GPIO_Init+0x1a2>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d007      	beq.n	80027f6 <HAL_GPIO_Init+0x1a2>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x1a2>
 80027ee:	21c8      	movs	r1, #200	; 0xc8
 80027f0:	489f      	ldr	r0, [pc, #636]	; (8002a70 <HAL_GPIO_Init+0x41c>)
 80027f2:	f008 fc67 	bl	800b0c4 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	2203      	movs	r2, #3
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800282c:	2201      	movs	r2, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 0201 	and.w	r2, r3, #1
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d004      	beq.n	800289a <HAL_GPIO_Init+0x246>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b12      	cmp	r3, #18
 8002896:	f040 80a0 	bne.w	80029da <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d077      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b09      	cmp	r3, #9
 80028a8:	d073      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d06f      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d06b      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d067      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d063      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d05f      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d05b      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d057      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d053      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d04f      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d04b      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d047      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b04      	cmp	r3, #4
 8002908:	d043      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b05      	cmp	r3, #5
 8002910:	d03f      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b05      	cmp	r3, #5
 8002918:	d03b      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b05      	cmp	r3, #5
 8002920:	d037      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b06      	cmp	r3, #6
 8002928:	d033      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b06      	cmp	r3, #6
 8002930:	d02f      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b05      	cmp	r3, #5
 8002938:	d02b      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b06      	cmp	r3, #6
 8002940:	d027      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b07      	cmp	r3, #7
 8002948:	d023      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b07      	cmp	r3, #7
 8002950:	d01f      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b07      	cmp	r3, #7
 8002958:	d01b      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b08      	cmp	r3, #8
 8002960:	d017      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b0a      	cmp	r3, #10
 8002968:	d013      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b09      	cmp	r3, #9
 8002970:	d00f      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b09      	cmp	r3, #9
 8002978:	d00b      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d007      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x33e>
 800298a:	21e0      	movs	r1, #224	; 0xe0
 800298c:	4838      	ldr	r0, [pc, #224]	; (8002a70 <HAL_GPIO_Init+0x41c>)
 800298e:	f008 fb99 	bl	800b0c4 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	08da      	lsrs	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3208      	adds	r2, #8
 800299a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	220f      	movs	r2, #15
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	08da      	lsrs	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3208      	adds	r2, #8
 80029d4:	69b9      	ldr	r1, [r7, #24]
 80029d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	2203      	movs	r2, #3
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0203 	and.w	r2, r3, #3
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80ae 	beq.w	8002b78 <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <HAL_GPIO_Init+0x420>)
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <HAL_GPIO_Init+0x420>)
 8002a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_GPIO_Init+0x420>)
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a38:	4a0f      	ldr	r2, [pc, #60]	; (8002a78 <HAL_GPIO_Init+0x424>)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	3302      	adds	r3, #2
 8002a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	220f      	movs	r2, #15
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <HAL_GPIO_Init+0x428>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d025      	beq.n	8002ab0 <HAL_GPIO_Init+0x45c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <HAL_GPIO_Init+0x42c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d01f      	beq.n	8002aac <HAL_GPIO_Init+0x458>
 8002a6c:	e00a      	b.n	8002a84 <HAL_GPIO_Init+0x430>
 8002a6e:	bf00      	nop
 8002a70:	0800e150 	.word	0x0800e150
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40013800 	.word	0x40013800
 8002a7c:	40020000 	.word	0x40020000
 8002a80:	40020400 	.word	0x40020400
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a42      	ldr	r2, [pc, #264]	; (8002b90 <HAL_GPIO_Init+0x53c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00d      	beq.n	8002aa8 <HAL_GPIO_Init+0x454>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a41      	ldr	r2, [pc, #260]	; (8002b94 <HAL_GPIO_Init+0x540>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d007      	beq.n	8002aa4 <HAL_GPIO_Init+0x450>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a40      	ldr	r2, [pc, #256]	; (8002b98 <HAL_GPIO_Init+0x544>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d101      	bne.n	8002aa0 <HAL_GPIO_Init+0x44c>
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	e008      	b.n	8002ab2 <HAL_GPIO_Init+0x45e>
 8002aa0:	2307      	movs	r3, #7
 8002aa2:	e006      	b.n	8002ab2 <HAL_GPIO_Init+0x45e>
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e004      	b.n	8002ab2 <HAL_GPIO_Init+0x45e>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e002      	b.n	8002ab2 <HAL_GPIO_Init+0x45e>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_GPIO_Init+0x45e>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	f002 0203 	and.w	r2, r2, #3
 8002ab8:	0092      	lsls	r2, r2, #2
 8002aba:	4093      	lsls	r3, r2
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac2:	4936      	ldr	r1, [pc, #216]	; (8002b9c <HAL_GPIO_Init+0x548>)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	3302      	adds	r3, #2
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad0:	4b33      	ldr	r3, [pc, #204]	; (8002ba0 <HAL_GPIO_Init+0x54c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af4:	4a2a      	ldr	r2, [pc, #168]	; (8002ba0 <HAL_GPIO_Init+0x54c>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002afa:	4b29      	ldr	r3, [pc, #164]	; (8002ba0 <HAL_GPIO_Init+0x54c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b1e:	4a20      	ldr	r2, [pc, #128]	; (8002ba0 <HAL_GPIO_Init+0x54c>)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b24:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <HAL_GPIO_Init+0x54c>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b48:	4a15      	ldr	r2, [pc, #84]	; (8002ba0 <HAL_GPIO_Init+0x54c>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <HAL_GPIO_Init+0x54c>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b72:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <HAL_GPIO_Init+0x54c>)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	2b0f      	cmp	r3, #15
 8002b82:	f67f ae05 	bls.w	8002790 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8002b86:	bf00      	nop
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40020800 	.word	0x40020800
 8002b94:	40020c00 	.word	0x40020c00
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40013800 	.word	0x40013800
 8002ba0:	40013c00 	.word	0x40013c00

08002ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	807b      	strh	r3, [r7, #2]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002bb4:	887b      	ldrh	r3, [r7, #2]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <HAL_GPIO_WritePin+0x20>
 8002bba:	887b      	ldrh	r3, [r7, #2]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	041b      	lsls	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d004      	beq.n	8002bce <HAL_GPIO_WritePin+0x2a>
 8002bc4:	f240 119f 	movw	r1, #415	; 0x19f
 8002bc8:	480e      	ldr	r0, [pc, #56]	; (8002c04 <HAL_GPIO_WritePin+0x60>)
 8002bca:	f008 fa7b 	bl	800b0c4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002bce:	787b      	ldrb	r3, [r7, #1]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <HAL_GPIO_WritePin+0x40>
 8002bd4:	787b      	ldrb	r3, [r7, #1]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d004      	beq.n	8002be4 <HAL_GPIO_WritePin+0x40>
 8002bda:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002bde:	4809      	ldr	r0, [pc, #36]	; (8002c04 <HAL_GPIO_WritePin+0x60>)
 8002be0:	f008 fa70 	bl	800b0c4 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002be4:	787b      	ldrb	r3, [r7, #1]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bea:	887a      	ldrh	r2, [r7, #2]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bf0:	e003      	b.n	8002bfa <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bf2:	887b      	ldrh	r3, [r7, #2]
 8002bf4:	041a      	lsls	r2, r3, #16
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	619a      	str	r2, [r3, #24]
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	0800e150 	.word	0x0800e150

08002c08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d006      	beq.n	8002c2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c1e:	4a05      	ldr	r2, [pc, #20]	; (8002c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f008 fe4e 	bl	800b8c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40013c00 	.word	0x40013c00

08002c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e1b1      	b.n	8002fae <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4aa2      	ldr	r2, [pc, #648]	; (8002ed8 <HAL_I2C_Init+0x2a0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00e      	beq.n	8002c72 <HAL_I2C_Init+0x3a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4aa0      	ldr	r2, [pc, #640]	; (8002edc <HAL_I2C_Init+0x2a4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_I2C_Init+0x3a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a9f      	ldr	r2, [pc, #636]	; (8002ee0 <HAL_I2C_Init+0x2a8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d004      	beq.n	8002c72 <HAL_I2C_Init+0x3a>
 8002c68:	f240 11bd 	movw	r1, #445	; 0x1bd
 8002c6c:	489d      	ldr	r0, [pc, #628]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002c6e:	f008 fa29 	bl	800b0c4 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <HAL_I2C_Init+0x4c>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4a9a      	ldr	r2, [pc, #616]	; (8002ee8 <HAL_I2C_Init+0x2b0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d904      	bls.n	8002c8e <HAL_I2C_Init+0x56>
 8002c84:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002c88:	4896      	ldr	r0, [pc, #600]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002c8a:	f008 fa1b 	bl	800b0c4 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_I2C_Init+0x72>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c9e:	d004      	beq.n	8002caa <HAL_I2C_Init+0x72>
 8002ca0:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002ca4:	488f      	ldr	r0, [pc, #572]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002ca6:	f008 fa0d 	bl	800b0c4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d004      	beq.n	8002cc4 <HAL_I2C_Init+0x8c>
 8002cba:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002cbe:	4889      	ldr	r0, [pc, #548]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002cc0:	f008 fa00 	bl	800b0c4 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ccc:	d009      	beq.n	8002ce2 <HAL_I2C_Init+0xaa>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002cd6:	d004      	beq.n	8002ce2 <HAL_I2C_Init+0xaa>
 8002cd8:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002cdc:	4881      	ldr	r0, [pc, #516]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002cde:	f008 f9f1 	bl	800b0c4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <HAL_I2C_Init+0xc4>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d004      	beq.n	8002cfc <HAL_I2C_Init+0xc4>
 8002cf2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002cf6:	487b      	ldr	r0, [pc, #492]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002cf8:	f008 f9e4 	bl	800b0c4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d004      	beq.n	8002d12 <HAL_I2C_Init+0xda>
 8002d08:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002d0c:	4875      	ldr	r0, [pc, #468]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002d0e:	f008 f9d9 	bl	800b0c4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_I2C_Init+0xf4>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	2b40      	cmp	r3, #64	; 0x40
 8002d20:	d004      	beq.n	8002d2c <HAL_I2C_Init+0xf4>
 8002d22:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002d26:	486f      	ldr	r0, [pc, #444]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002d28:	f008 f9cc 	bl	800b0c4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_I2C_Init+0x10e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	2b80      	cmp	r3, #128	; 0x80
 8002d3a:	d004      	beq.n	8002d46 <HAL_I2C_Init+0x10e>
 8002d3c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002d40:	4868      	ldr	r0, [pc, #416]	; (8002ee4 <HAL_I2C_Init+0x2ac>)
 8002d42:	f008 f9bf 	bl	800b0c4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f006 fc78 	bl	8009650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2224      	movs	r2, #36	; 0x24
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d98:	f001 fdf4 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8002d9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4a52      	ldr	r2, [pc, #328]	; (8002eec <HAL_I2C_Init+0x2b4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d807      	bhi.n	8002db8 <HAL_I2C_Init+0x180>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a51      	ldr	r2, [pc, #324]	; (8002ef0 <HAL_I2C_Init+0x2b8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	bf94      	ite	ls
 8002db0:	2301      	movls	r3, #1
 8002db2:	2300      	movhi	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e006      	b.n	8002dc6 <HAL_I2C_Init+0x18e>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a4e      	ldr	r2, [pc, #312]	; (8002ef4 <HAL_I2C_Init+0x2bc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	bf94      	ite	ls
 8002dc0:	2301      	movls	r3, #1
 8002dc2:	2300      	movhi	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0ef      	b.n	8002fae <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4a49      	ldr	r2, [pc, #292]	; (8002ef8 <HAL_I2C_Init+0x2c0>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	0c9b      	lsrs	r3, r3, #18
 8002dd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a3b      	ldr	r2, [pc, #236]	; (8002eec <HAL_I2C_Init+0x2b4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d802      	bhi.n	8002e08 <HAL_I2C_Init+0x1d0>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	3301      	adds	r3, #1
 8002e06:	e009      	b.n	8002e1c <HAL_I2C_Init+0x1e4>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	4a3a      	ldr	r2, [pc, #232]	; (8002efc <HAL_I2C_Init+0x2c4>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	492d      	ldr	r1, [pc, #180]	; (8002eec <HAL_I2C_Init+0x2b4>)
 8002e38:	428b      	cmp	r3, r1
 8002e3a:	d80d      	bhi.n	8002e58 <HAL_I2C_Init+0x220>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1e59      	subs	r1, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	bf38      	it	cc
 8002e54:	2304      	movcc	r3, #4
 8002e56:	e063      	b.n	8002f20 <HAL_I2C_Init+0x2e8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d111      	bne.n	8002e84 <HAL_I2C_Init+0x24c>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1e58      	subs	r0, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	440b      	add	r3, r1
 8002e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e72:	3301      	adds	r3, #1
 8002e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2301      	moveq	r3, #1
 8002e7e:	2300      	movne	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	e012      	b.n	8002eaa <HAL_I2C_Init+0x272>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e58      	subs	r0, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	0099      	lsls	r1, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_Init+0x27a>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e036      	b.n	8002f20 <HAL_I2C_Init+0x2e8>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d122      	bne.n	8002f00 <HAL_I2C_Init+0x2c8>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1e58      	subs	r0, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6859      	ldr	r1, [r3, #4]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	440b      	add	r3, r1
 8002ec8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed6:	e023      	b.n	8002f20 <HAL_I2C_Init+0x2e8>
 8002ed8:	40005400 	.word	0x40005400
 8002edc:	40005800 	.word	0x40005800
 8002ee0:	40005c00 	.word	0x40005c00
 8002ee4:	0800e18c 	.word	0x0800e18c
 8002ee8:	00061a80 	.word	0x00061a80
 8002eec:	000186a0 	.word	0x000186a0
 8002ef0:	001e847f 	.word	0x001e847f
 8002ef4:	003d08ff 	.word	0x003d08ff
 8002ef8:	431bde83 	.word	0x431bde83
 8002efc:	10624dd3 	.word	0x10624dd3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1e58      	subs	r0, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	0099      	lsls	r1, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f16:	3301      	adds	r3, #1
 8002f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	6809      	ldr	r1, [r1, #0]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6911      	ldr	r1, [r2, #16]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68d2      	ldr	r2, [r2, #12]
 8002f5a:	4311      	orrs	r1, r2
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop

08002fb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	4608      	mov	r0, r1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	817b      	strh	r3, [r7, #10]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	813b      	strh	r3, [r7, #8]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd2:	f7fd ffa7 	bl	8000f24 <HAL_GetTick>
 8002fd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d007      	beq.n	8002fee <HAL_I2C_Mem_Write+0x36>
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	2b10      	cmp	r3, #16
 8002fe2:	d004      	beq.n	8002fee <HAL_I2C_Mem_Write+0x36>
 8002fe4:	f640 1173 	movw	r1, #2419	; 0x973
 8002fe8:	4873      	ldr	r0, [pc, #460]	; (80031b8 <HAL_I2C_Mem_Write+0x200>)
 8002fea:	f008 f86b 	bl	800b0c4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	f040 80d9 	bne.w	80031ae <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2319      	movs	r3, #25
 8003002:	2201      	movs	r2, #1
 8003004:	496d      	ldr	r1, [pc, #436]	; (80031bc <HAL_I2C_Mem_Write+0x204>)
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fc88 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8003012:	2302      	movs	r3, #2
 8003014:	e0cc      	b.n	80031b0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_I2C_Mem_Write+0x6c>
 8003020:	2302      	movs	r3, #2
 8003022:	e0c5      	b.n	80031b0 <HAL_I2C_Mem_Write+0x1f8>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b01      	cmp	r3, #1
 8003038:	d007      	beq.n	800304a <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003058:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2221      	movs	r2, #33	; 0x21
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2240      	movs	r2, #64	; 0x40
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a3a      	ldr	r2, [r7, #32]
 8003074:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800307a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a4d      	ldr	r2, [pc, #308]	; (80031c0 <HAL_I2C_Mem_Write+0x208>)
 800308a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800308c:	88f8      	ldrh	r0, [r7, #6]
 800308e:	893a      	ldrh	r2, [r7, #8]
 8003090:	8979      	ldrh	r1, [r7, #10]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	4603      	mov	r3, r0
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fac3 	bl	8003628 <I2C_RequestMemoryWrite>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d052      	beq.n	800314e <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e081      	b.n	80031b0 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 fd09 	bl	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00d      	beq.n	80030d8 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d107      	bne.n	80030d4 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e06b      	b.n	80031b0 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b04      	cmp	r3, #4
 8003114:	d11b      	bne.n	800314e <HAL_I2C_Mem_Write+0x196>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	2b00      	cmp	r3, #0
 800311c:	d017      	beq.n	800314e <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	781a      	ldrb	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1aa      	bne.n	80030ac <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fcf5 	bl	8003b4a <I2C_WaitOnBTFFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b04      	cmp	r3, #4
 800316c:	d107      	bne.n	800317e <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e016      	b.n	80031b0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003190:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
  }
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	0800e18c 	.word	0x0800e18c
 80031bc:	00100002 	.word	0x00100002
 80031c0:	ffff0000 	.word	0xffff0000

080031c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08c      	sub	sp, #48	; 0x30
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	4608      	mov	r0, r1
 80031ce:	4611      	mov	r1, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	817b      	strh	r3, [r7, #10]
 80031d6:	460b      	mov	r3, r1
 80031d8:	813b      	strh	r3, [r7, #8]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031de:	f7fd fea1 	bl	8000f24 <HAL_GetTick>
 80031e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d007      	beq.n	80031fa <HAL_I2C_Mem_Read+0x36>
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d004      	beq.n	80031fa <HAL_I2C_Mem_Read+0x36>
 80031f0:	f640 11ee 	movw	r1, #2542	; 0x9ee
 80031f4:	4881      	ldr	r0, [pc, #516]	; (80033fc <HAL_I2C_Mem_Read+0x238>)
 80031f6:	f007 ff65 	bl	800b0c4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b20      	cmp	r3, #32
 8003204:	f040 8209 	bne.w	800361a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2319      	movs	r3, #25
 800320e:	2201      	movs	r2, #1
 8003210:	497b      	ldr	r1, [pc, #492]	; (8003400 <HAL_I2C_Mem_Read+0x23c>)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fb82 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 800321e:	2302      	movs	r3, #2
 8003220:	e1fc      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_I2C_Mem_Read+0x6c>
 800322c:	2302      	movs	r3, #2
 800322e:	e1f5      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d007      	beq.n	8003256 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003264:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2222      	movs	r2, #34	; 0x22
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2240      	movs	r2, #64	; 0x40
 8003272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003286:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a5b      	ldr	r2, [pc, #364]	; (8003404 <HAL_I2C_Mem_Read+0x240>)
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003298:	88f8      	ldrh	r0, [r7, #6]
 800329a:	893a      	ldrh	r2, [r7, #8]
 800329c:	8979      	ldrh	r1, [r7, #10]
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	4603      	mov	r3, r0
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 fa51 	bl	8003750 <I2C_RequestMemoryRead>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e1b1      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d113      	bne.n	80032e8 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c0:	2300      	movs	r3, #0
 80032c2:	623b      	str	r3, [r7, #32]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	623b      	str	r3, [r7, #32]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	623b      	str	r3, [r7, #32]
 80032d4:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e185      	b.n	80035f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d11b      	bne.n	8003328 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fe:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003300:	2300      	movs	r3, #0
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	e165      	b.n	80035f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	2b02      	cmp	r3, #2
 800332e:	d11b      	bne.n	8003368 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333e:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800334e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003350:	2300      	movs	r3, #0
 8003352:	61bb      	str	r3, [r7, #24]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	e145      	b.n	80035f4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800337e:	e139      	b.n	80035f4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	2b03      	cmp	r3, #3
 8003386:	f200 80f2 	bhi.w	800356e <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338e:	2b01      	cmp	r3, #1
 8003390:	d123      	bne.n	80033da <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 fc18 	bl	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e13a      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033d8:	e10c      	b.n	80035f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d14f      	bne.n	8003482 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	2200      	movs	r2, #0
 80033ea:	4907      	ldr	r1, [pc, #28]	; (8003408 <HAL_I2C_Mem_Read+0x244>)
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fa95 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d009      	beq.n	800340c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e10f      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
 80033fc:	0800e18c 	.word	0x0800e18c
 8003400:	00100002 	.word	0x00100002
 8003404:	ffff0000 	.word	0xffff0000
 8003408:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691a      	ldr	r2, [r3, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003480:	e0b8      	b.n	80035f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003488:	2200      	movs	r2, #0
 800348a:	4966      	ldr	r1, [pc, #408]	; (8003624 <HAL_I2C_Mem_Read+0x460>)
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 fa45 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0bf      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	2200      	movs	r2, #0
 80034e6:	494f      	ldr	r1, [pc, #316]	; (8003624 <HAL_I2C_Mem_Read+0x460>)
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fa17 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e091      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800356c:	e042      	b.n	80035f4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800356e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003570:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fb2a 	bl	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e04c      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d118      	bne.n	80035f4 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f47f aec1 	bne.w	8003380 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	e000      	b.n	800361c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800361a:	2302      	movs	r3, #2
  }
}
 800361c:	4618      	mov	r0, r3
 800361e:	3728      	adds	r7, #40	; 0x28
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	00010004 	.word	0x00010004

08003628 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	4608      	mov	r0, r1
 8003632:	4611      	mov	r1, r2
 8003634:	461a      	mov	r2, r3
 8003636:	4603      	mov	r3, r0
 8003638:	817b      	strh	r3, [r7, #10]
 800363a:	460b      	mov	r3, r1
 800363c:	813b      	strh	r3, [r7, #8]
 800363e:	4613      	mov	r3, r2
 8003640:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003650:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	2200      	movs	r2, #0
 800365a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f95c 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00c      	beq.n	8003684 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e05f      	b.n	8003744 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003684:	897b      	ldrh	r3, [r7, #10]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003692:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	6a3a      	ldr	r2, [r7, #32]
 8003698:	492c      	ldr	r1, [pc, #176]	; (800374c <I2C_RequestMemoryWrite+0x124>)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f995 	bl	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e04c      	b.n	8003744 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c2:	6a39      	ldr	r1, [r7, #32]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f9ff 	bl	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00d      	beq.n	80036ec <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d107      	bne.n	80036e8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e02b      	b.n	8003744 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d105      	bne.n	80036fe <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036f2:	893b      	ldrh	r3, [r7, #8]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	611a      	str	r2, [r3, #16]
 80036fc:	e021      	b.n	8003742 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036fe:	893b      	ldrh	r3, [r7, #8]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	b29b      	uxth	r3, r3
 8003704:	b2da      	uxtb	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800370c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370e:	6a39      	ldr	r1, [r7, #32]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f9d9 	bl	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00d      	beq.n	8003738 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	2b04      	cmp	r3, #4
 8003722:	d107      	bne.n	8003734 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003732:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e005      	b.n	8003744 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003738:	893b      	ldrh	r3, [r7, #8]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	00010002 	.word	0x00010002

08003750 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	4608      	mov	r0, r1
 800375a:	4611      	mov	r1, r2
 800375c:	461a      	mov	r2, r3
 800375e:	4603      	mov	r3, r0
 8003760:	817b      	strh	r3, [r7, #10]
 8003762:	460b      	mov	r3, r1
 8003764:	813b      	strh	r3, [r7, #8]
 8003766:	4613      	mov	r3, r2
 8003768:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003778:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003788:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	2200      	movs	r2, #0
 8003792:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f8c0 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00c      	beq.n	80037bc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e0a9      	b.n	8003910 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037bc:	897b      	ldrh	r3, [r7, #10]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	6a3a      	ldr	r2, [r7, #32]
 80037d0:	4951      	ldr	r1, [pc, #324]	; (8003918 <I2C_RequestMemoryRead+0x1c8>)
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f8f9 	bl	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e096      	b.n	8003910 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fa:	6a39      	ldr	r1, [r7, #32]
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f963 	bl	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00d      	beq.n	8003824 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	2b04      	cmp	r3, #4
 800380e:	d107      	bne.n	8003820 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e075      	b.n	8003910 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d105      	bne.n	8003836 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800382a:	893b      	ldrh	r3, [r7, #8]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	611a      	str	r2, [r3, #16]
 8003834:	e021      	b.n	800387a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003836:	893b      	ldrh	r3, [r7, #8]
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	b29b      	uxth	r3, r3
 800383c:	b2da      	uxtb	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003846:	6a39      	ldr	r1, [r7, #32]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f93d 	bl	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00d      	beq.n	8003870 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	2b04      	cmp	r3, #4
 800385a:	d107      	bne.n	800386c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e04f      	b.n	8003910 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003870:	893b      	ldrh	r3, [r7, #8]
 8003872:	b2da      	uxtb	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800387a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387c:	6a39      	ldr	r1, [r7, #32]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f922 	bl	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00d      	beq.n	80038a6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2b04      	cmp	r3, #4
 8003890:	d107      	bne.n	80038a2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e034      	b.n	8003910 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	2200      	movs	r2, #0
 80038be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f82a 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00c      	beq.n	80038e8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e013      	b.n	8003910 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038e8:	897b      	ldrh	r3, [r7, #10]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	6a3a      	ldr	r2, [r7, #32]
 80038fc:	4906      	ldr	r1, [pc, #24]	; (8003918 <I2C_RequestMemoryRead+0x1c8>)
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f863 	bl	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	00010002 	.word	0x00010002

0800391c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800392c:	e025      	b.n	800397a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d021      	beq.n	800397a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fd faf5 	bl	8000f24 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d116      	bne.n	800397a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e023      	b.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	0c1b      	lsrs	r3, r3, #16
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10d      	bne.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	43da      	mvns	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4013      	ands	r3, r2
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	bf0c      	ite	eq
 8003996:	2301      	moveq	r3, #1
 8003998:	2300      	movne	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	e00c      	b.n	80039ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	43da      	mvns	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4013      	ands	r3, r2
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bf0c      	ite	eq
 80039b2:	2301      	moveq	r3, #1
 80039b4:	2300      	movne	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d0b6      	beq.n	800392e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039d8:	e051      	b.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e8:	d123      	bne.n	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f043 0204 	orr.w	r2, r3, #4
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e046      	b.n	8003ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d021      	beq.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3a:	f7fd fa73 	bl	8000f24 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d116      	bne.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f043 0220 	orr.w	r2, r3, #32
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e020      	b.n	8003ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	0c1b      	lsrs	r3, r3, #16
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d10c      	bne.n	8003aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4013      	ands	r3, r2
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bf14      	ite	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	2300      	moveq	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	e00b      	b.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	43da      	mvns	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4013      	ands	r3, r2
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf14      	ite	ne
 8003ab4:	2301      	movne	r3, #1
 8003ab6:	2300      	moveq	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d18d      	bne.n	80039da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ad4:	e02d      	b.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f8ce 	bl	8003c78 <I2C_IsAcknowledgeFailed>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e02d      	b.n	8003b42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d021      	beq.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aee:	f7fd fa19 	bl	8000f24 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d302      	bcc.n	8003b04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d116      	bne.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f043 0220 	orr.w	r2, r3, #32
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e007      	b.n	8003b42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3c:	2b80      	cmp	r3, #128	; 0x80
 8003b3e:	d1ca      	bne.n	8003ad6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b56:	e02d      	b.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f88d 	bl	8003c78 <I2C_IsAcknowledgeFailed>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e02d      	b.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6e:	d021      	beq.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b70:	f7fd f9d8 	bl	8000f24 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d302      	bcc.n	8003b86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d116      	bne.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f043 0220 	orr.w	r2, r3, #32
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e007      	b.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d1ca      	bne.n	8003b58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bd8:	e042      	b.n	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d119      	bne.n	8003c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0210 	mvn.w	r2, #16
 8003bf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e029      	b.n	8003c70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1c:	f7fd f982 	bl	8000f24 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d302      	bcc.n	8003c32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d116      	bne.n	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e007      	b.n	8003c70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	d1b5      	bne.n	8003bda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8e:	d11b      	bne.n	8003cc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	f043 0204 	orr.w	r2, r3, #4
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce6:	d004      	beq.n	8003cf2 <HAL_PWR_EnableWakeUpPin+0x1a>
 8003ce8:	f240 1141 	movw	r1, #321	; 0x141
 8003cec:	4806      	ldr	r0, [pc, #24]	; (8003d08 <HAL_PWR_EnableWakeUpPin+0x30>)
 8003cee:	f007 f9e9 	bl	800b0c4 <assert_failed>

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_PWR_EnableWakeUpPin+0x34>)
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	4905      	ldr	r1, [pc, #20]	; (8003d0c <HAL_PWR_EnableWakeUpPin+0x34>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	604b      	str	r3, [r1, #4]
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	0800e1c4 	.word	0x0800e1c4
 8003d0c:	40007000 	.word	0x40007000

08003d10 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1e:	d004      	beq.n	8003d2a <HAL_PWR_DisableWakeUpPin+0x1a>
 8003d20:	f240 1153 	movw	r1, #339	; 0x153
 8003d24:	4806      	ldr	r0, [pc, #24]	; (8003d40 <HAL_PWR_DisableWakeUpPin+0x30>)
 8003d26:	f007 f9cd 	bl	800b0c4 <assert_failed>

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <HAL_PWR_DisableWakeUpPin+0x34>)
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	43db      	mvns	r3, r3
 8003d32:	4904      	ldr	r1, [pc, #16]	; (8003d44 <HAL_PWR_DisableWakeUpPin+0x34>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
}
 8003d38:	bf00      	nop
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	0800e1c4 	.word	0x0800e1c4
 8003d44:	40007000 	.word	0x40007000

08003d48 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <HAL_PWR_EnterSLEEPMode+0x22>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d004      	beq.n	8003d6a <HAL_PWR_EnterSLEEPMode+0x22>
 8003d60:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8003d64:	480f      	ldr	r0, [pc, #60]	; (8003da4 <HAL_PWR_EnterSLEEPMode+0x5c>)
 8003d66:	f007 f9ad 	bl	800b0c4 <assert_failed>
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d007      	beq.n	8003d80 <HAL_PWR_EnterSLEEPMode+0x38>
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d004      	beq.n	8003d80 <HAL_PWR_EnterSLEEPMode+0x38>
 8003d76:	f240 1171 	movw	r1, #369	; 0x171
 8003d7a:	480a      	ldr	r0, [pc, #40]	; (8003da4 <HAL_PWR_EnterSLEEPMode+0x5c>)
 8003d7c:	f007 f9a2 	bl	800b0c4 <assert_failed>

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003d86:	f023 0304 	bic.w	r3, r3, #4
 8003d8a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_PWR_EnterSLEEPMode+0x4e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8003d92:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003d94:	e002      	b.n	8003d9c <HAL_PWR_EnterSLEEPMode+0x54>
    __SEV();
 8003d96:	bf40      	sev
    __WFE();
 8003d98:	bf20      	wfe
    __WFE();
 8003d9a:	bf20      	wfe
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	0800e1c4 	.word	0x0800e1c4
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d007      	beq.n	8003dce <HAL_PWR_EnterSTOPMode+0x22>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d004      	beq.n	8003dce <HAL_PWR_EnterSTOPMode+0x22>
 8003dc4:	f240 119b 	movw	r1, #411	; 0x19b
 8003dc8:	4816      	ldr	r0, [pc, #88]	; (8003e24 <HAL_PWR_EnterSTOPMode+0x78>)
 8003dca:	f007 f97b 	bl	800b0c4 <assert_failed>
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 8003dce:	78fb      	ldrb	r3, [r7, #3]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d007      	beq.n	8003de4 <HAL_PWR_EnterSTOPMode+0x38>
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d004      	beq.n	8003de4 <HAL_PWR_EnterSTOPMode+0x38>
 8003dda:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003dde:	4811      	ldr	r0, [pc, #68]	; (8003e24 <HAL_PWR_EnterSTOPMode+0x78>)
 8003de0:	f007 f970 	bl	800b0c4 <assert_failed>
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8003de4:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <HAL_PWR_EnterSTOPMode+0x7c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f023 0203 	bic.w	r2, r3, #3
 8003dec:	490e      	ldr	r1, [pc, #56]	; (8003e28 <HAL_PWR_EnterSTOPMode+0x7c>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003df4:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <HAL_PWR_EnterSTOPMode+0x80>)
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	4a0c      	ldr	r2, [pc, #48]	; (8003e2c <HAL_PWR_EnterSTOPMode+0x80>)
 8003dfa:	f043 0304 	orr.w	r3, r3, #4
 8003dfe:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_PWR_EnterSTOPMode+0x5e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8003e06:	bf30      	wfi
 8003e08:	e002      	b.n	8003e10 <HAL_PWR_EnterSTOPMode+0x64>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003e0a:	bf40      	sev
    __WFE();
 8003e0c:	bf20      	wfe
    __WFE();
 8003e0e:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8003e10:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_PWR_EnterSTOPMode+0x80>)
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	4a05      	ldr	r2, [pc, #20]	; (8003e2c <HAL_PWR_EnterSTOPMode+0x80>)
 8003e16:	f023 0304 	bic.w	r3, r3, #4
 8003e1a:	6113      	str	r3, [r2, #16]
}
 8003e1c:	bf00      	nop
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	0800e1c4 	.word	0x0800e1c4
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8003e34:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a07      	ldr	r2, [pc, #28]	; (8003e58 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8003e3a:	f043 0302 	orr.w	r3, r3, #2
 8003e3e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	4a05      	ldr	r2, [pc, #20]	; (8003e5c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003e46:	f043 0304 	orr.w	r3, r3, #4
 8003e4a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003e4c:	bf30      	wfi
}
 8003e4e:	bf00      	nop
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40007000 	.word	0x40007000
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e30d      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b0f      	cmp	r3, #15
 8003e78:	d903      	bls.n	8003e82 <HAL_RCC_OscConfig+0x22>
 8003e7a:	21e8      	movs	r1, #232	; 0xe8
 8003e7c:	48a3      	ldr	r0, [pc, #652]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003e7e:	f007 f921 	bl	800b0c4 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8088 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00d      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x54>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea0:	d008      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x54>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eaa:	d003      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x54>
 8003eac:	21ed      	movs	r1, #237	; 0xed
 8003eae:	4897      	ldr	r0, [pc, #604]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003eb0:	f007 f908 	bl	800b0c4 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eb4:	4b96      	ldr	r3, [pc, #600]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d00c      	beq.n	8003eda <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ec0:	4b93      	ldr	r3, [pc, #588]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d112      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ecc:	4b90      	ldr	r3, [pc, #576]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eda:	4b8d      	ldr	r3, [pc, #564]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d05b      	beq.n	8003f9e <HAL_RCC_OscConfig+0x13e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d157      	bne.n	8003f9e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e2cd      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efa:	d106      	bne.n	8003f0a <HAL_RCC_OscConfig+0xaa>
 8003efc:	4b84      	ldr	r3, [pc, #528]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a83      	ldr	r2, [pc, #524]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	e01d      	b.n	8003f46 <HAL_RCC_OscConfig+0xe6>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f12:	d10c      	bne.n	8003f2e <HAL_RCC_OscConfig+0xce>
 8003f14:	4b7e      	ldr	r3, [pc, #504]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a7d      	ldr	r2, [pc, #500]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	4b7b      	ldr	r3, [pc, #492]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a7a      	ldr	r2, [pc, #488]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	e00b      	b.n	8003f46 <HAL_RCC_OscConfig+0xe6>
 8003f2e:	4b78      	ldr	r3, [pc, #480]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a77      	ldr	r2, [pc, #476]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b75      	ldr	r3, [pc, #468]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a74      	ldr	r2, [pc, #464]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d013      	beq.n	8003f76 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4e:	f7fc ffe9 	bl	8000f24 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f56:	f7fc ffe5 	bl	8000f24 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b64      	cmp	r3, #100	; 0x64
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e292      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f68:	4b69      	ldr	r3, [pc, #420]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0xf6>
 8003f74:	e014      	b.n	8003fa0 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f76:	f7fc ffd5 	bl	8000f24 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f7e:	f7fc ffd1 	bl	8000f24 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b64      	cmp	r3, #100	; 0x64
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e27e      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f90:	4b5f      	ldr	r3, [pc, #380]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f0      	bne.n	8003f7e <HAL_RCC_OscConfig+0x11e>
 8003f9c:	e000      	b.n	8003fa0 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d079      	beq.n	80040a0 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x166>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d004      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x166>
 8003fbc:	f240 111f 	movw	r1, #287	; 0x11f
 8003fc0:	4852      	ldr	r0, [pc, #328]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003fc2:	f007 f87f 	bl	800b0c4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b1f      	cmp	r3, #31
 8003fcc:	d904      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x178>
 8003fce:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003fd2:	484e      	ldr	r0, [pc, #312]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	f007 f876 	bl	800b0c4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fd8:	4b4d      	ldr	r3, [pc, #308]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 030c 	and.w	r3, r3, #12
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fe4:	4b4a      	ldr	r3, [pc, #296]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d11c      	bne.n	800402a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff0:	4b47      	ldr	r3, [pc, #284]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d116      	bne.n	800402a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffc:	4b44      	ldr	r3, [pc, #272]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_OscConfig+0x1b4>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d001      	beq.n	8004014 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e23c      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004014:	4b3e      	ldr	r3, [pc, #248]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	493b      	ldr	r1, [pc, #236]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004028:	e03a      	b.n	80040a0 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d020      	beq.n	8004074 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004032:	4b38      	ldr	r3, [pc, #224]	; (8004114 <HAL_RCC_OscConfig+0x2b4>)
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fc ff74 	bl	8000f24 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004040:	f7fc ff70 	bl	8000f24 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e21d      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004052:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405e:	4b2c      	ldr	r3, [pc, #176]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4928      	ldr	r1, [pc, #160]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 800406e:	4313      	orrs	r3, r2
 8004070:	600b      	str	r3, [r1, #0]
 8004072:	e015      	b.n	80040a0 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004074:	4b27      	ldr	r3, [pc, #156]	; (8004114 <HAL_RCC_OscConfig+0x2b4>)
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407a:	f7fc ff53 	bl	8000f24 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004082:	f7fc ff4f 	bl	8000f24 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e1fc      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004094:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f0      	bne.n	8004082 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d046      	beq.n	800413a <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_RCC_OscConfig+0x266>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d004      	beq.n	80040c6 <HAL_RCC_OscConfig+0x266>
 80040bc:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80040c0:	4812      	ldr	r0, [pc, #72]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 80040c2:	f006 ffff 	bl	800b0c4 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d016      	beq.n	80040fc <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ce:	4b12      	ldr	r3, [pc, #72]	; (8004118 <HAL_RCC_OscConfig+0x2b8>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d4:	f7fc ff26 	bl	8000f24 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040dc:	f7fc ff22 	bl	8000f24 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e1cf      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ee:	4b08      	ldr	r3, [pc, #32]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 80040f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x27c>
 80040fa:	e01e      	b.n	800413a <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_RCC_OscConfig+0x2b8>)
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004102:	f7fc ff0f 	bl	8000f24 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004108:	e011      	b.n	800412e <HAL_RCC_OscConfig+0x2ce>
 800410a:	bf00      	nop
 800410c:	0800e1fc 	.word	0x0800e1fc
 8004110:	40023800 	.word	0x40023800
 8004114:	42470000 	.word	0x42470000
 8004118:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800411c:	f7fc ff02 	bl	8000f24 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e1af      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800412e:	4b97      	ldr	r3, [pc, #604]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 8004130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 80a8 	beq.w	8004298 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004148:	2300      	movs	r3, #0
 800414a:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00c      	beq.n	800416e <HAL_RCC_OscConfig+0x30e>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d008      	beq.n	800416e <HAL_RCC_OscConfig+0x30e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b05      	cmp	r3, #5
 8004162:	d004      	beq.n	800416e <HAL_RCC_OscConfig+0x30e>
 8004164:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004168:	4889      	ldr	r0, [pc, #548]	; (8004390 <HAL_RCC_OscConfig+0x530>)
 800416a:	f006 ffab 	bl	800b0c4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416e:	4b87      	ldr	r3, [pc, #540]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	4b83      	ldr	r3, [pc, #524]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	4a82      	ldr	r2, [pc, #520]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
 800418a:	4b80      	ldr	r3, [pc, #512]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419a:	4b7e      	ldr	r3, [pc, #504]	; (8004394 <HAL_RCC_OscConfig+0x534>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d118      	bne.n	80041d8 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a6:	4b7b      	ldr	r3, [pc, #492]	; (8004394 <HAL_RCC_OscConfig+0x534>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a7a      	ldr	r2, [pc, #488]	; (8004394 <HAL_RCC_OscConfig+0x534>)
 80041ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b2:	f7fc feb7 	bl	8000f24 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ba:	f7fc feb3 	bl	8000f24 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e160      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041cc:	4b71      	ldr	r3, [pc, #452]	; (8004394 <HAL_RCC_OscConfig+0x534>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d106      	bne.n	80041ee <HAL_RCC_OscConfig+0x38e>
 80041e0:	4b6a      	ldr	r3, [pc, #424]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	4a69      	ldr	r2, [pc, #420]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	6713      	str	r3, [r2, #112]	; 0x70
 80041ec:	e01c      	b.n	8004228 <HAL_RCC_OscConfig+0x3c8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b05      	cmp	r3, #5
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0x3b0>
 80041f6:	4b65      	ldr	r3, [pc, #404]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	4a64      	ldr	r2, [pc, #400]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 80041fc:	f043 0304 	orr.w	r3, r3, #4
 8004200:	6713      	str	r3, [r2, #112]	; 0x70
 8004202:	4b62      	ldr	r3, [pc, #392]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	4a61      	ldr	r2, [pc, #388]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	6713      	str	r3, [r2, #112]	; 0x70
 800420e:	e00b      	b.n	8004228 <HAL_RCC_OscConfig+0x3c8>
 8004210:	4b5e      	ldr	r3, [pc, #376]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	4a5d      	ldr	r2, [pc, #372]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	6713      	str	r3, [r2, #112]	; 0x70
 800421c:	4b5b      	ldr	r3, [pc, #364]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 800421e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004220:	4a5a      	ldr	r2, [pc, #360]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 8004222:	f023 0304 	bic.w	r3, r3, #4
 8004226:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d015      	beq.n	800425c <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004230:	f7fc fe78 	bl	8000f24 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004236:	e00a      	b.n	800424e <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004238:	f7fc fe74 	bl	8000f24 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	; 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e11f      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424e:	4b4f      	ldr	r3, [pc, #316]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0ee      	beq.n	8004238 <HAL_RCC_OscConfig+0x3d8>
 800425a:	e014      	b.n	8004286 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425c:	f7fc fe62 	bl	8000f24 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004262:	e00a      	b.n	800427a <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004264:	f7fc fe5e 	bl	8000f24 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e109      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427a:	4b44      	ldr	r3, [pc, #272]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1ee      	bne.n	8004264 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004286:	7dfb      	ldrb	r3, [r7, #23]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d105      	bne.n	8004298 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800428c:	4b3f      	ldr	r3, [pc, #252]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	4a3e      	ldr	r2, [pc, #248]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 8004292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004296:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00c      	beq.n	80042ba <HAL_RCC_OscConfig+0x45a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d008      	beq.n	80042ba <HAL_RCC_OscConfig+0x45a>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d004      	beq.n	80042ba <HAL_RCC_OscConfig+0x45a>
 80042b0:	f240 11cf 	movw	r1, #463	; 0x1cf
 80042b4:	4836      	ldr	r0, [pc, #216]	; (8004390 <HAL_RCC_OscConfig+0x530>)
 80042b6:	f006 ff05 	bl	800b0c4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 80e4 	beq.w	800448c <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042c4:	4b31      	ldr	r3, [pc, #196]	; (800438c <HAL_RCC_OscConfig+0x52c>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 030c 	and.w	r3, r3, #12
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	f000 80ae 	beq.w	800442e <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	f040 8092 	bne.w	8004400 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <HAL_RCC_OscConfig+0x498>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ec:	d004      	beq.n	80042f8 <HAL_RCC_OscConfig+0x498>
 80042ee:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80042f2:	4827      	ldr	r0, [pc, #156]	; (8004390 <HAL_RCC_OscConfig+0x530>)
 80042f4:	f006 fee6 	bl	800b0c4 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	2b3f      	cmp	r3, #63	; 0x3f
 80042fe:	d904      	bls.n	800430a <HAL_RCC_OscConfig+0x4aa>
 8004300:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004304:	4822      	ldr	r0, [pc, #136]	; (8004390 <HAL_RCC_OscConfig+0x530>)
 8004306:	f006 fedd 	bl	800b0c4 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	2bbf      	cmp	r3, #191	; 0xbf
 8004310:	d904      	bls.n	800431c <HAL_RCC_OscConfig+0x4bc>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800431a:	d904      	bls.n	8004326 <HAL_RCC_OscConfig+0x4c6>
 800431c:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004320:	481b      	ldr	r0, [pc, #108]	; (8004390 <HAL_RCC_OscConfig+0x530>)
 8004322:	f006 fecf 	bl	800b0c4 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	2b02      	cmp	r3, #2
 800432c:	d010      	beq.n	8004350 <HAL_RCC_OscConfig+0x4f0>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	2b04      	cmp	r3, #4
 8004334:	d00c      	beq.n	8004350 <HAL_RCC_OscConfig+0x4f0>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433a:	2b06      	cmp	r3, #6
 800433c:	d008      	beq.n	8004350 <HAL_RCC_OscConfig+0x4f0>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	2b08      	cmp	r3, #8
 8004344:	d004      	beq.n	8004350 <HAL_RCC_OscConfig+0x4f0>
 8004346:	f240 11db 	movw	r1, #475	; 0x1db
 800434a:	4811      	ldr	r0, [pc, #68]	; (8004390 <HAL_RCC_OscConfig+0x530>)
 800434c:	f006 feba 	bl	800b0c4 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d903      	bls.n	8004360 <HAL_RCC_OscConfig+0x500>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	2b0f      	cmp	r3, #15
 800435e:	d904      	bls.n	800436a <HAL_RCC_OscConfig+0x50a>
 8004360:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004364:	480a      	ldr	r0, [pc, #40]	; (8004390 <HAL_RCC_OscConfig+0x530>)
 8004366:	f006 fead 	bl	800b0c4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_RCC_OscConfig+0x538>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fc fdd8 	bl	8000f24 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004376:	e011      	b.n	800439c <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004378:	f7fc fdd4 	bl	8000f24 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d90a      	bls.n	800439c <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e081      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
 800438a:	bf00      	nop
 800438c:	40023800 	.word	0x40023800
 8004390:	0800e1fc 	.word	0x0800e1fc
 8004394:	40007000 	.word	0x40007000
 8004398:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439c:	4b3e      	ldr	r3, [pc, #248]	; (8004498 <HAL_RCC_OscConfig+0x638>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e7      	bne.n	8004378 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	019b      	lsls	r3, r3, #6
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	3b01      	subs	r3, #1
 80043c2:	041b      	lsls	r3, r3, #16
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	061b      	lsls	r3, r3, #24
 80043cc:	4932      	ldr	r1, [pc, #200]	; (8004498 <HAL_RCC_OscConfig+0x638>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d2:	4b32      	ldr	r3, [pc, #200]	; (800449c <HAL_RCC_OscConfig+0x63c>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7fc fda4 	bl	8000f24 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e0:	f7fc fda0 	bl	8000f24 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e04d      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f2:	4b29      	ldr	r3, [pc, #164]	; (8004498 <HAL_RCC_OscConfig+0x638>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x580>
 80043fe:	e045      	b.n	800448c <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004400:	4b26      	ldr	r3, [pc, #152]	; (800449c <HAL_RCC_OscConfig+0x63c>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004406:	f7fc fd8d 	bl	8000f24 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800440e:	f7fc fd89 	bl	8000f24 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e036      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004420:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <HAL_RCC_OscConfig+0x638>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f0      	bne.n	800440e <HAL_RCC_OscConfig+0x5ae>
 800442c:	e02e      	b.n	800448c <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e029      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800443a:	4b17      	ldr	r3, [pc, #92]	; (8004498 <HAL_RCC_OscConfig+0x638>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	429a      	cmp	r2, r3
 800444c:	d11c      	bne.n	8004488 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d115      	bne.n	8004488 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004462:	4013      	ands	r3, r2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004468:	4293      	cmp	r3, r2
 800446a:	d10d      	bne.n	8004488 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d106      	bne.n	8004488 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d001      	beq.n	800448c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40023800 	.word	0x40023800
 800449c:	42470060 	.word	0x42470060

080044a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e174      	b.n	800479e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x24>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b0f      	cmp	r3, #15
 80044c2:	d904      	bls.n	80044ce <HAL_RCC_ClockConfig+0x2e>
 80044c4:	f240 2151 	movw	r1, #593	; 0x251
 80044c8:	487b      	ldr	r0, [pc, #492]	; (80046b8 <HAL_RCC_ClockConfig+0x218>)
 80044ca:	f006 fdfb 	bl	800b0c4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d019      	beq.n	8004508 <HAL_RCC_ClockConfig+0x68>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d016      	beq.n	8004508 <HAL_RCC_ClockConfig+0x68>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d013      	beq.n	8004508 <HAL_RCC_ClockConfig+0x68>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d010      	beq.n	8004508 <HAL_RCC_ClockConfig+0x68>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d00d      	beq.n	8004508 <HAL_RCC_ClockConfig+0x68>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b05      	cmp	r3, #5
 80044f0:	d00a      	beq.n	8004508 <HAL_RCC_ClockConfig+0x68>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b06      	cmp	r3, #6
 80044f6:	d007      	beq.n	8004508 <HAL_RCC_ClockConfig+0x68>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b07      	cmp	r3, #7
 80044fc:	d004      	beq.n	8004508 <HAL_RCC_ClockConfig+0x68>
 80044fe:	f240 2152 	movw	r1, #594	; 0x252
 8004502:	486d      	ldr	r0, [pc, #436]	; (80046b8 <HAL_RCC_ClockConfig+0x218>)
 8004504:	f006 fdde 	bl	800b0c4 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004508:	4b6c      	ldr	r3, [pc, #432]	; (80046bc <HAL_RCC_ClockConfig+0x21c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d90c      	bls.n	8004530 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004516:	4b69      	ldr	r3, [pc, #420]	; (80046bc <HAL_RCC_ClockConfig+0x21c>)
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800451e:	4b67      	ldr	r3, [pc, #412]	; (80046bc <HAL_RCC_ClockConfig+0x21c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d001      	beq.n	8004530 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e136      	b.n	800479e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d049      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004548:	4b5d      	ldr	r3, [pc, #372]	; (80046c0 <HAL_RCC_ClockConfig+0x220>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4a5c      	ldr	r2, [pc, #368]	; (80046c0 <HAL_RCC_ClockConfig+0x220>)
 800454e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004552:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004560:	4b57      	ldr	r3, [pc, #348]	; (80046c0 <HAL_RCC_ClockConfig+0x220>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4a56      	ldr	r2, [pc, #344]	; (80046c0 <HAL_RCC_ClockConfig+0x220>)
 8004566:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800456a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d024      	beq.n	80045be <HAL_RCC_ClockConfig+0x11e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b80      	cmp	r3, #128	; 0x80
 800457a:	d020      	beq.n	80045be <HAL_RCC_ClockConfig+0x11e>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b90      	cmp	r3, #144	; 0x90
 8004582:	d01c      	beq.n	80045be <HAL_RCC_ClockConfig+0x11e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2ba0      	cmp	r3, #160	; 0xa0
 800458a:	d018      	beq.n	80045be <HAL_RCC_ClockConfig+0x11e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2bb0      	cmp	r3, #176	; 0xb0
 8004592:	d014      	beq.n	80045be <HAL_RCC_ClockConfig+0x11e>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2bc0      	cmp	r3, #192	; 0xc0
 800459a:	d010      	beq.n	80045be <HAL_RCC_ClockConfig+0x11e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2bd0      	cmp	r3, #208	; 0xd0
 80045a2:	d00c      	beq.n	80045be <HAL_RCC_ClockConfig+0x11e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2be0      	cmp	r3, #224	; 0xe0
 80045aa:	d008      	beq.n	80045be <HAL_RCC_ClockConfig+0x11e>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2bf0      	cmp	r3, #240	; 0xf0
 80045b2:	d004      	beq.n	80045be <HAL_RCC_ClockConfig+0x11e>
 80045b4:	f240 2175 	movw	r1, #629	; 0x275
 80045b8:	483f      	ldr	r0, [pc, #252]	; (80046b8 <HAL_RCC_ClockConfig+0x218>)
 80045ba:	f006 fd83 	bl	800b0c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045be:	4b40      	ldr	r3, [pc, #256]	; (80046c0 <HAL_RCC_ClockConfig+0x220>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	493d      	ldr	r1, [pc, #244]	; (80046c0 <HAL_RCC_ClockConfig+0x220>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d059      	beq.n	8004690 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d010      	beq.n	8004606 <HAL_RCC_ClockConfig+0x166>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d00c      	beq.n	8004606 <HAL_RCC_ClockConfig+0x166>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d008      	beq.n	8004606 <HAL_RCC_ClockConfig+0x166>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d004      	beq.n	8004606 <HAL_RCC_ClockConfig+0x166>
 80045fc:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8004600:	482d      	ldr	r0, [pc, #180]	; (80046b8 <HAL_RCC_ClockConfig+0x218>)
 8004602:	f006 fd5f 	bl	800b0c4 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	4b2c      	ldr	r3, [pc, #176]	; (80046c0 <HAL_RCC_ClockConfig+0x220>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d119      	bne.n	800464e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e0bf      	b.n	800479e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d003      	beq.n	800462e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462a:	2b03      	cmp	r3, #3
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462e:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <HAL_RCC_ClockConfig+0x220>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e0af      	b.n	800479e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463e:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <HAL_RCC_ClockConfig+0x220>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e0a7      	b.n	800479e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800464e:	4b1c      	ldr	r3, [pc, #112]	; (80046c0 <HAL_RCC_ClockConfig+0x220>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f023 0203 	bic.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4919      	ldr	r1, [pc, #100]	; (80046c0 <HAL_RCC_ClockConfig+0x220>)
 800465c:	4313      	orrs	r3, r2
 800465e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004660:	f7fc fc60 	bl	8000f24 <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004666:	e00a      	b.n	800467e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004668:	f7fc fc5c 	bl	8000f24 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e08f      	b.n	800479e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467e:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <HAL_RCC_ClockConfig+0x220>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 020c 	and.w	r2, r3, #12
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	429a      	cmp	r2, r3
 800468e:	d1eb      	bne.n	8004668 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004690:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <HAL_RCC_ClockConfig+0x21c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d212      	bcs.n	80046c4 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b07      	ldr	r3, [pc, #28]	; (80046bc <HAL_RCC_ClockConfig+0x21c>)
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_RCC_ClockConfig+0x21c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d007      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e072      	b.n	800479e <HAL_RCC_ClockConfig+0x2fe>
 80046b8:	0800e1fc 	.word	0x0800e1fc
 80046bc:	40023c00 	.word	0x40023c00
 80046c0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d025      	beq.n	800471c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d018      	beq.n	800470a <HAL_RCC_ClockConfig+0x26a>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e0:	d013      	beq.n	800470a <HAL_RCC_ClockConfig+0x26a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046ea:	d00e      	beq.n	800470a <HAL_RCC_ClockConfig+0x26a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80046f4:	d009      	beq.n	800470a <HAL_RCC_ClockConfig+0x26a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80046fe:	d004      	beq.n	800470a <HAL_RCC_ClockConfig+0x26a>
 8004700:	f240 21ba 	movw	r1, #698	; 0x2ba
 8004704:	4828      	ldr	r0, [pc, #160]	; (80047a8 <HAL_RCC_ClockConfig+0x308>)
 8004706:	f006 fcdd 	bl	800b0c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800470a:	4b28      	ldr	r3, [pc, #160]	; (80047ac <HAL_RCC_ClockConfig+0x30c>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	4925      	ldr	r1, [pc, #148]	; (80047ac <HAL_RCC_ClockConfig+0x30c>)
 8004718:	4313      	orrs	r3, r2
 800471a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d026      	beq.n	8004776 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d018      	beq.n	8004762 <HAL_RCC_ClockConfig+0x2c2>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004738:	d013      	beq.n	8004762 <HAL_RCC_ClockConfig+0x2c2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004742:	d00e      	beq.n	8004762 <HAL_RCC_ClockConfig+0x2c2>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800474c:	d009      	beq.n	8004762 <HAL_RCC_ClockConfig+0x2c2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004756:	d004      	beq.n	8004762 <HAL_RCC_ClockConfig+0x2c2>
 8004758:	f240 21c1 	movw	r1, #705	; 0x2c1
 800475c:	4812      	ldr	r0, [pc, #72]	; (80047a8 <HAL_RCC_ClockConfig+0x308>)
 800475e:	f006 fcb1 	bl	800b0c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004762:	4b12      	ldr	r3, [pc, #72]	; (80047ac <HAL_RCC_ClockConfig+0x30c>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	490e      	ldr	r1, [pc, #56]	; (80047ac <HAL_RCC_ClockConfig+0x30c>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004776:	f000 f821 	bl	80047bc <HAL_RCC_GetSysClockFreq>
 800477a:	4601      	mov	r1, r0
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <HAL_RCC_ClockConfig+0x30c>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <HAL_RCC_ClockConfig+0x310>)
 8004788:	5cd3      	ldrb	r3, [r2, r3]
 800478a:	fa21 f303 	lsr.w	r3, r1, r3
 800478e:	4a09      	ldr	r2, [pc, #36]	; (80047b4 <HAL_RCC_ClockConfig+0x314>)
 8004790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004792:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <HAL_RCC_ClockConfig+0x318>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f006 fd86 	bl	800b2a8 <HAL_InitTick>

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	0800e1fc 	.word	0x0800e1fc
 80047ac:	40023800 	.word	0x40023800
 80047b0:	0800e8a8 	.word	0x0800e8a8
 80047b4:	20000088 	.word	0x20000088
 80047b8:	20000080 	.word	0x20000080

080047bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	607b      	str	r3, [r7, #4]
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	2300      	movs	r3, #0
 80047cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047d2:	4b63      	ldr	r3, [pc, #396]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 030c 	and.w	r3, r3, #12
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d007      	beq.n	80047ee <HAL_RCC_GetSysClockFreq+0x32>
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d008      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0x38>
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 80b4 	bne.w	8004950 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047e8:	4b5e      	ldr	r3, [pc, #376]	; (8004964 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047ea:	60bb      	str	r3, [r7, #8]
       break;
 80047ec:	e0b3      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ee:	4b5e      	ldr	r3, [pc, #376]	; (8004968 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80047f0:	60bb      	str	r3, [r7, #8]
      break;
 80047f2:	e0b0      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047f4:	4b5a      	ldr	r3, [pc, #360]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047fe:	4b58      	ldr	r3, [pc, #352]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d04a      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800480a:	4b55      	ldr	r3, [pc, #340]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	099b      	lsrs	r3, r3, #6
 8004810:	f04f 0400 	mov.w	r4, #0
 8004814:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	ea03 0501 	and.w	r5, r3, r1
 8004820:	ea04 0602 	and.w	r6, r4, r2
 8004824:	4629      	mov	r1, r5
 8004826:	4632      	mov	r2, r6
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	f04f 0400 	mov.w	r4, #0
 8004830:	0154      	lsls	r4, r2, #5
 8004832:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004836:	014b      	lsls	r3, r1, #5
 8004838:	4619      	mov	r1, r3
 800483a:	4622      	mov	r2, r4
 800483c:	1b49      	subs	r1, r1, r5
 800483e:	eb62 0206 	sbc.w	r2, r2, r6
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	f04f 0400 	mov.w	r4, #0
 800484a:	0194      	lsls	r4, r2, #6
 800484c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004850:	018b      	lsls	r3, r1, #6
 8004852:	1a5b      	subs	r3, r3, r1
 8004854:	eb64 0402 	sbc.w	r4, r4, r2
 8004858:	f04f 0100 	mov.w	r1, #0
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	00e2      	lsls	r2, r4, #3
 8004862:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004866:	00d9      	lsls	r1, r3, #3
 8004868:	460b      	mov	r3, r1
 800486a:	4614      	mov	r4, r2
 800486c:	195b      	adds	r3, r3, r5
 800486e:	eb44 0406 	adc.w	r4, r4, r6
 8004872:	f04f 0100 	mov.w	r1, #0
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	0262      	lsls	r2, r4, #9
 800487c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004880:	0259      	lsls	r1, r3, #9
 8004882:	460b      	mov	r3, r1
 8004884:	4614      	mov	r4, r2
 8004886:	4618      	mov	r0, r3
 8004888:	4621      	mov	r1, r4
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f04f 0400 	mov.w	r4, #0
 8004890:	461a      	mov	r2, r3
 8004892:	4623      	mov	r3, r4
 8004894:	f7fc f990 	bl	8000bb8 <__aeabi_uldivmod>
 8004898:	4603      	mov	r3, r0
 800489a:	460c      	mov	r4, r1
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	e049      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a0:	4b2f      	ldr	r3, [pc, #188]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	099b      	lsrs	r3, r3, #6
 80048a6:	f04f 0400 	mov.w	r4, #0
 80048aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	ea03 0501 	and.w	r5, r3, r1
 80048b6:	ea04 0602 	and.w	r6, r4, r2
 80048ba:	4629      	mov	r1, r5
 80048bc:	4632      	mov	r2, r6
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	f04f 0400 	mov.w	r4, #0
 80048c6:	0154      	lsls	r4, r2, #5
 80048c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048cc:	014b      	lsls	r3, r1, #5
 80048ce:	4619      	mov	r1, r3
 80048d0:	4622      	mov	r2, r4
 80048d2:	1b49      	subs	r1, r1, r5
 80048d4:	eb62 0206 	sbc.w	r2, r2, r6
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	f04f 0400 	mov.w	r4, #0
 80048e0:	0194      	lsls	r4, r2, #6
 80048e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048e6:	018b      	lsls	r3, r1, #6
 80048e8:	1a5b      	subs	r3, r3, r1
 80048ea:	eb64 0402 	sbc.w	r4, r4, r2
 80048ee:	f04f 0100 	mov.w	r1, #0
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	00e2      	lsls	r2, r4, #3
 80048f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048fc:	00d9      	lsls	r1, r3, #3
 80048fe:	460b      	mov	r3, r1
 8004900:	4614      	mov	r4, r2
 8004902:	195b      	adds	r3, r3, r5
 8004904:	eb44 0406 	adc.w	r4, r4, r6
 8004908:	f04f 0100 	mov.w	r1, #0
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	02a2      	lsls	r2, r4, #10
 8004912:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004916:	0299      	lsls	r1, r3, #10
 8004918:	460b      	mov	r3, r1
 800491a:	4614      	mov	r4, r2
 800491c:	4618      	mov	r0, r3
 800491e:	4621      	mov	r1, r4
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f04f 0400 	mov.w	r4, #0
 8004926:	461a      	mov	r2, r3
 8004928:	4623      	mov	r3, r4
 800492a:	f7fc f945 	bl	8000bb8 <__aeabi_uldivmod>
 800492e:	4603      	mov	r3, r0
 8004930:	460c      	mov	r4, r1
 8004932:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004934:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	0c1b      	lsrs	r3, r3, #16
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	3301      	adds	r3, #1
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	fbb2 f3f3 	udiv	r3, r2, r3
 800494c:	60bb      	str	r3, [r7, #8]
      break;
 800494e:	e002      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004950:	4b04      	ldr	r3, [pc, #16]	; (8004964 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004952:	60bb      	str	r3, [r7, #8]
      break;
 8004954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004956:	68bb      	ldr	r3, [r7, #8]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004960:	40023800 	.word	0x40023800
 8004964:	00f42400 	.word	0x00f42400
 8004968:	007a1200 	.word	0x007a1200

0800496c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <HAL_RCC_GetHCLKFreq+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000088 	.word	0x20000088

08004984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004988:	f7ff fff0 	bl	800496c <HAL_RCC_GetHCLKFreq>
 800498c:	4601      	mov	r1, r0
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0a9b      	lsrs	r3, r3, #10
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4a03      	ldr	r2, [pc, #12]	; (80049a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800499a:	5cd3      	ldrb	r3, [r2, r3]
 800499c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800
 80049a8:	0800e8b8 	.word	0x0800e8b8

080049ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049b0:	f7ff ffdc 	bl	800496c <HAL_RCC_GetHCLKFreq>
 80049b4:	4601      	mov	r1, r0
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	0b5b      	lsrs	r3, r3, #13
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4a03      	ldr	r2, [pc, #12]	; (80049d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049c2:	5cd3      	ldrb	r3, [r2, r3]
 80049c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	0800e8b8 	.word	0x0800e8b8

080049d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	220f      	movs	r2, #15
 80049e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049e4:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0203 	and.w	r2, r3, #3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a08:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_RCC_GetClockConfig+0x5c>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	08db      	lsrs	r3, r3, #3
 8004a0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a16:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <HAL_RCC_GetClockConfig+0x60>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 020f 	and.w	r2, r3, #15
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	601a      	str	r2, [r3, #0]
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40023c00 	.word	0x40023c00

08004a38 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b0f      	cmp	r3, #15
 8004a56:	d904      	bls.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004a58:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8004a5c:	489d      	ldr	r0, [pc, #628]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004a5e:	f006 fb31 	bl	800b0c4 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d105      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d060      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d903      	bls.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b07      	cmp	r3, #7
 8004a88:	d904      	bls.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004a8a:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8004a8e:	4891      	ldr	r0, [pc, #580]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004a90:	f006 fb18 	bl	800b0c4 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2bbf      	cmp	r3, #191	; 0xbf
 8004a9a:	d904      	bls.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004aa4:	d904      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004aa6:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8004aaa:	488a      	ldr	r0, [pc, #552]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004aac:	f006 fb0a 	bl	800b0c4 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d903      	bls.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b3f      	cmp	r3, #63	; 0x3f
 8004abe:	d904      	bls.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004ac0:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8004ac4:	4883      	ldr	r0, [pc, #524]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004ac6:	f006 fafd 	bl	800b0c4 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004aca:	4b83      	ldr	r3, [pc, #524]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ad0:	f7fc fa28 	bl	8000f24 <HAL_GetTick>
 8004ad4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ad8:	f7fc fa24 	bl	8000f24 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e1ae      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004aea:	4b7c      	ldr	r3, [pc, #496]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	019b      	lsls	r3, r3, #6
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	071b      	lsls	r3, r3, #28
 8004b08:	4974      	ldr	r1, [pc, #464]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b10:	4b71      	ldr	r3, [pc, #452]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b16:	f7fc fa05 	bl	8000f24 <HAL_GetTick>
 8004b1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b1e:	f7fc fa01 	bl	8000f24 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e18b      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b30:	4b6a      	ldr	r3, [pc, #424]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f0      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8174 	beq.w	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b52:	f000 80a6 	beq.w	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b5e:	f000 80a0 	beq.w	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	4a5e      	ldr	r2, [pc, #376]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	f000 809a 	beq.w	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	4a5c      	ldr	r2, [pc, #368]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	f000 8094 	beq.w	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	4a5a      	ldr	r2, [pc, #360]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	f000 808e 	beq.w	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	4a58      	ldr	r2, [pc, #352]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	f000 8088 	beq.w	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	4a56      	ldr	r2, [pc, #344]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	f000 8082 	beq.w	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	4a54      	ldr	r2, [pc, #336]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d07c      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	4a52      	ldr	r2, [pc, #328]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d077      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	4a51      	ldr	r2, [pc, #324]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d072      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	4a4f      	ldr	r2, [pc, #316]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d06d      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	4a4e      	ldr	r2, [pc, #312]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d068      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	4a4c      	ldr	r2, [pc, #304]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d063      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	4a4b      	ldr	r2, [pc, #300]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d05e      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	4a49      	ldr	r2, [pc, #292]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d059      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	4a48      	ldr	r2, [pc, #288]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d054      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	4a46      	ldr	r2, [pc, #280]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d04f      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	4a45      	ldr	r2, [pc, #276]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d04a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	4a43      	ldr	r2, [pc, #268]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d045      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	4a42      	ldr	r2, [pc, #264]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d040      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	4a40      	ldr	r2, [pc, #256]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d03b      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	4a3f      	ldr	r2, [pc, #252]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d036      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	4a3d      	ldr	r2, [pc, #244]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d031      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	4a3c      	ldr	r2, [pc, #240]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d02c      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	4a3a      	ldr	r2, [pc, #232]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d027      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	4a39      	ldr	r2, [pc, #228]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d022      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	4a37      	ldr	r2, [pc, #220]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d01d      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	4a36      	ldr	r2, [pc, #216]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d018      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	4a34      	ldr	r2, [pc, #208]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	4a33      	ldr	r2, [pc, #204]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00e      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	4a31      	ldr	r2, [pc, #196]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d009      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	4a30      	ldr	r2, [pc, #192]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d004      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c98:	f640 2112 	movw	r1, #2578	; 0xa12
 8004c9c:	480d      	ldr	r0, [pc, #52]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c9e:	f006 fa11 	bl	800b0c4 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	4a0c      	ldr	r2, [pc, #48]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004cb2:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cbe:	4b26      	ldr	r3, [pc, #152]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a25      	ldr	r2, [pc, #148]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cca:	f7fc f92b 	bl	8000f24 <HAL_GetTick>
 8004cce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cd0:	e04d      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004cd2:	bf00      	nop
 8004cd4:	0800e234 	.word	0x0800e234
 8004cd8:	42470068 	.word	0x42470068
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	00020300 	.word	0x00020300
 8004ce4:	00030300 	.word	0x00030300
 8004ce8:	00040300 	.word	0x00040300
 8004cec:	00050300 	.word	0x00050300
 8004cf0:	00060300 	.word	0x00060300
 8004cf4:	00070300 	.word	0x00070300
 8004cf8:	00080300 	.word	0x00080300
 8004cfc:	00090300 	.word	0x00090300
 8004d00:	000a0300 	.word	0x000a0300
 8004d04:	000b0300 	.word	0x000b0300
 8004d08:	000c0300 	.word	0x000c0300
 8004d0c:	000d0300 	.word	0x000d0300
 8004d10:	000e0300 	.word	0x000e0300
 8004d14:	000f0300 	.word	0x000f0300
 8004d18:	00100300 	.word	0x00100300
 8004d1c:	00110300 	.word	0x00110300
 8004d20:	00120300 	.word	0x00120300
 8004d24:	00130300 	.word	0x00130300
 8004d28:	00140300 	.word	0x00140300
 8004d2c:	00150300 	.word	0x00150300
 8004d30:	00160300 	.word	0x00160300
 8004d34:	00170300 	.word	0x00170300
 8004d38:	00180300 	.word	0x00180300
 8004d3c:	00190300 	.word	0x00190300
 8004d40:	001a0300 	.word	0x001a0300
 8004d44:	001b0300 	.word	0x001b0300
 8004d48:	001c0300 	.word	0x001c0300
 8004d4c:	001d0300 	.word	0x001d0300
 8004d50:	001e0300 	.word	0x001e0300
 8004d54:	001f0300 	.word	0x001f0300
 8004d58:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d5c:	f7fc f8e2 	bl	8000f24 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e06c      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d6e:	4b38      	ldr	r3, [pc, #224]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d7a:	4b36      	ldr	r3, [pc, #216]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d82:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d02f      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d028      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d98:	4b2e      	ldr	r3, [pc, #184]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004da2:	4b2d      	ldr	r3, [pc, #180]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004da4:	2201      	movs	r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004da8:	4b2b      	ldr	r3, [pc, #172]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004dae:	4a29      	ldr	r2, [pc, #164]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004db4:	4b27      	ldr	r3, [pc, #156]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d114      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fc f8b0 	bl	8000f24 <HAL_GetTick>
 8004dc4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc6:	e00a      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc8:	f7fc f8ac 	bl	8000f24 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e034      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dde:	4b1d      	ldr	r3, [pc, #116]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0ee      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004df6:	d10d      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004df8:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e0c:	4911      	ldr	r1, [pc, #68]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	608b      	str	r3, [r1, #8]
 8004e12:	e005      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004e14:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	4a0e      	ldr	r2, [pc, #56]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e1e:	6093      	str	r3, [r2, #8]
 8004e20:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e2c:	4909      	ldr	r1, [pc, #36]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	7d1a      	ldrb	r2, [r3, #20]
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e44:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40007000 	.word	0x40007000
 8004e54:	40023800 	.word	0x40023800
 8004e58:	42470e40 	.word	0x42470e40
 8004e5c:	424711e0 	.word	0x424711e0

08004e60 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e0d6      	b.n	8005020 <HAL_RTC_Init+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	d007      	beq.n	8004e8a <HAL_RTC_Init+0x2a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_RTC_Init+0x2a>
 8004e82:	21ff      	movs	r1, #255	; 0xff
 8004e84:	4868      	ldr	r0, [pc, #416]	; (8005028 <HAL_RTC_Init+0x1c8>)
 8004e86:	f006 f91d 	bl	800b0c4 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e90:	d904      	bls.n	8004e9c <HAL_RTC_Init+0x3c>
 8004e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e96:	4864      	ldr	r0, [pc, #400]	; (8005028 <HAL_RTC_Init+0x1c8>)
 8004e98:	f006 f914 	bl	800b0c4 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea4:	d304      	bcc.n	8004eb0 <HAL_RTC_Init+0x50>
 8004ea6:	f240 1101 	movw	r1, #257	; 0x101
 8004eaa:	485f      	ldr	r0, [pc, #380]	; (8005028 <HAL_RTC_Init+0x1c8>)
 8004eac:	f006 f90a 	bl	800b0c4 <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d013      	beq.n	8004ee0 <HAL_RTC_Init+0x80>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ec0:	d00e      	beq.n	8004ee0 <HAL_RTC_Init+0x80>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eca:	d009      	beq.n	8004ee0 <HAL_RTC_Init+0x80>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ed4:	d004      	beq.n	8004ee0 <HAL_RTC_Init+0x80>
 8004ed6:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004eda:	4853      	ldr	r0, [pc, #332]	; (8005028 <HAL_RTC_Init+0x1c8>)
 8004edc:	f006 f8f2 	bl	800b0c4 <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d009      	beq.n	8004efc <HAL_RTC_Init+0x9c>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef0:	d004      	beq.n	8004efc <HAL_RTC_Init+0x9c>
 8004ef2:	f240 1103 	movw	r1, #259	; 0x103
 8004ef6:	484c      	ldr	r0, [pc, #304]	; (8005028 <HAL_RTC_Init+0x1c8>)
 8004ef8:	f006 f8e4 	bl	800b0c4 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d009      	beq.n	8004f18 <HAL_RTC_Init+0xb8>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f0c:	d004      	beq.n	8004f18 <HAL_RTC_Init+0xb8>
 8004f0e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004f12:	4845      	ldr	r0, [pc, #276]	; (8005028 <HAL_RTC_Init+0x1c8>)
 8004f14:	f006 f8d6 	bl	800b0c4 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	7f5b      	ldrb	r3, [r3, #29]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d105      	bne.n	8004f2e <HAL_RTC_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f006 f971 	bl	800b210 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2202      	movs	r2, #2
 8004f32:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	22ca      	movs	r2, #202	; 0xca
 8004f3a:	625a      	str	r2, [r3, #36]	; 0x24
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2253      	movs	r2, #83	; 0x53
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 ff01 	bl	8005d4c <RTC_EnterInitMode>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_RTC_Init+0x102>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	22ff      	movs	r2, #255	; 0xff
 8004f56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e05e      	b.n	8005020 <HAL_RTC_Init+0x1c0>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f74:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6899      	ldr	r1, [r3, #8]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	68d2      	ldr	r2, [r2, #12]
 8004f9c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6919      	ldr	r1, [r3, #16]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	041a      	lsls	r2, r3, #16
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fc0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10e      	bne.n	8004fee <HAL_RTC_Init+0x18e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fe93 	bl	8005cfc <HAL_RTC_WaitForSynchro>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d008      	beq.n	8004fee <HAL_RTC_Init+0x18e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	22ff      	movs	r2, #255	; 0xff
 8004fe2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e018      	b.n	8005020 <HAL_RTC_Init+0x1c0>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ffc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699a      	ldr	r2, [r3, #24]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	22ff      	movs	r2, #255	; 0xff
 8005016:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800501e:	2300      	movs	r3, #0
  }
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	0800e270 	.word	0x0800e270

0800502c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d007      	beq.n	8005052 <HAL_RTC_SetTime+0x26>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d004      	beq.n	8005052 <HAL_RTC_SetTime+0x26>
 8005048:	f240 21da 	movw	r1, #730	; 0x2da
 800504c:	48a4      	ldr	r0, [pc, #656]	; (80052e0 <HAL_RTC_SetTime+0x2b4>)
 800504e:	f006 f839 	bl	800b0c4 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800505a:	d00d      	beq.n	8005078 <HAL_RTC_SetTime+0x4c>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005064:	d008      	beq.n	8005078 <HAL_RTC_SetTime+0x4c>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d004      	beq.n	8005078 <HAL_RTC_SetTime+0x4c>
 800506e:	f240 21db 	movw	r1, #731	; 0x2db
 8005072:	489b      	ldr	r0, [pc, #620]	; (80052e0 <HAL_RTC_SetTime+0x2b4>)
 8005074:	f006 f826 	bl	800b0c4 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d009      	beq.n	8005094 <HAL_RTC_SetTime+0x68>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005088:	d004      	beq.n	8005094 <HAL_RTC_SetTime+0x68>
 800508a:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 800508e:	4894      	ldr	r0, [pc, #592]	; (80052e0 <HAL_RTC_SetTime+0x2b4>)
 8005090:	f006 f818 	bl	800b0c4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	7f1b      	ldrb	r3, [r3, #28]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_RTC_SetTime+0x74>
 800509c:	2302      	movs	r3, #2
 800509e:	e12c      	b.n	80052fa <HAL_RTC_SetTime+0x2ce>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2202      	movs	r2, #2
 80050aa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d15c      	bne.n	800516c <HAL_RTC_SetTime+0x140>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01a      	beq.n	80050f6 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <HAL_RTC_SetTime+0xa4>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b0c      	cmp	r3, #12
 80050ce:	d904      	bls.n	80050da <HAL_RTC_SetTime+0xae>
 80050d0:	f240 21e7 	movw	r1, #743	; 0x2e7
 80050d4:	4882      	ldr	r0, [pc, #520]	; (80052e0 <HAL_RTC_SetTime+0x2b4>)
 80050d6:	f005 fff5 	bl	800b0c4 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	78db      	ldrb	r3, [r3, #3]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d015      	beq.n	800510e <HAL_RTC_SetTime+0xe2>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	78db      	ldrb	r3, [r3, #3]
 80050e6:	2b40      	cmp	r3, #64	; 0x40
 80050e8:	d011      	beq.n	800510e <HAL_RTC_SetTime+0xe2>
 80050ea:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 80050ee:	487c      	ldr	r0, [pc, #496]	; (80052e0 <HAL_RTC_SetTime+0x2b4>)
 80050f0:	f005 ffe8 	bl	800b0c4 <assert_failed>
 80050f4:	e00b      	b.n	800510e <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2200      	movs	r2, #0
 80050fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b17      	cmp	r3, #23
 8005102:	d904      	bls.n	800510e <HAL_RTC_SetTime+0xe2>
 8005104:	f240 21ed 	movw	r1, #749	; 0x2ed
 8005108:	4875      	ldr	r0, [pc, #468]	; (80052e0 <HAL_RTC_SetTime+0x2b4>)
 800510a:	f005 ffdb 	bl	800b0c4 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	2b3b      	cmp	r3, #59	; 0x3b
 8005114:	d904      	bls.n	8005120 <HAL_RTC_SetTime+0xf4>
 8005116:	f240 21ef 	movw	r1, #751	; 0x2ef
 800511a:	4871      	ldr	r0, [pc, #452]	; (80052e0 <HAL_RTC_SetTime+0x2b4>)
 800511c:	f005 ffd2 	bl	800b0c4 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	789b      	ldrb	r3, [r3, #2]
 8005124:	2b3b      	cmp	r3, #59	; 0x3b
 8005126:	d904      	bls.n	8005132 <HAL_RTC_SetTime+0x106>
 8005128:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800512c:	486c      	ldr	r0, [pc, #432]	; (80052e0 <HAL_RTC_SetTime+0x2b4>)
 800512e:	f005 ffc9 	bl	800b0c4 <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fe34 	bl	8005da4 <RTC_ByteToBcd2>
 800513c:	4603      	mov	r3, r0
 800513e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	785b      	ldrb	r3, [r3, #1]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fe2d 	bl	8005da4 <RTC_ByteToBcd2>
 800514a:	4603      	mov	r3, r0
 800514c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800514e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	789b      	ldrb	r3, [r3, #2]
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fe25 	bl	8005da4 <RTC_ByteToBcd2>
 800515a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800515c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	78db      	ldrb	r3, [r3, #3]
 8005164:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	e062      	b.n	8005232 <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d022      	beq.n	80051c0 <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fe2e 	bl	8005de0 <RTC_Bcd2ToByte>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d007      	beq.n	800519a <HAL_RTC_SetTime+0x16e>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fe26 	bl	8005de0 <RTC_Bcd2ToByte>
 8005194:	4603      	mov	r3, r0
 8005196:	2b0c      	cmp	r3, #12
 8005198:	d904      	bls.n	80051a4 <HAL_RTC_SetTime+0x178>
 800519a:	f240 21fb 	movw	r1, #763	; 0x2fb
 800519e:	4850      	ldr	r0, [pc, #320]	; (80052e0 <HAL_RTC_SetTime+0x2b4>)
 80051a0:	f005 ff90 	bl	800b0c4 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	78db      	ldrb	r3, [r3, #3]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d019      	beq.n	80051e0 <HAL_RTC_SetTime+0x1b4>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	78db      	ldrb	r3, [r3, #3]
 80051b0:	2b40      	cmp	r3, #64	; 0x40
 80051b2:	d015      	beq.n	80051e0 <HAL_RTC_SetTime+0x1b4>
 80051b4:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 80051b8:	4849      	ldr	r0, [pc, #292]	; (80052e0 <HAL_RTC_SetTime+0x2b4>)
 80051ba:	f005 ff83 	bl	800b0c4 <assert_failed>
 80051be:	e00f      	b.n	80051e0 <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2200      	movs	r2, #0
 80051c4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fe08 	bl	8005de0 <RTC_Bcd2ToByte>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b17      	cmp	r3, #23
 80051d4:	d904      	bls.n	80051e0 <HAL_RTC_SetTime+0x1b4>
 80051d6:	f240 3101 	movw	r1, #769	; 0x301
 80051da:	4841      	ldr	r0, [pc, #260]	; (80052e0 <HAL_RTC_SetTime+0x2b4>)
 80051dc:	f005 ff72 	bl	800b0c4 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fdfb 	bl	8005de0 <RTC_Bcd2ToByte>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b3b      	cmp	r3, #59	; 0x3b
 80051ee:	d904      	bls.n	80051fa <HAL_RTC_SetTime+0x1ce>
 80051f0:	f240 3103 	movw	r1, #771	; 0x303
 80051f4:	483a      	ldr	r0, [pc, #232]	; (80052e0 <HAL_RTC_SetTime+0x2b4>)
 80051f6:	f005 ff65 	bl	800b0c4 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	789b      	ldrb	r3, [r3, #2]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fdee 	bl	8005de0 <RTC_Bcd2ToByte>
 8005204:	4603      	mov	r3, r0
 8005206:	2b3b      	cmp	r3, #59	; 0x3b
 8005208:	d904      	bls.n	8005214 <HAL_RTC_SetTime+0x1e8>
 800520a:	f44f 7141 	mov.w	r1, #772	; 0x304
 800520e:	4834      	ldr	r0, [pc, #208]	; (80052e0 <HAL_RTC_SetTime+0x2b4>)
 8005210:	f005 ff58 	bl	800b0c4 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005220:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005226:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	78db      	ldrb	r3, [r3, #3]
 800522c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	22ca      	movs	r2, #202	; 0xca
 8005238:	625a      	str	r2, [r3, #36]	; 0x24
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2253      	movs	r2, #83	; 0x53
 8005240:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 fd82 	bl	8005d4c <RTC_EnterInitMode>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00b      	beq.n	8005266 <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	22ff      	movs	r2, #255	; 0xff
 8005254:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2204      	movs	r2, #4
 800525a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e049      	b.n	80052fa <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005270:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005274:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005284:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6899      	ldr	r1, [r3, #8]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	431a      	orrs	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 0320 	and.w	r3, r3, #32
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d113      	bne.n	80052e4 <HAL_RTC_SetTime+0x2b8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 fd1d 	bl	8005cfc <HAL_RTC_WaitForSynchro>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00d      	beq.n	80052e4 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	22ff      	movs	r2, #255	; 0xff
 80052ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2204      	movs	r2, #4
 80052d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e00c      	b.n	80052fa <HAL_RTC_SetTime+0x2ce>
 80052e0:	0800e270 	.word	0x0800e270
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	22ff      	movs	r2, #255	; 0xff
 80052ea:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2201      	movs	r2, #1
 80052f0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80052f8:	2300      	movs	r3, #0
  }
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd90      	pop	{r4, r7, pc}
 8005302:	bf00      	nop

08005304 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005304:	b590      	push	{r4, r7, lr}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d007      	beq.n	800532a <HAL_RTC_SetDate+0x26>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d004      	beq.n	800532a <HAL_RTC_SetDate+0x26>
 8005320:	f240 318a 	movw	r1, #906	; 0x38a
 8005324:	488e      	ldr	r0, [pc, #568]	; (8005560 <HAL_RTC_SetDate+0x25c>)
 8005326:	f005 fecd 	bl	800b0c4 <assert_failed>

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	7f1b      	ldrb	r3, [r3, #28]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d101      	bne.n	8005336 <HAL_RTC_SetDate+0x32>
 8005332:	2302      	movs	r3, #2
 8005334:	e10f      	b.n	8005556 <HAL_RTC_SetDate+0x252>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2201      	movs	r2, #1
 800533a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2202      	movs	r2, #2
 8005340:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10e      	bne.n	8005366 <HAL_RTC_SetDate+0x62>
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	785b      	ldrb	r3, [r3, #1]
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	785b      	ldrb	r3, [r3, #1]
 8005358:	f023 0310 	bic.w	r3, r3, #16
 800535c:	b2db      	uxtb	r3, r3
 800535e:	330a      	adds	r3, #10
 8005360:	b2da      	uxtb	r2, r3
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d01c      	beq.n	80053a8 <HAL_RTC_SetDate+0xa4>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d018      	beq.n	80053a8 <HAL_RTC_SetDate+0xa4>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b03      	cmp	r3, #3
 800537c:	d014      	beq.n	80053a8 <HAL_RTC_SetDate+0xa4>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b04      	cmp	r3, #4
 8005384:	d010      	beq.n	80053a8 <HAL_RTC_SetDate+0xa4>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b05      	cmp	r3, #5
 800538c:	d00c      	beq.n	80053a8 <HAL_RTC_SetDate+0xa4>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b06      	cmp	r3, #6
 8005394:	d008      	beq.n	80053a8 <HAL_RTC_SetDate+0xa4>
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b07      	cmp	r3, #7
 800539c:	d004      	beq.n	80053a8 <HAL_RTC_SetDate+0xa4>
 800539e:	f240 3196 	movw	r1, #918	; 0x396
 80053a2:	486f      	ldr	r0, [pc, #444]	; (8005560 <HAL_RTC_SetDate+0x25c>)
 80053a4:	f005 fe8e 	bl	800b0c4 <assert_failed>

  if(Format == RTC_FORMAT_BIN)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d13f      	bne.n	800542e <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	78db      	ldrb	r3, [r3, #3]
 80053b2:	2b63      	cmp	r3, #99	; 0x63
 80053b4:	d904      	bls.n	80053c0 <HAL_RTC_SetDate+0xbc>
 80053b6:	f240 319a 	movw	r1, #922	; 0x39a
 80053ba:	4869      	ldr	r0, [pc, #420]	; (8005560 <HAL_RTC_SetDate+0x25c>)
 80053bc:	f005 fe82 	bl	800b0c4 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	785b      	ldrb	r3, [r3, #1]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_RTC_SetDate+0xcc>
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	785b      	ldrb	r3, [r3, #1]
 80053cc:	2b0c      	cmp	r3, #12
 80053ce:	d904      	bls.n	80053da <HAL_RTC_SetDate+0xd6>
 80053d0:	f240 319b 	movw	r1, #923	; 0x39b
 80053d4:	4862      	ldr	r0, [pc, #392]	; (8005560 <HAL_RTC_SetDate+0x25c>)
 80053d6:	f005 fe75 	bl	800b0c4 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	789b      	ldrb	r3, [r3, #2]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_RTC_SetDate+0xe6>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	789b      	ldrb	r3, [r3, #2]
 80053e6:	2b1f      	cmp	r3, #31
 80053e8:	d904      	bls.n	80053f4 <HAL_RTC_SetDate+0xf0>
 80053ea:	f44f 7167 	mov.w	r1, #924	; 0x39c
 80053ee:	485c      	ldr	r0, [pc, #368]	; (8005560 <HAL_RTC_SetDate+0x25c>)
 80053f0:	f005 fe68 	bl	800b0c4 <assert_failed>

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	78db      	ldrb	r3, [r3, #3]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fcd3 	bl	8005da4 <RTC_ByteToBcd2>
 80053fe:	4603      	mov	r3, r0
 8005400:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	785b      	ldrb	r3, [r3, #1]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fccc 	bl	8005da4 <RTC_ByteToBcd2>
 800540c:	4603      	mov	r3, r0
 800540e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005410:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	789b      	ldrb	r3, [r3, #2]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fcc4 	bl	8005da4 <RTC_ByteToBcd2>
 800541c:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800541e:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	e045      	b.n	80054ba <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	78db      	ldrb	r3, [r3, #3]
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fcd4 	bl	8005de0 <RTC_Bcd2ToByte>
 8005438:	4603      	mov	r3, r0
 800543a:	2b63      	cmp	r3, #99	; 0x63
 800543c:	d904      	bls.n	8005448 <HAL_RTC_SetDate+0x144>
 800543e:	f240 31a5 	movw	r1, #933	; 0x3a5
 8005442:	4847      	ldr	r0, [pc, #284]	; (8005560 <HAL_RTC_SetDate+0x25c>)
 8005444:	f005 fe3e 	bl	800b0c4 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	785b      	ldrb	r3, [r3, #1]
 800544c:	4618      	mov	r0, r3
 800544e:	f000 fcc7 	bl	8005de0 <RTC_Bcd2ToByte>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d007      	beq.n	8005468 <HAL_RTC_SetDate+0x164>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fcbf 	bl	8005de0 <RTC_Bcd2ToByte>
 8005462:	4603      	mov	r3, r0
 8005464:	2b0c      	cmp	r3, #12
 8005466:	d904      	bls.n	8005472 <HAL_RTC_SetDate+0x16e>
 8005468:	f240 31a6 	movw	r1, #934	; 0x3a6
 800546c:	483c      	ldr	r0, [pc, #240]	; (8005560 <HAL_RTC_SetDate+0x25c>)
 800546e:	f005 fe29 	bl	800b0c4 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	789b      	ldrb	r3, [r3, #2]
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fcb2 	bl	8005de0 <RTC_Bcd2ToByte>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <HAL_RTC_SetDate+0x18e>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	789b      	ldrb	r3, [r3, #2]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fcaa 	bl	8005de0 <RTC_Bcd2ToByte>
 800548c:	4603      	mov	r3, r0
 800548e:	2b1f      	cmp	r3, #31
 8005490:	d904      	bls.n	800549c <HAL_RTC_SetDate+0x198>
 8005492:	f240 31a7 	movw	r1, #935	; 0x3a7
 8005496:	4832      	ldr	r0, [pc, #200]	; (8005560 <HAL_RTC_SetDate+0x25c>)
 8005498:	f005 fe14 	bl	800b0c4 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	78db      	ldrb	r3, [r3, #3]
 80054a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	785b      	ldrb	r3, [r3, #1]
 80054a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80054a8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80054ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80054b6:	4313      	orrs	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	22ca      	movs	r2, #202	; 0xca
 80054c0:	625a      	str	r2, [r3, #36]	; 0x24
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2253      	movs	r2, #83	; 0x53
 80054c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 fc3e 	bl	8005d4c <RTC_EnterInitMode>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	22ff      	movs	r2, #255	; 0xff
 80054dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2204      	movs	r2, #4
 80054e2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e033      	b.n	8005556 <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80054fc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800550c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b00      	cmp	r3, #0
 800551a:	d111      	bne.n	8005540 <HAL_RTC_SetDate+0x23c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 fbed 	bl	8005cfc <HAL_RTC_WaitForSynchro>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00b      	beq.n	8005540 <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	22ff      	movs	r2, #255	; 0xff
 800552e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2204      	movs	r2, #4
 8005534:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e00a      	b.n	8005556 <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	22ff      	movs	r2, #255	; 0xff
 8005546:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2201      	movs	r2, #1
 800554c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005554:	2300      	movs	r3, #0
  }
}
 8005556:	4618      	mov	r0, r3
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	bd90      	pop	{r4, r7, pc}
 800555e:	bf00      	nop
 8005560:	0800e270 	.word	0x0800e270

08005564 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005564:	b590      	push	{r4, r7, lr}
 8005566:	b089      	sub	sp, #36	; 0x24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	61fb      	str	r3, [r7, #28]
 8005574:	2300      	movs	r3, #0
 8005576:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8005578:	4baa      	ldr	r3, [pc, #680]	; (8005824 <HAL_RTC_SetAlarm_IT+0x2c0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4aaa      	ldr	r2, [pc, #680]	; (8005828 <HAL_RTC_SetAlarm_IT+0x2c4>)
 800557e:	fba2 2303 	umull	r2, r3, r2, r3
 8005582:	0adb      	lsrs	r3, r3, #11
 8005584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005588:	fb02 f303 	mul.w	r3, r2, r3
 800558c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <HAL_RTC_SetAlarm_IT+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d004      	beq.n	80055a4 <HAL_RTC_SetAlarm_IT+0x40>
 800559a:	f240 41e7 	movw	r1, #1255	; 0x4e7
 800559e:	48a3      	ldr	r0, [pc, #652]	; (800582c <HAL_RTC_SetAlarm_IT+0x2c8>)
 80055a0:	f005 fd90 	bl	800b0c4 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ac:	d009      	beq.n	80055c2 <HAL_RTC_SetAlarm_IT+0x5e>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055b6:	d004      	beq.n	80055c2 <HAL_RTC_SetAlarm_IT+0x5e>
 80055b8:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
 80055bc:	489b      	ldr	r0, [pc, #620]	; (800582c <HAL_RTC_SetAlarm_IT+0x2c8>)
 80055be:	f005 fd81 	bl	800b0c4 <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d004      	beq.n	80055d8 <HAL_RTC_SetAlarm_IT+0x74>
 80055ce:	f240 41e9 	movw	r1, #1257	; 0x4e9
 80055d2:	4896      	ldr	r0, [pc, #600]	; (800582c <HAL_RTC_SetAlarm_IT+0x2c8>)
 80055d4:	f005 fd76 	bl	800b0c4 <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d009      	beq.n	80055f4 <HAL_RTC_SetAlarm_IT+0x90>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e8:	d004      	beq.n	80055f4 <HAL_RTC_SetAlarm_IT+0x90>
 80055ea:	f240 41ea 	movw	r1, #1258	; 0x4ea
 80055ee:	488f      	ldr	r0, [pc, #572]	; (800582c <HAL_RTC_SetAlarm_IT+0x2c8>)
 80055f0:	f005 fd68 	bl	800b0c4 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fc:	d304      	bcc.n	8005608 <HAL_RTC_SetAlarm_IT+0xa4>
 80055fe:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8005602:	488a      	ldr	r0, [pc, #552]	; (800582c <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005604:	f005 fd5e 	bl	800b0c4 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d04f      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x14c>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005618:	d04a      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x14c>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005622:	d045      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x14c>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800562c:	d040      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x14c>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005636:	d03b      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x14c>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005640:	d036      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x14c>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800564a:	d031      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x14c>
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8005654:	d02c      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x14c>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800565e:	d027      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x14c>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8005668:	d022      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x14c>
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8005672:	d01d      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x14c>
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 800567c:	d018      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x14c>
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005686:	d013      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x14c>
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8005690:	d00e      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x14c>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800569a:	d009      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x14c>
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80056a4:	d004      	beq.n	80056b0 <HAL_RTC_SetAlarm_IT+0x14c>
 80056a6:	f240 41ec 	movw	r1, #1260	; 0x4ec
 80056aa:	4860      	ldr	r0, [pc, #384]	; (800582c <HAL_RTC_SetAlarm_IT+0x2c8>)
 80056ac:	f005 fd0a 	bl	800b0c4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	7f1b      	ldrb	r3, [r3, #28]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_RTC_SetAlarm_IT+0x158>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e237      	b.n	8005b2c <HAL_RTC_SetAlarm_IT+0x5c8>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2201      	movs	r2, #1
 80056c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2202      	movs	r2, #2
 80056c6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f040 80b0 	bne.w	8005830 <HAL_RTC_SetAlarm_IT+0x2cc>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d01a      	beq.n	8005714 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_RTC_SetAlarm_IT+0x18a>
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b0c      	cmp	r3, #12
 80056ec:	d904      	bls.n	80056f8 <HAL_RTC_SetAlarm_IT+0x194>
 80056ee:	f240 41f7 	movw	r1, #1271	; 0x4f7
 80056f2:	484e      	ldr	r0, [pc, #312]	; (800582c <HAL_RTC_SetAlarm_IT+0x2c8>)
 80056f4:	f005 fce6 	bl	800b0c4 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	78db      	ldrb	r3, [r3, #3]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d015      	beq.n	800572c <HAL_RTC_SetAlarm_IT+0x1c8>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	78db      	ldrb	r3, [r3, #3]
 8005704:	2b40      	cmp	r3, #64	; 0x40
 8005706:	d011      	beq.n	800572c <HAL_RTC_SetAlarm_IT+0x1c8>
 8005708:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 800570c:	4847      	ldr	r0, [pc, #284]	; (800582c <HAL_RTC_SetAlarm_IT+0x2c8>)
 800570e:	f005 fcd9 	bl	800b0c4 <assert_failed>
 8005712:	e00b      	b.n	800572c <HAL_RTC_SetAlarm_IT+0x1c8>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2200      	movs	r2, #0
 8005718:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b17      	cmp	r3, #23
 8005720:	d904      	bls.n	800572c <HAL_RTC_SetAlarm_IT+0x1c8>
 8005722:	f240 41fd 	movw	r1, #1277	; 0x4fd
 8005726:	4841      	ldr	r0, [pc, #260]	; (800582c <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005728:	f005 fccc 	bl	800b0c4 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	2b3b      	cmp	r3, #59	; 0x3b
 8005732:	d904      	bls.n	800573e <HAL_RTC_SetAlarm_IT+0x1da>
 8005734:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8005738:	483c      	ldr	r0, [pc, #240]	; (800582c <HAL_RTC_SetAlarm_IT+0x2c8>)
 800573a:	f005 fcc3 	bl	800b0c4 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	789b      	ldrb	r3, [r3, #2]
 8005742:	2b3b      	cmp	r3, #59	; 0x3b
 8005744:	d904      	bls.n	8005750 <HAL_RTC_SetAlarm_IT+0x1ec>
 8005746:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800574a:	4838      	ldr	r0, [pc, #224]	; (800582c <HAL_RTC_SetAlarm_IT+0x2c8>)
 800574c:	f005 fcba 	bl	800b0c4 <assert_failed>

    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10f      	bne.n	8005778 <HAL_RTC_SetAlarm_IT+0x214>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d004      	beq.n	800576c <HAL_RTC_SetAlarm_IT+0x208>
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005768:	2b1f      	cmp	r3, #31
 800576a:	d92d      	bls.n	80057c8 <HAL_RTC_SetAlarm_IT+0x264>
 800576c:	f240 5104 	movw	r1, #1284	; 0x504
 8005770:	482e      	ldr	r0, [pc, #184]	; (800582c <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005772:	f005 fca7 	bl	800b0c4 <assert_failed>
 8005776:	e027      	b.n	80057c8 <HAL_RTC_SetAlarm_IT+0x264>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d022      	beq.n	80057c8 <HAL_RTC_SetAlarm_IT+0x264>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005788:	2b02      	cmp	r3, #2
 800578a:	d01d      	beq.n	80057c8 <HAL_RTC_SetAlarm_IT+0x264>
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005792:	2b03      	cmp	r3, #3
 8005794:	d018      	beq.n	80057c8 <HAL_RTC_SetAlarm_IT+0x264>
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800579c:	2b04      	cmp	r3, #4
 800579e:	d013      	beq.n	80057c8 <HAL_RTC_SetAlarm_IT+0x264>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057a6:	2b05      	cmp	r3, #5
 80057a8:	d00e      	beq.n	80057c8 <HAL_RTC_SetAlarm_IT+0x264>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057b0:	2b06      	cmp	r3, #6
 80057b2:	d009      	beq.n	80057c8 <HAL_RTC_SetAlarm_IT+0x264>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057ba:	2b07      	cmp	r3, #7
 80057bc:	d004      	beq.n	80057c8 <HAL_RTC_SetAlarm_IT+0x264>
 80057be:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 80057c2:	481a      	ldr	r0, [pc, #104]	; (800582c <HAL_RTC_SetAlarm_IT+0x2c8>)
 80057c4:	f005 fc7e 	bl	800b0c4 <assert_failed>
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fae9 	bl	8005da4 <RTC_ByteToBcd2>
 80057d2:	4603      	mov	r3, r0
 80057d4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fae2 	bl	8005da4 <RTC_ByteToBcd2>
 80057e0:	4603      	mov	r3, r0
 80057e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80057e4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	789b      	ldrb	r3, [r3, #2]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fada 	bl	8005da4 <RTC_ByteToBcd2>
 80057f0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80057f2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	78db      	ldrb	r3, [r3, #3]
 80057fa:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80057fc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 facc 	bl	8005da4 <RTC_ByteToBcd2>
 800580c:	4603      	mov	r3, r0
 800580e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005810:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005818:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800581e:	4313      	orrs	r3, r2
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	e0d3      	b.n	80059cc <HAL_RTC_SetAlarm_IT+0x468>
 8005824:	20000088 	.word	0x20000088
 8005828:	10624dd3 	.word	0x10624dd3
 800582c:	0800e270 	.word	0x0800e270
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d022      	beq.n	8005884 <HAL_RTC_SetAlarm_IT+0x320>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 facc 	bl	8005de0 <RTC_Bcd2ToByte>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d007      	beq.n	800585e <HAL_RTC_SetAlarm_IT+0x2fa>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fac4 	bl	8005de0 <RTC_Bcd2ToByte>
 8005858:	4603      	mov	r3, r0
 800585a:	2b0c      	cmp	r3, #12
 800585c:	d904      	bls.n	8005868 <HAL_RTC_SetAlarm_IT+0x304>
 800585e:	f240 5116 	movw	r1, #1302	; 0x516
 8005862:	4896      	ldr	r0, [pc, #600]	; (8005abc <HAL_RTC_SetAlarm_IT+0x558>)
 8005864:	f005 fc2e 	bl	800b0c4 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	78db      	ldrb	r3, [r3, #3]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d019      	beq.n	80058a4 <HAL_RTC_SetAlarm_IT+0x340>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	78db      	ldrb	r3, [r3, #3]
 8005874:	2b40      	cmp	r3, #64	; 0x40
 8005876:	d015      	beq.n	80058a4 <HAL_RTC_SetAlarm_IT+0x340>
 8005878:	f240 5117 	movw	r1, #1303	; 0x517
 800587c:	488f      	ldr	r0, [pc, #572]	; (8005abc <HAL_RTC_SetAlarm_IT+0x558>)
 800587e:	f005 fc21 	bl	800b0c4 <assert_failed>
 8005882:	e00f      	b.n	80058a4 <HAL_RTC_SetAlarm_IT+0x340>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2200      	movs	r2, #0
 8005888:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f000 faa6 	bl	8005de0 <RTC_Bcd2ToByte>
 8005894:	4603      	mov	r3, r0
 8005896:	2b17      	cmp	r3, #23
 8005898:	d904      	bls.n	80058a4 <HAL_RTC_SetAlarm_IT+0x340>
 800589a:	f240 511c 	movw	r1, #1308	; 0x51c
 800589e:	4887      	ldr	r0, [pc, #540]	; (8005abc <HAL_RTC_SetAlarm_IT+0x558>)
 80058a0:	f005 fc10 	bl	800b0c4 <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	785b      	ldrb	r3, [r3, #1]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fa99 	bl	8005de0 <RTC_Bcd2ToByte>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b3b      	cmp	r3, #59	; 0x3b
 80058b2:	d904      	bls.n	80058be <HAL_RTC_SetAlarm_IT+0x35a>
 80058b4:	f240 511f 	movw	r1, #1311	; 0x51f
 80058b8:	4880      	ldr	r0, [pc, #512]	; (8005abc <HAL_RTC_SetAlarm_IT+0x558>)
 80058ba:	f005 fc03 	bl	800b0c4 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	789b      	ldrb	r3, [r3, #2]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fa8c 	bl	8005de0 <RTC_Bcd2ToByte>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b3b      	cmp	r3, #59	; 0x3b
 80058cc:	d904      	bls.n	80058d8 <HAL_RTC_SetAlarm_IT+0x374>
 80058ce:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80058d2:	487a      	ldr	r0, [pc, #488]	; (8005abc <HAL_RTC_SetAlarm_IT+0x558>)
 80058d4:	f005 fbf6 	bl	800b0c4 <assert_failed>

    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d117      	bne.n	8005910 <HAL_RTC_SetAlarm_IT+0x3ac>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fa7a 	bl	8005de0 <RTC_Bcd2ToByte>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <HAL_RTC_SetAlarm_IT+0x3a0>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fa71 	bl	8005de0 <RTC_Bcd2ToByte>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b1f      	cmp	r3, #31
 8005902:	d949      	bls.n	8005998 <HAL_RTC_SetAlarm_IT+0x434>
 8005904:	f240 5124 	movw	r1, #1316	; 0x524
 8005908:	486c      	ldr	r0, [pc, #432]	; (8005abc <HAL_RTC_SetAlarm_IT+0x558>)
 800590a:	f005 fbdb 	bl	800b0c4 <assert_failed>
 800590e:	e043      	b.n	8005998 <HAL_RTC_SetAlarm_IT+0x434>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fa62 	bl	8005de0 <RTC_Bcd2ToByte>
 800591c:	4603      	mov	r3, r0
 800591e:	2b01      	cmp	r3, #1
 8005920:	d03a      	beq.n	8005998 <HAL_RTC_SetAlarm_IT+0x434>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fa59 	bl	8005de0 <RTC_Bcd2ToByte>
 800592e:	4603      	mov	r3, r0
 8005930:	2b02      	cmp	r3, #2
 8005932:	d031      	beq.n	8005998 <HAL_RTC_SetAlarm_IT+0x434>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fa50 	bl	8005de0 <RTC_Bcd2ToByte>
 8005940:	4603      	mov	r3, r0
 8005942:	2b03      	cmp	r3, #3
 8005944:	d028      	beq.n	8005998 <HAL_RTC_SetAlarm_IT+0x434>
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fa47 	bl	8005de0 <RTC_Bcd2ToByte>
 8005952:	4603      	mov	r3, r0
 8005954:	2b04      	cmp	r3, #4
 8005956:	d01f      	beq.n	8005998 <HAL_RTC_SetAlarm_IT+0x434>
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fa3e 	bl	8005de0 <RTC_Bcd2ToByte>
 8005964:	4603      	mov	r3, r0
 8005966:	2b05      	cmp	r3, #5
 8005968:	d016      	beq.n	8005998 <HAL_RTC_SetAlarm_IT+0x434>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fa35 	bl	8005de0 <RTC_Bcd2ToByte>
 8005976:	4603      	mov	r3, r0
 8005978:	2b06      	cmp	r3, #6
 800597a:	d00d      	beq.n	8005998 <HAL_RTC_SetAlarm_IT+0x434>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fa2c 	bl	8005de0 <RTC_Bcd2ToByte>
 8005988:	4603      	mov	r3, r0
 800598a:	2b07      	cmp	r3, #7
 800598c:	d004      	beq.n	8005998 <HAL_RTC_SetAlarm_IT+0x434>
 800598e:	f44f 61a5 	mov.w	r1, #1320	; 0x528
 8005992:	484a      	ldr	r0, [pc, #296]	; (8005abc <HAL_RTC_SetAlarm_IT+0x558>)
 8005994:	f005 fb96 	bl	800b0c4 <assert_failed>
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80059a4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80059aa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	78db      	ldrb	r3, [r3, #3]
 80059b0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80059b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059ba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80059bc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80059c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80059c8:	4313      	orrs	r3, r2
 80059ca:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	22ca      	movs	r2, #202	; 0xca
 80059de:	625a      	str	r2, [r3, #36]	; 0x24
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2253      	movs	r2, #83	; 0x53
 80059e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f0:	d141      	bne.n	8005a76 <HAL_RTC_SetAlarm_IT+0x512>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a00:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005a12:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	1e5a      	subs	r2, r3, #1
 8005a18:	617a      	str	r2, [r7, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10b      	bne.n	8005a36 <HAL_RTC_SetAlarm_IT+0x4d2>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	22ff      	movs	r2, #255	; 0xff
 8005a24:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2203      	movs	r2, #3
 8005a2a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e07a      	b.n	8005b2c <HAL_RTC_SetAlarm_IT+0x5c8>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0e7      	beq.n	8005a14 <HAL_RTC_SetAlarm_IT+0x4b0>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a62:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a72:	609a      	str	r2, [r3, #8]
 8005a74:	e043      	b.n	8005afe <HAL_RTC_SetAlarm_IT+0x59a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a84:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005a96:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	1e5a      	subs	r2, r3, #1
 8005a9c:	617a      	str	r2, [r7, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10e      	bne.n	8005ac0 <HAL_RTC_SetAlarm_IT+0x55c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	22ff      	movs	r2, #255	; 0xff
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2203      	movs	r2, #3
 8005aae:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e038      	b.n	8005b2c <HAL_RTC_SetAlarm_IT+0x5c8>
 8005aba:	bf00      	nop
 8005abc:	0800e270 	.word	0x0800e270
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0e4      	beq.n	8005a98 <HAL_RTC_SetAlarm_IT+0x534>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69fa      	ldr	r2, [r7, #28]
 8005ad4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aec:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005afc:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005afe:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a0c      	ldr	r2, [pc, #48]	; (8005b34 <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b08:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	4a09      	ldr	r2, [pc, #36]	; (8005b34 <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b14:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	22ff      	movs	r2, #255	; 0xff
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3724      	adds	r7, #36	; 0x24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd90      	pop	{r4, r7, pc}
 8005b34:	40013c00 	.word	0x40013c00

08005b38 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4c:	d008      	beq.n	8005b60 <HAL_RTC_DeactivateAlarm+0x28>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b54:	d004      	beq.n	8005b60 <HAL_RTC_DeactivateAlarm+0x28>
 8005b56:	f240 519d 	movw	r1, #1437	; 0x59d
 8005b5a:	4844      	ldr	r0, [pc, #272]	; (8005c6c <HAL_RTC_DeactivateAlarm+0x134>)
 8005b5c:	f005 fab2 	bl	800b0c4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	7f1b      	ldrb	r3, [r3, #28]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_RTC_DeactivateAlarm+0x34>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e07b      	b.n	8005c64 <HAL_RTC_DeactivateAlarm+0x12c>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2202      	movs	r2, #2
 8005b76:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	22ca      	movs	r2, #202	; 0xca
 8005b7e:	625a      	str	r2, [r3, #36]	; 0x24
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2253      	movs	r2, #83	; 0x53
 8005b86:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8e:	d12f      	bne.n	8005bf0 <HAL_RTC_DeactivateAlarm+0xb8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b9e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bae:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bb0:	f7fb f9b8 	bl	8000f24 <HAL_GetTick>
 8005bb4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005bb6:	e013      	b.n	8005be0 <HAL_RTC_DeactivateAlarm+0xa8>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005bb8:	f7fb f9b4 	bl	8000f24 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bc6:	d90b      	bls.n	8005be0 <HAL_RTC_DeactivateAlarm+0xa8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	22ff      	movs	r2, #255	; 0xff
 8005bce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2203      	movs	r2, #3
 8005bd4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e041      	b.n	8005c64 <HAL_RTC_DeactivateAlarm+0x12c>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0e4      	beq.n	8005bb8 <HAL_RTC_DeactivateAlarm+0x80>
 8005bee:	e02e      	b.n	8005c4e <HAL_RTC_DeactivateAlarm+0x116>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005bfe:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c0e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c10:	f7fb f988 	bl	8000f24 <HAL_GetTick>
 8005c14:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005c16:	e013      	b.n	8005c40 <HAL_RTC_DeactivateAlarm+0x108>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c18:	f7fb f984 	bl	8000f24 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c26:	d90b      	bls.n	8005c40 <HAL_RTC_DeactivateAlarm+0x108>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	22ff      	movs	r2, #255	; 0xff
 8005c2e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2203      	movs	r2, #3
 8005c34:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e011      	b.n	8005c64 <HAL_RTC_DeactivateAlarm+0x12c>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0e4      	beq.n	8005c18 <HAL_RTC_DeactivateAlarm+0xe0>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	22ff      	movs	r2, #255	; 0xff
 8005c54:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	0800e270 	.word	0x0800e270

08005c70 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d012      	beq.n	8005cac <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00b      	beq.n	8005cac <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f005 fe25 	bl	800b8e4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005caa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d012      	beq.n	8005ce0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fa0d 	bl	80060e8 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005cde:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005ce0:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005ce2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ce6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	775a      	strb	r2, [r3, #29]
}
 8005cee:	bf00      	nop
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	40013c00 	.word	0x40013c00

08005cfc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d16:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d18:	f7fb f904 	bl	8000f24 <HAL_GetTick>
 8005d1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005d1e:	e009      	b.n	8005d34 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d20:	f7fb f900 	bl	8000f24 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d2e:	d901      	bls.n	8005d34 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e007      	b.n	8005d44 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0ee      	beq.n	8005d20 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d119      	bne.n	8005d9a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d70:	f7fb f8d8 	bl	8000f24 <HAL_GetTick>
 8005d74:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d76:	e009      	b.n	8005d8c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d78:	f7fb f8d4 	bl	8000f24 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d86:	d901      	bls.n	8005d8c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e007      	b.n	8005d9c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0ee      	beq.n	8005d78 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	4603      	mov	r3, r0
 8005dac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005db2:	e005      	b.n	8005dc0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005dba:	79fb      	ldrb	r3, [r7, #7]
 8005dbc:	3b0a      	subs	r3, #10
 8005dbe:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	2b09      	cmp	r3, #9
 8005dc4:	d8f6      	bhi.n	8005db4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	b2db      	uxtb	r3, r3
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	091b      	lsrs	r3, r3, #4
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	461a      	mov	r2, r3
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	b2db      	uxtb	r3, r3
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d013      	beq.n	8005e56 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d010      	beq.n	8005e56 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d00d      	beq.n	8005e56 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d00a      	beq.n	8005e56 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d007      	beq.n	8005e56 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b06      	cmp	r3, #6
 8005e4a:	d004      	beq.n	8005e56 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005e4c:	f240 314d 	movw	r1, #845	; 0x34d
 8005e50:	485e      	ldr	r0, [pc, #376]	; (8005fcc <HAL_RTCEx_SetWakeUpTimer_IT+0x1b0>)
 8005e52:	f005 f937 	bl	800b0c4 <assert_failed>
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5c:	d304      	bcc.n	8005e68 <HAL_RTCEx_SetWakeUpTimer_IT+0x4c>
 8005e5e:	f240 314e 	movw	r1, #846	; 0x34e
 8005e62:	485a      	ldr	r0, [pc, #360]	; (8005fcc <HAL_RTCEx_SetWakeUpTimer_IT+0x1b0>)
 8005e64:	f005 f92e 	bl	800b0c4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	7f1b      	ldrb	r3, [r3, #28]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e0a6      	b.n	8005fc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	22ca      	movs	r2, #202	; 0xca
 8005e86:	625a      	str	r2, [r3, #36]	; 0x24
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2253      	movs	r2, #83	; 0x53
 8005e8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d022      	beq.n	8005ee4 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8005e9e:	4b4c      	ldr	r3, [pc, #304]	; (8005fd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a4c      	ldr	r2, [pc, #304]	; (8005fd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b8>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	0adb      	lsrs	r3, r3, #11
 8005eaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005eae:	fb02 f303 	mul.w	r3, r2, r3
 8005eb2:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	1e5a      	subs	r2, r3, #1
 8005eb8:	617a      	str	r2, [r7, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10b      	bne.n	8005ed6 <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	22ff      	movs	r2, #255	; 0xff
 8005ec4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2203      	movs	r2, #3
 8005eca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e075      	b.n	8005fc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e7      	bne.n	8005eb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x98>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef2:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8005ef4:	4b36      	ldr	r3, [pc, #216]	; (8005fd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a36      	ldr	r2, [pc, #216]	; (8005fd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1b8>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	0adb      	lsrs	r3, r3, #11
 8005f00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f04:	fb02 f303 	mul.w	r3, r2, r3
 8005f08:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	1e5a      	subs	r2, r3, #1
 8005f0e:	617a      	str	r2, [r7, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10b      	bne.n	8005f2c <HAL_RTCEx_SetWakeUpTimer_IT+0x110>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	22ff      	movs	r2, #255	; 0xff
 8005f1a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2203      	movs	r2, #3
 8005f20:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e04a      	b.n	8005fc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a6>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0e7      	beq.n	8005f0a <HAL_RTCEx_SetWakeUpTimer_IT+0xee>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0207 	bic.w	r2, r2, #7
 8005f50:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6899      	ldr	r1, [r3, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005f62:	4b1d      	ldr	r3, [pc, #116]	; (8005fd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a1c      	ldr	r2, [pc, #112]	; (8005fd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 8005f68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f6c:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8005f6e:	4b1a      	ldr	r3, [pc, #104]	; (8005fd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	4a19      	ldr	r2, [pc, #100]	; (8005fd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1bc>)
 8005f74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f78:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005f8a:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f9a:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005faa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	22ff      	movs	r2, #255	; 0xff
 8005fb2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	0800e2a8 	.word	0x0800e2a8
 8005fd0:	20000088 	.word	0x20000088
 8005fd4:	10624dd3 	.word	0x10624dd3
 8005fd8:	40013c00 	.word	0x40013c00

08005fdc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	7f1b      	ldrb	r3, [r3, #28]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d101      	bne.n	8005ff4 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e047      	b.n	8006084 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	22ca      	movs	r2, #202	; 0xca
 8006006:	625a      	str	r2, [r3, #36]	; 0x24
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2253      	movs	r2, #83	; 0x53
 800600e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800601e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800602e:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006030:	f7fa ff78 	bl	8000f24 <HAL_GetTick>
 8006034:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006036:	e013      	b.n	8006060 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006038:	f7fa ff74 	bl	8000f24 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006046:	d90b      	bls.n	8006060 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	22ff      	movs	r2, #255	; 0xff
 800604e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2203      	movs	r2, #3
 8006054:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e011      	b.n	8006084 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0e4      	beq.n	8006038 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	22ff      	movs	r2, #255	; 0xff
 8006074:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00b      	beq.n	80060ba <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f816 	bl	80060d4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80060b8:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80060ba:	4b05      	ldr	r3, [pc, #20]	; (80060d0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 80060bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80060c0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	775a      	strb	r2, [r3, #29]
}
 80060c8:	bf00      	nop
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	40013c00 	.word	0x40013c00

080060d4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e083      	b.n	8006216 <HAL_TIM_Base_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a43      	ldr	r2, [pc, #268]	; (8006220 <HAL_TIM_Base_Init+0x124>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d027      	beq.n	8006168 <HAL_TIM_Base_Init+0x6c>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006120:	d022      	beq.n	8006168 <HAL_TIM_Base_Init+0x6c>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a3f      	ldr	r2, [pc, #252]	; (8006224 <HAL_TIM_Base_Init+0x128>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d01d      	beq.n	8006168 <HAL_TIM_Base_Init+0x6c>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a3d      	ldr	r2, [pc, #244]	; (8006228 <HAL_TIM_Base_Init+0x12c>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d018      	beq.n	8006168 <HAL_TIM_Base_Init+0x6c>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a3c      	ldr	r2, [pc, #240]	; (800622c <HAL_TIM_Base_Init+0x130>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d013      	beq.n	8006168 <HAL_TIM_Base_Init+0x6c>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a3a      	ldr	r2, [pc, #232]	; (8006230 <HAL_TIM_Base_Init+0x134>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00e      	beq.n	8006168 <HAL_TIM_Base_Init+0x6c>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a39      	ldr	r2, [pc, #228]	; (8006234 <HAL_TIM_Base_Init+0x138>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d009      	beq.n	8006168 <HAL_TIM_Base_Init+0x6c>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a37      	ldr	r2, [pc, #220]	; (8006238 <HAL_TIM_Base_Init+0x13c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d004      	beq.n	8006168 <HAL_TIM_Base_Init+0x6c>
 800615e:	f44f 7189 	mov.w	r1, #274	; 0x112
 8006162:	4836      	ldr	r0, [pc, #216]	; (800623c <HAL_TIM_Base_Init+0x140>)
 8006164:	f004 ffae 	bl	800b0c4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d014      	beq.n	800619a <HAL_TIM_Base_Init+0x9e>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	2b10      	cmp	r3, #16
 8006176:	d010      	beq.n	800619a <HAL_TIM_Base_Init+0x9e>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	2b20      	cmp	r3, #32
 800617e:	d00c      	beq.n	800619a <HAL_TIM_Base_Init+0x9e>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	2b40      	cmp	r3, #64	; 0x40
 8006186:	d008      	beq.n	800619a <HAL_TIM_Base_Init+0x9e>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b60      	cmp	r3, #96	; 0x60
 800618e:	d004      	beq.n	800619a <HAL_TIM_Base_Init+0x9e>
 8006190:	f240 1113 	movw	r1, #275	; 0x113
 8006194:	4829      	ldr	r0, [pc, #164]	; (800623c <HAL_TIM_Base_Init+0x140>)
 8006196:	f004 ff95 	bl	800b0c4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00e      	beq.n	80061c0 <HAL_TIM_Base_Init+0xc4>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061aa:	d009      	beq.n	80061c0 <HAL_TIM_Base_Init+0xc4>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b4:	d004      	beq.n	80061c0 <HAL_TIM_Base_Init+0xc4>
 80061b6:	f44f 718a 	mov.w	r1, #276	; 0x114
 80061ba:	4820      	ldr	r0, [pc, #128]	; (800623c <HAL_TIM_Base_Init+0x140>)
 80061bc:	f004 ff82 	bl	800b0c4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d008      	beq.n	80061da <HAL_TIM_Base_Init+0xde>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	2b80      	cmp	r3, #128	; 0x80
 80061ce:	d004      	beq.n	80061da <HAL_TIM_Base_Init+0xde>
 80061d0:	f240 1115 	movw	r1, #277	; 0x115
 80061d4:	4819      	ldr	r0, [pc, #100]	; (800623c <HAL_TIM_Base_Init+0x140>)
 80061d6:	f004 ff75 	bl	800b0c4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f005 fc24 	bl	800ba3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3304      	adds	r3, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4610      	mov	r0, r2
 8006208:	f001 f87c 	bl	8007304 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	40010000 	.word	0x40010000
 8006224:	40000400 	.word	0x40000400
 8006228:	40000800 	.word	0x40000800
 800622c:	40000c00 	.word	0x40000c00
 8006230:	40014000 	.word	0x40014000
 8006234:	40014400 	.word	0x40014400
 8006238:	40014800 	.word	0x40014800
 800623c:	0800e2e4 	.word	0x0800e2e4

08006240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a24      	ldr	r2, [pc, #144]	; (80062e0 <HAL_TIM_Base_Start_IT+0xa0>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d027      	beq.n	80062a2 <HAL_TIM_Base_Start_IT+0x62>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625a:	d022      	beq.n	80062a2 <HAL_TIM_Base_Start_IT+0x62>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a20      	ldr	r2, [pc, #128]	; (80062e4 <HAL_TIM_Base_Start_IT+0xa4>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01d      	beq.n	80062a2 <HAL_TIM_Base_Start_IT+0x62>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1f      	ldr	r2, [pc, #124]	; (80062e8 <HAL_TIM_Base_Start_IT+0xa8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d018      	beq.n	80062a2 <HAL_TIM_Base_Start_IT+0x62>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a1d      	ldr	r2, [pc, #116]	; (80062ec <HAL_TIM_Base_Start_IT+0xac>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <HAL_TIM_Base_Start_IT+0x62>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a1c      	ldr	r2, [pc, #112]	; (80062f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00e      	beq.n	80062a2 <HAL_TIM_Base_Start_IT+0x62>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a1a      	ldr	r2, [pc, #104]	; (80062f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_TIM_Base_Start_IT+0x62>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a19      	ldr	r2, [pc, #100]	; (80062f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d004      	beq.n	80062a2 <HAL_TIM_Base_Start_IT+0x62>
 8006298:	f240 11b9 	movw	r1, #441	; 0x1b9
 800629c:	4817      	ldr	r0, [pc, #92]	; (80062fc <HAL_TIM_Base_Start_IT+0xbc>)
 800629e:	f004 ff11 	bl	800b0c4 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 0201 	orr.w	r2, r2, #1
 80062b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b06      	cmp	r3, #6
 80062c2:	d007      	beq.n	80062d4 <HAL_TIM_Base_Start_IT+0x94>
  {
    __HAL_TIM_ENABLE(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40010000 	.word	0x40010000
 80062e4:	40000400 	.word	0x40000400
 80062e8:	40000800 	.word	0x40000800
 80062ec:	40000c00 	.word	0x40000c00
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40014400 	.word	0x40014400
 80062f8:	40014800 	.word	0x40014800
 80062fc:	0800e2e4 	.word	0x0800e2e4

08006300 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e083      	b.n	800641a <HAL_TIM_PWM_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a43      	ldr	r2, [pc, #268]	; (8006424 <HAL_TIM_PWM_Init+0x124>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d027      	beq.n	800636c <HAL_TIM_PWM_Init+0x6c>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006324:	d022      	beq.n	800636c <HAL_TIM_PWM_Init+0x6c>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a3f      	ldr	r2, [pc, #252]	; (8006428 <HAL_TIM_PWM_Init+0x128>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d01d      	beq.n	800636c <HAL_TIM_PWM_Init+0x6c>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a3d      	ldr	r2, [pc, #244]	; (800642c <HAL_TIM_PWM_Init+0x12c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d018      	beq.n	800636c <HAL_TIM_PWM_Init+0x6c>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a3c      	ldr	r2, [pc, #240]	; (8006430 <HAL_TIM_PWM_Init+0x130>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d013      	beq.n	800636c <HAL_TIM_PWM_Init+0x6c>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a3a      	ldr	r2, [pc, #232]	; (8006434 <HAL_TIM_PWM_Init+0x134>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00e      	beq.n	800636c <HAL_TIM_PWM_Init+0x6c>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a39      	ldr	r2, [pc, #228]	; (8006438 <HAL_TIM_PWM_Init+0x138>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d009      	beq.n	800636c <HAL_TIM_PWM_Init+0x6c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a37      	ldr	r2, [pc, #220]	; (800643c <HAL_TIM_PWM_Init+0x13c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d004      	beq.n	800636c <HAL_TIM_PWM_Init+0x6c>
 8006362:	f240 419b 	movw	r1, #1179	; 0x49b
 8006366:	4836      	ldr	r0, [pc, #216]	; (8006440 <HAL_TIM_PWM_Init+0x140>)
 8006368:	f004 feac 	bl	800b0c4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d014      	beq.n	800639e <HAL_TIM_PWM_Init+0x9e>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	2b10      	cmp	r3, #16
 800637a:	d010      	beq.n	800639e <HAL_TIM_PWM_Init+0x9e>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2b20      	cmp	r3, #32
 8006382:	d00c      	beq.n	800639e <HAL_TIM_PWM_Init+0x9e>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	d008      	beq.n	800639e <HAL_TIM_PWM_Init+0x9e>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b60      	cmp	r3, #96	; 0x60
 8006392:	d004      	beq.n	800639e <HAL_TIM_PWM_Init+0x9e>
 8006394:	f240 419c 	movw	r1, #1180	; 0x49c
 8006398:	4829      	ldr	r0, [pc, #164]	; (8006440 <HAL_TIM_PWM_Init+0x140>)
 800639a:	f004 fe93 	bl	800b0c4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00e      	beq.n	80063c4 <HAL_TIM_PWM_Init+0xc4>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ae:	d009      	beq.n	80063c4 <HAL_TIM_PWM_Init+0xc4>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b8:	d004      	beq.n	80063c4 <HAL_TIM_PWM_Init+0xc4>
 80063ba:	f240 419d 	movw	r1, #1181	; 0x49d
 80063be:	4820      	ldr	r0, [pc, #128]	; (8006440 <HAL_TIM_PWM_Init+0x140>)
 80063c0:	f004 fe80 	bl	800b0c4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d008      	beq.n	80063de <HAL_TIM_PWM_Init+0xde>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	2b80      	cmp	r3, #128	; 0x80
 80063d2:	d004      	beq.n	80063de <HAL_TIM_PWM_Init+0xde>
 80063d4:	f240 419e 	movw	r1, #1182	; 0x49e
 80063d8:	4819      	ldr	r0, [pc, #100]	; (8006440 <HAL_TIM_PWM_Init+0x140>)
 80063da:	f004 fe73 	bl	800b0c4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f826 	bl	8006444 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3304      	adds	r3, #4
 8006408:	4619      	mov	r1, r3
 800640a:	4610      	mov	r0, r2
 800640c:	f000 ff7a 	bl	8007304 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40010000 	.word	0x40010000
 8006428:	40000400 	.word	0x40000400
 800642c:	40000800 	.word	0x40000800
 8006430:	40000c00 	.word	0x40000c00
 8006434:	40014000 	.word	0x40014000
 8006438:	40014400 	.word	0x40014400
 800643c:	40014800 	.word	0x40014800
 8006440:	0800e2e4 	.word	0x0800e2e4

08006444 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a4e      	ldr	r2, [pc, #312]	; (80065a0 <HAL_TIM_PWM_Start+0x148>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d10b      	bne.n	8006484 <HAL_TIM_PWM_Start+0x2c>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d06c      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b04      	cmp	r3, #4
 8006476:	d069      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b08      	cmp	r3, #8
 800647c:	d066      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b0c      	cmp	r3, #12
 8006482:	d063      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648c:	d10b      	bne.n	80064a6 <HAL_TIM_PWM_Start+0x4e>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d05b      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b04      	cmp	r3, #4
 8006498:	d058      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b08      	cmp	r3, #8
 800649e:	d055      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2b0c      	cmp	r3, #12
 80064a4:	d052      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a3e      	ldr	r2, [pc, #248]	; (80065a4 <HAL_TIM_PWM_Start+0x14c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d10b      	bne.n	80064c8 <HAL_TIM_PWM_Start+0x70>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d04a      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	d047      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b08      	cmp	r3, #8
 80064c0:	d044      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b0c      	cmp	r3, #12
 80064c6:	d041      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a36      	ldr	r2, [pc, #216]	; (80065a8 <HAL_TIM_PWM_Start+0x150>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d10b      	bne.n	80064ea <HAL_TIM_PWM_Start+0x92>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d039      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b04      	cmp	r3, #4
 80064dc:	d036      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d033      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2b0c      	cmp	r3, #12
 80064e8:	d030      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a2f      	ldr	r2, [pc, #188]	; (80065ac <HAL_TIM_PWM_Start+0x154>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d10b      	bne.n	800650c <HAL_TIM_PWM_Start+0xb4>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d028      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d025      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2b08      	cmp	r3, #8
 8006504:	d022      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b0c      	cmp	r3, #12
 800650a:	d01f      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a27      	ldr	r2, [pc, #156]	; (80065b0 <HAL_TIM_PWM_Start+0x158>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d105      	bne.n	8006522 <HAL_TIM_PWM_Start+0xca>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d017      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b04      	cmp	r3, #4
 8006520:	d014      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a23      	ldr	r2, [pc, #140]	; (80065b4 <HAL_TIM_PWM_Start+0x15c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d102      	bne.n	8006532 <HAL_TIM_PWM_Start+0xda>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00c      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a20      	ldr	r2, [pc, #128]	; (80065b8 <HAL_TIM_PWM_Start+0x160>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d102      	bne.n	8006542 <HAL_TIM_PWM_Start+0xea>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d004      	beq.n	800654c <HAL_TIM_PWM_Start+0xf4>
 8006542:	f240 5113 	movw	r1, #1299	; 0x513
 8006546:	481d      	ldr	r0, [pc, #116]	; (80065bc <HAL_TIM_PWM_Start+0x164>)
 8006548:	f004 fdbc 	bl	800b0c4 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2201      	movs	r2, #1
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	4618      	mov	r0, r3
 8006556:	f001 fa05 	bl	8007964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a10      	ldr	r2, [pc, #64]	; (80065a0 <HAL_TIM_PWM_Start+0x148>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d107      	bne.n	8006574 <HAL_TIM_PWM_Start+0x11c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006572:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b06      	cmp	r3, #6
 8006584:	d007      	beq.n	8006596 <HAL_TIM_PWM_Start+0x13e>
  {
    __HAL_TIM_ENABLE(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0201 	orr.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	40010000 	.word	0x40010000
 80065a4:	40000400 	.word	0x40000400
 80065a8:	40000800 	.word	0x40000800
 80065ac:	40000c00 	.word	0x40000c00
 80065b0:	40014000 	.word	0x40014000
 80065b4:	40014400 	.word	0x40014400
 80065b8:	40014800 	.word	0x40014800
 80065bc:	0800e2e4 	.word	0x0800e2e4

080065c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a5c      	ldr	r2, [pc, #368]	; (8006740 <HAL_TIM_PWM_Stop+0x180>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d10b      	bne.n	80065ec <HAL_TIM_PWM_Stop+0x2c>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d06c      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b04      	cmp	r3, #4
 80065de:	d069      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	d066      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b0c      	cmp	r3, #12
 80065ea:	d063      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f4:	d10b      	bne.n	800660e <HAL_TIM_PWM_Stop+0x4e>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d05b      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d058      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d055      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2b0c      	cmp	r3, #12
 800660c:	d052      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a4c      	ldr	r2, [pc, #304]	; (8006744 <HAL_TIM_PWM_Stop+0x184>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d10b      	bne.n	8006630 <HAL_TIM_PWM_Stop+0x70>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d04a      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b04      	cmp	r3, #4
 8006622:	d047      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	2b08      	cmp	r3, #8
 8006628:	d044      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b0c      	cmp	r3, #12
 800662e:	d041      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a44      	ldr	r2, [pc, #272]	; (8006748 <HAL_TIM_PWM_Stop+0x188>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d10b      	bne.n	8006652 <HAL_TIM_PWM_Stop+0x92>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d039      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b04      	cmp	r3, #4
 8006644:	d036      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b08      	cmp	r3, #8
 800664a:	d033      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b0c      	cmp	r3, #12
 8006650:	d030      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a3d      	ldr	r2, [pc, #244]	; (800674c <HAL_TIM_PWM_Stop+0x18c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d10b      	bne.n	8006674 <HAL_TIM_PWM_Stop+0xb4>
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d028      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b04      	cmp	r3, #4
 8006666:	d025      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b08      	cmp	r3, #8
 800666c:	d022      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b0c      	cmp	r3, #12
 8006672:	d01f      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a35      	ldr	r2, [pc, #212]	; (8006750 <HAL_TIM_PWM_Stop+0x190>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d105      	bne.n	800668a <HAL_TIM_PWM_Stop+0xca>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d017      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b04      	cmp	r3, #4
 8006688:	d014      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a31      	ldr	r2, [pc, #196]	; (8006754 <HAL_TIM_PWM_Stop+0x194>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d102      	bne.n	800669a <HAL_TIM_PWM_Stop+0xda>
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00c      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a2e      	ldr	r2, [pc, #184]	; (8006758 <HAL_TIM_PWM_Stop+0x198>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d102      	bne.n	80066aa <HAL_TIM_PWM_Stop+0xea>
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d004      	beq.n	80066b4 <HAL_TIM_PWM_Stop+0xf4>
 80066aa:	f240 5137 	movw	r1, #1335	; 0x537
 80066ae:	482b      	ldr	r0, [pc, #172]	; (800675c <HAL_TIM_PWM_Stop+0x19c>)
 80066b0:	f004 fd08 	bl	800b0c4 <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2200      	movs	r2, #0
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f001 f951 	bl	8007964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a1e      	ldr	r2, [pc, #120]	; (8006740 <HAL_TIM_PWM_Stop+0x180>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d117      	bne.n	80066fc <HAL_TIM_PWM_Stop+0x13c>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6a1a      	ldr	r2, [r3, #32]
 80066d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80066d6:	4013      	ands	r3, r2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10f      	bne.n	80066fc <HAL_TIM_PWM_Stop+0x13c>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6a1a      	ldr	r2, [r3, #32]
 80066e2:	f240 4344 	movw	r3, #1092	; 0x444
 80066e6:	4013      	ands	r3, r2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d107      	bne.n	80066fc <HAL_TIM_PWM_Stop+0x13c>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6a1a      	ldr	r2, [r3, #32]
 8006702:	f241 1311 	movw	r3, #4369	; 0x1111
 8006706:	4013      	ands	r3, r2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10f      	bne.n	800672c <HAL_TIM_PWM_Stop+0x16c>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6a1a      	ldr	r2, [r3, #32]
 8006712:	f240 4344 	movw	r3, #1092	; 0x444
 8006716:	4013      	ands	r3, r2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d107      	bne.n	800672c <HAL_TIM_PWM_Stop+0x16c>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	40010000 	.word	0x40010000
 8006744:	40000400 	.word	0x40000400
 8006748:	40000800 	.word	0x40000800
 800674c:	40000c00 	.word	0x40000c00
 8006750:	40014000 	.word	0x40014000
 8006754:	40014400 	.word	0x40014400
 8006758:	40014800 	.word	0x40014800
 800675c:	0800e2e4 	.word	0x0800e2e4

08006760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b02      	cmp	r3, #2
 8006774:	d122      	bne.n	80067bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b02      	cmp	r3, #2
 8006782:	d11b      	bne.n	80067bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f06f 0202 	mvn.w	r2, #2
 800678c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	f003 0303 	and.w	r3, r3, #3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fd90 	bl	80072c8 <HAL_TIM_IC_CaptureCallback>
 80067a8:	e005      	b.n	80067b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fd82 	bl	80072b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fd93 	bl	80072dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f003 0304 	and.w	r3, r3, #4
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d122      	bne.n	8006810 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d11b      	bne.n	8006810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f06f 0204 	mvn.w	r2, #4
 80067e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2202      	movs	r2, #2
 80067e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fd66 	bl	80072c8 <HAL_TIM_IC_CaptureCallback>
 80067fc:	e005      	b.n	800680a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fd58 	bl	80072b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fd69 	bl	80072dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f003 0308 	and.w	r3, r3, #8
 800681a:	2b08      	cmp	r3, #8
 800681c:	d122      	bne.n	8006864 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f003 0308 	and.w	r3, r3, #8
 8006828:	2b08      	cmp	r3, #8
 800682a:	d11b      	bne.n	8006864 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f06f 0208 	mvn.w	r2, #8
 8006834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2204      	movs	r2, #4
 800683a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fd3c 	bl	80072c8 <HAL_TIM_IC_CaptureCallback>
 8006850:	e005      	b.n	800685e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fd2e 	bl	80072b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fd3f 	bl	80072dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f003 0310 	and.w	r3, r3, #16
 800686e:	2b10      	cmp	r3, #16
 8006870:	d122      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f003 0310 	and.w	r3, r3, #16
 800687c:	2b10      	cmp	r3, #16
 800687e:	d11b      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f06f 0210 	mvn.w	r2, #16
 8006888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2208      	movs	r2, #8
 800688e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fd12 	bl	80072c8 <HAL_TIM_IC_CaptureCallback>
 80068a4:	e005      	b.n	80068b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fd04 	bl	80072b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fd15 	bl	80072dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d10e      	bne.n	80068e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d107      	bne.n	80068e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f06f 0201 	mvn.w	r2, #1
 80068dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f005 f80e 	bl	800b900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ee:	2b80      	cmp	r3, #128	; 0x80
 80068f0:	d10e      	bne.n	8006910 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fc:	2b80      	cmp	r3, #128	; 0x80
 80068fe:	d107      	bne.n	8006910 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 f95e 	bl	8007bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691a:	2b40      	cmp	r3, #64	; 0x40
 800691c:	d10e      	bne.n	800693c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006928:	2b40      	cmp	r3, #64	; 0x40
 800692a:	d107      	bne.n	800693c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fcda 	bl	80072f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b20      	cmp	r3, #32
 8006948:	d10e      	bne.n	8006968 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f003 0320 	and.w	r3, r3, #32
 8006954:	2b20      	cmp	r3, #32
 8006956:	d107      	bne.n	8006968 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f06f 0220 	mvn.w	r2, #32
 8006960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 f928 	bl	8007bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006968:	bf00      	nop
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d010      	beq.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b04      	cmp	r3, #4
 8006986:	d00d      	beq.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b08      	cmp	r3, #8
 800698c:	d00a      	beq.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x34>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b0c      	cmp	r3, #12
 8006992:	d007      	beq.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b3c      	cmp	r3, #60	; 0x3c
 8006998:	d004      	beq.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x34>
 800699a:	f640 51ec 	movw	r1, #3564	; 0xdec
 800699e:	4895      	ldr	r0, [pc, #596]	; (8006bf4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80069a0:	f004 fb90 	bl	800b0c4 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b60      	cmp	r3, #96	; 0x60
 80069aa:	d008      	beq.n	80069be <HAL_TIM_PWM_ConfigChannel+0x4e>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b70      	cmp	r3, #112	; 0x70
 80069b2:	d004      	beq.n	80069be <HAL_TIM_PWM_ConfigChannel+0x4e>
 80069b4:	f640 51ed 	movw	r1, #3565	; 0xded
 80069b8:	488e      	ldr	r0, [pc, #568]	; (8006bf4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80069ba:	f004 fb83 	bl	800b0c4 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d008      	beq.n	80069d8 <HAL_TIM_PWM_ConfigChannel+0x68>
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d004      	beq.n	80069d8 <HAL_TIM_PWM_ConfigChannel+0x68>
 80069ce:	f640 51ee 	movw	r1, #3566	; 0xdee
 80069d2:	4888      	ldr	r0, [pc, #544]	; (8006bf4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80069d4:	f004 fb76 	bl	800b0c4 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d008      	beq.n	80069f2 <HAL_TIM_PWM_ConfigChannel+0x82>
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d004      	beq.n	80069f2 <HAL_TIM_PWM_ConfigChannel+0x82>
 80069e8:	f640 51ef 	movw	r1, #3567	; 0xdef
 80069ec:	4881      	ldr	r0, [pc, #516]	; (8006bf4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80069ee:	f004 fb69 	bl	800b0c4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d101      	bne.n	8006a00 <HAL_TIM_PWM_ConfigChannel+0x90>
 80069fc:	2302      	movs	r3, #2
 80069fe:	e152      	b.n	8006ca6 <HAL_TIM_PWM_ConfigChannel+0x336>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b0c      	cmp	r3, #12
 8006a14:	f200 813d 	bhi.w	8006c92 <HAL_TIM_PWM_ConfigChannel+0x322>
 8006a18:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8006a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1e:	bf00      	nop
 8006a20:	08006a55 	.word	0x08006a55
 8006a24:	08006c93 	.word	0x08006c93
 8006a28:	08006c93 	.word	0x08006c93
 8006a2c:	08006c93 	.word	0x08006c93
 8006a30:	08006aef 	.word	0x08006aef
 8006a34:	08006c93 	.word	0x08006c93
 8006a38:	08006c93 	.word	0x08006c93
 8006a3c:	08006c93 	.word	0x08006c93
 8006a40:	08006b77 	.word	0x08006b77
 8006a44:	08006c93 	.word	0x08006c93
 8006a48:	08006c93 	.word	0x08006c93
 8006a4c:	08006c93 	.word	0x08006c93
 8006a50:	08006c15 	.word	0x08006c15
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a67      	ldr	r2, [pc, #412]	; (8006bf8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d027      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a66:	d022      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a63      	ldr	r2, [pc, #396]	; (8006bfc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d01d      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a62      	ldr	r2, [pc, #392]	; (8006c00 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d018      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a60      	ldr	r2, [pc, #384]	; (8006c04 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d013      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a5f      	ldr	r2, [pc, #380]	; (8006c08 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00e      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a5d      	ldr	r2, [pc, #372]	; (8006c0c <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d009      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a5c      	ldr	r2, [pc, #368]	; (8006c10 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d004      	beq.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006aa4:	f640 51fb 	movw	r1, #3579	; 0xdfb
 8006aa8:	4852      	ldr	r0, [pc, #328]	; (8006bf4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006aaa:	f004 fb0b 	bl	800b0c4 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 fca5 	bl	8007404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	699a      	ldr	r2, [r3, #24]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f042 0208 	orr.w	r2, r2, #8
 8006ac8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	699a      	ldr	r2, [r3, #24]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0204 	bic.w	r2, r2, #4
 8006ad8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6999      	ldr	r1, [r3, #24]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	619a      	str	r2, [r3, #24]
      break;
 8006aec:	e0d2      	b.n	8006c94 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a41      	ldr	r2, [pc, #260]	; (8006bf8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d01d      	beq.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b00:	d018      	beq.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a3d      	ldr	r2, [pc, #244]	; (8006bfc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d013      	beq.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a3b      	ldr	r2, [pc, #236]	; (8006c00 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00e      	beq.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a3a      	ldr	r2, [pc, #232]	; (8006c04 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d009      	beq.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a38      	ldr	r2, [pc, #224]	; (8006c08 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d004      	beq.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006b2a:	f640 610c 	movw	r1, #3596	; 0xe0c
 8006b2e:	4831      	ldr	r0, [pc, #196]	; (8006bf4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006b30:	f004 fac8 	bl	800b0c4 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 fcf2 	bl	8007524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699a      	ldr	r2, [r3, #24]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699a      	ldr	r2, [r3, #24]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6999      	ldr	r1, [r3, #24]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	021a      	lsls	r2, r3, #8
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	619a      	str	r2, [r3, #24]
      break;
 8006b74:	e08e      	b.n	8006c94 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a1f      	ldr	r2, [pc, #124]	; (8006bf8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d018      	beq.n	8006bb2 <HAL_TIM_PWM_ConfigChannel+0x242>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b88:	d013      	beq.n	8006bb2 <HAL_TIM_PWM_ConfigChannel+0x242>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a1b      	ldr	r2, [pc, #108]	; (8006bfc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00e      	beq.n	8006bb2 <HAL_TIM_PWM_ConfigChannel+0x242>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a19      	ldr	r2, [pc, #100]	; (8006c00 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d009      	beq.n	8006bb2 <HAL_TIM_PWM_ConfigChannel+0x242>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a18      	ldr	r2, [pc, #96]	; (8006c04 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d004      	beq.n	8006bb2 <HAL_TIM_PWM_ConfigChannel+0x242>
 8006ba8:	f640 611d 	movw	r1, #3613	; 0xe1d
 8006bac:	4811      	ldr	r0, [pc, #68]	; (8006bf4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006bae:	f004 fa89 	bl	800b0c4 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 fd47 	bl	800764c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69da      	ldr	r2, [r3, #28]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f042 0208 	orr.w	r2, r2, #8
 8006bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69da      	ldr	r2, [r3, #28]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0204 	bic.w	r2, r2, #4
 8006bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69d9      	ldr	r1, [r3, #28]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	691a      	ldr	r2, [r3, #16]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	61da      	str	r2, [r3, #28]
      break;
 8006bf0:	e050      	b.n	8006c94 <HAL_TIM_PWM_ConfigChannel+0x324>
 8006bf2:	bf00      	nop
 8006bf4:	0800e2e4 	.word	0x0800e2e4
 8006bf8:	40010000 	.word	0x40010000
 8006bfc:	40000400 	.word	0x40000400
 8006c00:	40000800 	.word	0x40000800
 8006c04:	40000c00 	.word	0x40000c00
 8006c08:	40014000 	.word	0x40014000
 8006c0c:	40014400 	.word	0x40014400
 8006c10:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a25      	ldr	r2, [pc, #148]	; (8006cb0 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d018      	beq.n	8006c50 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c26:	d013      	beq.n	8006c50 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a21      	ldr	r2, [pc, #132]	; (8006cb4 <HAL_TIM_PWM_ConfigChannel+0x344>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00e      	beq.n	8006c50 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a20      	ldr	r2, [pc, #128]	; (8006cb8 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d009      	beq.n	8006c50 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a1e      	ldr	r2, [pc, #120]	; (8006cbc <HAL_TIM_PWM_ConfigChannel+0x34c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d004      	beq.n	8006c50 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006c46:	f640 612e 	movw	r1, #3630	; 0xe2e
 8006c4a:	481d      	ldr	r0, [pc, #116]	; (8006cc0 <HAL_TIM_PWM_ConfigChannel+0x350>)
 8006c4c:	f004 fa3a 	bl	800b0c4 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fd8c 	bl	8007774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	69da      	ldr	r2, [r3, #28]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c6a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	69da      	ldr	r2, [r3, #28]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69d9      	ldr	r1, [r3, #28]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	021a      	lsls	r2, r3, #8
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	61da      	str	r2, [r3, #28]
      break;
 8006c90:	e000      	b.n	8006c94 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      break;
 8006c92:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	40010000 	.word	0x40010000
 8006cb4:	40000400 	.word	0x40000400
 8006cb8:	40000800 	.word	0x40000800
 8006cbc:	40000c00 	.word	0x40000c00
 8006cc0:	0800e2e4 	.word	0x0800e2e4

08006cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_TIM_ConfigClockSource+0x18>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e2db      	b.n	8007294 <HAL_TIM_ConfigClockSource+0x5d0>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf4:	d029      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x86>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cfe:	d024      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x86>
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d020      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x86>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b10      	cmp	r3, #16
 8006d0e:	d01c      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x86>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b20      	cmp	r3, #32
 8006d16:	d018      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x86>
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b30      	cmp	r3, #48	; 0x30
 8006d1e:	d014      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x86>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b40      	cmp	r3, #64	; 0x40
 8006d26:	d010      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x86>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b50      	cmp	r3, #80	; 0x50
 8006d2e:	d00c      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x86>
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b60      	cmp	r3, #96	; 0x60
 8006d36:	d008      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x86>
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b70      	cmp	r3, #112	; 0x70
 8006d3e:	d004      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x86>
 8006d40:	f241 118b 	movw	r1, #4491	; 0x118b
 8006d44:	4873      	ldr	r0, [pc, #460]	; (8006f14 <HAL_TIM_ConfigClockSource+0x250>)
 8006d46:	f004 f9bd 	bl	800b0c4 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d58:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d60:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b40      	cmp	r3, #64	; 0x40
 8006d70:	f000 8204 	beq.w	800717c <HAL_TIM_ConfigClockSource+0x4b8>
 8006d74:	2b40      	cmp	r3, #64	; 0x40
 8006d76:	d80f      	bhi.n	8006d98 <HAL_TIM_ConfigClockSource+0xd4>
 8006d78:	2b10      	cmp	r3, #16
 8006d7a:	f000 8255 	beq.w	8007228 <HAL_TIM_ConfigClockSource+0x564>
 8006d7e:	2b10      	cmp	r3, #16
 8006d80:	d803      	bhi.n	8006d8a <HAL_TIM_ConfigClockSource+0xc6>
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 8250 	beq.w	8007228 <HAL_TIM_ConfigClockSource+0x564>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d88:	e27b      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	f000 824c 	beq.w	8007228 <HAL_TIM_ConfigClockSource+0x564>
 8006d90:	2b30      	cmp	r3, #48	; 0x30
 8006d92:	f000 8249 	beq.w	8007228 <HAL_TIM_ConfigClockSource+0x564>
      break;
 8006d96:	e274      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8006d98:	2b70      	cmp	r3, #112	; 0x70
 8006d9a:	d046      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x166>
 8006d9c:	2b70      	cmp	r3, #112	; 0x70
 8006d9e:	d806      	bhi.n	8006dae <HAL_TIM_ConfigClockSource+0xea>
 8006da0:	2b50      	cmp	r3, #80	; 0x50
 8006da2:	f000 8133 	beq.w	800700c <HAL_TIM_ConfigClockSource+0x348>
 8006da6:	2b60      	cmp	r3, #96	; 0x60
 8006da8:	f000 8186 	beq.w	80070b8 <HAL_TIM_ConfigClockSource+0x3f4>
      break;
 8006dac:	e269      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 8006dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db2:	d004      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0xfa>
 8006db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db8:	f000 80bc 	beq.w	8006f34 <HAL_TIM_ConfigClockSource+0x270>
      break;
 8006dbc:	e261      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a55      	ldr	r2, [pc, #340]	; (8006f18 <HAL_TIM_ConfigClockSource+0x254>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	f000 825b 	beq.w	8007280 <HAL_TIM_ConfigClockSource+0x5bc>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd2:	f000 8255 	beq.w	8007280 <HAL_TIM_ConfigClockSource+0x5bc>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a50      	ldr	r2, [pc, #320]	; (8006f1c <HAL_TIM_ConfigClockSource+0x258>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	f000 824f 	beq.w	8007280 <HAL_TIM_ConfigClockSource+0x5bc>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a4e      	ldr	r2, [pc, #312]	; (8006f20 <HAL_TIM_ConfigClockSource+0x25c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	f000 8249 	beq.w	8007280 <HAL_TIM_ConfigClockSource+0x5bc>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a4c      	ldr	r2, [pc, #304]	; (8006f24 <HAL_TIM_ConfigClockSource+0x260>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	f000 8243 	beq.w	8007280 <HAL_TIM_ConfigClockSource+0x5bc>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a4a      	ldr	r2, [pc, #296]	; (8006f28 <HAL_TIM_ConfigClockSource+0x264>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	f000 823d 	beq.w	8007280 <HAL_TIM_ConfigClockSource+0x5bc>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a48      	ldr	r2, [pc, #288]	; (8006f2c <HAL_TIM_ConfigClockSource+0x268>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	f000 8237 	beq.w	8007280 <HAL_TIM_ConfigClockSource+0x5bc>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a46      	ldr	r2, [pc, #280]	; (8006f30 <HAL_TIM_ConfigClockSource+0x26c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	f000 8231 	beq.w	8007280 <HAL_TIM_ConfigClockSource+0x5bc>
 8006e1e:	f241 1197 	movw	r1, #4503	; 0x1197
 8006e22:	483c      	ldr	r0, [pc, #240]	; (8006f14 <HAL_TIM_ConfigClockSource+0x250>)
 8006e24:	f004 f94e 	bl	800b0c4 <assert_failed>
      break;
 8006e28:	e22a      	b.n	8007280 <HAL_TIM_ConfigClockSource+0x5bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a3a      	ldr	r2, [pc, #232]	; (8006f18 <HAL_TIM_ConfigClockSource+0x254>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d01d      	beq.n	8006e70 <HAL_TIM_ConfigClockSource+0x1ac>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e3c:	d018      	beq.n	8006e70 <HAL_TIM_ConfigClockSource+0x1ac>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a36      	ldr	r2, [pc, #216]	; (8006f1c <HAL_TIM_ConfigClockSource+0x258>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d013      	beq.n	8006e70 <HAL_TIM_ConfigClockSource+0x1ac>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a34      	ldr	r2, [pc, #208]	; (8006f20 <HAL_TIM_ConfigClockSource+0x25c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00e      	beq.n	8006e70 <HAL_TIM_ConfigClockSource+0x1ac>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a33      	ldr	r2, [pc, #204]	; (8006f24 <HAL_TIM_ConfigClockSource+0x260>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d009      	beq.n	8006e70 <HAL_TIM_ConfigClockSource+0x1ac>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a31      	ldr	r2, [pc, #196]	; (8006f28 <HAL_TIM_ConfigClockSource+0x264>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d004      	beq.n	8006e70 <HAL_TIM_ConfigClockSource+0x1ac>
 8006e66:	f241 119e 	movw	r1, #4510	; 0x119e
 8006e6a:	482a      	ldr	r0, [pc, #168]	; (8006f14 <HAL_TIM_ConfigClockSource+0x250>)
 8006e6c:	f004 f92a 	bl	800b0c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d013      	beq.n	8006ea0 <HAL_TIM_ConfigClockSource+0x1dc>
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e80:	d00e      	beq.n	8006ea0 <HAL_TIM_ConfigClockSource+0x1dc>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e8a:	d009      	beq.n	8006ea0 <HAL_TIM_ConfigClockSource+0x1dc>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e94:	d004      	beq.n	8006ea0 <HAL_TIM_ConfigClockSource+0x1dc>
 8006e96:	f241 11a1 	movw	r1, #4513	; 0x11a1
 8006e9a:	481e      	ldr	r0, [pc, #120]	; (8006f14 <HAL_TIM_ConfigClockSource+0x250>)
 8006e9c:	f004 f912 	bl	800b0c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ea8:	d014      	beq.n	8006ed4 <HAL_TIM_ConfigClockSource+0x210>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d010      	beq.n	8006ed4 <HAL_TIM_ConfigClockSource+0x210>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00c      	beq.n	8006ed4 <HAL_TIM_ConfigClockSource+0x210>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d008      	beq.n	8006ed4 <HAL_TIM_ConfigClockSource+0x210>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2b0a      	cmp	r3, #10
 8006ec8:	d004      	beq.n	8006ed4 <HAL_TIM_ConfigClockSource+0x210>
 8006eca:	f241 11a2 	movw	r1, #4514	; 0x11a2
 8006ece:	4811      	ldr	r0, [pc, #68]	; (8006f14 <HAL_TIM_ConfigClockSource+0x250>)
 8006ed0:	f004 f8f8 	bl	800b0c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	2b0f      	cmp	r3, #15
 8006eda:	d904      	bls.n	8006ee6 <HAL_TIM_ConfigClockSource+0x222>
 8006edc:	f241 11a3 	movw	r1, #4515	; 0x11a3
 8006ee0:	480c      	ldr	r0, [pc, #48]	; (8006f14 <HAL_TIM_ConfigClockSource+0x250>)
 8006ee2:	f004 f8ef 	bl	800b0c4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	6899      	ldr	r1, [r3, #8]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f000 fd15 	bl	8007924 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	609a      	str	r2, [r3, #8]
      break;
 8006f12:	e1b6      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x5be>
 8006f14:	0800e2e4 	.word	0x0800e2e4
 8006f18:	40010000 	.word	0x40010000
 8006f1c:	40000400 	.word	0x40000400
 8006f20:	40000800 	.word	0x40000800
 8006f24:	40000c00 	.word	0x40000c00
 8006f28:	40014000 	.word	0x40014000
 8006f2c:	40014400 	.word	0x40014400
 8006f30:	40014800 	.word	0x40014800
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a8a      	ldr	r2, [pc, #552]	; (8007164 <HAL_TIM_ConfigClockSource+0x4a0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d018      	beq.n	8006f70 <HAL_TIM_ConfigClockSource+0x2ac>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f46:	d013      	beq.n	8006f70 <HAL_TIM_ConfigClockSource+0x2ac>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a86      	ldr	r2, [pc, #536]	; (8007168 <HAL_TIM_ConfigClockSource+0x4a4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00e      	beq.n	8006f70 <HAL_TIM_ConfigClockSource+0x2ac>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a85      	ldr	r2, [pc, #532]	; (800716c <HAL_TIM_ConfigClockSource+0x4a8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d009      	beq.n	8006f70 <HAL_TIM_ConfigClockSource+0x2ac>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a83      	ldr	r2, [pc, #524]	; (8007170 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d004      	beq.n	8006f70 <HAL_TIM_ConfigClockSource+0x2ac>
 8006f66:	f241 11b6 	movw	r1, #4534	; 0x11b6
 8006f6a:	4882      	ldr	r0, [pc, #520]	; (8007174 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006f6c:	f004 f8aa 	bl	800b0c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d013      	beq.n	8006fa0 <HAL_TIM_ConfigClockSource+0x2dc>
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f80:	d00e      	beq.n	8006fa0 <HAL_TIM_ConfigClockSource+0x2dc>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8a:	d009      	beq.n	8006fa0 <HAL_TIM_ConfigClockSource+0x2dc>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f94:	d004      	beq.n	8006fa0 <HAL_TIM_ConfigClockSource+0x2dc>
 8006f96:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8006f9a:	4876      	ldr	r0, [pc, #472]	; (8007174 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006f9c:	f004 f892 	bl	800b0c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fa8:	d014      	beq.n	8006fd4 <HAL_TIM_ConfigClockSource+0x310>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d010      	beq.n	8006fd4 <HAL_TIM_ConfigClockSource+0x310>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00c      	beq.n	8006fd4 <HAL_TIM_ConfigClockSource+0x310>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d008      	beq.n	8006fd4 <HAL_TIM_ConfigClockSource+0x310>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	2b0a      	cmp	r3, #10
 8006fc8:	d004      	beq.n	8006fd4 <HAL_TIM_ConfigClockSource+0x310>
 8006fca:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8006fce:	4869      	ldr	r0, [pc, #420]	; (8007174 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006fd0:	f004 f878 	bl	800b0c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	2b0f      	cmp	r3, #15
 8006fda:	d904      	bls.n	8006fe6 <HAL_TIM_ConfigClockSource+0x322>
 8006fdc:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8006fe0:	4864      	ldr	r0, [pc, #400]	; (8007174 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006fe2:	f004 f86f 	bl	800b0c4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6899      	ldr	r1, [r3, #8]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f000 fc95 	bl	8007924 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007008:	609a      	str	r2, [r3, #8]
      break;
 800700a:	e13a      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a54      	ldr	r2, [pc, #336]	; (8007164 <HAL_TIM_ConfigClockSource+0x4a0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d01d      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x38e>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800701e:	d018      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x38e>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a50      	ldr	r2, [pc, #320]	; (8007168 <HAL_TIM_ConfigClockSource+0x4a4>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d013      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x38e>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a4f      	ldr	r2, [pc, #316]	; (800716c <HAL_TIM_ConfigClockSource+0x4a8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00e      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x38e>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a4d      	ldr	r2, [pc, #308]	; (8007170 <HAL_TIM_ConfigClockSource+0x4ac>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d009      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x38e>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a4d      	ldr	r2, [pc, #308]	; (8007178 <HAL_TIM_ConfigClockSource+0x4b4>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d004      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x38e>
 8007048:	f241 11ca 	movw	r1, #4554	; 0x11ca
 800704c:	4849      	ldr	r0, [pc, #292]	; (8007174 <HAL_TIM_ConfigClockSource+0x4b0>)
 800704e:	f004 f839 	bl	800b0c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800705a:	d014      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0x3c2>
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d010      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0x3c2>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00c      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0x3c2>
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	2b02      	cmp	r3, #2
 8007072:	d008      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0x3c2>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	2b0a      	cmp	r3, #10
 800707a:	d004      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0x3c2>
 800707c:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8007080:	483c      	ldr	r0, [pc, #240]	; (8007174 <HAL_TIM_ConfigClockSource+0x4b0>)
 8007082:	f004 f81f 	bl	800b0c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	2b0f      	cmp	r3, #15
 800708c:	d904      	bls.n	8007098 <HAL_TIM_ConfigClockSource+0x3d4>
 800708e:	f241 11ce 	movw	r1, #4558	; 0x11ce
 8007092:	4838      	ldr	r0, [pc, #224]	; (8007174 <HAL_TIM_ConfigClockSource+0x4b0>)
 8007094:	f004 f816 	bl	800b0c4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6818      	ldr	r0, [r3, #0]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	6859      	ldr	r1, [r3, #4]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	461a      	mov	r2, r3
 80070a6:	f000 fbc3 	bl	8007830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2150      	movs	r1, #80	; 0x50
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 fc1c 	bl	80078ee <TIM_ITRx_SetConfig>
      break;
 80070b6:	e0e4      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a29      	ldr	r2, [pc, #164]	; (8007164 <HAL_TIM_ConfigClockSource+0x4a0>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d01d      	beq.n	80070fe <HAL_TIM_ConfigClockSource+0x43a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ca:	d018      	beq.n	80070fe <HAL_TIM_ConfigClockSource+0x43a>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a25      	ldr	r2, [pc, #148]	; (8007168 <HAL_TIM_ConfigClockSource+0x4a4>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d013      	beq.n	80070fe <HAL_TIM_ConfigClockSource+0x43a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a24      	ldr	r2, [pc, #144]	; (800716c <HAL_TIM_ConfigClockSource+0x4a8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00e      	beq.n	80070fe <HAL_TIM_ConfigClockSource+0x43a>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a22      	ldr	r2, [pc, #136]	; (8007170 <HAL_TIM_ConfigClockSource+0x4ac>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d009      	beq.n	80070fe <HAL_TIM_ConfigClockSource+0x43a>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a22      	ldr	r2, [pc, #136]	; (8007178 <HAL_TIM_ConfigClockSource+0x4b4>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d004      	beq.n	80070fe <HAL_TIM_ConfigClockSource+0x43a>
 80070f4:	f241 11da 	movw	r1, #4570	; 0x11da
 80070f8:	481e      	ldr	r0, [pc, #120]	; (8007174 <HAL_TIM_ConfigClockSource+0x4b0>)
 80070fa:	f003 ffe3 	bl	800b0c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007106:	d014      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0x46e>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d010      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0x46e>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00c      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0x46e>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d008      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0x46e>
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	2b0a      	cmp	r3, #10
 8007126:	d004      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0x46e>
 8007128:	f241 11dd 	movw	r1, #4573	; 0x11dd
 800712c:	4811      	ldr	r0, [pc, #68]	; (8007174 <HAL_TIM_ConfigClockSource+0x4b0>)
 800712e:	f003 ffc9 	bl	800b0c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	2b0f      	cmp	r3, #15
 8007138:	d904      	bls.n	8007144 <HAL_TIM_ConfigClockSource+0x480>
 800713a:	f241 11de 	movw	r1, #4574	; 0x11de
 800713e:	480d      	ldr	r0, [pc, #52]	; (8007174 <HAL_TIM_ConfigClockSource+0x4b0>)
 8007140:	f003 ffc0 	bl	800b0c4 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6818      	ldr	r0, [r3, #0]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	6859      	ldr	r1, [r3, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	461a      	mov	r2, r3
 8007152:	f000 fb9c 	bl	800788e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2160      	movs	r1, #96	; 0x60
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fbc6 	bl	80078ee <TIM_ITRx_SetConfig>
      break;
 8007162:	e08e      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x5be>
 8007164:	40010000 	.word	0x40010000
 8007168:	40000400 	.word	0x40000400
 800716c:	40000800 	.word	0x40000800
 8007170:	40000c00 	.word	0x40000c00
 8007174:	0800e2e4 	.word	0x0800e2e4
 8007178:	40014000 	.word	0x40014000
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a46      	ldr	r2, [pc, #280]	; (800729c <HAL_TIM_ConfigClockSource+0x5d8>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d01d      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x4fe>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718e:	d018      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x4fe>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a42      	ldr	r2, [pc, #264]	; (80072a0 <HAL_TIM_ConfigClockSource+0x5dc>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d013      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x4fe>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a41      	ldr	r2, [pc, #260]	; (80072a4 <HAL_TIM_ConfigClockSource+0x5e0>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d00e      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x4fe>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a3f      	ldr	r2, [pc, #252]	; (80072a8 <HAL_TIM_ConfigClockSource+0x5e4>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d009      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x4fe>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a3e      	ldr	r2, [pc, #248]	; (80072ac <HAL_TIM_ConfigClockSource+0x5e8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d004      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x4fe>
 80071b8:	f241 11ea 	movw	r1, #4586	; 0x11ea
 80071bc:	483c      	ldr	r0, [pc, #240]	; (80072b0 <HAL_TIM_ConfigClockSource+0x5ec>)
 80071be:	f003 ff81 	bl	800b0c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ca:	d014      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x532>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d010      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x532>
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00c      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x532>
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d008      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x532>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	2b0a      	cmp	r3, #10
 80071ea:	d004      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x532>
 80071ec:	f241 11ed 	movw	r1, #4589	; 0x11ed
 80071f0:	482f      	ldr	r0, [pc, #188]	; (80072b0 <HAL_TIM_ConfigClockSource+0x5ec>)
 80071f2:	f003 ff67 	bl	800b0c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	2b0f      	cmp	r3, #15
 80071fc:	d904      	bls.n	8007208 <HAL_TIM_ConfigClockSource+0x544>
 80071fe:	f241 11ee 	movw	r1, #4590	; 0x11ee
 8007202:	482b      	ldr	r0, [pc, #172]	; (80072b0 <HAL_TIM_ConfigClockSource+0x5ec>)
 8007204:	f003 ff5e 	bl	800b0c4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6818      	ldr	r0, [r3, #0]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	6859      	ldr	r1, [r3, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	461a      	mov	r2, r3
 8007216:	f000 fb0b 	bl	8007830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2140      	movs	r1, #64	; 0x40
 8007220:	4618      	mov	r0, r3
 8007222:	f000 fb64 	bl	80078ee <TIM_ITRx_SetConfig>
      break;
 8007226:	e02c      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a1b      	ldr	r2, [pc, #108]	; (800729c <HAL_TIM_ConfigClockSource+0x5d8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01d      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x5aa>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723a:	d018      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x5aa>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a17      	ldr	r2, [pc, #92]	; (80072a0 <HAL_TIM_ConfigClockSource+0x5dc>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x5aa>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a16      	ldr	r2, [pc, #88]	; (80072a4 <HAL_TIM_ConfigClockSource+0x5e0>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x5aa>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a14      	ldr	r2, [pc, #80]	; (80072a8 <HAL_TIM_ConfigClockSource+0x5e4>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x5aa>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a13      	ldr	r2, [pc, #76]	; (80072ac <HAL_TIM_ConfigClockSource+0x5e8>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x5aa>
 8007264:	f241 11fd 	movw	r1, #4605	; 0x11fd
 8007268:	4811      	ldr	r0, [pc, #68]	; (80072b0 <HAL_TIM_ConfigClockSource+0x5ec>)
 800726a:	f003 ff2b 	bl	800b0c4 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4619      	mov	r1, r3
 8007278:	4610      	mov	r0, r2
 800727a:	f000 fb38 	bl	80078ee <TIM_ITRx_SetConfig>
      break;
 800727e:	e000      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x5be>
      break;
 8007280:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	40010000 	.word	0x40010000
 80072a0:	40000400 	.word	0x40000400
 80072a4:	40000800 	.word	0x40000800
 80072a8:	40000c00 	.word	0x40000c00
 80072ac:	40014000 	.word	0x40014000
 80072b0:	0800e2e4 	.word	0x0800e2e4

080072b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a34      	ldr	r2, [pc, #208]	; (80073e8 <TIM_Base_SetConfig+0xe4>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00f      	beq.n	800733c <TIM_Base_SetConfig+0x38>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007322:	d00b      	beq.n	800733c <TIM_Base_SetConfig+0x38>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a31      	ldr	r2, [pc, #196]	; (80073ec <TIM_Base_SetConfig+0xe8>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d007      	beq.n	800733c <TIM_Base_SetConfig+0x38>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a30      	ldr	r2, [pc, #192]	; (80073f0 <TIM_Base_SetConfig+0xec>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d003      	beq.n	800733c <TIM_Base_SetConfig+0x38>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a2f      	ldr	r2, [pc, #188]	; (80073f4 <TIM_Base_SetConfig+0xf0>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d108      	bne.n	800734e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a25      	ldr	r2, [pc, #148]	; (80073e8 <TIM_Base_SetConfig+0xe4>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d01b      	beq.n	800738e <TIM_Base_SetConfig+0x8a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800735c:	d017      	beq.n	800738e <TIM_Base_SetConfig+0x8a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a22      	ldr	r2, [pc, #136]	; (80073ec <TIM_Base_SetConfig+0xe8>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d013      	beq.n	800738e <TIM_Base_SetConfig+0x8a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a21      	ldr	r2, [pc, #132]	; (80073f0 <TIM_Base_SetConfig+0xec>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00f      	beq.n	800738e <TIM_Base_SetConfig+0x8a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a20      	ldr	r2, [pc, #128]	; (80073f4 <TIM_Base_SetConfig+0xf0>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00b      	beq.n	800738e <TIM_Base_SetConfig+0x8a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a1f      	ldr	r2, [pc, #124]	; (80073f8 <TIM_Base_SetConfig+0xf4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d007      	beq.n	800738e <TIM_Base_SetConfig+0x8a>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a1e      	ldr	r2, [pc, #120]	; (80073fc <TIM_Base_SetConfig+0xf8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d003      	beq.n	800738e <TIM_Base_SetConfig+0x8a>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a1d      	ldr	r2, [pc, #116]	; (8007400 <TIM_Base_SetConfig+0xfc>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d108      	bne.n	80073a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4313      	orrs	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	689a      	ldr	r2, [r3, #8]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a08      	ldr	r2, [pc, #32]	; (80073e8 <TIM_Base_SetConfig+0xe4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d103      	bne.n	80073d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	691a      	ldr	r2, [r3, #16]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	615a      	str	r2, [r3, #20]
}
 80073da:	bf00      	nop
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	40010000 	.word	0x40010000
 80073ec:	40000400 	.word	0x40000400
 80073f0:	40000800 	.word	0x40000800
 80073f4:	40000c00 	.word	0x40000c00
 80073f8:	40014000 	.word	0x40014000
 80073fc:	40014400 	.word	0x40014400
 8007400:	40014800 	.word	0x40014800

08007404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	f023 0201 	bic.w	r2, r3, #1
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0303 	bic.w	r3, r3, #3
 800743a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f023 0302 	bic.w	r3, r3, #2
 800744c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	4313      	orrs	r3, r2
 8007456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a30      	ldr	r2, [pc, #192]	; (800751c <TIM_OC1_SetConfig+0x118>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d119      	bne.n	8007494 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d008      	beq.n	800747a <TIM_OC1_SetConfig+0x76>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	2b08      	cmp	r3, #8
 800746e:	d004      	beq.n	800747a <TIM_OC1_SetConfig+0x76>
 8007470:	f241 7102 	movw	r1, #5890	; 0x1702
 8007474:	482a      	ldr	r0, [pc, #168]	; (8007520 <TIM_OC1_SetConfig+0x11c>)
 8007476:	f003 fe25 	bl	800b0c4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f023 0308 	bic.w	r3, r3, #8
 8007480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	4313      	orrs	r3, r2
 800748a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f023 0304 	bic.w	r3, r3, #4
 8007492:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a21      	ldr	r2, [pc, #132]	; (800751c <TIM_OC1_SetConfig+0x118>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d12d      	bne.n	80074f8 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074a4:	d008      	beq.n	80074b8 <TIM_OC1_SetConfig+0xb4>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d004      	beq.n	80074b8 <TIM_OC1_SetConfig+0xb4>
 80074ae:	f241 710f 	movw	r1, #5903	; 0x170f
 80074b2:	481b      	ldr	r0, [pc, #108]	; (8007520 <TIM_OC1_SetConfig+0x11c>)
 80074b4:	f003 fe06 	bl	800b0c4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074c0:	d008      	beq.n	80074d4 <TIM_OC1_SetConfig+0xd0>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d004      	beq.n	80074d4 <TIM_OC1_SetConfig+0xd0>
 80074ca:	f241 7110 	movw	r1, #5904	; 0x1710
 80074ce:	4814      	ldr	r0, [pc, #80]	; (8007520 <TIM_OC1_SetConfig+0x11c>)
 80074d0:	f003 fdf8 	bl	800b0c4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	621a      	str	r2, [r3, #32]
}
 8007512:	bf00      	nop
 8007514:	3718      	adds	r7, #24
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	40010000 	.word	0x40010000
 8007520:	0800e2e4 	.word	0x0800e2e4

08007524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	f023 0210 	bic.w	r2, r3, #16
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800755a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	021b      	lsls	r3, r3, #8
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	4313      	orrs	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f023 0320 	bic.w	r3, r3, #32
 800756e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	011b      	lsls	r3, r3, #4
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4313      	orrs	r3, r2
 800757a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a31      	ldr	r2, [pc, #196]	; (8007644 <TIM_OC2_SetConfig+0x120>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d11a      	bne.n	80075ba <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d008      	beq.n	800759e <TIM_OC2_SetConfig+0x7a>
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	2b08      	cmp	r3, #8
 8007592:	d004      	beq.n	800759e <TIM_OC2_SetConfig+0x7a>
 8007594:	f241 714d 	movw	r1, #5965	; 0x174d
 8007598:	482b      	ldr	r0, [pc, #172]	; (8007648 <TIM_OC2_SetConfig+0x124>)
 800759a:	f003 fd93 	bl	800b0c4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	011b      	lsls	r3, r3, #4
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075b8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a21      	ldr	r2, [pc, #132]	; (8007644 <TIM_OC2_SetConfig+0x120>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d12f      	bne.n	8007622 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075ca:	d008      	beq.n	80075de <TIM_OC2_SetConfig+0xba>
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d004      	beq.n	80075de <TIM_OC2_SetConfig+0xba>
 80075d4:	f241 715b 	movw	r1, #5979	; 0x175b
 80075d8:	481b      	ldr	r0, [pc, #108]	; (8007648 <TIM_OC2_SetConfig+0x124>)
 80075da:	f003 fd73 	bl	800b0c4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e6:	d008      	beq.n	80075fa <TIM_OC2_SetConfig+0xd6>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d004      	beq.n	80075fa <TIM_OC2_SetConfig+0xd6>
 80075f0:	f241 715c 	movw	r1, #5980	; 0x175c
 80075f4:	4814      	ldr	r0, [pc, #80]	; (8007648 <TIM_OC2_SetConfig+0x124>)
 80075f6:	f003 fd65 	bl	800b0c4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	4313      	orrs	r3, r2
 8007614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	4313      	orrs	r3, r2
 8007620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	621a      	str	r2, [r3, #32]
}
 800763c:	bf00      	nop
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	40010000 	.word	0x40010000
 8007648:	0800e2e4 	.word	0x0800e2e4

0800764c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f023 0303 	bic.w	r3, r3, #3
 8007682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4313      	orrs	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	021b      	lsls	r3, r3, #8
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	4313      	orrs	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a31      	ldr	r2, [pc, #196]	; (800776c <TIM_OC3_SetConfig+0x120>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d11a      	bne.n	80076e0 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d008      	beq.n	80076c4 <TIM_OC3_SetConfig+0x78>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	2b08      	cmp	r3, #8
 80076b8:	d004      	beq.n	80076c4 <TIM_OC3_SetConfig+0x78>
 80076ba:	f241 7198 	movw	r1, #6040	; 0x1798
 80076be:	482c      	ldr	r0, [pc, #176]	; (8007770 <TIM_OC3_SetConfig+0x124>)
 80076c0:	f003 fd00 	bl	800b0c4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a22      	ldr	r2, [pc, #136]	; (800776c <TIM_OC3_SetConfig+0x120>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d12f      	bne.n	8007748 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076f0:	d008      	beq.n	8007704 <TIM_OC3_SetConfig+0xb8>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d004      	beq.n	8007704 <TIM_OC3_SetConfig+0xb8>
 80076fa:	f241 71a5 	movw	r1, #6053	; 0x17a5
 80076fe:	481c      	ldr	r0, [pc, #112]	; (8007770 <TIM_OC3_SetConfig+0x124>)
 8007700:	f003 fce0 	bl	800b0c4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770c:	d008      	beq.n	8007720 <TIM_OC3_SetConfig+0xd4>
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d004      	beq.n	8007720 <TIM_OC3_SetConfig+0xd4>
 8007716:	f241 71a6 	movw	r1, #6054	; 0x17a6
 800771a:	4815      	ldr	r0, [pc, #84]	; (8007770 <TIM_OC3_SetConfig+0x124>)
 800771c:	f003 fcd2 	bl	800b0c4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800772e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	011b      	lsls	r3, r3, #4
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	4313      	orrs	r3, r2
 800773a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	011b      	lsls	r3, r3, #4
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	4313      	orrs	r3, r2
 8007746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	621a      	str	r2, [r3, #32]
}
 8007762:	bf00      	nop
 8007764:	3718      	adds	r7, #24
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	40010000 	.word	0x40010000
 8007770:	0800e2e4 	.word	0x0800e2e4

08007774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	021b      	lsls	r3, r3, #8
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	031b      	lsls	r3, r3, #12
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a16      	ldr	r2, [pc, #88]	; (8007828 <TIM_OC4_SetConfig+0xb4>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d117      	bne.n	8007804 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077dc:	d008      	beq.n	80077f0 <TIM_OC4_SetConfig+0x7c>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d004      	beq.n	80077f0 <TIM_OC4_SetConfig+0x7c>
 80077e6:	f241 71e4 	movw	r1, #6116	; 0x17e4
 80077ea:	4810      	ldr	r0, [pc, #64]	; (800782c <TIM_OC4_SetConfig+0xb8>)
 80077ec:	f003 fc6a 	bl	800b0c4 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	019b      	lsls	r3, r3, #6
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4313      	orrs	r3, r2
 8007802:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	621a      	str	r2, [r3, #32]
}
 800781e:	bf00      	nop
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	40010000 	.word	0x40010000
 800782c:	0800e2e4 	.word	0x0800e2e4

08007830 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007830:	b480      	push	{r7}
 8007832:	b087      	sub	sp, #28
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	f023 0201 	bic.w	r2, r3, #1
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800785a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	4313      	orrs	r3, r2
 8007864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f023 030a 	bic.w	r3, r3, #10
 800786c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	4313      	orrs	r3, r2
 8007874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	621a      	str	r2, [r3, #32]
}
 8007882:	bf00      	nop
 8007884:	371c      	adds	r7, #28
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800788e:	b480      	push	{r7}
 8007890:	b087      	sub	sp, #28
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	f023 0210 	bic.w	r2, r3, #16
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	031b      	lsls	r3, r3, #12
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	011b      	lsls	r3, r3, #4
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	621a      	str	r2, [r3, #32]
}
 80078e2:	bf00      	nop
 80078e4:	371c      	adds	r7, #28
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b085      	sub	sp, #20
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007904:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4313      	orrs	r3, r2
 800790c:	f043 0307 	orr.w	r3, r3, #7
 8007910:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	609a      	str	r2, [r3, #8]
}
 8007918:	bf00      	nop
 800791a:	3714      	adds	r7, #20
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
 8007930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800793e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	021a      	lsls	r2, r3, #8
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	431a      	orrs	r2, r3
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	4313      	orrs	r3, r2
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	4313      	orrs	r3, r2
 8007950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	609a      	str	r2, [r3, #8]
}
 8007958:	bf00      	nop
 800795a:	371c      	adds	r7, #28
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4a2a      	ldr	r2, [pc, #168]	; (8007a1c <TIM_CCxChannelCmd+0xb8>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d020      	beq.n	80079ba <TIM_CCxChannelCmd+0x56>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800797e:	d01c      	beq.n	80079ba <TIM_CCxChannelCmd+0x56>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	4a27      	ldr	r2, [pc, #156]	; (8007a20 <TIM_CCxChannelCmd+0xbc>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d018      	beq.n	80079ba <TIM_CCxChannelCmd+0x56>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4a26      	ldr	r2, [pc, #152]	; (8007a24 <TIM_CCxChannelCmd+0xc0>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d014      	beq.n	80079ba <TIM_CCxChannelCmd+0x56>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4a25      	ldr	r2, [pc, #148]	; (8007a28 <TIM_CCxChannelCmd+0xc4>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d010      	beq.n	80079ba <TIM_CCxChannelCmd+0x56>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4a24      	ldr	r2, [pc, #144]	; (8007a2c <TIM_CCxChannelCmd+0xc8>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d00c      	beq.n	80079ba <TIM_CCxChannelCmd+0x56>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4a23      	ldr	r2, [pc, #140]	; (8007a30 <TIM_CCxChannelCmd+0xcc>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d008      	beq.n	80079ba <TIM_CCxChannelCmd+0x56>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	4a22      	ldr	r2, [pc, #136]	; (8007a34 <TIM_CCxChannelCmd+0xd0>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d004      	beq.n	80079ba <TIM_CCxChannelCmd+0x56>
 80079b0:	f641 11cc 	movw	r1, #6604	; 0x19cc
 80079b4:	4820      	ldr	r0, [pc, #128]	; (8007a38 <TIM_CCxChannelCmd+0xd4>)
 80079b6:	f003 fb85 	bl	800b0c4 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d010      	beq.n	80079e2 <TIM_CCxChannelCmd+0x7e>
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2b04      	cmp	r3, #4
 80079c4:	d00d      	beq.n	80079e2 <TIM_CCxChannelCmd+0x7e>
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d00a      	beq.n	80079e2 <TIM_CCxChannelCmd+0x7e>
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	2b0c      	cmp	r3, #12
 80079d0:	d007      	beq.n	80079e2 <TIM_CCxChannelCmd+0x7e>
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	2b3c      	cmp	r3, #60	; 0x3c
 80079d6:	d004      	beq.n	80079e2 <TIM_CCxChannelCmd+0x7e>
 80079d8:	f641 11cd 	movw	r1, #6605	; 0x19cd
 80079dc:	4816      	ldr	r0, [pc, #88]	; (8007a38 <TIM_CCxChannelCmd+0xd4>)
 80079de:	f003 fb71 	bl	800b0c4 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	f003 031f 	and.w	r3, r3, #31
 80079e8:	2201      	movs	r2, #1
 80079ea:	fa02 f303 	lsl.w	r3, r2, r3
 80079ee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6a1a      	ldr	r2, [r3, #32]
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	43db      	mvns	r3, r3
 80079f8:	401a      	ands	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6a1a      	ldr	r2, [r3, #32]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f003 031f 	and.w	r3, r3, #31
 8007a08:	6879      	ldr	r1, [r7, #4]
 8007a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	621a      	str	r2, [r3, #32]
}
 8007a14:	bf00      	nop
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	40010000 	.word	0x40010000
 8007a20:	40000400 	.word	0x40000400
 8007a24:	40000800 	.word	0x40000800
 8007a28:	40000c00 	.word	0x40000c00
 8007a2c:	40014000 	.word	0x40014000
 8007a30:	40014400 	.word	0x40014400
 8007a34:	40014800 	.word	0x40014800
 8007a38:	0800e2e4 	.word	0x0800e2e4

08007a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a55      	ldr	r2, [pc, #340]	; (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d018      	beq.n	8007a82 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a58:	d013      	beq.n	8007a82 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a51      	ldr	r2, [pc, #324]	; (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d00e      	beq.n	8007a82 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a4f      	ldr	r2, [pc, #316]	; (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d009      	beq.n	8007a82 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a4e      	ldr	r2, [pc, #312]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d004      	beq.n	8007a82 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a78:	f240 6164 	movw	r1, #1636	; 0x664
 8007a7c:	484c      	ldr	r0, [pc, #304]	; (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007a7e:	f003 fb21 	bl	800b0c4 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d020      	beq.n	8007acc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b10      	cmp	r3, #16
 8007a90:	d01c      	beq.n	8007acc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b20      	cmp	r3, #32
 8007a98:	d018      	beq.n	8007acc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b30      	cmp	r3, #48	; 0x30
 8007aa0:	d014      	beq.n	8007acc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b40      	cmp	r3, #64	; 0x40
 8007aa8:	d010      	beq.n	8007acc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b50      	cmp	r3, #80	; 0x50
 8007ab0:	d00c      	beq.n	8007acc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b60      	cmp	r3, #96	; 0x60
 8007ab8:	d008      	beq.n	8007acc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b70      	cmp	r3, #112	; 0x70
 8007ac0:	d004      	beq.n	8007acc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007ac2:	f240 6165 	movw	r1, #1637	; 0x665
 8007ac6:	483a      	ldr	r0, [pc, #232]	; (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007ac8:	f003 fafc 	bl	800b0c4 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	2b80      	cmp	r3, #128	; 0x80
 8007ad2:	d008      	beq.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d004      	beq.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007adc:	f240 6166 	movw	r1, #1638	; 0x666
 8007ae0:	4833      	ldr	r0, [pc, #204]	; (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007ae2:	f003 faef 	bl	800b0c4 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d101      	bne.n	8007af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007af0:	2302      	movs	r3, #2
 8007af2:	e050      	b.n	8007b96 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a1b      	ldr	r2, [pc, #108]	; (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d018      	beq.n	8007b6a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b40:	d013      	beq.n	8007b6a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a17      	ldr	r2, [pc, #92]	; (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d00e      	beq.n	8007b6a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a15      	ldr	r2, [pc, #84]	; (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d009      	beq.n	8007b6a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a14      	ldr	r2, [pc, #80]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d004      	beq.n	8007b6a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a13      	ldr	r2, [pc, #76]	; (8007bb4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d10c      	bne.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	40010000 	.word	0x40010000
 8007ba4:	40000400 	.word	0x40000400
 8007ba8:	40000800 	.word	0x40000800
 8007bac:	40000c00 	.word	0x40000c00
 8007bb0:	0800e31c 	.word	0x0800e31c
 8007bb4:	40014000 	.word	0x40014000

08007bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e0a0      	b.n	8007d34 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d02c      	beq.n	8007c54 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a4f      	ldr	r2, [pc, #316]	; (8007d3c <HAL_UART_Init+0x15c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d00e      	beq.n	8007c22 <HAL_UART_Init+0x42>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a4d      	ldr	r2, [pc, #308]	; (8007d40 <HAL_UART_Init+0x160>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d009      	beq.n	8007c22 <HAL_UART_Init+0x42>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a4c      	ldr	r2, [pc, #304]	; (8007d44 <HAL_UART_Init+0x164>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d004      	beq.n	8007c22 <HAL_UART_Init+0x42>
 8007c18:	f240 114b 	movw	r1, #331	; 0x14b
 8007c1c:	484a      	ldr	r0, [pc, #296]	; (8007d48 <HAL_UART_Init+0x168>)
 8007c1e:	f003 fa51 	bl	800b0c4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d028      	beq.n	8007c7c <HAL_UART_Init+0x9c>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c32:	d023      	beq.n	8007c7c <HAL_UART_Init+0x9c>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c3c:	d01e      	beq.n	8007c7c <HAL_UART_Init+0x9c>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c46:	d019      	beq.n	8007c7c <HAL_UART_Init+0x9c>
 8007c48:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8007c4c:	483e      	ldr	r0, [pc, #248]	; (8007d48 <HAL_UART_Init+0x168>)
 8007c4e:	f003 fa39 	bl	800b0c4 <assert_failed>
 8007c52:	e013      	b.n	8007c7c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a38      	ldr	r2, [pc, #224]	; (8007d3c <HAL_UART_Init+0x15c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00e      	beq.n	8007c7c <HAL_UART_Init+0x9c>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a37      	ldr	r2, [pc, #220]	; (8007d40 <HAL_UART_Init+0x160>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d009      	beq.n	8007c7c <HAL_UART_Init+0x9c>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a35      	ldr	r2, [pc, #212]	; (8007d44 <HAL_UART_Init+0x164>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d004      	beq.n	8007c7c <HAL_UART_Init+0x9c>
 8007c72:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8007c76:	4834      	ldr	r0, [pc, #208]	; (8007d48 <HAL_UART_Init+0x168>)
 8007c78:	f003 fa24 	bl	800b0c4 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d009      	beq.n	8007c98 <HAL_UART_Init+0xb8>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c8c:	d004      	beq.n	8007c98 <HAL_UART_Init+0xb8>
 8007c8e:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8007c92:	482d      	ldr	r0, [pc, #180]	; (8007d48 <HAL_UART_Init+0x168>)
 8007c94:	f003 fa16 	bl	800b0c4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d009      	beq.n	8007cb4 <HAL_UART_Init+0xd4>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ca8:	d004      	beq.n	8007cb4 <HAL_UART_Init+0xd4>
 8007caa:	f240 1153 	movw	r1, #339	; 0x153
 8007cae:	4826      	ldr	r0, [pc, #152]	; (8007d48 <HAL_UART_Init+0x168>)
 8007cb0:	f003 fa08 	bl	800b0c4 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d106      	bne.n	8007cce <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f003 ff3d 	bl	800bb48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2224      	movs	r2, #36	; 0x24
 8007cd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68da      	ldr	r2, [r3, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ce4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fc34 	bl	8008554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691a      	ldr	r2, [r3, #16]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cfa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	695a      	ldr	r2, [r3, #20]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d0a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d1a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	40011000 	.word	0x40011000
 8007d40:	40004400 	.word	0x40004400
 8007d44:	40011400 	.word	0x40011400
 8007d48:	0800e358 	.word	0x0800e358

08007d4c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	4613      	mov	r3, r2
 8007d58:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	d153      	bne.n	8007e0e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d002      	beq.n	8007d72 <HAL_UART_Transmit_DMA+0x26>
 8007d6c:	88fb      	ldrh	r3, [r7, #6]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e04c      	b.n	8007e10 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d101      	bne.n	8007d84 <HAL_UART_Transmit_DMA+0x38>
 8007d80:	2302      	movs	r3, #2
 8007d82:	e045      	b.n	8007e10 <HAL_UART_Transmit_DMA+0xc4>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	88fa      	ldrh	r2, [r7, #6]
 8007d96:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	88fa      	ldrh	r2, [r7, #6]
 8007d9c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2221      	movs	r2, #33	; 0x21
 8007da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db0:	4a19      	ldr	r2, [pc, #100]	; (8007e18 <HAL_UART_Transmit_DMA+0xcc>)
 8007db2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db8:	4a18      	ldr	r2, [pc, #96]	; (8007e1c <HAL_UART_Transmit_DMA+0xd0>)
 8007dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc0:	4a17      	ldr	r2, [pc, #92]	; (8007e20 <HAL_UART_Transmit_DMA+0xd4>)
 8007dc2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc8:	2200      	movs	r2, #0
 8007dca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007dcc:	f107 0308 	add.w	r3, r7, #8
 8007dd0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	6819      	ldr	r1, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3304      	adds	r3, #4
 8007de0:	461a      	mov	r2, r3
 8007de2:	88fb      	ldrh	r3, [r7, #6]
 8007de4:	f7f9 fc36 	bl	8001654 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007df0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	695a      	ldr	r2, [r3, #20]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e08:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e000      	b.n	8007e10 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007e0e:	2302      	movs	r3, #2
  }
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	08008161 	.word	0x08008161
 8007e1c:	080081b3 	.word	0x080081b3
 8007e20:	08008253 	.word	0x08008253

08007e24 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b20      	cmp	r3, #32
 8007e3c:	d166      	bne.n	8007f0c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <HAL_UART_Receive_DMA+0x26>
 8007e44:	88fb      	ldrh	r3, [r7, #6]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e05f      	b.n	8007f0e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_UART_Receive_DMA+0x38>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e058      	b.n	8007f0e <HAL_UART_Receive_DMA+0xea>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	88fa      	ldrh	r2, [r7, #6]
 8007e6e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2222      	movs	r2, #34	; 0x22
 8007e7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e82:	4a25      	ldr	r2, [pc, #148]	; (8007f18 <HAL_UART_Receive_DMA+0xf4>)
 8007e84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8a:	4a24      	ldr	r2, [pc, #144]	; (8007f1c <HAL_UART_Receive_DMA+0xf8>)
 8007e8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e92:	4a23      	ldr	r2, [pc, #140]	; (8007f20 <HAL_UART_Receive_DMA+0xfc>)
 8007e94:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8007e9e:	f107 0308 	add.w	r3, r7, #8
 8007ea2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3304      	adds	r3, #4
 8007eae:	4619      	mov	r1, r3
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	88fb      	ldrh	r3, [r7, #6]
 8007eb6:	f7f9 fbcd 	bl	8001654 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007eba:	2300      	movs	r3, #0
 8007ebc:	613b      	str	r3, [r7, #16]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	613b      	str	r3, [r7, #16]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	613b      	str	r3, [r7, #16]
 8007ece:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ee6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	695a      	ldr	r2, [r3, #20]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0201 	orr.w	r2, r2, #1
 8007ef6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	695a      	ldr	r2, [r3, #20]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f06:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	e000      	b.n	8007f0e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007f0c:	2302      	movs	r3, #2
  }
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	080081cf 	.word	0x080081cf
 8007f1c:	08008237 	.word	0x08008237
 8007f20:	08008253 	.word	0x08008253

08007f24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f003 030f 	and.w	r3, r3, #15
 8007f52:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10d      	bne.n	8007f76 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	f003 0320 	and.w	r3, r3, #32
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d008      	beq.n	8007f76 <HAL_UART_IRQHandler+0x52>
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	f003 0320 	and.w	r3, r3, #32
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fa6f 	bl	8008452 <UART_Receive_IT>
      return;
 8007f74:	e0d1      	b.n	800811a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 80b0 	beq.w	80080de <HAL_UART_IRQHandler+0x1ba>
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d105      	bne.n	8007f94 <HAL_UART_IRQHandler+0x70>
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 80a5 	beq.w	80080de <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00a      	beq.n	8007fb4 <HAL_UART_IRQHandler+0x90>
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d005      	beq.n	8007fb4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fac:	f043 0201 	orr.w	r2, r3, #1
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f003 0304 	and.w	r3, r3, #4
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <HAL_UART_IRQHandler+0xb0>
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fcc:	f043 0202 	orr.w	r2, r3, #2
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <HAL_UART_IRQHandler+0xd0>
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d005      	beq.n	8007ff4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fec:	f043 0204 	orr.w	r2, r3, #4
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f003 0308 	and.w	r3, r3, #8
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00f      	beq.n	800801e <HAL_UART_IRQHandler+0xfa>
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	f003 0320 	and.w	r3, r3, #32
 8008004:	2b00      	cmp	r3, #0
 8008006:	d104      	bne.n	8008012 <HAL_UART_IRQHandler+0xee>
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b00      	cmp	r3, #0
 8008010:	d005      	beq.n	800801e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008016:	f043 0208 	orr.w	r2, r3, #8
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008022:	2b00      	cmp	r3, #0
 8008024:	d078      	beq.n	8008118 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	f003 0320 	and.w	r3, r3, #32
 800802c:	2b00      	cmp	r3, #0
 800802e:	d007      	beq.n	8008040 <HAL_UART_IRQHandler+0x11c>
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	f003 0320 	and.w	r3, r3, #32
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fa09 	bl	8008452 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804a:	2b40      	cmp	r3, #64	; 0x40
 800804c:	bf0c      	ite	eq
 800804e:	2301      	moveq	r3, #1
 8008050:	2300      	movne	r3, #0
 8008052:	b2db      	uxtb	r3, r3
 8008054:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d102      	bne.n	8008068 <HAL_UART_IRQHandler+0x144>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d031      	beq.n	80080cc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f952 	bl	8008312 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b40      	cmp	r3, #64	; 0x40
 800807a:	d123      	bne.n	80080c4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	695a      	ldr	r2, [r3, #20]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800808a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008090:	2b00      	cmp	r3, #0
 8008092:	d013      	beq.n	80080bc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008098:	4a21      	ldr	r2, [pc, #132]	; (8008120 <HAL_UART_IRQHandler+0x1fc>)
 800809a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7f9 fb3d 	bl	8001720 <HAL_DMA_Abort_IT>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d016      	beq.n	80080da <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80080b6:	4610      	mov	r0, r2
 80080b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ba:	e00e      	b.n	80080da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f845 	bl	800814c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c2:	e00a      	b.n	80080da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f841 	bl	800814c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ca:	e006      	b.n	80080da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f83d 	bl	800814c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80080d8:	e01e      	b.n	8008118 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080da:	bf00      	nop
    return;
 80080dc:	e01c      	b.n	8008118 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d008      	beq.n	80080fa <HAL_UART_IRQHandler+0x1d6>
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f93f 	bl	8008376 <UART_Transmit_IT>
    return;
 80080f8:	e00f      	b.n	800811a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00a      	beq.n	800811a <HAL_UART_IRQHandler+0x1f6>
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	d005      	beq.n	800811a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f987 	bl	8008422 <UART_EndTransmit_IT>
    return;
 8008114:	bf00      	nop
 8008116:	e000      	b.n	800811a <HAL_UART_IRQHandler+0x1f6>
    return;
 8008118:	bf00      	nop
  }
}
 800811a:	3720      	adds	r7, #32
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	0800834f 	.word	0x0800834f

08008124 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008178:	2b00      	cmp	r3, #0
 800817a:	d113      	bne.n	80081a4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	695a      	ldr	r2, [r3, #20]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008190:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68da      	ldr	r2, [r3, #12]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081a0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081a2:	e002      	b.n	80081aa <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f003 fb79 	bl	800b89c <HAL_UART_TxCpltCallback>
}
 80081aa:	bf00      	nop
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081be:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f7ff ffaf 	bl	8008124 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081c6:	bf00      	nop
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081da:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d11e      	bne.n	8008228 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68da      	ldr	r2, [r3, #12]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081fe:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	695a      	ldr	r2, [r3, #20]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 0201 	bic.w	r2, r2, #1
 800820e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	695a      	ldr	r2, [r3, #20]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800821e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2220      	movs	r2, #32
 8008224:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f003 fb41 	bl	800b8b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800822e:	bf00      	nop
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008242:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7ff ff77 	bl	8008138 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800824a:	bf00      	nop
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b084      	sub	sp, #16
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800825a:	2300      	movs	r3, #0
 800825c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008262:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826e:	2b80      	cmp	r3, #128	; 0x80
 8008270:	bf0c      	ite	eq
 8008272:	2301      	moveq	r3, #1
 8008274:	2300      	movne	r3, #0
 8008276:	b2db      	uxtb	r3, r3
 8008278:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b21      	cmp	r3, #33	; 0x21
 8008284:	d108      	bne.n	8008298 <UART_DMAError+0x46>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d005      	beq.n	8008298 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2200      	movs	r2, #0
 8008290:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008292:	68b8      	ldr	r0, [r7, #8]
 8008294:	f000 f827 	bl	80082e6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a2:	2b40      	cmp	r3, #64	; 0x40
 80082a4:	bf0c      	ite	eq
 80082a6:	2301      	moveq	r3, #1
 80082a8:	2300      	movne	r3, #0
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b22      	cmp	r3, #34	; 0x22
 80082b8:	d108      	bne.n	80082cc <UART_DMAError+0x7a>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d005      	beq.n	80082cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	2200      	movs	r2, #0
 80082c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80082c6:	68b8      	ldr	r0, [r7, #8]
 80082c8:	f000 f823 	bl	8008312 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d0:	f043 0210 	orr.w	r2, r3, #16
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082d8:	68b8      	ldr	r0, [r7, #8]
 80082da:	f7ff ff37 	bl	800814c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082de:	bf00      	nop
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80082fc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2220      	movs	r2, #32
 8008302:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68da      	ldr	r2, [r3, #12]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008328:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	695a      	ldr	r2, [r3, #20]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0201 	bic.w	r2, r2, #1
 8008338:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2220      	movs	r2, #32
 800833e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008342:	bf00      	nop
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff feef 	bl	800814c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800836e:	bf00      	nop
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008376:	b480      	push	{r7}
 8008378:	b085      	sub	sp, #20
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b21      	cmp	r3, #33	; 0x21
 8008388:	d144      	bne.n	8008414 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008392:	d11a      	bne.n	80083ca <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a1b      	ldr	r3, [r3, #32]
 8008398:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083a8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d105      	bne.n	80083be <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	1c9a      	adds	r2, r3, #2
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	621a      	str	r2, [r3, #32]
 80083bc:	e00e      	b.n	80083dc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	621a      	str	r2, [r3, #32]
 80083c8:	e008      	b.n	80083dc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	1c59      	adds	r1, r3, #1
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	6211      	str	r1, [r2, #32]
 80083d4:	781a      	ldrb	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	3b01      	subs	r3, #1
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	4619      	mov	r1, r3
 80083ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10f      	bne.n	8008410 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68da      	ldr	r2, [r3, #12]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800840e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	e000      	b.n	8008416 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008414:	2302      	movs	r3, #2
  }
}
 8008416:	4618      	mov	r0, r3
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68da      	ldr	r2, [r3, #12]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008438:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2220      	movs	r2, #32
 800843e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f003 fa2a 	bl	800b89c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b084      	sub	sp, #16
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b22      	cmp	r3, #34	; 0x22
 8008464:	d171      	bne.n	800854a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800846e:	d123      	bne.n	80084b8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008474:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10e      	bne.n	800849c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	b29b      	uxth	r3, r3
 8008486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800848a:	b29a      	uxth	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008494:	1c9a      	adds	r2, r3, #2
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	629a      	str	r2, [r3, #40]	; 0x28
 800849a:	e029      	b.n	80084f0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	629a      	str	r2, [r3, #40]	; 0x28
 80084b6:	e01b      	b.n	80084f0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10a      	bne.n	80084d6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6858      	ldr	r0, [r3, #4]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ca:	1c59      	adds	r1, r3, #1
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	6291      	str	r1, [r2, #40]	; 0x28
 80084d0:	b2c2      	uxtb	r2, r0
 80084d2:	701a      	strb	r2, [r3, #0]
 80084d4:	e00c      	b.n	80084f0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e2:	1c58      	adds	r0, r3, #1
 80084e4:	6879      	ldr	r1, [r7, #4]
 80084e6:	6288      	str	r0, [r1, #40]	; 0x28
 80084e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	3b01      	subs	r3, #1
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	4619      	mov	r1, r3
 80084fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008500:	2b00      	cmp	r3, #0
 8008502:	d120      	bne.n	8008546 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0220 	bic.w	r2, r2, #32
 8008512:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68da      	ldr	r2, [r3, #12]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008522:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	695a      	ldr	r2, [r3, #20]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0201 	bic.w	r2, r2, #1
 8008532:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2220      	movs	r2, #32
 8008538:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f003 f9b7 	bl	800b8b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	e002      	b.n	800854c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	e000      	b.n	800854c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800854a:	2302      	movs	r3, #2
  }
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008558:	b085      	sub	sp, #20
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	4a9a      	ldr	r2, [pc, #616]	; (80087cc <UART_SetConfig+0x278>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d904      	bls.n	8008572 <UART_SetConfig+0x1e>
 8008568:	f640 31fb 	movw	r1, #3067	; 0xbfb
 800856c:	4898      	ldr	r0, [pc, #608]	; (80087d0 <UART_SetConfig+0x27c>)
 800856e:	f002 fda9 	bl	800b0c4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d009      	beq.n	800858e <UART_SetConfig+0x3a>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008582:	d004      	beq.n	800858e <UART_SetConfig+0x3a>
 8008584:	f640 31fc 	movw	r1, #3068	; 0xbfc
 8008588:	4891      	ldr	r0, [pc, #580]	; (80087d0 <UART_SetConfig+0x27c>)
 800858a:	f002 fd9b 	bl	800b0c4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00e      	beq.n	80085b4 <UART_SetConfig+0x60>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800859e:	d009      	beq.n	80085b4 <UART_SetConfig+0x60>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80085a8:	d004      	beq.n	80085b4 <UART_SetConfig+0x60>
 80085aa:	f640 31fd 	movw	r1, #3069	; 0xbfd
 80085ae:	4888      	ldr	r0, [pc, #544]	; (80087d0 <UART_SetConfig+0x27c>)
 80085b0:	f002 fd88 	bl	800b0c4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	695a      	ldr	r2, [r3, #20]
 80085b8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80085bc:	4013      	ands	r3, r2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d103      	bne.n	80085ca <UART_SetConfig+0x76>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d104      	bne.n	80085d4 <UART_SetConfig+0x80>
 80085ca:	f640 31fe 	movw	r1, #3070	; 0xbfe
 80085ce:	4880      	ldr	r0, [pc, #512]	; (80087d0 <UART_SetConfig+0x27c>)
 80085d0:	f002 fd78 	bl	800b0c4 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68da      	ldr	r2, [r3, #12]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	689a      	ldr	r2, [r3, #8]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	431a      	orrs	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	431a      	orrs	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800860c:	f023 030c 	bic.w	r3, r3, #12
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	6812      	ldr	r2, [r2, #0]
 8008614:	68f9      	ldr	r1, [r7, #12]
 8008616:	430b      	orrs	r3, r1
 8008618:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	699a      	ldr	r2, [r3, #24]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008638:	f040 818f 	bne.w	800895a <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a64      	ldr	r2, [pc, #400]	; (80087d4 <UART_SetConfig+0x280>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d005      	beq.n	8008652 <UART_SetConfig+0xfe>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a63      	ldr	r2, [pc, #396]	; (80087d8 <UART_SetConfig+0x284>)
 800864c:	4293      	cmp	r3, r2
 800864e:	f040 80c7 	bne.w	80087e0 <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008652:	f7fc f9ab 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 8008656:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	461d      	mov	r5, r3
 800865c:	f04f 0600 	mov.w	r6, #0
 8008660:	46a8      	mov	r8, r5
 8008662:	46b1      	mov	r9, r6
 8008664:	eb18 0308 	adds.w	r3, r8, r8
 8008668:	eb49 0409 	adc.w	r4, r9, r9
 800866c:	4698      	mov	r8, r3
 800866e:	46a1      	mov	r9, r4
 8008670:	eb18 0805 	adds.w	r8, r8, r5
 8008674:	eb49 0906 	adc.w	r9, r9, r6
 8008678:	f04f 0100 	mov.w	r1, #0
 800867c:	f04f 0200 	mov.w	r2, #0
 8008680:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008684:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008688:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800868c:	4688      	mov	r8, r1
 800868e:	4691      	mov	r9, r2
 8008690:	eb18 0005 	adds.w	r0, r8, r5
 8008694:	eb49 0106 	adc.w	r1, r9, r6
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	461d      	mov	r5, r3
 800869e:	f04f 0600 	mov.w	r6, #0
 80086a2:	196b      	adds	r3, r5, r5
 80086a4:	eb46 0406 	adc.w	r4, r6, r6
 80086a8:	461a      	mov	r2, r3
 80086aa:	4623      	mov	r3, r4
 80086ac:	f7f8 fa84 	bl	8000bb8 <__aeabi_uldivmod>
 80086b0:	4603      	mov	r3, r0
 80086b2:	460c      	mov	r4, r1
 80086b4:	461a      	mov	r2, r3
 80086b6:	4b49      	ldr	r3, [pc, #292]	; (80087dc <UART_SetConfig+0x288>)
 80086b8:	fba3 2302 	umull	r2, r3, r3, r2
 80086bc:	095b      	lsrs	r3, r3, #5
 80086be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	461d      	mov	r5, r3
 80086c6:	f04f 0600 	mov.w	r6, #0
 80086ca:	46a9      	mov	r9, r5
 80086cc:	46b2      	mov	sl, r6
 80086ce:	eb19 0309 	adds.w	r3, r9, r9
 80086d2:	eb4a 040a 	adc.w	r4, sl, sl
 80086d6:	4699      	mov	r9, r3
 80086d8:	46a2      	mov	sl, r4
 80086da:	eb19 0905 	adds.w	r9, r9, r5
 80086de:	eb4a 0a06 	adc.w	sl, sl, r6
 80086e2:	f04f 0100 	mov.w	r1, #0
 80086e6:	f04f 0200 	mov.w	r2, #0
 80086ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086f6:	4689      	mov	r9, r1
 80086f8:	4692      	mov	sl, r2
 80086fa:	eb19 0005 	adds.w	r0, r9, r5
 80086fe:	eb4a 0106 	adc.w	r1, sl, r6
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	461d      	mov	r5, r3
 8008708:	f04f 0600 	mov.w	r6, #0
 800870c:	196b      	adds	r3, r5, r5
 800870e:	eb46 0406 	adc.w	r4, r6, r6
 8008712:	461a      	mov	r2, r3
 8008714:	4623      	mov	r3, r4
 8008716:	f7f8 fa4f 	bl	8000bb8 <__aeabi_uldivmod>
 800871a:	4603      	mov	r3, r0
 800871c:	460c      	mov	r4, r1
 800871e:	461a      	mov	r2, r3
 8008720:	4b2e      	ldr	r3, [pc, #184]	; (80087dc <UART_SetConfig+0x288>)
 8008722:	fba3 1302 	umull	r1, r3, r3, r2
 8008726:	095b      	lsrs	r3, r3, #5
 8008728:	2164      	movs	r1, #100	; 0x64
 800872a:	fb01 f303 	mul.w	r3, r1, r3
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	3332      	adds	r3, #50	; 0x32
 8008734:	4a29      	ldr	r2, [pc, #164]	; (80087dc <UART_SetConfig+0x288>)
 8008736:	fba2 2303 	umull	r2, r3, r2, r3
 800873a:	095b      	lsrs	r3, r3, #5
 800873c:	005b      	lsls	r3, r3, #1
 800873e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008742:	4498      	add	r8, r3
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	461d      	mov	r5, r3
 8008748:	f04f 0600 	mov.w	r6, #0
 800874c:	46a9      	mov	r9, r5
 800874e:	46b2      	mov	sl, r6
 8008750:	eb19 0309 	adds.w	r3, r9, r9
 8008754:	eb4a 040a 	adc.w	r4, sl, sl
 8008758:	4699      	mov	r9, r3
 800875a:	46a2      	mov	sl, r4
 800875c:	eb19 0905 	adds.w	r9, r9, r5
 8008760:	eb4a 0a06 	adc.w	sl, sl, r6
 8008764:	f04f 0100 	mov.w	r1, #0
 8008768:	f04f 0200 	mov.w	r2, #0
 800876c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008770:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008774:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008778:	4689      	mov	r9, r1
 800877a:	4692      	mov	sl, r2
 800877c:	eb19 0005 	adds.w	r0, r9, r5
 8008780:	eb4a 0106 	adc.w	r1, sl, r6
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	461d      	mov	r5, r3
 800878a:	f04f 0600 	mov.w	r6, #0
 800878e:	196b      	adds	r3, r5, r5
 8008790:	eb46 0406 	adc.w	r4, r6, r6
 8008794:	461a      	mov	r2, r3
 8008796:	4623      	mov	r3, r4
 8008798:	f7f8 fa0e 	bl	8000bb8 <__aeabi_uldivmod>
 800879c:	4603      	mov	r3, r0
 800879e:	460c      	mov	r4, r1
 80087a0:	461a      	mov	r2, r3
 80087a2:	4b0e      	ldr	r3, [pc, #56]	; (80087dc <UART_SetConfig+0x288>)
 80087a4:	fba3 1302 	umull	r1, r3, r3, r2
 80087a8:	095b      	lsrs	r3, r3, #5
 80087aa:	2164      	movs	r1, #100	; 0x64
 80087ac:	fb01 f303 	mul.w	r3, r1, r3
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	3332      	adds	r3, #50	; 0x32
 80087b6:	4a09      	ldr	r2, [pc, #36]	; (80087dc <UART_SetConfig+0x288>)
 80087b8:	fba2 2303 	umull	r2, r3, r2, r3
 80087bc:	095b      	lsrs	r3, r3, #5
 80087be:	f003 0207 	and.w	r2, r3, #7
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4442      	add	r2, r8
 80087c8:	609a      	str	r2, [r3, #8]
 80087ca:	e27a      	b.n	8008cc2 <UART_SetConfig+0x76e>
 80087cc:	00a037a0 	.word	0x00a037a0
 80087d0:	0800e358 	.word	0x0800e358
 80087d4:	40011000 	.word	0x40011000
 80087d8:	40011400 	.word	0x40011400
 80087dc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087e0:	f7fc f8d0 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 80087e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	461d      	mov	r5, r3
 80087ea:	f04f 0600 	mov.w	r6, #0
 80087ee:	46a8      	mov	r8, r5
 80087f0:	46b1      	mov	r9, r6
 80087f2:	eb18 0308 	adds.w	r3, r8, r8
 80087f6:	eb49 0409 	adc.w	r4, r9, r9
 80087fa:	4698      	mov	r8, r3
 80087fc:	46a1      	mov	r9, r4
 80087fe:	eb18 0805 	adds.w	r8, r8, r5
 8008802:	eb49 0906 	adc.w	r9, r9, r6
 8008806:	f04f 0100 	mov.w	r1, #0
 800880a:	f04f 0200 	mov.w	r2, #0
 800880e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008812:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008816:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800881a:	4688      	mov	r8, r1
 800881c:	4691      	mov	r9, r2
 800881e:	eb18 0005 	adds.w	r0, r8, r5
 8008822:	eb49 0106 	adc.w	r1, r9, r6
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	461d      	mov	r5, r3
 800882c:	f04f 0600 	mov.w	r6, #0
 8008830:	196b      	adds	r3, r5, r5
 8008832:	eb46 0406 	adc.w	r4, r6, r6
 8008836:	461a      	mov	r2, r3
 8008838:	4623      	mov	r3, r4
 800883a:	f7f8 f9bd 	bl	8000bb8 <__aeabi_uldivmod>
 800883e:	4603      	mov	r3, r0
 8008840:	460c      	mov	r4, r1
 8008842:	461a      	mov	r2, r3
 8008844:	4bb3      	ldr	r3, [pc, #716]	; (8008b14 <UART_SetConfig+0x5c0>)
 8008846:	fba3 2302 	umull	r2, r3, r3, r2
 800884a:	095b      	lsrs	r3, r3, #5
 800884c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	461d      	mov	r5, r3
 8008854:	f04f 0600 	mov.w	r6, #0
 8008858:	46a9      	mov	r9, r5
 800885a:	46b2      	mov	sl, r6
 800885c:	eb19 0309 	adds.w	r3, r9, r9
 8008860:	eb4a 040a 	adc.w	r4, sl, sl
 8008864:	4699      	mov	r9, r3
 8008866:	46a2      	mov	sl, r4
 8008868:	eb19 0905 	adds.w	r9, r9, r5
 800886c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008870:	f04f 0100 	mov.w	r1, #0
 8008874:	f04f 0200 	mov.w	r2, #0
 8008878:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800887c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008880:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008884:	4689      	mov	r9, r1
 8008886:	4692      	mov	sl, r2
 8008888:	eb19 0005 	adds.w	r0, r9, r5
 800888c:	eb4a 0106 	adc.w	r1, sl, r6
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	461d      	mov	r5, r3
 8008896:	f04f 0600 	mov.w	r6, #0
 800889a:	196b      	adds	r3, r5, r5
 800889c:	eb46 0406 	adc.w	r4, r6, r6
 80088a0:	461a      	mov	r2, r3
 80088a2:	4623      	mov	r3, r4
 80088a4:	f7f8 f988 	bl	8000bb8 <__aeabi_uldivmod>
 80088a8:	4603      	mov	r3, r0
 80088aa:	460c      	mov	r4, r1
 80088ac:	461a      	mov	r2, r3
 80088ae:	4b99      	ldr	r3, [pc, #612]	; (8008b14 <UART_SetConfig+0x5c0>)
 80088b0:	fba3 1302 	umull	r1, r3, r3, r2
 80088b4:	095b      	lsrs	r3, r3, #5
 80088b6:	2164      	movs	r1, #100	; 0x64
 80088b8:	fb01 f303 	mul.w	r3, r1, r3
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	00db      	lsls	r3, r3, #3
 80088c0:	3332      	adds	r3, #50	; 0x32
 80088c2:	4a94      	ldr	r2, [pc, #592]	; (8008b14 <UART_SetConfig+0x5c0>)
 80088c4:	fba2 2303 	umull	r2, r3, r2, r3
 80088c8:	095b      	lsrs	r3, r3, #5
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088d0:	4498      	add	r8, r3
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	461d      	mov	r5, r3
 80088d6:	f04f 0600 	mov.w	r6, #0
 80088da:	46a9      	mov	r9, r5
 80088dc:	46b2      	mov	sl, r6
 80088de:	eb19 0309 	adds.w	r3, r9, r9
 80088e2:	eb4a 040a 	adc.w	r4, sl, sl
 80088e6:	4699      	mov	r9, r3
 80088e8:	46a2      	mov	sl, r4
 80088ea:	eb19 0905 	adds.w	r9, r9, r5
 80088ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80088f2:	f04f 0100 	mov.w	r1, #0
 80088f6:	f04f 0200 	mov.w	r2, #0
 80088fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008902:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008906:	4689      	mov	r9, r1
 8008908:	4692      	mov	sl, r2
 800890a:	eb19 0005 	adds.w	r0, r9, r5
 800890e:	eb4a 0106 	adc.w	r1, sl, r6
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	461d      	mov	r5, r3
 8008918:	f04f 0600 	mov.w	r6, #0
 800891c:	196b      	adds	r3, r5, r5
 800891e:	eb46 0406 	adc.w	r4, r6, r6
 8008922:	461a      	mov	r2, r3
 8008924:	4623      	mov	r3, r4
 8008926:	f7f8 f947 	bl	8000bb8 <__aeabi_uldivmod>
 800892a:	4603      	mov	r3, r0
 800892c:	460c      	mov	r4, r1
 800892e:	461a      	mov	r2, r3
 8008930:	4b78      	ldr	r3, [pc, #480]	; (8008b14 <UART_SetConfig+0x5c0>)
 8008932:	fba3 1302 	umull	r1, r3, r3, r2
 8008936:	095b      	lsrs	r3, r3, #5
 8008938:	2164      	movs	r1, #100	; 0x64
 800893a:	fb01 f303 	mul.w	r3, r1, r3
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	00db      	lsls	r3, r3, #3
 8008942:	3332      	adds	r3, #50	; 0x32
 8008944:	4a73      	ldr	r2, [pc, #460]	; (8008b14 <UART_SetConfig+0x5c0>)
 8008946:	fba2 2303 	umull	r2, r3, r2, r3
 800894a:	095b      	lsrs	r3, r3, #5
 800894c:	f003 0207 	and.w	r2, r3, #7
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4442      	add	r2, r8
 8008956:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008958:	e1b3      	b.n	8008cc2 <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a6e      	ldr	r2, [pc, #440]	; (8008b18 <UART_SetConfig+0x5c4>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d005      	beq.n	8008970 <UART_SetConfig+0x41c>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a6c      	ldr	r2, [pc, #432]	; (8008b1c <UART_SetConfig+0x5c8>)
 800896a:	4293      	cmp	r3, r2
 800896c:	f040 80d8 	bne.w	8008b20 <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008970:	f7fc f81c 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 8008974:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	469a      	mov	sl, r3
 800897a:	f04f 0b00 	mov.w	fp, #0
 800897e:	46d0      	mov	r8, sl
 8008980:	46d9      	mov	r9, fp
 8008982:	eb18 0308 	adds.w	r3, r8, r8
 8008986:	eb49 0409 	adc.w	r4, r9, r9
 800898a:	4698      	mov	r8, r3
 800898c:	46a1      	mov	r9, r4
 800898e:	eb18 080a 	adds.w	r8, r8, sl
 8008992:	eb49 090b 	adc.w	r9, r9, fp
 8008996:	f04f 0100 	mov.w	r1, #0
 800899a:	f04f 0200 	mov.w	r2, #0
 800899e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80089a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80089a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80089aa:	4688      	mov	r8, r1
 80089ac:	4691      	mov	r9, r2
 80089ae:	eb1a 0508 	adds.w	r5, sl, r8
 80089b2:	eb4b 0609 	adc.w	r6, fp, r9
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	4619      	mov	r1, r3
 80089bc:	f04f 0200 	mov.w	r2, #0
 80089c0:	f04f 0300 	mov.w	r3, #0
 80089c4:	f04f 0400 	mov.w	r4, #0
 80089c8:	0094      	lsls	r4, r2, #2
 80089ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80089ce:	008b      	lsls	r3, r1, #2
 80089d0:	461a      	mov	r2, r3
 80089d2:	4623      	mov	r3, r4
 80089d4:	4628      	mov	r0, r5
 80089d6:	4631      	mov	r1, r6
 80089d8:	f7f8 f8ee 	bl	8000bb8 <__aeabi_uldivmod>
 80089dc:	4603      	mov	r3, r0
 80089de:	460c      	mov	r4, r1
 80089e0:	461a      	mov	r2, r3
 80089e2:	4b4c      	ldr	r3, [pc, #304]	; (8008b14 <UART_SetConfig+0x5c0>)
 80089e4:	fba3 2302 	umull	r2, r3, r3, r2
 80089e8:	095b      	lsrs	r3, r3, #5
 80089ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	469b      	mov	fp, r3
 80089f2:	f04f 0c00 	mov.w	ip, #0
 80089f6:	46d9      	mov	r9, fp
 80089f8:	46e2      	mov	sl, ip
 80089fa:	eb19 0309 	adds.w	r3, r9, r9
 80089fe:	eb4a 040a 	adc.w	r4, sl, sl
 8008a02:	4699      	mov	r9, r3
 8008a04:	46a2      	mov	sl, r4
 8008a06:	eb19 090b 	adds.w	r9, r9, fp
 8008a0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008a0e:	f04f 0100 	mov.w	r1, #0
 8008a12:	f04f 0200 	mov.w	r2, #0
 8008a16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a22:	4689      	mov	r9, r1
 8008a24:	4692      	mov	sl, r2
 8008a26:	eb1b 0509 	adds.w	r5, fp, r9
 8008a2a:	eb4c 060a 	adc.w	r6, ip, sl
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	4619      	mov	r1, r3
 8008a34:	f04f 0200 	mov.w	r2, #0
 8008a38:	f04f 0300 	mov.w	r3, #0
 8008a3c:	f04f 0400 	mov.w	r4, #0
 8008a40:	0094      	lsls	r4, r2, #2
 8008a42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a46:	008b      	lsls	r3, r1, #2
 8008a48:	461a      	mov	r2, r3
 8008a4a:	4623      	mov	r3, r4
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	4631      	mov	r1, r6
 8008a50:	f7f8 f8b2 	bl	8000bb8 <__aeabi_uldivmod>
 8008a54:	4603      	mov	r3, r0
 8008a56:	460c      	mov	r4, r1
 8008a58:	461a      	mov	r2, r3
 8008a5a:	4b2e      	ldr	r3, [pc, #184]	; (8008b14 <UART_SetConfig+0x5c0>)
 8008a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a60:	095b      	lsrs	r3, r3, #5
 8008a62:	2164      	movs	r1, #100	; 0x64
 8008a64:	fb01 f303 	mul.w	r3, r1, r3
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	011b      	lsls	r3, r3, #4
 8008a6c:	3332      	adds	r3, #50	; 0x32
 8008a6e:	4a29      	ldr	r2, [pc, #164]	; (8008b14 <UART_SetConfig+0x5c0>)
 8008a70:	fba2 2303 	umull	r2, r3, r2, r3
 8008a74:	095b      	lsrs	r3, r3, #5
 8008a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a7a:	4498      	add	r8, r3
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	469b      	mov	fp, r3
 8008a80:	f04f 0c00 	mov.w	ip, #0
 8008a84:	46d9      	mov	r9, fp
 8008a86:	46e2      	mov	sl, ip
 8008a88:	eb19 0309 	adds.w	r3, r9, r9
 8008a8c:	eb4a 040a 	adc.w	r4, sl, sl
 8008a90:	4699      	mov	r9, r3
 8008a92:	46a2      	mov	sl, r4
 8008a94:	eb19 090b 	adds.w	r9, r9, fp
 8008a98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008a9c:	f04f 0100 	mov.w	r1, #0
 8008aa0:	f04f 0200 	mov.w	r2, #0
 8008aa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008aa8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008aac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ab0:	4689      	mov	r9, r1
 8008ab2:	4692      	mov	sl, r2
 8008ab4:	eb1b 0509 	adds.w	r5, fp, r9
 8008ab8:	eb4c 060a 	adc.w	r6, ip, sl
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	f04f 0200 	mov.w	r2, #0
 8008ac6:	f04f 0300 	mov.w	r3, #0
 8008aca:	f04f 0400 	mov.w	r4, #0
 8008ace:	0094      	lsls	r4, r2, #2
 8008ad0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ad4:	008b      	lsls	r3, r1, #2
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	4623      	mov	r3, r4
 8008ada:	4628      	mov	r0, r5
 8008adc:	4631      	mov	r1, r6
 8008ade:	f7f8 f86b 	bl	8000bb8 <__aeabi_uldivmod>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	4b0a      	ldr	r3, [pc, #40]	; (8008b14 <UART_SetConfig+0x5c0>)
 8008aea:	fba3 1302 	umull	r1, r3, r3, r2
 8008aee:	095b      	lsrs	r3, r3, #5
 8008af0:	2164      	movs	r1, #100	; 0x64
 8008af2:	fb01 f303 	mul.w	r3, r1, r3
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	011b      	lsls	r3, r3, #4
 8008afa:	3332      	adds	r3, #50	; 0x32
 8008afc:	4a05      	ldr	r2, [pc, #20]	; (8008b14 <UART_SetConfig+0x5c0>)
 8008afe:	fba2 2303 	umull	r2, r3, r2, r3
 8008b02:	095b      	lsrs	r3, r3, #5
 8008b04:	f003 020f 	and.w	r2, r3, #15
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4442      	add	r2, r8
 8008b0e:	609a      	str	r2, [r3, #8]
 8008b10:	e0d7      	b.n	8008cc2 <UART_SetConfig+0x76e>
 8008b12:	bf00      	nop
 8008b14:	51eb851f 	.word	0x51eb851f
 8008b18:	40011000 	.word	0x40011000
 8008b1c:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b20:	f7fb ff30 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8008b24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	469a      	mov	sl, r3
 8008b2a:	f04f 0b00 	mov.w	fp, #0
 8008b2e:	46d0      	mov	r8, sl
 8008b30:	46d9      	mov	r9, fp
 8008b32:	eb18 0308 	adds.w	r3, r8, r8
 8008b36:	eb49 0409 	adc.w	r4, r9, r9
 8008b3a:	4698      	mov	r8, r3
 8008b3c:	46a1      	mov	r9, r4
 8008b3e:	eb18 080a 	adds.w	r8, r8, sl
 8008b42:	eb49 090b 	adc.w	r9, r9, fp
 8008b46:	f04f 0100 	mov.w	r1, #0
 8008b4a:	f04f 0200 	mov.w	r2, #0
 8008b4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008b52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008b56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008b5a:	4688      	mov	r8, r1
 8008b5c:	4691      	mov	r9, r2
 8008b5e:	eb1a 0508 	adds.w	r5, sl, r8
 8008b62:	eb4b 0609 	adc.w	r6, fp, r9
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	f04f 0200 	mov.w	r2, #0
 8008b70:	f04f 0300 	mov.w	r3, #0
 8008b74:	f04f 0400 	mov.w	r4, #0
 8008b78:	0094      	lsls	r4, r2, #2
 8008b7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b7e:	008b      	lsls	r3, r1, #2
 8008b80:	461a      	mov	r2, r3
 8008b82:	4623      	mov	r3, r4
 8008b84:	4628      	mov	r0, r5
 8008b86:	4631      	mov	r1, r6
 8008b88:	f7f8 f816 	bl	8000bb8 <__aeabi_uldivmod>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	460c      	mov	r4, r1
 8008b90:	461a      	mov	r2, r3
 8008b92:	4b4e      	ldr	r3, [pc, #312]	; (8008ccc <UART_SetConfig+0x778>)
 8008b94:	fba3 2302 	umull	r2, r3, r3, r2
 8008b98:	095b      	lsrs	r3, r3, #5
 8008b9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	469b      	mov	fp, r3
 8008ba2:	f04f 0c00 	mov.w	ip, #0
 8008ba6:	46d9      	mov	r9, fp
 8008ba8:	46e2      	mov	sl, ip
 8008baa:	eb19 0309 	adds.w	r3, r9, r9
 8008bae:	eb4a 040a 	adc.w	r4, sl, sl
 8008bb2:	4699      	mov	r9, r3
 8008bb4:	46a2      	mov	sl, r4
 8008bb6:	eb19 090b 	adds.w	r9, r9, fp
 8008bba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008bbe:	f04f 0100 	mov.w	r1, #0
 8008bc2:	f04f 0200 	mov.w	r2, #0
 8008bc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008bce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008bd2:	4689      	mov	r9, r1
 8008bd4:	4692      	mov	sl, r2
 8008bd6:	eb1b 0509 	adds.w	r5, fp, r9
 8008bda:	eb4c 060a 	adc.w	r6, ip, sl
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	4619      	mov	r1, r3
 8008be4:	f04f 0200 	mov.w	r2, #0
 8008be8:	f04f 0300 	mov.w	r3, #0
 8008bec:	f04f 0400 	mov.w	r4, #0
 8008bf0:	0094      	lsls	r4, r2, #2
 8008bf2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008bf6:	008b      	lsls	r3, r1, #2
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	4623      	mov	r3, r4
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	4631      	mov	r1, r6
 8008c00:	f7f7 ffda 	bl	8000bb8 <__aeabi_uldivmod>
 8008c04:	4603      	mov	r3, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	461a      	mov	r2, r3
 8008c0a:	4b30      	ldr	r3, [pc, #192]	; (8008ccc <UART_SetConfig+0x778>)
 8008c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c10:	095b      	lsrs	r3, r3, #5
 8008c12:	2164      	movs	r1, #100	; 0x64
 8008c14:	fb01 f303 	mul.w	r3, r1, r3
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	011b      	lsls	r3, r3, #4
 8008c1c:	3332      	adds	r3, #50	; 0x32
 8008c1e:	4a2b      	ldr	r2, [pc, #172]	; (8008ccc <UART_SetConfig+0x778>)
 8008c20:	fba2 2303 	umull	r2, r3, r2, r3
 8008c24:	095b      	lsrs	r3, r3, #5
 8008c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c2a:	4498      	add	r8, r3
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	469b      	mov	fp, r3
 8008c30:	f04f 0c00 	mov.w	ip, #0
 8008c34:	46d9      	mov	r9, fp
 8008c36:	46e2      	mov	sl, ip
 8008c38:	eb19 0309 	adds.w	r3, r9, r9
 8008c3c:	eb4a 040a 	adc.w	r4, sl, sl
 8008c40:	4699      	mov	r9, r3
 8008c42:	46a2      	mov	sl, r4
 8008c44:	eb19 090b 	adds.w	r9, r9, fp
 8008c48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008c4c:	f04f 0100 	mov.w	r1, #0
 8008c50:	f04f 0200 	mov.w	r2, #0
 8008c54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c60:	4689      	mov	r9, r1
 8008c62:	4692      	mov	sl, r2
 8008c64:	eb1b 0509 	adds.w	r5, fp, r9
 8008c68:	eb4c 060a 	adc.w	r6, ip, sl
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	4619      	mov	r1, r3
 8008c72:	f04f 0200 	mov.w	r2, #0
 8008c76:	f04f 0300 	mov.w	r3, #0
 8008c7a:	f04f 0400 	mov.w	r4, #0
 8008c7e:	0094      	lsls	r4, r2, #2
 8008c80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008c84:	008b      	lsls	r3, r1, #2
 8008c86:	461a      	mov	r2, r3
 8008c88:	4623      	mov	r3, r4
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	f7f7 ff93 	bl	8000bb8 <__aeabi_uldivmod>
 8008c92:	4603      	mov	r3, r0
 8008c94:	460c      	mov	r4, r1
 8008c96:	461a      	mov	r2, r3
 8008c98:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <UART_SetConfig+0x778>)
 8008c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c9e:	095b      	lsrs	r3, r3, #5
 8008ca0:	2164      	movs	r1, #100	; 0x64
 8008ca2:	fb01 f303 	mul.w	r3, r1, r3
 8008ca6:	1ad3      	subs	r3, r2, r3
 8008ca8:	011b      	lsls	r3, r3, #4
 8008caa:	3332      	adds	r3, #50	; 0x32
 8008cac:	4a07      	ldr	r2, [pc, #28]	; (8008ccc <UART_SetConfig+0x778>)
 8008cae:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb2:	095b      	lsrs	r3, r3, #5
 8008cb4:	f003 020f 	and.w	r2, r3, #15
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4442      	add	r2, r8
 8008cbe:	609a      	str	r2, [r3, #8]
}
 8008cc0:	e7ff      	b.n	8008cc2 <UART_SetConfig+0x76e>
 8008cc2:	bf00      	nop
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ccc:	51eb851f 	.word	0x51eb851f

08008cd0 <COM_getReadyCommandFlag>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

bool COM_getReadyCommandFlag(void)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	af00      	add	r7, sp, #0
	return Uart_Buffer.rx_ready_command;
 8008cd4:	4b03      	ldr	r3, [pc, #12]	; (8008ce4 <COM_getReadyCommandFlag+0x14>)
 8008cd6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr
 8008ce4:	20000278 	.word	0x20000278

08008ce8 <COM_setReadyCommandFlagOn>:

static void COM_setReadyCommandFlagOn(void)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	af00      	add	r7, sp, #0
	Uart_Buffer.rx_ready_command = true;
 8008cec:	4b04      	ldr	r3, [pc, #16]	; (8008d00 <COM_setReadyCommandFlagOn+0x18>)
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 8008cf4:	bf00      	nop
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	20000278 	.word	0x20000278

08008d04 <COM_setReadyCommandFlagOff>:

void COM_setReadyCommandFlagOff(void)
{
 8008d04:	b480      	push	{r7}
 8008d06:	af00      	add	r7, sp, #0
	Uart_Buffer.rx_ready_command = false;
 8008d08:	4b04      	ldr	r3, [pc, #16]	; (8008d1c <COM_setReadyCommandFlagOff+0x18>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 8008d10:	bf00      	nop
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	20000278 	.word	0x20000278

08008d20 <COM_readyCommandProcess>:

void COM_readyCommandProcess(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
	char* token = strtok((char*)Uart_Buffer.p_rx_buffer, " ");
 8008d26:	4907      	ldr	r1, [pc, #28]	; (8008d44 <COM_readyCommandProcess+0x24>)
 8008d28:	4807      	ldr	r0, [pc, #28]	; (8008d48 <COM_readyCommandProcess+0x28>)
 8008d2a:	f003 fcc5 	bl	800c6b8 <strtok>
 8008d2e:	6078      	str	r0, [r7, #4]
	COMMAND_findAndExecuteCommand(token);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f8a5 	bl	8008e80 <COMMAND_findAndExecuteCommand>
	COM_bufferInit(Uart_Buffer.p_rx_buffer);
 8008d36:	4804      	ldr	r0, [pc, #16]	; (8008d48 <COM_readyCommandProcess+0x28>)
 8008d38:	f000 f88c 	bl	8008e54 <COM_bufferInit>
}
 8008d3c:	bf00      	nop
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	0800e394 	.word	0x0800e394
 8008d48:	20000278 	.word	0x20000278

08008d4c <COM_uartPrint>:

void COM_uartPrint(char* token)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
	while (COM_getTxBusyFlag());
 8008d54:	bf00      	nop
 8008d56:	f000 f847 	bl	8008de8 <COM_getTxBusyFlag>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1fa      	bne.n	8008d56 <COM_uartPrint+0xa>
	strncpy((char*)Uart_Buffer.p_tx_buffer, token, sizeof(Uart_Buffer.p_tx_buffer));
 8008d60:	2264      	movs	r2, #100	; 0x64
 8008d62:	6879      	ldr	r1, [r7, #4]
 8008d64:	4809      	ldr	r0, [pc, #36]	; (8008d8c <COM_uartPrint+0x40>)
 8008d66:	f003 fc91 	bl	800c68c <strncpy>
	HAL_UART_Transmit_DMA(&huart2, Uart_Buffer.p_tx_buffer, strlen(token));
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7f7 fa38 	bl	80001e0 <strlen>
 8008d70:	4603      	mov	r3, r0
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	461a      	mov	r2, r3
 8008d76:	4905      	ldr	r1, [pc, #20]	; (8008d8c <COM_uartPrint+0x40>)
 8008d78:	4805      	ldr	r0, [pc, #20]	; (8008d90 <COM_uartPrint+0x44>)
 8008d7a:	f7fe ffe7 	bl	8007d4c <HAL_UART_Transmit_DMA>
	COM_setTxBusyFlagOn();
 8008d7e:	f000 f817 	bl	8008db0 <COM_setTxBusyFlagOn>
}
 8008d82:	bf00      	nop
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	200002df 	.word	0x200002df
 8008d90:	200008c4 	.word	0x200008c4

08008d94 <COM_halUartReceiveDma>:

void COM_halUartReceiveDma(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, &Uart_Buffer.rx_single_char, 1);
 8008d98:	2201      	movs	r2, #1
 8008d9a:	4903      	ldr	r1, [pc, #12]	; (8008da8 <COM_halUartReceiveDma+0x14>)
 8008d9c:	4803      	ldr	r0, [pc, #12]	; (8008dac <COM_halUartReceiveDma+0x18>)
 8008d9e:	f7ff f841 	bl	8007e24 <HAL_UART_Receive_DMA>
}
 8008da2:	bf00      	nop
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	200002dd 	.word	0x200002dd
 8008dac:	200008c4 	.word	0x200008c4

08008db0 <COM_setTxBusyFlagOn>:

static void COM_setTxBusyFlagOn(void)
{
 8008db0:	b480      	push	{r7}
 8008db2:	af00      	add	r7, sp, #0
	Uart_Buffer.tx_busy = true;
 8008db4:	4b04      	ldr	r3, [pc, #16]	; (8008dc8 <COM_setTxBusyFlagOn+0x18>)
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
}
 8008dbc:	bf00      	nop
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	20000278 	.word	0x20000278

08008dcc <COM_setTxBusyFlagOff>:

void COM_setTxBusyFlagOff(void)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	af00      	add	r7, sp, #0
	Uart_Buffer.tx_busy = false;
 8008dd0:	4b04      	ldr	r3, [pc, #16]	; (8008de4 <COM_setTxBusyFlagOff+0x18>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
}
 8008dd8:	bf00      	nop
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	20000278 	.word	0x20000278

08008de8 <COM_getTxBusyFlag>:

bool COM_getTxBusyFlag(void)
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
	return Uart_Buffer.tx_busy;
 8008dec:	4b03      	ldr	r3, [pc, #12]	; (8008dfc <COM_getTxBusyFlag+0x14>)
 8008dee:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr
 8008dfc:	20000278 	.word	0x20000278

08008e00 <COM_charHandler>:

void COM_charHandler(void)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
	if (COM_getReadyCommandFlag())
 8008e04:	f7ff ff64 	bl	8008cd0 <COM_getReadyCommandFlag>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d11e      	bne.n	8008e4c <COM_charHandler+0x4c>
	{
		return;
	}

	if (Uart_Buffer.rx_single_char != '\n')
 8008e0e:	4b10      	ldr	r3, [pc, #64]	; (8008e50 <COM_charHandler+0x50>)
 8008e10:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8008e14:	2b0a      	cmp	r3, #10
 8008e16:	d016      	beq.n	8008e46 <COM_charHandler+0x46>
	{
		if(Uart_Buffer.rx_index < BUFFER_SIZE)
 8008e18:	4b0d      	ldr	r3, [pc, #52]	; (8008e50 <COM_charHandler+0x50>)
 8008e1a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8008e1e:	2b63      	cmp	r3, #99	; 0x63
 8008e20:	d815      	bhi.n	8008e4e <COM_charHandler+0x4e>
		{
			Uart_Buffer.p_rx_buffer[Uart_Buffer.rx_index] = Uart_Buffer.rx_single_char;
 8008e22:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <COM_charHandler+0x50>)
 8008e24:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8008e28:	461a      	mov	r2, r3
 8008e2a:	4b09      	ldr	r3, [pc, #36]	; (8008e50 <COM_charHandler+0x50>)
 8008e2c:	f893 1065 	ldrb.w	r1, [r3, #101]	; 0x65
 8008e30:	4b07      	ldr	r3, [pc, #28]	; (8008e50 <COM_charHandler+0x50>)
 8008e32:	5499      	strb	r1, [r3, r2]
			Uart_Buffer.rx_index++;
 8008e34:	4b06      	ldr	r3, [pc, #24]	; (8008e50 <COM_charHandler+0x50>)
 8008e36:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	4b04      	ldr	r3, [pc, #16]	; (8008e50 <COM_charHandler+0x50>)
 8008e40:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8008e44:	e003      	b.n	8008e4e <COM_charHandler+0x4e>
		}
	}
	else
	{
		COM_setReadyCommandFlagOn();
 8008e46:	f7ff ff4f 	bl	8008ce8 <COM_setReadyCommandFlagOn>
 8008e4a:	e000      	b.n	8008e4e <COM_charHandler+0x4e>
		return;
 8008e4c:	bf00      	nop
	}
}
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000278 	.word	0x20000278

08008e54 <COM_bufferInit>:

static void COM_bufferInit(uint8_t* p_buffer)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
	memset(Uart_Buffer.p_rx_buffer, 0, sizeof(uint8_t) * Uart_Buffer.rx_index);
 8008e5c:	4b07      	ldr	r3, [pc, #28]	; (8008e7c <COM_bufferInit+0x28>)
 8008e5e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8008e62:	461a      	mov	r2, r3
 8008e64:	2100      	movs	r1, #0
 8008e66:	4805      	ldr	r0, [pc, #20]	; (8008e7c <COM_bufferInit+0x28>)
 8008e68:	f002 ff7a 	bl	800bd60 <memset>
	Uart_Buffer.rx_index = 0;
 8008e6c:	4b03      	ldr	r3, [pc, #12]	; (8008e7c <COM_bufferInit+0x28>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 8008e74:	bf00      	nop
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	20000278 	.word	0x20000278

08008e80 <COMMAND_findAndExecuteCommand>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void COMMAND_findAndExecuteCommand (char* token)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	73fb      	strb	r3, [r7, #15]
 8008e8c:	e02a      	b.n	8008ee4 <COMMAND_findAndExecuteCommand+0x64>
	{
		if (strncmp(token, Commands[i].name, Commands[i].size)==0)
 8008e8e:	7bfa      	ldrb	r2, [r7, #15]
 8008e90:	4917      	ldr	r1, [pc, #92]	; (8008ef0 <COMMAND_findAndExecuteCommand+0x70>)
 8008e92:	4613      	mov	r3, r2
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	4413      	add	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	440b      	add	r3, r1
 8008e9c:	6818      	ldr	r0, [r3, #0]
 8008e9e:	7bfa      	ldrb	r2, [r7, #15]
 8008ea0:	4913      	ldr	r1, [pc, #76]	; (8008ef0 <COMMAND_findAndExecuteCommand+0x70>)
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	005b      	lsls	r3, r3, #1
 8008ea6:	4413      	add	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	440b      	add	r3, r1
 8008eac:	3304      	adds	r3, #4
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	4601      	mov	r1, r0
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f003 fbd7 	bl	800c668 <strncmp>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10e      	bne.n	8008ede <COMMAND_findAndExecuteCommand+0x5e>
		{
			COM_uartPrint(OK);
 8008ec0:	480c      	ldr	r0, [pc, #48]	; (8008ef4 <COMMAND_findAndExecuteCommand+0x74>)
 8008ec2:	f7ff ff43 	bl	8008d4c <COM_uartPrint>
			Commands[i].func_ptr(token);
 8008ec6:	7bfa      	ldrb	r2, [r7, #15]
 8008ec8:	4909      	ldr	r1, [pc, #36]	; (8008ef0 <COMMAND_findAndExecuteCommand+0x70>)
 8008eca:	4613      	mov	r3, r2
 8008ecc:	005b      	lsls	r3, r3, #1
 8008ece:	4413      	add	r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	440b      	add	r3, r1
 8008ed4:	3308      	adds	r3, #8
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	4798      	blx	r3
			return;
 8008edc:	e005      	b.n	8008eea <COMMAND_findAndExecuteCommand+0x6a>
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	73fb      	strb	r3, [r7, #15]
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
 8008ee6:	2b12      	cmp	r3, #18
 8008ee8:	d9d1      	bls.n	8008e8e <COMMAND_findAndExecuteCommand+0xe>
		}
	}
}
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	0800e7c4 	.word	0x0800e7c4
 8008ef4:	0800e4a8 	.word	0x0800e4a8

08008ef8 <COMMAND_pingCallback>:

void COMMAND_pingCallback(char* token)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
	COM_uartPrint(token);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff ff23 	bl	8008d4c <COM_uartPrint>
}
 8008f06:	bf00      	nop
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
	...

08008f10 <COMMAND_getVersionCallback>:

void COMMAND_getVersionCallback(char* token)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
	COM_uartPrint(VERSION);
 8008f18:	4803      	ldr	r0, [pc, #12]	; (8008f28 <COMMAND_getVersionCallback+0x18>)
 8008f1a:	f7ff ff17 	bl	8008d4c <COM_uartPrint>
}
 8008f1e:	bf00      	nop
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	0800e4ac 	.word	0x0800e4ac

08008f2c <COMMAND_pwmStartCallback>:

void COMMAND_pwmStartCallback(char* token)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8008f34:	2100      	movs	r1, #0
 8008f36:	4803      	ldr	r0, [pc, #12]	; (8008f44 <COMMAND_pwmStartCallback+0x18>)
 8008f38:	f7fd fa8e 	bl	8006458 <HAL_TIM_PWM_Start>
}
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	200007c4 	.word	0x200007c4

08008f48 <COMMAND_pwmStopCallback>:

void COMMAND_pwmStopCallback(char* token)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8008f50:	2100      	movs	r1, #0
 8008f52:	4803      	ldr	r0, [pc, #12]	; (8008f60 <COMMAND_pwmStopCallback+0x18>)
 8008f54:	f7fd fb34 	bl	80065c0 <HAL_TIM_PWM_Stop>
}
 8008f58:	bf00      	nop
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	200007c4 	.word	0x200007c4

08008f64 <COMMAND_pwmDcCallback>:

void COMMAND_pwmDcCallback(char* token)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
	token = strtok(NULL, " ");
 8008f6c:	490d      	ldr	r1, [pc, #52]	; (8008fa4 <COMMAND_pwmDcCallback+0x40>)
 8008f6e:	2000      	movs	r0, #0
 8008f70:	f003 fba2 	bl	800c6b8 <strtok>
 8008f74:	6078      	str	r0, [r7, #4]
	int32_t dc = atoi(token);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f002 fec3 	bl	800bd02 <atoi>
 8008f7c:	60f8      	str	r0, [r7, #12]
	if (dc > 100) dc = 100;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b64      	cmp	r3, #100	; 0x64
 8008f82:	dd01      	ble.n	8008f88 <COMMAND_pwmDcCallback+0x24>
 8008f84:	2364      	movs	r3, #100	; 0x64
 8008f86:	60fb      	str	r3, [r7, #12]
	if (dc < 0)   dc = 0;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	da01      	bge.n	8008f92 <COMMAND_pwmDcCallback+0x2e>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60fb      	str	r3, [r7, #12]
	htim3.Instance->CCR1 = dc;
 8008f92:	4b05      	ldr	r3, [pc, #20]	; (8008fa8 <COMMAND_pwmDcCallback+0x44>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	635a      	str	r2, [r3, #52]	; 0x34
}
 8008f9a:	bf00      	nop
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	0800e4b4 	.word	0x0800e4b4
 8008fa8:	200007c4 	.word	0x200007c4

08008fac <COMMAND_crcWholeFlashCalcCallback>:

void COMMAND_crcWholeFlashCalcCallback(char* token)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
	char temp [9];
	uint32_t crcFlashResult;
	uint32_t flashSize = 0x20000;
 8008fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008fb8:	61fb      	str	r3, [r7, #28]
	uint32_t *p_flash_start_address = (uint32_t *) FLASH_START_ADDRESS;
 8008fba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008fbe:	61bb      	str	r3, [r7, #24]

	crcFlashResult = HAL_CRC_Calculate(&hcrc, p_flash_start_address, flashSize);
 8008fc0:	69fa      	ldr	r2, [r7, #28]
 8008fc2:	69b9      	ldr	r1, [r7, #24]
 8008fc4:	4809      	ldr	r0, [pc, #36]	; (8008fec <COMMAND_crcWholeFlashCalcCallback+0x40>)
 8008fc6:	f7f8 f8f5 	bl	80011b4 <HAL_CRC_Calculate>
 8008fca:	6178      	str	r0, [r7, #20]

	sprintf(temp, "%x\n", (unsigned int)crcFlashResult);
 8008fcc:	f107 0308 	add.w	r3, r7, #8
 8008fd0:	697a      	ldr	r2, [r7, #20]
 8008fd2:	4907      	ldr	r1, [pc, #28]	; (8008ff0 <COMMAND_crcWholeFlashCalcCallback+0x44>)
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f003 fb27 	bl	800c628 <siprintf>
	COM_uartPrint(temp);
 8008fda:	f107 0308 	add.w	r3, r7, #8
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7ff feb4 	bl	8008d4c <COM_uartPrint>
}
 8008fe4:	bf00      	nop
 8008fe6:	3720      	adds	r7, #32
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	20000708 	.word	0x20000708
 8008ff0:	0800e4b8 	.word	0x0800e4b8

08008ff4 <COMMAND_iwdgTestCallback>:

void COMMAND_iwdgTestCallback(char* token)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
#ifdef IWDG_ENABLE
	while(1);
#endif
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <COMMAND_flashLockCallback>:

void COMMAND_flashLockCallback(char* token)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b08a      	sub	sp, #40	; 0x28
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
	 *It does not prevent one part of code to read another part, or even rewrite.
	 *PCROP allows you to use debugger to debug your code,
	 *but protects reading and rewriting the "secret" part.*/

	FLASH_OBProgramInitTypeDef obConfig;
	HAL_FLASHEx_OBGetConfig(&obConfig);
 8009010:	f107 030c 	add.w	r3, r7, #12
 8009014:	4618      	mov	r0, r3
 8009016:	f7f9 f915 	bl	8002244 <HAL_FLASHEx_OBGetConfig>

	if (obConfig.RDPLevel == OB_RDP_LEVEL_0) {
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	2baa      	cmp	r3, #170	; 0xaa
 800901e:	d130      	bne.n	8009082 <COMMAND_flashLockCallback+0x7a>
		obConfig.RDPLevel = OB_RDP_LEVEL_1;
 8009020:	2355      	movs	r3, #85	; 0x55
 8009022:	61fb      	str	r3, [r7, #28]
		obConfig.OptionType = OPTIONBYTE_RDP;
 8009024:	2302      	movs	r3, #2
 8009026:	60fb      	str	r3, [r7, #12]

		if (HAL_FLASH_Unlock() != HAL_OK)
 8009028:	f7f8 fe6a 	bl	8001d00 <HAL_FLASH_Unlock>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <COMMAND_flashLockCallback+0x2e>
		{
			Error_Handler();
 8009032:	f002 f83f 	bl	800b0b4 <Error_Handler>
		}
		if (HAL_FLASH_OB_Unlock() != HAL_OK)
 8009036:	f7f8 fe95 	bl	8001d64 <HAL_FLASH_OB_Unlock>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <COMMAND_flashLockCallback+0x3c>
		{
			Error_Handler();
 8009040:	f002 f838 	bl	800b0b4 <Error_Handler>
		}
		if (HAL_FLASHEx_OBProgram(&obConfig) != HAL_OK)
 8009044:	f107 030c 	add.w	r3, r7, #12
 8009048:	4618      	mov	r0, r3
 800904a:	f7f9 f875 	bl	8002138 <HAL_FLASHEx_OBProgram>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d001      	beq.n	8009058 <COMMAND_flashLockCallback+0x50>
		{
			Error_Handler();
 8009054:	f002 f82e 	bl	800b0b4 <Error_Handler>
		}
		if (HAL_FLASH_OB_Launch() != HAL_OK)
 8009058:	f7f8 feb0 	bl	8001dbc <HAL_FLASH_OB_Launch>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <COMMAND_flashLockCallback+0x5e>
		{
			Error_Handler();
 8009062:	f002 f827 	bl	800b0b4 <Error_Handler>
		}
		if (HAL_FLASH_OB_Lock() != HAL_OK)
 8009066:	f7f8 fe99 	bl	8001d9c <HAL_FLASH_OB_Lock>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <COMMAND_flashLockCallback+0x6c>
		{
			Error_Handler();
 8009070:	f002 f820 	bl	800b0b4 <Error_Handler>
		}
		if (HAL_FLASH_Lock() != HAL_OK)
 8009074:	f7f8 fe66 	bl	8001d44 <HAL_FLASH_Lock>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <COMMAND_flashLockCallback+0x7a>
		{
			Error_Handler();
 800907e:	f002 f819 	bl	800b0b4 <Error_Handler>
		FLASH_setSectorAddress(7, sector_7_addr);
		uint32_t myTestWrite[1] = {0xDEADBEEF}; 		//0xFFFFFFFF, 0xDEADBEEF
		FLASH_writeN(131072-4, myTestWrite2, 1, DATA_TYPE_32);
		*/
	}
}
 8009082:	bf00      	nop
 8009084:	3728      	adds	r7, #40	; 0x28
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
	...

0800908c <COMMAND_setSNCallback>:

void COMMAND_setSNCallback(char* token)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
	//if (FLASH_wrpSectorDisable();

	uint32_t sector_7_addr = 0x08060000;		//Sector 7 address
 8009094:	4b09      	ldr	r3, [pc, #36]	; (80090bc <COMMAND_setSNCallback+0x30>)
 8009096:	60fb      	str	r3, [r7, #12]
	FLASH_setSectorAddress(7, sector_7_addr);
 8009098:	68f9      	ldr	r1, [r7, #12]
 800909a:	2007      	movs	r0, #7
 800909c:	f000 f946 	bl	800932c <FLASH_setSectorAddress>
	uint32_t myTestWrite[1] = {0xDEADBEEF}; //0xFFFFFFFF, 0xDEADBEEF
 80090a0:	4b07      	ldr	r3, [pc, #28]	; (80090c0 <COMMAND_setSNCallback+0x34>)
 80090a2:	60bb      	str	r3, [r7, #8]
	FLASH_writeN(0, myTestWrite, 1, DATA_TYPE_32);
 80090a4:	f107 0108 	add.w	r1, r7, #8
 80090a8:	2302      	movs	r3, #2
 80090aa:	2201      	movs	r2, #1
 80090ac:	2000      	movs	r0, #0
 80090ae:	f000 f953 	bl	8009358 <FLASH_writeN>

	//FLASH_wrpSectorEnable();

}
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	08060000 	.word	0x08060000
 80090c0:	deadbeef 	.word	0xdeadbeef

080090c4 <COMMAND_getSNCallback>:

void COMMAND_getSNCallback(char* token)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b088      	sub	sp, #32
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
	char temp [9];
	uint32_t sector_7_addr = 0x08060000;		//Sector 7 address
 80090cc:	4b0e      	ldr	r3, [pc, #56]	; (8009108 <COMMAND_getSNCallback+0x44>)
 80090ce:	61fb      	str	r3, [r7, #28]
	FLASH_setSectorAddress(7, sector_7_addr);
 80090d0:	69f9      	ldr	r1, [r7, #28]
 80090d2:	2007      	movs	r0, #7
 80090d4:	f000 f92a 	bl	800932c <FLASH_setSectorAddress>
	uint32_t myTestRead[1];
	FLASH_readN(0, myTestRead, 1, DATA_TYPE_32);
 80090d8:	f107 010c 	add.w	r1, r7, #12
 80090dc:	2302      	movs	r3, #2
 80090de:	2201      	movs	r2, #1
 80090e0:	2000      	movs	r0, #0
 80090e2:	f000 f9ab 	bl	800943c <FLASH_readN>

	sprintf(temp, "%x\n", (unsigned int)myTestRead[0]);
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	f107 0310 	add.w	r3, r7, #16
 80090ec:	4907      	ldr	r1, [pc, #28]	; (800910c <COMMAND_getSNCallback+0x48>)
 80090ee:	4618      	mov	r0, r3
 80090f0:	f003 fa9a 	bl	800c628 <siprintf>
	COM_uartPrint(temp);
 80090f4:	f107 0310 	add.w	r3, r7, #16
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7ff fe27 	bl	8008d4c <COM_uartPrint>
}
 80090fe:	bf00      	nop
 8009100:	3720      	adds	r7, #32
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	08060000 	.word	0x08060000
 800910c:	0800e4b8 	.word	0x0800e4b8

08009110 <COMMAND_startTickCallback>:

void COMMAND_startTickCallback(char* token)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b08c      	sub	sp, #48	; 0x30
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef sAlarm = {0};
 8009118:	f107 0308 	add.w	r3, r7, #8
 800911c:	2228      	movs	r2, #40	; 0x28
 800911e:	2100      	movs	r1, #0
 8009120:	4618      	mov	r0, r3
 8009122:	f002 fe1d 	bl	800bd60 <memset>
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	723b      	strb	r3, [r7, #8]
	  sAlarm.AlarmTime.Minutes = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	727b      	strb	r3, [r7, #9]
	  sAlarm.AlarmTime.Seconds = 1;
 800912e:	2301      	movs	r3, #1
 8009130:	72bb      	strb	r3, [r7, #10]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	60fb      	str	r3, [r7, #12]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009136:	2300      	movs	r3, #0
 8009138:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800913a:	2300      	movs	r3, #0
 800913c:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 800913e:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 8009142:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8009144:	2300      	movs	r3, #0
 8009146:	623b      	str	r3, [r7, #32]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8009148:	2300      	movs	r3, #0
 800914a:	627b      	str	r3, [r7, #36]	; 0x24
	  sAlarm.AlarmDateWeekDay = 1;
 800914c:	2301      	movs	r3, #1
 800914e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  sAlarm.Alarm = RTC_ALARM_A;
 8009152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009156:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8009158:	f107 0308 	add.w	r3, r7, #8
 800915c:	2200      	movs	r2, #0
 800915e:	4619      	mov	r1, r3
 8009160:	4805      	ldr	r0, [pc, #20]	; (8009178 <COMMAND_startTickCallback+0x68>)
 8009162:	f7fc f9ff 	bl	8005564 <HAL_RTC_SetAlarm_IT>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <COMMAND_startTickCallback+0x60>
	  {
	    Error_Handler();
 800916c:	f001 ffa2 	bl	800b0b4 <Error_Handler>
	  }
}
 8009170:	bf00      	nop
 8009172:	3730      	adds	r7, #48	; 0x30
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	20000764 	.word	0x20000764

0800917c <COMMAND_stopTickCallback>:

void COMMAND_stopTickCallback(char* token)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8009184:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009188:	4803      	ldr	r0, [pc, #12]	; (8009198 <COMMAND_stopTickCallback+0x1c>)
 800918a:	f7fc fcd5 	bl	8005b38 <HAL_RTC_DeactivateAlarm>
}
 800918e:	bf00      	nop
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	20000764 	.word	0x20000764

0800919c <COMMAND_assert0Callback>:

void COMMAND_assert0Callback(char* token)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
	assert_param(0);
 80091a4:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80091a8:	4803      	ldr	r0, [pc, #12]	; (80091b8 <COMMAND_assert0Callback+0x1c>)
 80091aa:	f001 ff8b 	bl	800b0c4 <assert_failed>
}
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	0800e4bc 	.word	0x0800e4bc

080091bc <COMMAND_clearAssertFlagCallback>:

void COMMAND_clearAssertFlagCallback(char* token)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
	SYSTEM_DEBUG_assertResetFlag();
 80091c4:	f002 f9f0 	bl	800b5a8 <SYSTEM_DEBUG_assertResetFlag>
}
 80091c8:	bf00      	nop
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <COMMAND_lsm6dslPerSampleEnableCallback>:

void COMMAND_lsm6dslPerSampleEnableCallback(char* token)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
	LSM6DSL_perSampleInit();
 80091d8:	f000 fb32 	bl	8009840 <LSM6DSL_perSampleInit>
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <COMMAND_lsm6dslFifoEnableCallback>:

void COMMAND_lsm6dslFifoEnableCallback(char* token)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
	LSM6DSL_fifoInit();
 80091ec:	f000 fc40 	bl	8009a70 <LSM6DSL_fifoInit>
}
 80091f0:	bf00      	nop
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <COMMAND_lsm6dslDisableCallback>:

void COMMAND_lsm6dslDisableCallback(char* token)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
	LSM6DSL_modesDisable();
 8009200:	f000 feec 	bl	8009fdc <LSM6DSL_modesDisable>
}
 8009204:	bf00      	nop
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <COMMAND_enterStopModeCallback>:

void COMMAND_enterStopModeCallback(char* token)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
	token = strtok(NULL, " ");
 8009214:	4908      	ldr	r1, [pc, #32]	; (8009238 <COMMAND_enterStopModeCallback+0x2c>)
 8009216:	2000      	movs	r0, #0
 8009218:	f003 fa4e 	bl	800c6b8 <strtok>
 800921c:	6078      	str	r0, [r7, #4]
	uint32_t wake_up_time = atoi(token);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f002 fd6f 	bl	800bd02 <atoi>
 8009224:	4603      	mov	r3, r0
 8009226:	60fb      	str	r3, [r7, #12]
	SYSTEM_DEBUG_enterStopMode(wake_up_time);
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f002 faa5 	bl	800b778 <SYSTEM_DEBUG_enterStopMode>
}
 800922e:	bf00      	nop
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	0800e4b4 	.word	0x0800e4b4

0800923c <COMMAND_enterStandbyModeCallback>:

void COMMAND_enterStandbyModeCallback(char* token)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
	SYSTEM_DEBUG_enterStandbyMode();
 8009244:	f002 fadc 	bl	800b800 <SYSTEM_DEBUG_enterStandbyMode>
}
 8009248:	bf00      	nop
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8009254:	4b06      	ldr	r3, [pc, #24]	; (8009270 <MX_CRC_Init+0x20>)
 8009256:	4a07      	ldr	r2, [pc, #28]	; (8009274 <MX_CRC_Init+0x24>)
 8009258:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800925a:	4805      	ldr	r0, [pc, #20]	; (8009270 <MX_CRC_Init+0x20>)
 800925c:	f7f7 ff80 	bl	8001160 <HAL_CRC_Init>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8009266:	f001 ff25 	bl	800b0b4 <Error_Handler>
  }

}
 800926a:	bf00      	nop
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	20000708 	.word	0x20000708
 8009274:	40023000 	.word	0x40023000

08009278 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a0b      	ldr	r2, [pc, #44]	; (80092b4 <HAL_CRC_MspInit+0x3c>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d10d      	bne.n	80092a6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800928a:	2300      	movs	r3, #0
 800928c:	60fb      	str	r3, [r7, #12]
 800928e:	4b0a      	ldr	r3, [pc, #40]	; (80092b8 <HAL_CRC_MspInit+0x40>)
 8009290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009292:	4a09      	ldr	r2, [pc, #36]	; (80092b8 <HAL_CRC_MspInit+0x40>)
 8009294:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009298:	6313      	str	r3, [r2, #48]	; 0x30
 800929a:	4b07      	ldr	r3, [pc, #28]	; (80092b8 <HAL_CRC_MspInit+0x40>)
 800929c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80092a2:	60fb      	str	r3, [r7, #12]
 80092a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80092a6:	bf00      	nop
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	40023000 	.word	0x40023000
 80092b8:	40023800 	.word	0x40023800

080092bc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80092c2:	2300      	movs	r3, #0
 80092c4:	607b      	str	r3, [r7, #4]
 80092c6:	4b10      	ldr	r3, [pc, #64]	; (8009308 <MX_DMA_Init+0x4c>)
 80092c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ca:	4a0f      	ldr	r2, [pc, #60]	; (8009308 <MX_DMA_Init+0x4c>)
 80092cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092d0:	6313      	str	r3, [r2, #48]	; 0x30
 80092d2:	4b0d      	ldr	r3, [pc, #52]	; (8009308 <MX_DMA_Init+0x4c>)
 80092d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092da:	607b      	str	r3, [r7, #4]
 80092dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80092de:	2200      	movs	r2, #0
 80092e0:	2100      	movs	r1, #0
 80092e2:	2010      	movs	r0, #16
 80092e4:	f7f7 fef8 	bl	80010d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80092e8:	2010      	movs	r0, #16
 80092ea:	f7f7 ff21 	bl	8001130 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80092ee:	2200      	movs	r2, #0
 80092f0:	2100      	movs	r1, #0
 80092f2:	2011      	movs	r0, #17
 80092f4:	f7f7 fef0 	bl	80010d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80092f8:	2011      	movs	r0, #17
 80092fa:	f7f7 ff19 	bl	8001130 <HAL_NVIC_EnableIRQ>

}
 80092fe:	bf00      	nop
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	40023800 	.word	0x40023800

0800930c <FLASH_eraseSector>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

static void FLASH_eraseSector(void)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8009310:	f7f8 fcf6 	bl	8001d00 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(Sector_Num, FLASH_VOLTAGE_RANGE_3);
 8009314:	4b04      	ldr	r3, [pc, #16]	; (8009328 <FLASH_eraseSector+0x1c>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	2102      	movs	r1, #2
 800931a:	4618      	mov	r0, r3
 800931c:	f7f8 ffb6 	bl	800228c <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8009320:	f7f8 fd10 	bl	8001d44 <HAL_FLASH_Lock>
}
 8009324:	bf00      	nop
 8009326:	bd80      	pop	{r7, pc}
 8009328:	20000348 	.word	0x20000348

0800932c <FLASH_setSectorAddress>:

void FLASH_setSectorAddress(uint8_t sector, uint32_t addrs)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	4603      	mov	r3, r0
 8009334:	6039      	str	r1, [r7, #0]
 8009336:	71fb      	strb	r3, [r7, #7]
	Sector_Num = sector;
 8009338:	4a05      	ldr	r2, [pc, #20]	; (8009350 <FLASH_setSectorAddress+0x24>)
 800933a:	79fb      	ldrb	r3, [r7, #7]
 800933c:	7013      	strb	r3, [r2, #0]
	Sector_Addrs = addrs;
 800933e:	4a05      	ldr	r2, [pc, #20]	; (8009354 <FLASH_setSectorAddress+0x28>)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	6013      	str	r3, [r2, #0]
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	20000348 	.word	0x20000348
 8009354:	20000344 	.word	0x20000344

08009358 <FLASH_writeN>:

void FLASH_writeN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8009358:	b590      	push	{r4, r7, lr}
 800935a:	b089      	sub	sp, #36	; 0x24
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
 8009364:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = Sector_Addrs + idx;
 8009366:	4b34      	ldr	r3, [pc, #208]	; (8009438 <FLASH_writeN+0xe0>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	4413      	add	r3, r2
 800936e:	61fb      	str	r3, [r7, #28]

	//Erase sector before write
	FLASH_eraseSector();
 8009370:	f7ff ffcc 	bl	800930c <FLASH_eraseSector>

	//Unlock Flash
	HAL_FLASH_Unlock();
 8009374:	f7f8 fcc4 	bl	8001d00 <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 8009378:	78fb      	ldrb	r3, [r7, #3]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d01e      	beq.n	80093bc <FLASH_writeN+0x64>
 800937e:	2b02      	cmp	r3, #2
 8009380:	d038      	beq.n	80093f4 <FLASH_writeN+0x9c>
 8009382:	2b00      	cmp	r3, #0
 8009384:	d151      	bne.n	800942a <FLASH_writeN+0xd2>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 8009386:	2300      	movs	r3, #0
 8009388:	61bb      	str	r3, [r7, #24]
 800938a:	e012      	b.n	80093b2 <FLASH_writeN+0x5a>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	4413      	add	r3, r2
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	b2db      	uxtb	r3, r3
 8009396:	f04f 0400 	mov.w	r4, #0
 800939a:	461a      	mov	r2, r3
 800939c:	4623      	mov	r3, r4
 800939e:	69f9      	ldr	r1, [r7, #28]
 80093a0:	2000      	movs	r0, #0
 80093a2:	f7f8 fc47 	bl	8001c34 <HAL_FLASH_Program>
					flashAddress++;
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	3301      	adds	r3, #1
 80093aa:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	3301      	adds	r3, #1
 80093b0:	61bb      	str	r3, [r7, #24]
 80093b2:	69ba      	ldr	r2, [r7, #24]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d3e8      	bcc.n	800938c <FLASH_writeN+0x34>
				}
			break;
 80093ba:	e036      	b.n	800942a <FLASH_writeN+0xd2>

		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 80093bc:	2300      	movs	r3, #0
 80093be:	617b      	str	r3, [r7, #20]
 80093c0:	e013      	b.n	80093ea <FLASH_writeN+0x92>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	005b      	lsls	r3, r3, #1
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	4413      	add	r3, r2
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	f04f 0400 	mov.w	r4, #0
 80093d2:	461a      	mov	r2, r3
 80093d4:	4623      	mov	r3, r4
 80093d6:	69f9      	ldr	r1, [r7, #28]
 80093d8:	2001      	movs	r0, #1
 80093da:	f7f8 fc2b 	bl	8001c34 <HAL_FLASH_Program>
					flashAddress+=2;
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	3302      	adds	r3, #2
 80093e2:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	3301      	adds	r3, #1
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	697a      	ldr	r2, [r7, #20]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d3e7      	bcc.n	80093c2 <FLASH_writeN+0x6a>
				}
			break;
 80093f2:	e01a      	b.n	800942a <FLASH_writeN+0xd2>

		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 80093f4:	2300      	movs	r3, #0
 80093f6:	613b      	str	r3, [r7, #16]
 80093f8:	e012      	b.n	8009420 <FLASH_writeN+0xc8>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	4413      	add	r3, r2
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f04f 0400 	mov.w	r4, #0
 8009408:	461a      	mov	r2, r3
 800940a:	4623      	mov	r3, r4
 800940c:	69f9      	ldr	r1, [r7, #28]
 800940e:	2002      	movs	r0, #2
 8009410:	f7f8 fc10 	bl	8001c34 <HAL_FLASH_Program>
					flashAddress+=4;
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	3304      	adds	r3, #4
 8009418:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	3301      	adds	r3, #1
 800941e:	613b      	str	r3, [r7, #16]
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	429a      	cmp	r2, r3
 8009426:	d3e8      	bcc.n	80093fa <FLASH_writeN+0xa2>
				}
			break;
 8009428:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 800942a:	f7f8 fc8b 	bl	8001d44 <HAL_FLASH_Lock>
}
 800942e:	bf00      	nop
 8009430:	3724      	adds	r7, #36	; 0x24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd90      	pop	{r4, r7, pc}
 8009436:	bf00      	nop
 8009438:	20000344 	.word	0x20000344

0800943c <FLASH_readN>:

void FLASH_readN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 800943c:	b480      	push	{r7}
 800943e:	b089      	sub	sp, #36	; 0x24
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
 8009448:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = Sector_Addrs + idx;
 800944a:	4b28      	ldr	r3, [pc, #160]	; (80094ec <FLASH_readN+0xb0>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	4413      	add	r3, r2
 8009452:	61fb      	str	r3, [r7, #28]

	switch(dataType)
 8009454:	78fb      	ldrb	r3, [r7, #3]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d018      	beq.n	800948c <FLASH_readN+0x50>
 800945a:	2b02      	cmp	r3, #2
 800945c:	d02b      	beq.n	80094b6 <FLASH_readN+0x7a>
 800945e:	2b00      	cmp	r3, #0
 8009460:	d000      	beq.n	8009464 <FLASH_readN+0x28>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 8009462:	e03d      	b.n	80094e0 <FLASH_readN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 8009464:	2300      	movs	r3, #0
 8009466:	61bb      	str	r3, [r7, #24]
 8009468:	e00b      	b.n	8009482 <FLASH_readN+0x46>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 800946a:	69fa      	ldr	r2, [r7, #28]
 800946c:	68b9      	ldr	r1, [r7, #8]
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	440b      	add	r3, r1
 8009472:	7812      	ldrb	r2, [r2, #0]
 8009474:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	3301      	adds	r3, #1
 800947a:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	3301      	adds	r3, #1
 8009480:	61bb      	str	r3, [r7, #24]
 8009482:	69ba      	ldr	r2, [r7, #24]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	429a      	cmp	r2, r3
 8009488:	d3ef      	bcc.n	800946a <FLASH_readN+0x2e>
			break;
 800948a:	e029      	b.n	80094e0 <FLASH_readN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 800948c:	2300      	movs	r3, #0
 800948e:	617b      	str	r3, [r7, #20]
 8009490:	e00c      	b.n	80094ac <FLASH_readN+0x70>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 8009492:	69fa      	ldr	r2, [r7, #28]
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	005b      	lsls	r3, r3, #1
 8009498:	68b9      	ldr	r1, [r7, #8]
 800949a:	440b      	add	r3, r1
 800949c:	8812      	ldrh	r2, [r2, #0]
 800949e:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	3302      	adds	r3, #2
 80094a4:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	3301      	adds	r3, #1
 80094aa:	617b      	str	r3, [r7, #20]
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d3ee      	bcc.n	8009492 <FLASH_readN+0x56>
			break;
 80094b4:	e014      	b.n	80094e0 <FLASH_readN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 80094b6:	2300      	movs	r3, #0
 80094b8:	613b      	str	r3, [r7, #16]
 80094ba:	e00c      	b.n	80094d6 <FLASH_readN+0x9a>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 80094bc:	69fa      	ldr	r2, [r7, #28]
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	68b9      	ldr	r1, [r7, #8]
 80094c4:	440b      	add	r3, r1
 80094c6:	6812      	ldr	r2, [r2, #0]
 80094c8:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	3304      	adds	r3, #4
 80094ce:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	3301      	adds	r3, #1
 80094d4:	613b      	str	r3, [r7, #16]
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d3ee      	bcc.n	80094bc <FLASH_readN+0x80>
			break;
 80094de:	bf00      	nop
}
 80094e0:	bf00      	nop
 80094e2:	3724      	adds	r7, #36	; 0x24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	20000344 	.word	0x20000344

080094f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b088      	sub	sp, #32
 80094f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094f6:	f107 030c 	add.w	r3, r7, #12
 80094fa:	2200      	movs	r2, #0
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	605a      	str	r2, [r3, #4]
 8009500:	609a      	str	r2, [r3, #8]
 8009502:	60da      	str	r2, [r3, #12]
 8009504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009506:	2300      	movs	r3, #0
 8009508:	60bb      	str	r3, [r7, #8]
 800950a:	4b34      	ldr	r3, [pc, #208]	; (80095dc <MX_GPIO_Init+0xec>)
 800950c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950e:	4a33      	ldr	r2, [pc, #204]	; (80095dc <MX_GPIO_Init+0xec>)
 8009510:	f043 0304 	orr.w	r3, r3, #4
 8009514:	6313      	str	r3, [r2, #48]	; 0x30
 8009516:	4b31      	ldr	r3, [pc, #196]	; (80095dc <MX_GPIO_Init+0xec>)
 8009518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951a:	f003 0304 	and.w	r3, r3, #4
 800951e:	60bb      	str	r3, [r7, #8]
 8009520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009522:	2300      	movs	r3, #0
 8009524:	607b      	str	r3, [r7, #4]
 8009526:	4b2d      	ldr	r3, [pc, #180]	; (80095dc <MX_GPIO_Init+0xec>)
 8009528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952a:	4a2c      	ldr	r2, [pc, #176]	; (80095dc <MX_GPIO_Init+0xec>)
 800952c:	f043 0301 	orr.w	r3, r3, #1
 8009530:	6313      	str	r3, [r2, #48]	; 0x30
 8009532:	4b2a      	ldr	r3, [pc, #168]	; (80095dc <MX_GPIO_Init+0xec>)
 8009534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	607b      	str	r3, [r7, #4]
 800953c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800953e:	2300      	movs	r3, #0
 8009540:	603b      	str	r3, [r7, #0]
 8009542:	4b26      	ldr	r3, [pc, #152]	; (80095dc <MX_GPIO_Init+0xec>)
 8009544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009546:	4a25      	ldr	r2, [pc, #148]	; (80095dc <MX_GPIO_Init+0xec>)
 8009548:	f043 0302 	orr.w	r3, r3, #2
 800954c:	6313      	str	r3, [r2, #48]	; 0x30
 800954e:	4b23      	ldr	r3, [pc, #140]	; (80095dc <MX_GPIO_Init+0xec>)
 8009550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009552:	f003 0302 	and.w	r3, r3, #2
 8009556:	603b      	str	r3, [r7, #0]
 8009558:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800955a:	2200      	movs	r2, #0
 800955c:	2120      	movs	r1, #32
 800955e:	4820      	ldr	r0, [pc, #128]	; (80095e0 <MX_GPIO_Init+0xf0>)
 8009560:	f7f9 fb20 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009568:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800956a:	4b1e      	ldr	r3, [pc, #120]	; (80095e4 <MX_GPIO_Init+0xf4>)
 800956c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800956e:	2300      	movs	r3, #0
 8009570:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009572:	f107 030c 	add.w	r3, r7, #12
 8009576:	4619      	mov	r1, r3
 8009578:	481b      	ldr	r0, [pc, #108]	; (80095e8 <MX_GPIO_Init+0xf8>)
 800957a:	f7f9 f86b 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800957e:	2320      	movs	r3, #32
 8009580:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009582:	2301      	movs	r3, #1
 8009584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009586:	2300      	movs	r3, #0
 8009588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800958a:	2300      	movs	r3, #0
 800958c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800958e:	f107 030c 	add.w	r3, r7, #12
 8009592:	4619      	mov	r1, r3
 8009594:	4812      	ldr	r0, [pc, #72]	; (80095e0 <MX_GPIO_Init+0xf0>)
 8009596:	f7f9 f85d 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800959a:	2320      	movs	r3, #32
 800959c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800959e:	4b13      	ldr	r3, [pc, #76]	; (80095ec <MX_GPIO_Init+0xfc>)
 80095a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095a2:	2300      	movs	r3, #0
 80095a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80095a6:	f107 030c 	add.w	r3, r7, #12
 80095aa:	4619      	mov	r1, r3
 80095ac:	4810      	ldr	r0, [pc, #64]	; (80095f0 <MX_GPIO_Init+0x100>)
 80095ae:	f7f9 f851 	bl	8002654 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80095b2:	2200      	movs	r2, #0
 80095b4:	2100      	movs	r1, #0
 80095b6:	2017      	movs	r0, #23
 80095b8:	f7f7 fd8e 	bl	80010d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80095bc:	2017      	movs	r0, #23
 80095be:	f7f7 fdb7 	bl	8001130 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80095c2:	2200      	movs	r2, #0
 80095c4:	2100      	movs	r1, #0
 80095c6:	2028      	movs	r0, #40	; 0x28
 80095c8:	f7f7 fd86 	bl	80010d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80095cc:	2028      	movs	r0, #40	; 0x28
 80095ce:	f7f7 fdaf 	bl	8001130 <HAL_NVIC_EnableIRQ>

}
 80095d2:	bf00      	nop
 80095d4:	3720      	adds	r7, #32
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	40023800 	.word	0x40023800
 80095e0:	40020000 	.word	0x40020000
 80095e4:	10110000 	.word	0x10110000
 80095e8:	40020800 	.word	0x40020800
 80095ec:	10210000 	.word	0x10210000
 80095f0:	40020400 	.word	0x40020400

080095f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80095f8:	4b12      	ldr	r3, [pc, #72]	; (8009644 <MX_I2C1_Init+0x50>)
 80095fa:	4a13      	ldr	r2, [pc, #76]	; (8009648 <MX_I2C1_Init+0x54>)
 80095fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80095fe:	4b11      	ldr	r3, [pc, #68]	; (8009644 <MX_I2C1_Init+0x50>)
 8009600:	4a12      	ldr	r2, [pc, #72]	; (800964c <MX_I2C1_Init+0x58>)
 8009602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009604:	4b0f      	ldr	r3, [pc, #60]	; (8009644 <MX_I2C1_Init+0x50>)
 8009606:	2200      	movs	r2, #0
 8009608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800960a:	4b0e      	ldr	r3, [pc, #56]	; (8009644 <MX_I2C1_Init+0x50>)
 800960c:	2200      	movs	r2, #0
 800960e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009610:	4b0c      	ldr	r3, [pc, #48]	; (8009644 <MX_I2C1_Init+0x50>)
 8009612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009616:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009618:	4b0a      	ldr	r3, [pc, #40]	; (8009644 <MX_I2C1_Init+0x50>)
 800961a:	2200      	movs	r2, #0
 800961c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800961e:	4b09      	ldr	r3, [pc, #36]	; (8009644 <MX_I2C1_Init+0x50>)
 8009620:	2200      	movs	r2, #0
 8009622:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009624:	4b07      	ldr	r3, [pc, #28]	; (8009644 <MX_I2C1_Init+0x50>)
 8009626:	2200      	movs	r2, #0
 8009628:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800962a:	4b06      	ldr	r3, [pc, #24]	; (8009644 <MX_I2C1_Init+0x50>)
 800962c:	2200      	movs	r2, #0
 800962e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009630:	4804      	ldr	r0, [pc, #16]	; (8009644 <MX_I2C1_Init+0x50>)
 8009632:	f7f9 fb01 	bl	8002c38 <HAL_I2C_Init>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800963c:	f001 fd3a 	bl	800b0b4 <Error_Handler>
  }

}
 8009640:	bf00      	nop
 8009642:	bd80      	pop	{r7, pc}
 8009644:	20000710 	.word	0x20000710
 8009648:	40005400 	.word	0x40005400
 800964c:	000186a0 	.word	0x000186a0

08009650 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b08a      	sub	sp, #40	; 0x28
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009658:	f107 0314 	add.w	r3, r7, #20
 800965c:	2200      	movs	r2, #0
 800965e:	601a      	str	r2, [r3, #0]
 8009660:	605a      	str	r2, [r3, #4]
 8009662:	609a      	str	r2, [r3, #8]
 8009664:	60da      	str	r2, [r3, #12]
 8009666:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a19      	ldr	r2, [pc, #100]	; (80096d4 <HAL_I2C_MspInit+0x84>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d12c      	bne.n	80096cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009672:	2300      	movs	r3, #0
 8009674:	613b      	str	r3, [r7, #16]
 8009676:	4b18      	ldr	r3, [pc, #96]	; (80096d8 <HAL_I2C_MspInit+0x88>)
 8009678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967a:	4a17      	ldr	r2, [pc, #92]	; (80096d8 <HAL_I2C_MspInit+0x88>)
 800967c:	f043 0302 	orr.w	r3, r3, #2
 8009680:	6313      	str	r3, [r2, #48]	; 0x30
 8009682:	4b15      	ldr	r3, [pc, #84]	; (80096d8 <HAL_I2C_MspInit+0x88>)
 8009684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009686:	f003 0302 	and.w	r3, r3, #2
 800968a:	613b      	str	r3, [r7, #16]
 800968c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800968e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009694:	2312      	movs	r3, #18
 8009696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009698:	2301      	movs	r3, #1
 800969a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800969c:	2303      	movs	r3, #3
 800969e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80096a0:	2304      	movs	r3, #4
 80096a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096a4:	f107 0314 	add.w	r3, r7, #20
 80096a8:	4619      	mov	r1, r3
 80096aa:	480c      	ldr	r0, [pc, #48]	; (80096dc <HAL_I2C_MspInit+0x8c>)
 80096ac:	f7f8 ffd2 	bl	8002654 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80096b0:	2300      	movs	r3, #0
 80096b2:	60fb      	str	r3, [r7, #12]
 80096b4:	4b08      	ldr	r3, [pc, #32]	; (80096d8 <HAL_I2C_MspInit+0x88>)
 80096b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b8:	4a07      	ldr	r2, [pc, #28]	; (80096d8 <HAL_I2C_MspInit+0x88>)
 80096ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096be:	6413      	str	r3, [r2, #64]	; 0x40
 80096c0:	4b05      	ldr	r3, [pc, #20]	; (80096d8 <HAL_I2C_MspInit+0x88>)
 80096c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096c8:	60fb      	str	r3, [r7, #12]
 80096ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80096cc:	bf00      	nop
 80096ce:	3728      	adds	r7, #40	; 0x28
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	40005400 	.word	0x40005400
 80096d8:	40023800 	.word	0x40023800
 80096dc:	40020400 	.word	0x40020400

080096e0 <LSM6DSL_processHanlder>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void LSM6DSL_processHanlder(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	af00      	add	r7, sp, #0
	if (Lsm6dsl_Mode == LSM6DSL_MODE_PER_SAMPLE)
 80096e4:	4b07      	ldr	r3, [pc, #28]	; (8009704 <LSM6DSL_processHanlder+0x24>)
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d102      	bne.n	80096f2 <LSM6DSL_processHanlder+0x12>
	{
		LSM6DSL_perSampleProcess();
 80096ec:	f000 f8e4 	bl	80098b8 <LSM6DSL_perSampleProcess>
	}
	else if (Lsm6dsl_Mode == LSM6DSL_MODE_FIFO)
	{
		LSM6DSL_fifoProcess();
	}
}
 80096f0:	e005      	b.n	80096fe <LSM6DSL_processHanlder+0x1e>
	else if (Lsm6dsl_Mode == LSM6DSL_MODE_FIFO)
 80096f2:	4b04      	ldr	r3, [pc, #16]	; (8009704 <LSM6DSL_processHanlder+0x24>)
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d101      	bne.n	80096fe <LSM6DSL_processHanlder+0x1e>
		LSM6DSL_fifoProcess();
 80096fa:	f000 fa15 	bl	8009b28 <LSM6DSL_fifoProcess>
}
 80096fe:	bf00      	nop
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	200006d0 	.word	0x200006d0

08009708 <LSM6DSL_write>:

int32_t LSM6DSL_write(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b088      	sub	sp, #32
 800970c:	af04      	add	r7, sp, #16
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	607a      	str	r2, [r7, #4]
 8009712:	461a      	mov	r2, r3
 8009714:	460b      	mov	r3, r1
 8009716:	72fb      	strb	r3, [r7, #11]
 8009718:	4613      	mov	r3, r2
 800971a:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_H, Reg, I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
 800971c:	7afb      	ldrb	r3, [r7, #11]
 800971e:	b29a      	uxth	r2, r3
 8009720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009724:	9302      	str	r3, [sp, #8]
 8009726:	893b      	ldrh	r3, [r7, #8]
 8009728:	9301      	str	r3, [sp, #4]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	9300      	str	r3, [sp, #0]
 800972e:	2301      	movs	r3, #1
 8009730:	21d7      	movs	r1, #215	; 0xd7
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f7f9 fc40 	bl	8002fb8 <HAL_I2C_Mem_Write>
    return 0;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <LSM6DSL_read>:

int32_t LSM6DSL_read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b088      	sub	sp, #32
 8009746:	af04      	add	r7, sp, #16
 8009748:	60f8      	str	r0, [r7, #12]
 800974a:	607a      	str	r2, [r7, #4]
 800974c:	461a      	mov	r2, r3
 800974e:	460b      	mov	r3, r1
 8009750:	72fb      	strb	r3, [r7, #11]
 8009752:	4613      	mov	r3, r2
 8009754:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_H, Reg, I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
 8009756:	7afb      	ldrb	r3, [r7, #11]
 8009758:	b29a      	uxth	r2, r3
 800975a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800975e:	9302      	str	r3, [sp, #8]
 8009760:	893b      	ldrh	r3, [r7, #8]
 8009762:	9301      	str	r3, [sp, #4]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	2301      	movs	r3, #1
 800976a:	21d7      	movs	r1, #215	; 0xd7
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f7f9 fd29 	bl	80031c4 <HAL_I2C_Mem_Read>
	return 0;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <LSM6DSL_init>:

void LSM6DSL_init (void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
	Lsm6dsl_Is_Connected = LSM6DSL_DISCONNECTED;
 8009780:	4b26      	ldr	r3, [pc, #152]	; (800981c <LSM6DSL_init+0xa0>)
 8009782:	2201      	movs	r2, #1
 8009784:	701a      	strb	r2, [r3, #0]

	/* Initialize mems driver interface */
	Dev_Ctx.write_reg = LSM6DSL_write;
 8009786:	4b26      	ldr	r3, [pc, #152]	; (8009820 <LSM6DSL_init+0xa4>)
 8009788:	4a26      	ldr	r2, [pc, #152]	; (8009824 <LSM6DSL_init+0xa8>)
 800978a:	601a      	str	r2, [r3, #0]
	Dev_Ctx.read_reg = LSM6DSL_read;
 800978c:	4b24      	ldr	r3, [pc, #144]	; (8009820 <LSM6DSL_init+0xa4>)
 800978e:	4a26      	ldr	r2, [pc, #152]	; (8009828 <LSM6DSL_init+0xac>)
 8009790:	605a      	str	r2, [r3, #4]
	Dev_Ctx.handle = &hi2c1;
 8009792:	4b23      	ldr	r3, [pc, #140]	; (8009820 <LSM6DSL_init+0xa4>)
 8009794:	4a25      	ldr	r2, [pc, #148]	; (800982c <LSM6DSL_init+0xb0>)
 8009796:	609a      	str	r2, [r3, #8]

	/* Check device ID */
	Who_Am_I = 0;
 8009798:	4b25      	ldr	r3, [pc, #148]	; (8009830 <LSM6DSL_init+0xb4>)
 800979a:	2200      	movs	r2, #0
 800979c:	701a      	strb	r2, [r3, #0]
	lsm6dsl_device_id_get(&Dev_Ctx, &Who_Am_I);
 800979e:	4924      	ldr	r1, [pc, #144]	; (8009830 <LSM6DSL_init+0xb4>)
 80097a0:	481f      	ldr	r0, [pc, #124]	; (8009820 <LSM6DSL_init+0xa4>)
 80097a2:	f000 fdd8 	bl	800a356 <lsm6dsl_device_id_get>
	if ( Who_Am_I != LSM6DSL_ID )
 80097a6:	4b22      	ldr	r3, [pc, #136]	; (8009830 <LSM6DSL_init+0xb4>)
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	2b6a      	cmp	r3, #106	; 0x6a
 80097ac:	d003      	beq.n	80097b6 <LSM6DSL_init+0x3a>
	{
		COM_uartPrint("lsm6dsl device not found\n");
 80097ae:	4821      	ldr	r0, [pc, #132]	; (8009834 <LSM6DSL_init+0xb8>)
 80097b0:	f7ff facc 	bl	8008d4c <COM_uartPrint>
		return;
 80097b4:	e031      	b.n	800981a <LSM6DSL_init+0x9e>
		//while(1); /* device not found */
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&Dev_Ctx, PROPERTY_ENABLE);
 80097b6:	2101      	movs	r1, #1
 80097b8:	4819      	ldr	r0, [pc, #100]	; (8009820 <LSM6DSL_init+0xa4>)
 80097ba:	f000 fddd 	bl	800a378 <lsm6dsl_reset_set>
	do {
	lsm6dsl_reset_get(&Dev_Ctx, &Rst);
 80097be:	491e      	ldr	r1, [pc, #120]	; (8009838 <LSM6DSL_init+0xbc>)
 80097c0:	4817      	ldr	r0, [pc, #92]	; (8009820 <LSM6DSL_init+0xa4>)
 80097c2:	f000 fdff 	bl	800a3c4 <lsm6dsl_reset_get>
	} while (Rst);
 80097c6:	4b1c      	ldr	r3, [pc, #112]	; (8009838 <LSM6DSL_init+0xbc>)
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1f7      	bne.n	80097be <LSM6DSL_init+0x42>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&Dev_Ctx, PROPERTY_ENABLE);
 80097ce:	2101      	movs	r1, #1
 80097d0:	4813      	ldr	r0, [pc, #76]	; (8009820 <LSM6DSL_init+0xa4>)
 80097d2:	f000 fd2d 	bl	800a230 <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&Dev_Ctx, LSM6DSL_XL_ODR_12Hz5);
 80097d6:	2101      	movs	r1, #1
 80097d8:	4811      	ldr	r0, [pc, #68]	; (8009820 <LSM6DSL_init+0xa4>)
 80097da:	f000 fcb7 	bl	800a14c <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&Dev_Ctx, LSM6DSL_GY_ODR_12Hz5);
 80097de:	2101      	movs	r1, #1
 80097e0:	480f      	ldr	r0, [pc, #60]	; (8009820 <LSM6DSL_init+0xa4>)
 80097e2:	f000 fcff 	bl	800a1e4 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&Dev_Ctx, LSM6DSL_8g);
 80097e6:	2103      	movs	r1, #3
 80097e8:	480d      	ldr	r0, [pc, #52]	; (8009820 <LSM6DSL_init+0xa4>)
 80097ea:	f000 fc89 	bl	800a100 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&Dev_Ctx, LSM6DSL_500dps);
 80097ee:	2102      	movs	r1, #2
 80097f0:	480b      	ldr	r0, [pc, #44]	; (8009820 <LSM6DSL_init+0xa4>)
 80097f2:	f000 fcd1 	bl	800a198 <lsm6dsl_gy_full_scale_set>

	/* Accelerometer - analog filter */
	lsm6dsl_xl_filter_analog_set(&Dev_Ctx, LSM6DSL_XL_ANA_BW_400Hz);
 80097f6:	2101      	movs	r1, #1
 80097f8:	4809      	ldr	r0, [pc, #36]	; (8009820 <LSM6DSL_init+0xa4>)
 80097fa:	f000 fdfc 	bl	800a3f6 <lsm6dsl_xl_filter_analog_set>

	/* Accelerometer - LPF1 + LPF2 path */
	lsm6dsl_xl_lp2_bandwidth_set(&Dev_Ctx, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 80097fe:	2111      	movs	r1, #17
 8009800:	4807      	ldr	r0, [pc, #28]	; (8009820 <LSM6DSL_init+0xa4>)
 8009802:	f000 fe1e 	bl	800a442 <lsm6dsl_xl_lp2_bandwidth_set>

	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&Dev_Ctx, LSM6DSL_HP_260mHz_LP1_STRONG);
 8009806:	21a8      	movs	r1, #168	; 0xa8
 8009808:	4805      	ldr	r0, [pc, #20]	; (8009820 <LSM6DSL_init+0xa4>)
 800980a:	f000 fe51 	bl	800a4b0 <lsm6dsl_gy_band_pass_set>

	Lsm6dsl_Mode = LSM6DSL_MODE_IDLE;
 800980e:	4b0b      	ldr	r3, [pc, #44]	; (800983c <LSM6DSL_init+0xc0>)
 8009810:	2200      	movs	r2, #0
 8009812:	701a      	strb	r2, [r3, #0]

	Lsm6dsl_Is_Connected = LSM6DSL_CONNECTED;
 8009814:	4b01      	ldr	r3, [pc, #4]	; (800981c <LSM6DSL_init+0xa0>)
 8009816:	2200      	movs	r2, #0
 8009818:	701a      	strb	r2, [r3, #0]
}
 800981a:	bd80      	pop	{r7, pc}
 800981c:	200006d1 	.word	0x200006d1
 8009820:	20000660 	.word	0x20000660
 8009824:	08009709 	.word	0x08009709
 8009828:	08009743 	.word	0x08009743
 800982c:	20000710 	.word	0x20000710
 8009830:	20000374 	.word	0x20000374
 8009834:	0800e4d0 	.word	0x0800e4d0
 8009838:	20000375 	.word	0x20000375
 800983c:	200006d0 	.word	0x200006d0

08009840 <LSM6DSL_perSampleInit>:

void LSM6DSL_perSampleInit(void)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0

	if (Lsm6dsl_Is_Connected == LSM6DSL_DISCONNECTED)
 8009846:	4b17      	ldr	r3, [pc, #92]	; (80098a4 <LSM6DSL_perSampleInit+0x64>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d103      	bne.n	8009856 <LSM6DSL_perSampleInit+0x16>
	{
		COM_uartPrint("LSM6DSL is not connected!\n");
 800984e:	4816      	ldr	r0, [pc, #88]	; (80098a8 <LSM6DSL_perSampleInit+0x68>)
 8009850:	f7ff fa7c 	bl	8008d4c <COM_uartPrint>
		return;
 8009854:	e023      	b.n	800989e <LSM6DSL_perSampleInit+0x5e>
	}
	if (Lsm6dsl_Mode == LSM6DSL_MODE_FIFO)
 8009856:	4b15      	ldr	r3, [pc, #84]	; (80098ac <LSM6DSL_perSampleInit+0x6c>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b02      	cmp	r3, #2
 800985c:	d103      	bne.n	8009866 <LSM6DSL_perSampleInit+0x26>
	{
		COM_uartPrint("Need to disable FIFO mode first\n");
 800985e:	4814      	ldr	r0, [pc, #80]	; (80098b0 <LSM6DSL_perSampleInit+0x70>)
 8009860:	f7ff fa74 	bl	8008d4c <COM_uartPrint>
		return;
 8009864:	e01b      	b.n	800989e <LSM6DSL_perSampleInit+0x5e>
	}

	//LSM6DSL_ACC_Set_INT1_DRDY
	//LSM6DSL_GYRO_Set_INT1_DRDY

	lsm6dsl_pin_polarity_set(&Dev_Ctx, LSM6DSL_ACTIVE_LOW);
 8009866:	2101      	movs	r1, #1
 8009868:	4812      	ldr	r0, [pc, #72]	; (80098b4 <LSM6DSL_perSampleInit+0x74>)
 800986a:	f001 f8c8 	bl	800a9fe <lsm6dsl_pin_polarity_set>

	lsm6dsl_data_ready_mode_set(&Dev_Ctx, LSM6DSL_DRDY_PULSED);
 800986e:	2101      	movs	r1, #1
 8009870:	4810      	ldr	r0, [pc, #64]	; (80098b4 <LSM6DSL_perSampleInit+0x74>)
 8009872:	f000 fd4a 	bl	800a30a <lsm6dsl_data_ready_mode_set>

	lsm6dsl_int1_route_t reg;

	lsm6dsl_pin_int1_route_get(&Dev_Ctx, &reg);
 8009876:	1d3b      	adds	r3, r7, #4
 8009878:	4619      	mov	r1, r3
 800987a:	480e      	ldr	r0, [pc, #56]	; (80098b4 <LSM6DSL_perSampleInit+0x74>)
 800987c:	f000 ffe9 	bl	800a852 <lsm6dsl_pin_int1_route_get>

	reg.int1_drdy_xl = PROPERTY_ENABLE;
 8009880:	793b      	ldrb	r3, [r7, #4]
 8009882:	f043 0301 	orr.w	r3, r3, #1
 8009886:	713b      	strb	r3, [r7, #4]
	reg.int1_drdy_g = PROPERTY_ENABLE;
 8009888:	793b      	ldrb	r3, [r7, #4]
 800988a:	f043 0302 	orr.w	r3, r3, #2
 800988e:	713b      	strb	r3, [r7, #4]

	lsm6dsl_pin_int1_route_set(&Dev_Ctx, reg);
 8009890:	6879      	ldr	r1, [r7, #4]
 8009892:	4808      	ldr	r0, [pc, #32]	; (80098b4 <LSM6DSL_perSampleInit+0x74>)
 8009894:	f000 fe7a 	bl	800a58c <lsm6dsl_pin_int1_route_set>

	Lsm6dsl_Mode = LSM6DSL_MODE_PER_SAMPLE;
 8009898:	4b04      	ldr	r3, [pc, #16]	; (80098ac <LSM6DSL_perSampleInit+0x6c>)
 800989a:	2201      	movs	r2, #1
 800989c:	701a      	strb	r2, [r3, #0]
}
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	200006d1 	.word	0x200006d1
 80098a8:	0800e4ec 	.word	0x0800e4ec
 80098ac:	200006d0 	.word	0x200006d0
 80098b0:	0800e508 	.word	0x0800e508
 80098b4:	20000660 	.word	0x20000660

080098b8 <LSM6DSL_perSampleProcess>:

void LSM6DSL_perSampleProcess (void)
{
 80098b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80098bc:	b086      	sub	sp, #24
 80098be:	af04      	add	r7, sp, #16
	/*
	 * Read output only if new value is available
	 */
	lsm6dsl_reg_t reg;
	lsm6dsl_status_reg_get(&Dev_Ctx, &reg.status_reg);
 80098c0:	1d3b      	adds	r3, r7, #4
 80098c2:	4619      	mov	r1, r3
 80098c4:	4855      	ldr	r0, [pc, #340]	; (8009a1c <LSM6DSL_perSampleProcess+0x164>)
 80098c6:	f000 fcd9 	bl	800a27c <lsm6dsl_status_reg_get>


	if (reg.status_reg.xlda)
 80098ca:	793b      	ldrb	r3, [r7, #4]
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d04b      	beq.n	800996e <LSM6DSL_perSampleProcess+0xb6>
	{
	  memset(Data_Raw_Acceleration.u8bit, 0x00, 3*sizeof(int16_t));
 80098d6:	2206      	movs	r2, #6
 80098d8:	2100      	movs	r1, #0
 80098da:	4851      	ldr	r0, [pc, #324]	; (8009a20 <LSM6DSL_perSampleProcess+0x168>)
 80098dc:	f002 fa40 	bl	800bd60 <memset>
	  lsm6dsl_acceleration_raw_get(&Dev_Ctx, Data_Raw_Acceleration.u8bit);
 80098e0:	494f      	ldr	r1, [pc, #316]	; (8009a20 <LSM6DSL_perSampleProcess+0x168>)
 80098e2:	484e      	ldr	r0, [pc, #312]	; (8009a1c <LSM6DSL_perSampleProcess+0x164>)
 80098e4:	f000 fcec 	bl	800a2c0 <lsm6dsl_acceleration_raw_get>
	  P_Acceleration_Mg[0] = lsm6dsl_from_fs8g_to_mg( Data_Raw_Acceleration.i16bit[0]);
 80098e8:	4b4d      	ldr	r3, [pc, #308]	; (8009a20 <LSM6DSL_perSampleProcess+0x168>)
 80098ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f000 fbd6 	bl	800a0a0 <lsm6dsl_from_fs8g_to_mg>
 80098f4:	eef0 7a40 	vmov.f32	s15, s0
 80098f8:	4b4a      	ldr	r3, [pc, #296]	; (8009a24 <LSM6DSL_perSampleProcess+0x16c>)
 80098fa:	edc3 7a00 	vstr	s15, [r3]
	  P_Acceleration_Mg[1] = lsm6dsl_from_fs8g_to_mg( Data_Raw_Acceleration.i16bit[1]);
 80098fe:	4b48      	ldr	r3, [pc, #288]	; (8009a20 <LSM6DSL_perSampleProcess+0x168>)
 8009900:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009904:	4618      	mov	r0, r3
 8009906:	f000 fbcb 	bl	800a0a0 <lsm6dsl_from_fs8g_to_mg>
 800990a:	eef0 7a40 	vmov.f32	s15, s0
 800990e:	4b45      	ldr	r3, [pc, #276]	; (8009a24 <LSM6DSL_perSampleProcess+0x16c>)
 8009910:	edc3 7a01 	vstr	s15, [r3, #4]
	  P_Acceleration_Mg[2] = lsm6dsl_from_fs8g_to_mg( Data_Raw_Acceleration.i16bit[2]);
 8009914:	4b42      	ldr	r3, [pc, #264]	; (8009a20 <LSM6DSL_perSampleProcess+0x168>)
 8009916:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800991a:	4618      	mov	r0, r3
 800991c:	f000 fbc0 	bl	800a0a0 <lsm6dsl_from_fs8g_to_mg>
 8009920:	eef0 7a40 	vmov.f32	s15, s0
 8009924:	4b3f      	ldr	r3, [pc, #252]	; (8009a24 <LSM6DSL_perSampleProcess+0x16c>)
 8009926:	edc3 7a02 	vstr	s15, [r3, #8]

	  sprintf(Data, "Acceleration [mg]:  %4.2f\t%4.2f\t%4.2f\n",
	  			  P_Acceleration_Mg[0], P_Acceleration_Mg[1], P_Acceleration_Mg[2]);
 800992a:	4b3e      	ldr	r3, [pc, #248]	; (8009a24 <LSM6DSL_perSampleProcess+0x16c>)
 800992c:	681b      	ldr	r3, [r3, #0]
	  sprintf(Data, "Acceleration [mg]:  %4.2f\t%4.2f\t%4.2f\n",
 800992e:	4618      	mov	r0, r3
 8009930:	f7f6 fe12 	bl	8000558 <__aeabi_f2d>
 8009934:	4680      	mov	r8, r0
 8009936:	4689      	mov	r9, r1
	  			  P_Acceleration_Mg[0], P_Acceleration_Mg[1], P_Acceleration_Mg[2]);
 8009938:	4b3a      	ldr	r3, [pc, #232]	; (8009a24 <LSM6DSL_perSampleProcess+0x16c>)
 800993a:	685b      	ldr	r3, [r3, #4]
	  sprintf(Data, "Acceleration [mg]:  %4.2f\t%4.2f\t%4.2f\n",
 800993c:	4618      	mov	r0, r3
 800993e:	f7f6 fe0b 	bl	8000558 <__aeabi_f2d>
 8009942:	4604      	mov	r4, r0
 8009944:	460d      	mov	r5, r1
	  			  P_Acceleration_Mg[0], P_Acceleration_Mg[1], P_Acceleration_Mg[2]);
 8009946:	4b37      	ldr	r3, [pc, #220]	; (8009a24 <LSM6DSL_perSampleProcess+0x16c>)
 8009948:	689b      	ldr	r3, [r3, #8]
	  sprintf(Data, "Acceleration [mg]:  %4.2f\t%4.2f\t%4.2f\n",
 800994a:	4618      	mov	r0, r3
 800994c:	f7f6 fe04 	bl	8000558 <__aeabi_f2d>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009958:	e9cd 4500 	strd	r4, r5, [sp]
 800995c:	4642      	mov	r2, r8
 800995e:	464b      	mov	r3, r9
 8009960:	4931      	ldr	r1, [pc, #196]	; (8009a28 <LSM6DSL_perSampleProcess+0x170>)
 8009962:	4832      	ldr	r0, [pc, #200]	; (8009a2c <LSM6DSL_perSampleProcess+0x174>)
 8009964:	f002 fe60 	bl	800c628 <siprintf>

	  COM_uartPrint(Data);
 8009968:	4830      	ldr	r0, [pc, #192]	; (8009a2c <LSM6DSL_perSampleProcess+0x174>)
 800996a:	f7ff f9ef 	bl	8008d4c <COM_uartPrint>
	}
	if (reg.status_reg.gda)
 800996e:	793b      	ldrb	r3, [r7, #4]
 8009970:	f003 0302 	and.w	r3, r3, #2
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b00      	cmp	r3, #0
 8009978:	d04b      	beq.n	8009a12 <LSM6DSL_perSampleProcess+0x15a>
	{
	  memset(Data_Raw_Angular_Rate.u8bit, 0x00, 3*sizeof(int16_t));
 800997a:	2206      	movs	r2, #6
 800997c:	2100      	movs	r1, #0
 800997e:	482c      	ldr	r0, [pc, #176]	; (8009a30 <LSM6DSL_perSampleProcess+0x178>)
 8009980:	f002 f9ee 	bl	800bd60 <memset>
	  lsm6dsl_angular_rate_raw_get(&Dev_Ctx, Data_Raw_Angular_Rate.u8bit);
 8009984:	492a      	ldr	r1, [pc, #168]	; (8009a30 <LSM6DSL_perSampleProcess+0x178>)
 8009986:	4825      	ldr	r0, [pc, #148]	; (8009a1c <LSM6DSL_perSampleProcess+0x164>)
 8009988:	f000 fc89 	bl	800a29e <lsm6dsl_angular_rate_raw_get>
	  P_Angular_Rate_Mdps[0] = lsm6dsl_from_fs500dps_to_mdps(Data_Raw_Angular_Rate.i16bit[0]);
 800998c:	4b28      	ldr	r3, [pc, #160]	; (8009a30 <LSM6DSL_perSampleProcess+0x178>)
 800998e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009992:	4618      	mov	r0, r3
 8009994:	f000 fb9c 	bl	800a0d0 <lsm6dsl_from_fs500dps_to_mdps>
 8009998:	eef0 7a40 	vmov.f32	s15, s0
 800999c:	4b25      	ldr	r3, [pc, #148]	; (8009a34 <LSM6DSL_perSampleProcess+0x17c>)
 800999e:	edc3 7a00 	vstr	s15, [r3]
	  P_Angular_Rate_Mdps[1] = lsm6dsl_from_fs500dps_to_mdps(Data_Raw_Angular_Rate.i16bit[1]);
 80099a2:	4b23      	ldr	r3, [pc, #140]	; (8009a30 <LSM6DSL_perSampleProcess+0x178>)
 80099a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f000 fb91 	bl	800a0d0 <lsm6dsl_from_fs500dps_to_mdps>
 80099ae:	eef0 7a40 	vmov.f32	s15, s0
 80099b2:	4b20      	ldr	r3, [pc, #128]	; (8009a34 <LSM6DSL_perSampleProcess+0x17c>)
 80099b4:	edc3 7a01 	vstr	s15, [r3, #4]
	  P_Angular_Rate_Mdps[2] = lsm6dsl_from_fs500dps_to_mdps(Data_Raw_Angular_Rate.i16bit[2]);
 80099b8:	4b1d      	ldr	r3, [pc, #116]	; (8009a30 <LSM6DSL_perSampleProcess+0x178>)
 80099ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 fb86 	bl	800a0d0 <lsm6dsl_from_fs500dps_to_mdps>
 80099c4:	eef0 7a40 	vmov.f32	s15, s0
 80099c8:	4b1a      	ldr	r3, [pc, #104]	; (8009a34 <LSM6DSL_perSampleProcess+0x17c>)
 80099ca:	edc3 7a02 	vstr	s15, [r3, #8]

	  sprintf(Data, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\n\n",
			  P_Angular_Rate_Mdps[0], P_Angular_Rate_Mdps[1], P_Angular_Rate_Mdps[2]);
 80099ce:	4b19      	ldr	r3, [pc, #100]	; (8009a34 <LSM6DSL_perSampleProcess+0x17c>)
 80099d0:	681b      	ldr	r3, [r3, #0]
	  sprintf(Data, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\n\n",
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7f6 fdc0 	bl	8000558 <__aeabi_f2d>
 80099d8:	4680      	mov	r8, r0
 80099da:	4689      	mov	r9, r1
			  P_Angular_Rate_Mdps[0], P_Angular_Rate_Mdps[1], P_Angular_Rate_Mdps[2]);
 80099dc:	4b15      	ldr	r3, [pc, #84]	; (8009a34 <LSM6DSL_perSampleProcess+0x17c>)
 80099de:	685b      	ldr	r3, [r3, #4]
	  sprintf(Data, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\n\n",
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7f6 fdb9 	bl	8000558 <__aeabi_f2d>
 80099e6:	4604      	mov	r4, r0
 80099e8:	460d      	mov	r5, r1
			  P_Angular_Rate_Mdps[0], P_Angular_Rate_Mdps[1], P_Angular_Rate_Mdps[2]);
 80099ea:	4b12      	ldr	r3, [pc, #72]	; (8009a34 <LSM6DSL_perSampleProcess+0x17c>)
 80099ec:	689b      	ldr	r3, [r3, #8]
	  sprintf(Data, "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\n\n",
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7f6 fdb2 	bl	8000558 <__aeabi_f2d>
 80099f4:	4602      	mov	r2, r0
 80099f6:	460b      	mov	r3, r1
 80099f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80099fc:	e9cd 4500 	strd	r4, r5, [sp]
 8009a00:	4642      	mov	r2, r8
 8009a02:	464b      	mov	r3, r9
 8009a04:	490c      	ldr	r1, [pc, #48]	; (8009a38 <LSM6DSL_perSampleProcess+0x180>)
 8009a06:	4809      	ldr	r0, [pc, #36]	; (8009a2c <LSM6DSL_perSampleProcess+0x174>)
 8009a08:	f002 fe0e 	bl	800c628 <siprintf>

	  COM_uartPrint(Data);
 8009a0c:	4807      	ldr	r0, [pc, #28]	; (8009a2c <LSM6DSL_perSampleProcess+0x174>)
 8009a0e:	f7ff f99d 	bl	8008d4c <COM_uartPrint>
	}
}
 8009a12:	bf00      	nop
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009a1c:	20000660 	.word	0x20000660
 8009a20:	2000034c 	.word	0x2000034c
 8009a24:	2000035c 	.word	0x2000035c
 8009a28:	0800e52c 	.word	0x0800e52c
 8009a2c:	2000066c 	.word	0x2000066c
 8009a30:	20000354 	.word	0x20000354
 8009a34:	20000368 	.word	0x20000368
 8009a38:	0800e554 	.word	0x0800e554

08009a3c <LSM6DSL_perSampleDisable>:

void LSM6DSL_perSampleDisable (void)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
	lsm6dsl_int1_route_t reg;

	lsm6dsl_pin_int1_route_get(&Dev_Ctx, &reg);
 8009a42:	1d3b      	adds	r3, r7, #4
 8009a44:	4619      	mov	r1, r3
 8009a46:	4809      	ldr	r0, [pc, #36]	; (8009a6c <LSM6DSL_perSampleDisable+0x30>)
 8009a48:	f000 ff03 	bl	800a852 <lsm6dsl_pin_int1_route_get>

	reg.int1_drdy_xl = PROPERTY_DISABLE;
 8009a4c:	793b      	ldrb	r3, [r7, #4]
 8009a4e:	f36f 0300 	bfc	r3, #0, #1
 8009a52:	713b      	strb	r3, [r7, #4]
	reg.int1_drdy_g = PROPERTY_DISABLE;
 8009a54:	793b      	ldrb	r3, [r7, #4]
 8009a56:	f36f 0341 	bfc	r3, #1, #1
 8009a5a:	713b      	strb	r3, [r7, #4]

	lsm6dsl_pin_int1_route_set(&Dev_Ctx, reg);
 8009a5c:	6879      	ldr	r1, [r7, #4]
 8009a5e:	4803      	ldr	r0, [pc, #12]	; (8009a6c <LSM6DSL_perSampleDisable+0x30>)
 8009a60:	f000 fd94 	bl	800a58c <lsm6dsl_pin_int1_route_set>
}
 8009a64:	bf00      	nop
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	20000660 	.word	0x20000660

08009a70 <LSM6DSL_fifoInit>:

void LSM6DSL_fifoInit(void)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
	if (Lsm6dsl_Is_Connected == LSM6DSL_DISCONNECTED)
 8009a76:	4b27      	ldr	r3, [pc, #156]	; (8009b14 <LSM6DSL_fifoInit+0xa4>)
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d103      	bne.n	8009a86 <LSM6DSL_fifoInit+0x16>
	{
		COM_uartPrint("LSM6DSL is not connected!\n");
 8009a7e:	4826      	ldr	r0, [pc, #152]	; (8009b18 <LSM6DSL_fifoInit+0xa8>)
 8009a80:	f7ff f964 	bl	8008d4c <COM_uartPrint>
		return;
 8009a84:	e042      	b.n	8009b0c <LSM6DSL_fifoInit+0x9c>
	}
	if (Lsm6dsl_Mode == LSM6DSL_MODE_PER_SAMPLE)
 8009a86:	4b25      	ldr	r3, [pc, #148]	; (8009b1c <LSM6DSL_fifoInit+0xac>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d103      	bne.n	8009a96 <LSM6DSL_fifoInit+0x26>
	{
		COM_uartPrint("Need to disable PER_SAMPLE mode first\n");
 8009a8e:	4824      	ldr	r0, [pc, #144]	; (8009b20 <LSM6DSL_fifoInit+0xb0>)
 8009a90:	f7ff f95c 	bl	8008d4c <COM_uartPrint>
		return;
 8009a94:	e03a      	b.n	8009b0c <LSM6DSL_fifoInit+0x9c>
	}

	lsm6dsl_pin_polarity_set(&Dev_Ctx, LSM6DSL_ACTIVE_LOW);
 8009a96:	2101      	movs	r1, #1
 8009a98:	4822      	ldr	r0, [pc, #136]	; (8009b24 <LSM6DSL_fifoInit+0xb4>)
 8009a9a:	f000 ffb0 	bl	800a9fe <lsm6dsl_pin_polarity_set>

	/* Set acc&gyro FIFO decimation */
	lsm6dsl_dec_fifo_xl_t valXl;
	lsm6dsl_dec_fifo_gyro_t valGy;

	lsm6dsl_fifo_xl_batch_get(&Dev_Ctx, &valXl);
 8009a9e:	1dfb      	adds	r3, r7, #7
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	4820      	ldr	r0, [pc, #128]	; (8009b24 <LSM6DSL_fifoInit+0xb4>)
 8009aa4:	f001 f882 	bl	800abac <lsm6dsl_fifo_xl_batch_get>
	valXl = LSM6DSL_FIFO_XL_NO_DEC;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_fifo_xl_batch_set(&Dev_Ctx, valXl);
 8009aac:	79fb      	ldrb	r3, [r7, #7]
 8009aae:	4619      	mov	r1, r3
 8009ab0:	481c      	ldr	r0, [pc, #112]	; (8009b24 <LSM6DSL_fifoInit+0xb4>)
 8009ab2:	f001 f854 	bl	800ab5e <lsm6dsl_fifo_xl_batch_set>

	lsm6dsl_fifo_gy_batch_get(&Dev_Ctx, &valGy);
 8009ab6:	1dbb      	adds	r3, r7, #6
 8009ab8:	4619      	mov	r1, r3
 8009aba:	481a      	ldr	r0, [pc, #104]	; (8009b24 <LSM6DSL_fifoInit+0xb4>)
 8009abc:	f001 f8ec 	bl	800ac98 <lsm6dsl_fifo_gy_batch_get>
	valGy = LSM6DSL_FIFO_GY_NO_DEC;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	71bb      	strb	r3, [r7, #6]
	lsm6dsl_fifo_gy_batch_set(&Dev_Ctx, valGy);
 8009ac4:	79bb      	ldrb	r3, [r7, #6]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	4816      	ldr	r0, [pc, #88]	; (8009b24 <LSM6DSL_fifoInit+0xb4>)
 8009aca:	f001 f8bf 	bl	800ac4c <lsm6dsl_fifo_gy_batch_set>

	/* Set FIFO ODR value */
	lsm6dsl_odr_fifo_t valOdr;
	lsm6dsl_fifo_data_rate_get(&Dev_Ctx, &valOdr);
 8009ace:	1d7b      	adds	r3, r7, #5
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4814      	ldr	r0, [pc, #80]	; (8009b24 <LSM6DSL_fifoInit+0xb4>)
 8009ad4:	f001 f9be 	bl	800ae54 <lsm6dsl_fifo_data_rate_get>
	valOdr = LSM6DSL_FIFO_12Hz5;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	717b      	strb	r3, [r7, #5]
	lsm6dsl_fifo_data_rate_set(&Dev_Ctx, valOdr);
 8009adc:	797b      	ldrb	r3, [r7, #5]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	4810      	ldr	r0, [pc, #64]	; (8009b24 <LSM6DSL_fifoInit+0xb4>)
 8009ae2:	f001 f991 	bl	800ae08 <lsm6dsl_fifo_data_rate_set>

	LSM6DSL_fifoInterruptEnable();
 8009ae6:	f000 fa4d 	bl	8009f84 <LSM6DSL_fifoInterruptEnable>

	/* Set FIFO watermark */
	uint16_t valWtm;
	lsm6dsl_fifo_watermark_get(&Dev_Ctx, &valWtm);
 8009aea:	1cbb      	adds	r3, r7, #2
 8009aec:	4619      	mov	r1, r3
 8009aee:	480d      	ldr	r0, [pc, #52]	; (8009b24 <LSM6DSL_fifoInit+0xb4>)
 8009af0:	f000 ffe1 	bl	800aab6 <lsm6dsl_fifo_watermark_get>
	valWtm = ACC_AND_GYRO_FIFO_WATERMARK;
 8009af4:	233c      	movs	r3, #60	; 0x3c
 8009af6:	807b      	strh	r3, [r7, #2]
	lsm6dsl_fifo_watermark_set(&Dev_Ctx, valWtm);
 8009af8:	887b      	ldrh	r3, [r7, #2]
 8009afa:	4619      	mov	r1, r3
 8009afc:	4809      	ldr	r0, [pc, #36]	; (8009b24 <LSM6DSL_fifoInit+0xb4>)
 8009afe:	f000 ffa4 	bl	800aa4a <lsm6dsl_fifo_watermark_set>
	/*uint8_t valStopOnWtm;
	lsm6dsl_fifo_stop_on_wtm_get(&Dev_Ctx, &valStopOnWtm);
	valStopOnWtm = PROPERTY_ENABLE;
	lsm6dsl_fifo_stop_on_wtm_set(&Dev_Ctx, valStopOnWtm);*/

	LSM6DSL_fifoSetFIFOMode();
 8009b02:	f000 fa13 	bl	8009f2c <LSM6DSL_fifoSetFIFOMode>

	Lsm6dsl_Mode = LSM6DSL_MODE_FIFO;
 8009b06:	4b05      	ldr	r3, [pc, #20]	; (8009b1c <LSM6DSL_fifoInit+0xac>)
 8009b08:	2202      	movs	r2, #2
 8009b0a:	701a      	strb	r2, [r3, #0]
}
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	200006d1 	.word	0x200006d1
 8009b18:	0800e4ec 	.word	0x0800e4ec
 8009b1c:	200006d0 	.word	0x200006d0
 8009b20:	0800e57c 	.word	0x0800e57c
 8009b24:	20000660 	.word	0x20000660

08009b28 <LSM6DSL_fifoProcess>:

void LSM6DSL_fifoProcess(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	af00      	add	r7, sp, #0
	LSM6DSL_fifoReadAllData();
 8009b2c:	f000 f80a 	bl	8009b44 <LSM6DSL_fifoReadAllData>
}
 8009b30:	bf00      	nop
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <LSM6DSL_fifoDisable>:

void LSM6DSL_fifoDisable(void)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	af00      	add	r7, sp, #0
	LSM6DSL_fifoInterruptDisable();
 8009b38:	f000 fa3a 	bl	8009fb0 <LSM6DSL_fifoInterruptDisable>
	LSM6DSL_fifoSetBypassMode();
 8009b3c:	f000 fa0c 	bl	8009f58 <LSM6DSL_fifoSetBypassMode>
}
 8009b40:	bf00      	nop
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <LSM6DSL_fifoReadAllData>:

void LSM6DSL_fifoReadAllData(void)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
	uint16_t unread_int16_fifo_samples = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	807b      	strh	r3, [r7, #2]

	for(int i = 0; i < 3; i++)
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60fb      	str	r3, [r7, #12]
 8009b52:	e010      	b.n	8009b76 <LSM6DSL_fifoReadAllData+0x32>
	{
		P_Acceleration_G_Sum[i] = 0;
 8009b54:	4a2f      	ldr	r2, [pc, #188]	; (8009c14 <LSM6DSL_fifoReadAllData+0xd0>)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f04f 0200 	mov.w	r2, #0
 8009b60:	601a      	str	r2, [r3, #0]
		P_Angular_Rate_Dps_Sum[i] = 0;
 8009b62:	4a2d      	ldr	r2, [pc, #180]	; (8009c18 <LSM6DSL_fifoReadAllData+0xd4>)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	f04f 0200 	mov.w	r2, #0
 8009b6e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	3301      	adds	r3, #1
 8009b74:	60fb      	str	r3, [r7, #12]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	ddeb      	ble.n	8009b54 <LSM6DSL_fifoReadAllData+0x10>
	}

	/* Get num of unread FIFO samples before reading Data */
	lsm6dsl_fifo_data_level_get(&Dev_Ctx, &unread_int16_fifo_samples);
 8009b7c:	1cbb      	adds	r3, r7, #2
 8009b7e:	4619      	mov	r1, r3
 8009b80:	4826      	ldr	r0, [pc, #152]	; (8009c1c <LSM6DSL_fifoReadAllData+0xd8>)
 8009b82:	f000 ffc2 	bl	800ab0a <lsm6dsl_fifo_data_level_get>

	uint16_t unread_acc_and_gyro_samples = unread_int16_fifo_samples / ACC_AND_GYRO_SINGLE_FIFO_SAMPLE;
 8009b86:	887b      	ldrh	r3, [r7, #2]
 8009b88:	4a25      	ldr	r2, [pc, #148]	; (8009c20 <LSM6DSL_fifoReadAllData+0xdc>)
 8009b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b8e:	089b      	lsrs	r3, r3, #2
 8009b90:	817b      	strh	r3, [r7, #10]
	sprintf(Data, "Number of unread ACC and Gyro samples each: %d\n", unread_acc_and_gyro_samples);
 8009b92:	897b      	ldrh	r3, [r7, #10]
 8009b94:	461a      	mov	r2, r3
 8009b96:	4923      	ldr	r1, [pc, #140]	; (8009c24 <LSM6DSL_fifoReadAllData+0xe0>)
 8009b98:	4823      	ldr	r0, [pc, #140]	; (8009c28 <LSM6DSL_fifoReadAllData+0xe4>)
 8009b9a:	f002 fd45 	bl	800c628 <siprintf>
	COM_uartPrint(Data);
 8009b9e:	4822      	ldr	r0, [pc, #136]	; (8009c28 <LSM6DSL_fifoReadAllData+0xe4>)
 8009ba0:	f7ff f8d4 	bl	8008d4c <COM_uartPrint>

	while (unread_acc_and_gyro_samples > 0)
 8009ba4:	e02f      	b.n	8009c06 <LSM6DSL_fifoReadAllData+0xc2>
	{
		uint16_t unread_acc_and_gyro_samples_cycle;
		if(unread_acc_and_gyro_samples >= SAMPLES_TO_READ)
 8009ba6:	897b      	ldrh	r3, [r7, #10]
 8009ba8:	2b09      	cmp	r3, #9
 8009baa:	d902      	bls.n	8009bb2 <LSM6DSL_fifoReadAllData+0x6e>
		{
			unread_acc_and_gyro_samples_cycle = SAMPLES_TO_READ;
 8009bac:	230a      	movs	r3, #10
 8009bae:	813b      	strh	r3, [r7, #8]
 8009bb0:	e001      	b.n	8009bb6 <LSM6DSL_fifoReadAllData+0x72>
		}
		else
		{
			unread_acc_and_gyro_samples_cycle = unread_acc_and_gyro_samples;
 8009bb2:	897b      	ldrh	r3, [r7, #10]
 8009bb4:	813b      	strh	r3, [r7, #8]
		}

		lsm6dsl_fifo_raw_data_get(&Dev_Ctx, P_Data_Raw_Acc_Gy_Buf->u8bit, unread_acc_and_gyro_samples_cycle * ACC_AND_GYRO_SINGLE_FIFO_SAMPLE * FIFO_SAMPLE_TO_BYTE_RATIO);
 8009bb6:	893b      	ldrh	r3, [r7, #8]
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	461a      	mov	r2, r3
 8009bbc:	0052      	lsls	r2, r2, #1
 8009bbe:	4413      	add	r3, r2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	4919      	ldr	r1, [pc, #100]	; (8009c2c <LSM6DSL_fifoReadAllData+0xe8>)
 8009bc8:	4814      	ldr	r0, [pc, #80]	; (8009c1c <LSM6DSL_fifoReadAllData+0xd8>)
 8009bca:	f000 fb8a 	bl	800a2e2 <lsm6dsl_fifo_raw_data_get>
		for (int i = 0; i < unread_acc_and_gyro_samples_cycle * ACC_AND_GYRO_SINGLE_FIFO_SAMPLE; i = i + ACC_AND_GYRO_SINGLE_FIFO_SAMPLE)
 8009bce:	2300      	movs	r3, #0
 8009bd0:	607b      	str	r3, [r7, #4]
 8009bd2:	e007      	b.n	8009be4 <LSM6DSL_fifoReadAllData+0xa0>
		{
			LSM6DSL_fifoAccAndGyroReadSingleSample(i);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f000 f829 	bl	8009c30 <LSM6DSL_fifoAccAndGyroReadSingleSample>
		for (int i = 0; i < unread_acc_and_gyro_samples_cycle * ACC_AND_GYRO_SINGLE_FIFO_SAMPLE; i = i + ACC_AND_GYRO_SINGLE_FIFO_SAMPLE)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3306      	adds	r3, #6
 8009be2:	607b      	str	r3, [r7, #4]
 8009be4:	893a      	ldrh	r2, [r7, #8]
 8009be6:	4613      	mov	r3, r2
 8009be8:	005b      	lsls	r3, r3, #1
 8009bea:	4413      	add	r3, r2
 8009bec:	005b      	lsls	r3, r3, #1
 8009bee:	461a      	mov	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	dbee      	blt.n	8009bd4 <LSM6DSL_fifoReadAllData+0x90>
		}
		LSM6DSL_fifoCalcAccGyroAvgAndPrint(unread_acc_and_gyro_samples_cycle);
 8009bf6:	893b      	ldrh	r3, [r7, #8]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f000 f88f 	bl	8009d1c <LSM6DSL_fifoCalcAccGyroAvgAndPrint>
		unread_acc_and_gyro_samples -= unread_acc_and_gyro_samples_cycle;
 8009bfe:	897a      	ldrh	r2, [r7, #10]
 8009c00:	893b      	ldrh	r3, [r7, #8]
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	817b      	strh	r3, [r7, #10]
	while (unread_acc_and_gyro_samples > 0)
 8009c06:	897b      	ldrh	r3, [r7, #10]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1cc      	bne.n	8009ba6 <LSM6DSL_fifoReadAllData+0x62>
	}
}
 8009c0c:	bf00      	nop
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	20000648 	.word	0x20000648
 8009c18:	20000654 	.word	0x20000654
 8009c1c:	20000660 	.word	0x20000660
 8009c20:	aaaaaaab 	.word	0xaaaaaaab
 8009c24:	0800e5a4 	.word	0x0800e5a4
 8009c28:	2000066c 	.word	0x2000066c
 8009c2c:	20000378 	.word	0x20000378

08009c30 <LSM6DSL_fifoAccAndGyroReadSingleSample>:

void LSM6DSL_fifoAccAndGyroReadSingleSample(uint16_t SampleIndex)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	80fb      	strh	r3, [r7, #6]
	P_Angular_Rate_Dps_Sum[0] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex];
 8009c3a:	4b35      	ldr	r3, [pc, #212]	; (8009d10 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 8009c3c:	ed93 7a00 	vldr	s14, [r3]
 8009c40:	88fb      	ldrh	r3, [r7, #6]
 8009c42:	4a34      	ldr	r2, [pc, #208]	; (8009d14 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 8009c44:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009c48:	ee07 3a90 	vmov	s15, r3
 8009c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c54:	4b2e      	ldr	r3, [pc, #184]	; (8009d10 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 8009c56:	edc3 7a00 	vstr	s15, [r3]
	P_Angular_Rate_Dps_Sum[1] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 1];
 8009c5a:	4b2d      	ldr	r3, [pc, #180]	; (8009d10 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 8009c5c:	ed93 7a01 	vldr	s14, [r3, #4]
 8009c60:	88fb      	ldrh	r3, [r7, #6]
 8009c62:	3301      	adds	r3, #1
 8009c64:	4a2b      	ldr	r2, [pc, #172]	; (8009d14 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 8009c66:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009c6a:	ee07 3a90 	vmov	s15, r3
 8009c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c76:	4b26      	ldr	r3, [pc, #152]	; (8009d10 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 8009c78:	edc3 7a01 	vstr	s15, [r3, #4]
	P_Angular_Rate_Dps_Sum[2] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 2];
 8009c7c:	4b24      	ldr	r3, [pc, #144]	; (8009d10 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 8009c7e:	ed93 7a02 	vldr	s14, [r3, #8]
 8009c82:	88fb      	ldrh	r3, [r7, #6]
 8009c84:	3302      	adds	r3, #2
 8009c86:	4a23      	ldr	r2, [pc, #140]	; (8009d14 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 8009c88:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009c8c:	ee07 3a90 	vmov	s15, r3
 8009c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c98:	4b1d      	ldr	r3, [pc, #116]	; (8009d10 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe0>)
 8009c9a:	edc3 7a02 	vstr	s15, [r3, #8]

	P_Acceleration_G_Sum[0] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 3];
 8009c9e:	4b1e      	ldr	r3, [pc, #120]	; (8009d18 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 8009ca0:	ed93 7a00 	vldr	s14, [r3]
 8009ca4:	88fb      	ldrh	r3, [r7, #6]
 8009ca6:	3303      	adds	r3, #3
 8009ca8:	4a1a      	ldr	r2, [pc, #104]	; (8009d14 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 8009caa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009cae:	ee07 3a90 	vmov	s15, r3
 8009cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cba:	4b17      	ldr	r3, [pc, #92]	; (8009d18 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 8009cbc:	edc3 7a00 	vstr	s15, [r3]
	P_Acceleration_G_Sum[1] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 4];
 8009cc0:	4b15      	ldr	r3, [pc, #84]	; (8009d18 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 8009cc2:	ed93 7a01 	vldr	s14, [r3, #4]
 8009cc6:	88fb      	ldrh	r3, [r7, #6]
 8009cc8:	3304      	adds	r3, #4
 8009cca:	4a12      	ldr	r2, [pc, #72]	; (8009d14 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 8009ccc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009cd0:	ee07 3a90 	vmov	s15, r3
 8009cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cdc:	4b0e      	ldr	r3, [pc, #56]	; (8009d18 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 8009cde:	edc3 7a01 	vstr	s15, [r3, #4]
	P_Acceleration_G_Sum[2] += P_Data_Raw_Acc_Gy_Buf->i16bit[SampleIndex + 5];
 8009ce2:	4b0d      	ldr	r3, [pc, #52]	; (8009d18 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 8009ce4:	ed93 7a02 	vldr	s14, [r3, #8]
 8009ce8:	88fb      	ldrh	r3, [r7, #6]
 8009cea:	3305      	adds	r3, #5
 8009cec:	4a09      	ldr	r2, [pc, #36]	; (8009d14 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe4>)
 8009cee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009cf2:	ee07 3a90 	vmov	s15, r3
 8009cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cfe:	4b06      	ldr	r3, [pc, #24]	; (8009d18 <LSM6DSL_fifoAccAndGyroReadSingleSample+0xe8>)
 8009d00:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	20000654 	.word	0x20000654
 8009d14:	20000378 	.word	0x20000378
 8009d18:	20000648 	.word	0x20000648

08009d1c <LSM6DSL_fifoCalcAccGyroAvgAndPrint>:

void LSM6DSL_fifoCalcAccGyroAvgAndPrint(uint16_t divider)
{
 8009d1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009d20:	b086      	sub	sp, #24
 8009d22:	af04      	add	r7, sp, #16
 8009d24:	4603      	mov	r3, r0
 8009d26:	80fb      	strh	r3, [r7, #6]
	sprintf(Data, "%d samples average:\n", divider);
 8009d28:	88fb      	ldrh	r3, [r7, #6]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	4978      	ldr	r1, [pc, #480]	; (8009f10 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f4>)
 8009d2e:	4879      	ldr	r0, [pc, #484]	; (8009f14 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 8009d30:	f002 fc7a 	bl	800c628 <siprintf>
	COM_uartPrint(Data);
 8009d34:	4877      	ldr	r0, [pc, #476]	; (8009f14 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 8009d36:	f7ff f809 	bl	8008d4c <COM_uartPrint>

	P_Acceleration_G_Sum[0] = lsm6dsl_from_fs8g_to_mg( P_Acceleration_G_Sum[0] / divider )/1000;
 8009d3a:	4b77      	ldr	r3, [pc, #476]	; (8009f18 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009d3c:	edd3 6a00 	vldr	s13, [r3]
 8009d40:	88fb      	ldrh	r3, [r7, #6]
 8009d42:	ee07 3a90 	vmov	s15, r3
 8009d46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d52:	ee17 3a90 	vmov	r3, s15
 8009d56:	b21b      	sxth	r3, r3
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 f9a1 	bl	800a0a0 <lsm6dsl_from_fs8g_to_mg>
 8009d5e:	eef0 6a40 	vmov.f32	s13, s0
 8009d62:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8009f1c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 8009d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d6a:	4b6b      	ldr	r3, [pc, #428]	; (8009f18 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009d6c:	edc3 7a00 	vstr	s15, [r3]
	P_Acceleration_G_Sum[1] = lsm6dsl_from_fs8g_to_mg( P_Acceleration_G_Sum[1] / divider )/1000;
 8009d70:	4b69      	ldr	r3, [pc, #420]	; (8009f18 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009d72:	edd3 6a01 	vldr	s13, [r3, #4]
 8009d76:	88fb      	ldrh	r3, [r7, #6]
 8009d78:	ee07 3a90 	vmov	s15, r3
 8009d7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d88:	ee17 3a90 	vmov	r3, s15
 8009d8c:	b21b      	sxth	r3, r3
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 f986 	bl	800a0a0 <lsm6dsl_from_fs8g_to_mg>
 8009d94:	eef0 6a40 	vmov.f32	s13, s0
 8009d98:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8009f1c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 8009d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009da0:	4b5d      	ldr	r3, [pc, #372]	; (8009f18 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009da2:	edc3 7a01 	vstr	s15, [r3, #4]
	P_Acceleration_G_Sum[2] = lsm6dsl_from_fs8g_to_mg( P_Acceleration_G_Sum[2] / divider )/1000;
 8009da6:	4b5c      	ldr	r3, [pc, #368]	; (8009f18 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009da8:	edd3 6a02 	vldr	s13, [r3, #8]
 8009dac:	88fb      	ldrh	r3, [r7, #6]
 8009dae:	ee07 3a90 	vmov	s15, r3
 8009db2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009dbe:	ee17 3a90 	vmov	r3, s15
 8009dc2:	b21b      	sxth	r3, r3
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 f96b 	bl	800a0a0 <lsm6dsl_from_fs8g_to_mg>
 8009dca:	eef0 6a40 	vmov.f32	s13, s0
 8009dce:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8009f1c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 8009dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dd6:	4b50      	ldr	r3, [pc, #320]	; (8009f18 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009dd8:	edc3 7a02 	vstr	s15, [r3, #8]

	sprintf(Data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
			P_Acceleration_G_Sum[0], P_Acceleration_G_Sum[1], P_Acceleration_G_Sum[2]);
 8009ddc:	4b4e      	ldr	r3, [pc, #312]	; (8009f18 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009dde:	681b      	ldr	r3, [r3, #0]
	sprintf(Data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7f6 fbb9 	bl	8000558 <__aeabi_f2d>
 8009de6:	4680      	mov	r8, r0
 8009de8:	4689      	mov	r9, r1
			P_Acceleration_G_Sum[0], P_Acceleration_G_Sum[1], P_Acceleration_G_Sum[2]);
 8009dea:	4b4b      	ldr	r3, [pc, #300]	; (8009f18 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009dec:	685b      	ldr	r3, [r3, #4]
	sprintf(Data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7f6 fbb2 	bl	8000558 <__aeabi_f2d>
 8009df4:	4604      	mov	r4, r0
 8009df6:	460d      	mov	r5, r1
			P_Acceleration_G_Sum[0], P_Acceleration_G_Sum[1], P_Acceleration_G_Sum[2]);
 8009df8:	4b47      	ldr	r3, [pc, #284]	; (8009f18 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1fc>)
 8009dfa:	689b      	ldr	r3, [r3, #8]
	sprintf(Data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7f6 fbab 	bl	8000558 <__aeabi_f2d>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e0a:	e9cd 4500 	strd	r4, r5, [sp]
 8009e0e:	4642      	mov	r2, r8
 8009e10:	464b      	mov	r3, r9
 8009e12:	4943      	ldr	r1, [pc, #268]	; (8009f20 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x204>)
 8009e14:	483f      	ldr	r0, [pc, #252]	; (8009f14 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 8009e16:	f002 fc07 	bl	800c628 <siprintf>

	COM_uartPrint(Data);
 8009e1a:	483e      	ldr	r0, [pc, #248]	; (8009f14 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 8009e1c:	f7fe ff96 	bl	8008d4c <COM_uartPrint>

	P_Angular_Rate_Dps_Sum[0] = lsm6dsl_from_fs500dps_to_mdps( P_Angular_Rate_Dps_Sum[0] / divider )/1000;
 8009e20:	4b40      	ldr	r3, [pc, #256]	; (8009f24 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009e22:	edd3 6a00 	vldr	s13, [r3]
 8009e26:	88fb      	ldrh	r3, [r7, #6]
 8009e28:	ee07 3a90 	vmov	s15, r3
 8009e2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e38:	ee17 3a90 	vmov	r3, s15
 8009e3c:	b21b      	sxth	r3, r3
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 f946 	bl	800a0d0 <lsm6dsl_from_fs500dps_to_mdps>
 8009e44:	eef0 6a40 	vmov.f32	s13, s0
 8009e48:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009f1c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 8009e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e50:	4b34      	ldr	r3, [pc, #208]	; (8009f24 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009e52:	edc3 7a00 	vstr	s15, [r3]
	P_Angular_Rate_Dps_Sum[1] = lsm6dsl_from_fs500dps_to_mdps( P_Angular_Rate_Dps_Sum[1] / divider )/1000;
 8009e56:	4b33      	ldr	r3, [pc, #204]	; (8009f24 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009e58:	edd3 6a01 	vldr	s13, [r3, #4]
 8009e5c:	88fb      	ldrh	r3, [r7, #6]
 8009e5e:	ee07 3a90 	vmov	s15, r3
 8009e62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e6e:	ee17 3a90 	vmov	r3, s15
 8009e72:	b21b      	sxth	r3, r3
 8009e74:	4618      	mov	r0, r3
 8009e76:	f000 f92b 	bl	800a0d0 <lsm6dsl_from_fs500dps_to_mdps>
 8009e7a:	eef0 6a40 	vmov.f32	s13, s0
 8009e7e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8009f1c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 8009e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e86:	4b27      	ldr	r3, [pc, #156]	; (8009f24 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009e88:	edc3 7a01 	vstr	s15, [r3, #4]
	P_Angular_Rate_Dps_Sum[2] = lsm6dsl_from_fs500dps_to_mdps( P_Angular_Rate_Dps_Sum[2] / divider )/1000;
 8009e8c:	4b25      	ldr	r3, [pc, #148]	; (8009f24 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009e8e:	edd3 6a02 	vldr	s13, [r3, #8]
 8009e92:	88fb      	ldrh	r3, [r7, #6]
 8009e94:	ee07 3a90 	vmov	s15, r3
 8009e98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ea4:	ee17 3a90 	vmov	r3, s15
 8009ea8:	b21b      	sxth	r3, r3
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 f910 	bl	800a0d0 <lsm6dsl_from_fs500dps_to_mdps>
 8009eb0:	eef0 6a40 	vmov.f32	s13, s0
 8009eb4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009f1c <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x200>
 8009eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ebc:	4b19      	ldr	r3, [pc, #100]	; (8009f24 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009ebe:	edc3 7a02 	vstr	s15, [r3, #8]

	sprintf(Data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
				P_Angular_Rate_Dps_Sum[0], P_Angular_Rate_Dps_Sum[1], P_Angular_Rate_Dps_Sum[2]);
 8009ec2:	4b18      	ldr	r3, [pc, #96]	; (8009f24 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
	sprintf(Data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7f6 fb46 	bl	8000558 <__aeabi_f2d>
 8009ecc:	4680      	mov	r8, r0
 8009ece:	4689      	mov	r9, r1
				P_Angular_Rate_Dps_Sum[0], P_Angular_Rate_Dps_Sum[1], P_Angular_Rate_Dps_Sum[2]);
 8009ed0:	4b14      	ldr	r3, [pc, #80]	; (8009f24 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009ed2:	685b      	ldr	r3, [r3, #4]
	sprintf(Data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7f6 fb3f 	bl	8000558 <__aeabi_f2d>
 8009eda:	4604      	mov	r4, r0
 8009edc:	460d      	mov	r5, r1
				P_Angular_Rate_Dps_Sum[0], P_Angular_Rate_Dps_Sum[1], P_Angular_Rate_Dps_Sum[2]);
 8009ede:	4b11      	ldr	r3, [pc, #68]	; (8009f24 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x208>)
 8009ee0:	689b      	ldr	r3, [r3, #8]
	sprintf(Data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7f6 fb38 	bl	8000558 <__aeabi_f2d>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ef0:	e9cd 4500 	strd	r4, r5, [sp]
 8009ef4:	4642      	mov	r2, r8
 8009ef6:	464b      	mov	r3, r9
 8009ef8:	490b      	ldr	r1, [pc, #44]	; (8009f28 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x20c>)
 8009efa:	4806      	ldr	r0, [pc, #24]	; (8009f14 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 8009efc:	f002 fb94 	bl	800c628 <siprintf>

	COM_uartPrint(Data);
 8009f00:	4804      	ldr	r0, [pc, #16]	; (8009f14 <LSM6DSL_fifoCalcAccGyroAvgAndPrint+0x1f8>)
 8009f02:	f7fe ff23 	bl	8008d4c <COM_uartPrint>
}
 8009f06:	bf00      	nop
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009f10:	0800e5d4 	.word	0x0800e5d4
 8009f14:	2000066c 	.word	0x2000066c
 8009f18:	20000648 	.word	0x20000648
 8009f1c:	447a0000 	.word	0x447a0000
 8009f20:	0800e5ec 	.word	0x0800e5ec
 8009f24:	20000654 	.word	0x20000654
 8009f28:	0800e614 	.word	0x0800e614

08009f2c <LSM6DSL_fifoSetFIFOMode>:

void LSM6DSL_fifoSetFIFOMode(void)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
	/* Set FIFO mode to FIFO */
	lsm6dsl_fifo_mode_t fifo_mode_t;
	lsm6dsl_fifo_mode_get(&Dev_Ctx, &fifo_mode_t);
 8009f32:	1dfb      	adds	r3, r7, #7
 8009f34:	4619      	mov	r1, r3
 8009f36:	4807      	ldr	r0, [pc, #28]	; (8009f54 <LSM6DSL_fifoSetFIFOMode+0x28>)
 8009f38:	f000 ff24 	bl	800ad84 <lsm6dsl_fifo_mode_get>
	fifo_mode_t = LSM6DSL_FIFO_MODE;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_fifo_mode_set(&Dev_Ctx, fifo_mode_t);
 8009f40:	79fb      	ldrb	r3, [r7, #7]
 8009f42:	4619      	mov	r1, r3
 8009f44:	4803      	ldr	r0, [pc, #12]	; (8009f54 <LSM6DSL_fifoSetFIFOMode+0x28>)
 8009f46:	f000 fef7 	bl	800ad38 <lsm6dsl_fifo_mode_set>
}
 8009f4a:	bf00      	nop
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	20000660 	.word	0x20000660

08009f58 <LSM6DSL_fifoSetBypassMode>:

void LSM6DSL_fifoSetBypassMode(void)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
	/* Set FIFO mode to BYPASS */
	lsm6dsl_fifo_mode_t fifo_mode_t;
	lsm6dsl_fifo_mode_get(&Dev_Ctx, &fifo_mode_t);
 8009f5e:	1dfb      	adds	r3, r7, #7
 8009f60:	4619      	mov	r1, r3
 8009f62:	4807      	ldr	r0, [pc, #28]	; (8009f80 <LSM6DSL_fifoSetBypassMode+0x28>)
 8009f64:	f000 ff0e 	bl	800ad84 <lsm6dsl_fifo_mode_get>
	fifo_mode_t = LSM6DSL_BYPASS_MODE;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_fifo_mode_set(&Dev_Ctx, fifo_mode_t);
 8009f6c:	79fb      	ldrb	r3, [r7, #7]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	4803      	ldr	r0, [pc, #12]	; (8009f80 <LSM6DSL_fifoSetBypassMode+0x28>)
 8009f72:	f000 fee1 	bl	800ad38 <lsm6dsl_fifo_mode_set>

	//lsm6dsl_fifo_mode_set(&Dev_Ctx, LSM6DSL_BYPASS_MODE);
}
 8009f76:	bf00      	nop
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	20000660 	.word	0x20000660

08009f84 <LSM6DSL_fifoInterruptEnable>:

void LSM6DSL_fifoInterruptEnable(void)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
	/* Set FIFO_FTH on INT1 */
	lsm6dsl_int1_route_t reg;
	lsm6dsl_pin_int1_route_get(&Dev_Ctx, &reg);
 8009f8a:	1d3b      	adds	r3, r7, #4
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4807      	ldr	r0, [pc, #28]	; (8009fac <LSM6DSL_fifoInterruptEnable+0x28>)
 8009f90:	f000 fc5f 	bl	800a852 <lsm6dsl_pin_int1_route_get>
	//reg.int1_full_flag = PROPERTY_ENABLE;
	reg.int1_fth = PROPERTY_ENABLE;
 8009f94:	793b      	ldrb	r3, [r7, #4]
 8009f96:	f043 0308 	orr.w	r3, r3, #8
 8009f9a:	713b      	strb	r3, [r7, #4]
	lsm6dsl_pin_int1_route_set(&Dev_Ctx, reg);
 8009f9c:	6879      	ldr	r1, [r7, #4]
 8009f9e:	4803      	ldr	r0, [pc, #12]	; (8009fac <LSM6DSL_fifoInterruptEnable+0x28>)
 8009fa0:	f000 faf4 	bl	800a58c <lsm6dsl_pin_int1_route_set>
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	20000660 	.word	0x20000660

08009fb0 <LSM6DSL_fifoInterruptDisable>:

void LSM6DSL_fifoInterruptDisable(void)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
	/* Set FIFO_FTH on INT1 */
	lsm6dsl_int1_route_t reg;
	lsm6dsl_pin_int1_route_get(&Dev_Ctx, &reg);
 8009fb6:	1d3b      	adds	r3, r7, #4
 8009fb8:	4619      	mov	r1, r3
 8009fba:	4807      	ldr	r0, [pc, #28]	; (8009fd8 <LSM6DSL_fifoInterruptDisable+0x28>)
 8009fbc:	f000 fc49 	bl	800a852 <lsm6dsl_pin_int1_route_get>
	reg.int1_fth = PROPERTY_DISABLE;
 8009fc0:	793b      	ldrb	r3, [r7, #4]
 8009fc2:	f36f 03c3 	bfc	r3, #3, #1
 8009fc6:	713b      	strb	r3, [r7, #4]
	lsm6dsl_pin_int1_route_set(&Dev_Ctx, reg);
 8009fc8:	6879      	ldr	r1, [r7, #4]
 8009fca:	4803      	ldr	r0, [pc, #12]	; (8009fd8 <LSM6DSL_fifoInterruptDisable+0x28>)
 8009fcc:	f000 fade 	bl	800a58c <lsm6dsl_pin_int1_route_set>
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	20000660 	.word	0x20000660

08009fdc <LSM6DSL_modesDisable>:

void LSM6DSL_modesDisable(void)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	af00      	add	r7, sp, #0
	LSM6DSL_perSampleDisable();
 8009fe0:	f7ff fd2c 	bl	8009a3c <LSM6DSL_perSampleDisable>
	LSM6DSL_fifoDisable();
 8009fe4:	f7ff fda6 	bl	8009b34 <LSM6DSL_fifoDisable>
	Lsm6dsl_Mode = LSM6DSL_MODE_IDLE;
 8009fe8:	4b02      	ldr	r3, [pc, #8]	; (8009ff4 <LSM6DSL_modesDisable+0x18>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	701a      	strb	r2, [r3, #0]
}
 8009fee:	bf00      	nop
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	200006d0 	.word	0x200006d0

08009ff8 <LSM6DSL_getInterruptFlag>:

bool LSM6DSL_getInterruptFlag(void)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	af00      	add	r7, sp, #0
	return Interrup_Flag;
 8009ffc:	4b03      	ldr	r3, [pc, #12]	; (800a00c <LSM6DSL_getInterruptFlag+0x14>)
 8009ffe:	781b      	ldrb	r3, [r3, #0]
}
 800a000:	4618      	mov	r0, r3
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	200006d2 	.word	0x200006d2

0800a010 <LSM6DSL_setInterruptFlagOn>:

void LSM6DSL_setInterruptFlagOn(void)
{
 800a010:	b480      	push	{r7}
 800a012:	af00      	add	r7, sp, #0
	Interrup_Flag = true;
 800a014:	4b03      	ldr	r3, [pc, #12]	; (800a024 <LSM6DSL_setInterruptFlagOn+0x14>)
 800a016:	2201      	movs	r2, #1
 800a018:	701a      	strb	r2, [r3, #0]
}
 800a01a:	bf00      	nop
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr
 800a024:	200006d2 	.word	0x200006d2

0800a028 <LSM6DSL_setInterruptFlagOff>:

void LSM6DSL_setInterruptFlagOff(void)
{
 800a028:	b480      	push	{r7}
 800a02a:	af00      	add	r7, sp, #0
	Interrup_Flag = false;
 800a02c:	4b03      	ldr	r3, [pc, #12]	; (800a03c <LSM6DSL_setInterruptFlagOff+0x14>)
 800a02e:	2200      	movs	r2, #0
 800a030:	701a      	strb	r2, [r3, #0]
}
 800a032:	bf00      	nop
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	200006d2 	.word	0x200006d2

0800a040 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 800a040:	b590      	push	{r4, r7, lr}
 800a042:	b087      	sub	sp, #28
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	607a      	str	r2, [r7, #4]
 800a04a:	461a      	mov	r2, r3
 800a04c:	460b      	mov	r3, r1
 800a04e:	72fb      	strb	r3, [r7, #11]
 800a050:	4613      	mov	r3, r2
 800a052:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	685c      	ldr	r4, [r3, #4]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6898      	ldr	r0, [r3, #8]
 800a05c:	893b      	ldrh	r3, [r7, #8]
 800a05e:	7af9      	ldrb	r1, [r7, #11]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	47a0      	blx	r4
 800a064:	6178      	str	r0, [r7, #20]
  return ret;
 800a066:	697b      	ldr	r3, [r7, #20]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	371c      	adds	r7, #28
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd90      	pop	{r4, r7, pc}

0800a070 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 800a070:	b590      	push	{r4, r7, lr}
 800a072:	b087      	sub	sp, #28
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	607a      	str	r2, [r7, #4]
 800a07a:	461a      	mov	r2, r3
 800a07c:	460b      	mov	r3, r1
 800a07e:	72fb      	strb	r3, [r7, #11]
 800a080:	4613      	mov	r3, r2
 800a082:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681c      	ldr	r4, [r3, #0]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6898      	ldr	r0, [r3, #8]
 800a08c:	893b      	ldrh	r3, [r7, #8]
 800a08e:	7af9      	ldrb	r1, [r7, #11]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	47a0      	blx	r4
 800a094:	6178      	str	r0, [r7, #20]
  return ret;
 800a096:	697b      	ldr	r3, [r7, #20]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	371c      	adds	r7, #28
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd90      	pop	{r4, r7, pc}

0800a0a0 <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 800a0aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a0ae:	ee07 3a90 	vmov	s15, r3
 800a0b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0b6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a0cc <lsm6dsl_from_fs8g_to_mg+0x2c>
 800a0ba:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a0be:	eeb0 0a67 	vmov.f32	s0, s15
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	3e79db23 	.word	0x3e79db23

0800a0d0 <lsm6dsl_from_fs500dps_to_mdps>:
{
  return ((float_t)lsb * 8.750f);
}

float_t lsm6dsl_from_fs500dps_to_mdps(int16_t lsb)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 17.50f);
 800a0da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a0de:	ee07 3a90 	vmov	s15, r3
 800a0e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0e6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a0fc <lsm6dsl_from_fs500dps_to_mdps+0x2c>
 800a0ea:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a0ee:	eeb0 0a67 	vmov.f32	s0, s15
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	418c0000 	.word	0x418c0000

0800a100 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	460b      	mov	r3, r1
 800a10a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800a10c:	f107 0208 	add.w	r2, r7, #8
 800a110:	2301      	movs	r3, #1
 800a112:	2110      	movs	r1, #16
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7ff ff93 	bl	800a040 <lsm6dsl_read_reg>
 800a11a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10f      	bne.n	800a142 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800a122:	78fb      	ldrb	r3, [r7, #3]
 800a124:	f003 0303 	and.w	r3, r3, #3
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	7a3b      	ldrb	r3, [r7, #8]
 800a12c:	f362 0383 	bfi	r3, r2, #2, #2
 800a130:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800a132:	f107 0208 	add.w	r2, r7, #8
 800a136:	2301      	movs	r3, #1
 800a138:	2110      	movs	r1, #16
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7ff ff98 	bl	800a070 <lsm6dsl_write_reg>
 800a140:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800a142:	68fb      	ldr	r3, [r7, #12]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800a158:	f107 0208 	add.w	r2, r7, #8
 800a15c:	2301      	movs	r3, #1
 800a15e:	2110      	movs	r1, #16
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7ff ff6d 	bl	800a040 <lsm6dsl_read_reg>
 800a166:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d10f      	bne.n	800a18e <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800a16e:	78fb      	ldrb	r3, [r7, #3]
 800a170:	f003 030f 	and.w	r3, r3, #15
 800a174:	b2da      	uxtb	r2, r3
 800a176:	7a3b      	ldrb	r3, [r7, #8]
 800a178:	f362 1307 	bfi	r3, r2, #4, #4
 800a17c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800a17e:	f107 0208 	add.w	r2, r7, #8
 800a182:	2301      	movs	r3, #1
 800a184:	2110      	movs	r1, #16
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7ff ff72 	bl	800a070 <lsm6dsl_write_reg>
 800a18c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800a18e:	68fb      	ldr	r3, [r7, #12]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800a1a4:	f107 0208 	add.w	r2, r7, #8
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	2111      	movs	r1, #17
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f7ff ff47 	bl	800a040 <lsm6dsl_read_reg>
 800a1b2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d10f      	bne.n	800a1da <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 800a1ba:	78fb      	ldrb	r3, [r7, #3]
 800a1bc:	f003 0307 	and.w	r3, r3, #7
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	7a3b      	ldrb	r3, [r7, #8]
 800a1c4:	f362 0343 	bfi	r3, r2, #1, #3
 800a1c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800a1ca:	f107 0208 	add.w	r2, r7, #8
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	2111      	movs	r1, #17
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7ff ff4c 	bl	800a070 <lsm6dsl_write_reg>
 800a1d8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800a1da:	68fb      	ldr	r3, [r7, #12]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800a1f0:	f107 0208 	add.w	r2, r7, #8
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	2111      	movs	r1, #17
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f7ff ff21 	bl	800a040 <lsm6dsl_read_reg>
 800a1fe:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10f      	bne.n	800a226 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 800a206:	78fb      	ldrb	r3, [r7, #3]
 800a208:	f003 030f 	and.w	r3, r3, #15
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	7a3b      	ldrb	r3, [r7, #8]
 800a210:	f362 1307 	bfi	r3, r2, #4, #4
 800a214:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800a216:	f107 0208 	add.w	r2, r7, #8
 800a21a:	2301      	movs	r3, #1
 800a21c:	2111      	movs	r1, #17
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7ff ff26 	bl	800a070 <lsm6dsl_write_reg>
 800a224:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800a226:	68fb      	ldr	r3, [r7, #12]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	460b      	mov	r3, r1
 800a23a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800a23c:	f107 0208 	add.w	r2, r7, #8
 800a240:	2301      	movs	r3, #1
 800a242:	2112      	movs	r1, #18
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7ff fefb 	bl	800a040 <lsm6dsl_read_reg>
 800a24a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10f      	bne.n	800a272 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 800a252:	78fb      	ldrb	r3, [r7, #3]
 800a254:	f003 0301 	and.w	r3, r3, #1
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	7a3b      	ldrb	r3, [r7, #8]
 800a25c:	f362 1386 	bfi	r3, r2, #6, #1
 800a260:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800a262:	f107 0208 	add.w	r2, r7, #8
 800a266:	2301      	movs	r3, #1
 800a268:	2112      	movs	r1, #18
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7ff ff00 	bl	800a070 <lsm6dsl_write_reg>
 800a270:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800a272:	68fb      	ldr	r3, [r7, #12]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <lsm6dsl_status_reg_get>:
  * @param  val    Registers STATUS_REG
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_status_reg_get(stmdev_ctx_t *ctx, lsm6dsl_status_reg_t *val)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t*) val, 1);
 800a286:	2301      	movs	r3, #1
 800a288:	683a      	ldr	r2, [r7, #0]
 800a28a:	211e      	movs	r1, #30
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f7ff fed7 	bl	800a040 <lsm6dsl_read_reg>
 800a292:	60f8      	str	r0, [r7, #12]
  return ret;
 800a294:	68fb      	ldr	r3, [r7, #12]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800a2a8:	2306      	movs	r3, #6
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	2122      	movs	r1, #34	; 0x22
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7ff fec6 	bl	800a040 <lsm6dsl_read_reg>
 800a2b4:	60f8      	str	r0, [r7, #12]
  return ret;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800a2ca:	2306      	movs	r3, #6
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	2128      	movs	r1, #40	; 0x28
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7ff feb5 	bl	800a040 <lsm6dsl_read_reg>
 800a2d6:	60f8      	str	r0, [r7, #12]
  return ret;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <lsm6dsl_fifo_raw_data_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_raw_data_get(stmdev_ctx_t *ctx, uint8_t *buffer,
                                  uint8_t len)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b086      	sub	sp, #24
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	60b9      	str	r1, [r7, #8]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_DATA_OUT_L, buffer, len);
 800a2f0:	79fb      	ldrb	r3, [r7, #7]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	213e      	movs	r1, #62	; 0x3e
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f7ff fea1 	bl	800a040 <lsm6dsl_read_reg>
 800a2fe:	6178      	str	r0, [r7, #20]
  return ret;
 800a300:	697b      	ldr	r3, [r7, #20]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3718      	adds	r7, #24
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <lsm6dsl_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_data_ready_mode_set(stmdev_ctx_t *ctx,
                                    lsm6dsl_drdy_pulsed_g_t val)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b084      	sub	sp, #16
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
 800a312:	460b      	mov	r3, r1
 800a314:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_drdy_pulse_cfg_g_t drdy_pulse_cfg_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
 800a316:	f107 0208 	add.w	r2, r7, #8
 800a31a:	2301      	movs	r3, #1
 800a31c:	210b      	movs	r1, #11
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7ff fe8e 	bl	800a040 <lsm6dsl_read_reg>
 800a324:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&drdy_pulse_cfg_g, 1);
  if(ret == 0){
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10f      	bne.n	800a34c <lsm6dsl_data_ready_mode_set+0x42>
    drdy_pulse_cfg_g.drdy_pulsed = (uint8_t) val;
 800a32c:	78fb      	ldrb	r3, [r7, #3]
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	b2da      	uxtb	r2, r3
 800a334:	7a3b      	ldrb	r3, [r7, #8]
 800a336:	f362 13c7 	bfi	r3, r2, #7, #1
 800a33a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
 800a33c:	f107 0208 	add.w	r2, r7, #8
 800a340:	2301      	movs	r3, #1
 800a342:	210b      	movs	r1, #11
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7ff fe93 	bl	800a070 <lsm6dsl_write_reg>
 800a34a:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&drdy_pulse_cfg_g, 1);
  }
  return ret;
 800a34c:	68fb      	ldr	r3, [r7, #12]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b084      	sub	sp, #16
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800a360:	2301      	movs	r3, #1
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	210f      	movs	r1, #15
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7ff fe6a 	bl	800a040 <lsm6dsl_read_reg>
 800a36c:	60f8      	str	r0, [r7, #12]
  return ret;
 800a36e:	68fb      	ldr	r3, [r7, #12]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800a384:	f107 0208 	add.w	r2, r7, #8
 800a388:	2301      	movs	r3, #1
 800a38a:	2112      	movs	r1, #18
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7ff fe57 	bl	800a040 <lsm6dsl_read_reg>
 800a392:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10f      	bne.n	800a3ba <lsm6dsl_reset_set+0x42>
    ctrl3_c.sw_reset = val;
 800a39a:	78fb      	ldrb	r3, [r7, #3]
 800a39c:	f003 0301 	and.w	r3, r3, #1
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	7a3b      	ldrb	r3, [r7, #8]
 800a3a4:	f362 0300 	bfi	r3, r2, #0, #1
 800a3a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800a3aa:	f107 0208 	add.w	r2, r7, #8
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	2112      	movs	r1, #18
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7ff fe5c 	bl	800a070 <lsm6dsl_write_reg>
 800a3b8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800a3ce:	f107 0208 	add.w	r2, r7, #8
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	2112      	movs	r1, #18
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7ff fe32 	bl	800a040 <lsm6dsl_read_reg>
 800a3dc:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 800a3de:	7a3b      	ldrb	r3, [r7, #8]
 800a3e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	701a      	strb	r2, [r3, #0]

  return ret;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <lsm6dsl_xl_filter_analog_set>:
  * @param  val    Change the values of bw0_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_filter_analog_set(stmdev_ctx_t *ctx, lsm6dsl_bw0_xl_t val)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b084      	sub	sp, #16
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	460b      	mov	r3, r1
 800a400:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800a402:	f107 0208 	add.w	r2, r7, #8
 800a406:	2301      	movs	r3, #1
 800a408:	2110      	movs	r1, #16
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7ff fe18 	bl	800a040 <lsm6dsl_read_reg>
 800a410:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10f      	bne.n	800a438 <lsm6dsl_xl_filter_analog_set+0x42>
    ctrl1_xl.bw0_xl = (uint8_t) val;
 800a418:	78fb      	ldrb	r3, [r7, #3]
 800a41a:	f003 0301 	and.w	r3, r3, #1
 800a41e:	b2da      	uxtb	r2, r3
 800a420:	7a3b      	ldrb	r3, [r7, #8]
 800a422:	f362 0300 	bfi	r3, r2, #0, #1
 800a426:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800a428:	f107 0208 	add.w	r2, r7, #8
 800a42c:	2301      	movs	r3, #1
 800a42e:	2110      	movs	r1, #16
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f7ff fe1d 	bl	800a070 <lsm6dsl_write_reg>
 800a436:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800a438:	68fb      	ldr	r3, [r7, #12]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 800a442:	b580      	push	{r7, lr}
 800a444:	b084      	sub	sp, #16
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	460b      	mov	r3, r1
 800a44c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 800a44e:	f107 0208 	add.w	r2, r7, #8
 800a452:	2301      	movs	r3, #1
 800a454:	2117      	movs	r1, #23
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff fdf2 	bl	800a040 <lsm6dsl_read_reg>
 800a45c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d120      	bne.n	800a4a6 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
    ctrl8_xl.input_composite = ( (uint8_t) val & 0x10U ) >> 4;
 800a464:	78fb      	ldrb	r3, [r7, #3]
 800a466:	091b      	lsrs	r3, r3, #4
 800a468:	f003 0301 	and.w	r3, r3, #1
 800a46c:	b2da      	uxtb	r2, r3
 800a46e:	7a3b      	ldrb	r3, [r7, #8]
 800a470:	f362 03c3 	bfi	r3, r2, #3, #1
 800a474:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 800a476:	78fb      	ldrb	r3, [r7, #3]
 800a478:	f003 0303 	and.w	r3, r3, #3
 800a47c:	b2da      	uxtb	r2, r3
 800a47e:	7a3b      	ldrb	r3, [r7, #8]
 800a480:	f362 1346 	bfi	r3, r2, #5, #2
 800a484:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 800a486:	7a3b      	ldrb	r3, [r7, #8]
 800a488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a48c:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 800a48e:	7a3b      	ldrb	r3, [r7, #8]
 800a490:	f36f 0382 	bfc	r3, #2, #1
 800a494:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 800a496:	f107 0208 	add.w	r2, r7, #8
 800a49a:	2301      	movs	r3, #1
 800a49c:	2117      	movs	r1, #23
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7ff fde6 	bl	800a070 <lsm6dsl_write_reg>
 800a4a4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <lsm6dsl_gy_band_pass_set>:
  * @param  val    gyroscope filtering chain configuration.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx, lsm6dsl_lpf1_sel_g_t val)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 800a4bc:	f107 0208 	add.w	r2, r7, #8
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	2116      	movs	r1, #22
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f7ff fdbb 	bl	800a040 <lsm6dsl_read_reg>
 800a4ca:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d157      	bne.n	800a582 <lsm6dsl_gy_band_pass_set+0xd2>
    ctrl7_g.hpm_g  =  ( (uint8_t)val & 0x30U ) >> 4;
 800a4d2:	78fb      	ldrb	r3, [r7, #3]
 800a4d4:	091b      	lsrs	r3, r3, #4
 800a4d6:	f003 0303 	and.w	r3, r3, #3
 800a4da:	b2da      	uxtb	r2, r3
 800a4dc:	7a3b      	ldrb	r3, [r7, #8]
 800a4de:	f362 1305 	bfi	r3, r2, #4, #2
 800a4e2:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ( (uint8_t)val & 0x80U ) >> 7;
 800a4e4:	78fb      	ldrb	r3, [r7, #3]
 800a4e6:	09db      	lsrs	r3, r3, #7
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	b2da      	uxtb	r2, r3
 800a4f0:	7a3b      	ldrb	r3, [r7, #8]
 800a4f2:	f362 1386 	bfi	r3, r2, #6, #1
 800a4f6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 800a4f8:	f107 0208 	add.w	r2, r7, #8
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	2116      	movs	r1, #22
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f7ff fdb5 	bl	800a070 <lsm6dsl_write_reg>
 800a506:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d139      	bne.n	800a582 <lsm6dsl_gy_band_pass_set+0xd2>
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 800a50e:	f107 020c 	add.w	r2, r7, #12
 800a512:	2301      	movs	r3, #1
 800a514:	2115      	movs	r1, #21
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7ff fd92 	bl	800a040 <lsm6dsl_read_reg>
 800a51c:	6178      	str	r0, [r7, #20]
      if(ret == 0){
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d12e      	bne.n	800a582 <lsm6dsl_gy_band_pass_set+0xd2>
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 800a524:	78fb      	ldrb	r3, [r7, #3]
 800a526:	f003 0303 	and.w	r3, r3, #3
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	7b3b      	ldrb	r3, [r7, #12]
 800a52e:	f362 0301 	bfi	r3, r2, #0, #2
 800a532:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 800a534:	f107 020c 	add.w	r2, r7, #12
 800a538:	2301      	movs	r3, #1
 800a53a:	2115      	movs	r1, #21
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f7ff fd97 	bl	800a070 <lsm6dsl_write_reg>
 800a542:	6178      	str	r0, [r7, #20]
        if(ret == 0){
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d11b      	bne.n	800a582 <lsm6dsl_gy_band_pass_set+0xd2>
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 800a54a:	f107 0210 	add.w	r2, r7, #16
 800a54e:	2301      	movs	r3, #1
 800a550:	2113      	movs	r1, #19
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7ff fd74 	bl	800a040 <lsm6dsl_read_reg>
 800a558:	6178      	str	r0, [r7, #20]
                                 (uint8_t*)&ctrl4_c, 1);
          if(ret == 0){
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d110      	bne.n	800a582 <lsm6dsl_gy_band_pass_set+0xd2>
            ctrl4_c.lpf1_sel_g = ( (uint8_t)val & 0x08U ) >> 3;
 800a560:	78fb      	ldrb	r3, [r7, #3]
 800a562:	08db      	lsrs	r3, r3, #3
 800a564:	f003 0301 	and.w	r3, r3, #1
 800a568:	b2da      	uxtb	r2, r3
 800a56a:	7c3b      	ldrb	r3, [r7, #16]
 800a56c:	f362 0341 	bfi	r3, r2, #1, #1
 800a570:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 800a572:	f107 0210 	add.w	r2, r7, #16
 800a576:	2301      	movs	r3, #1
 800a578:	2113      	movs	r1, #19
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7ff fd78 	bl	800a070 <lsm6dsl_write_reg>
 800a580:	6178      	str	r0, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 800a582:	697b      	ldr	r3, [r7, #20]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3718      	adds	r7, #24
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b08a      	sub	sp, #40	; 0x28
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 800a596:	f107 021c 	add.w	r2, r7, #28
 800a59a:	2301      	movs	r3, #1
 800a59c:	210d      	movs	r1, #13
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7ff fd4e 	bl	800a040 <lsm6dsl_read_reg>
 800a5a4:	6278      	str	r0, [r7, #36]	; 0x24
  if(ret == 0){
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d147      	bne.n	800a63c <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 800a5ac:	783b      	ldrb	r3, [r7, #0]
 800a5ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a5b2:	b2da      	uxtb	r2, r3
 800a5b4:	7f3b      	ldrb	r3, [r7, #28]
 800a5b6:	f362 0300 	bfi	r3, r2, #0, #1
 800a5ba:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 800a5bc:	783b      	ldrb	r3, [r7, #0]
 800a5be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	7f3b      	ldrb	r3, [r7, #28]
 800a5c6:	f362 0341 	bfi	r3, r2, #1, #1
 800a5ca:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 800a5cc:	783b      	ldrb	r3, [r7, #0]
 800a5ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a5d2:	b2da      	uxtb	r2, r3
 800a5d4:	7f3b      	ldrb	r3, [r7, #28]
 800a5d6:	f362 0382 	bfi	r3, r2, #2, #1
 800a5da:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 800a5dc:	783b      	ldrb	r3, [r7, #0]
 800a5de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	7f3b      	ldrb	r3, [r7, #28]
 800a5e6:	f362 03c3 	bfi	r3, r2, #3, #1
 800a5ea:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 800a5ec:	783b      	ldrb	r3, [r7, #0]
 800a5ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a5f2:	b2da      	uxtb	r2, r3
 800a5f4:	7f3b      	ldrb	r3, [r7, #28]
 800a5f6:	f362 1304 	bfi	r3, r2, #4, #1
 800a5fa:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 800a5fc:	783b      	ldrb	r3, [r7, #0]
 800a5fe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a602:	b2da      	uxtb	r2, r3
 800a604:	7f3b      	ldrb	r3, [r7, #28]
 800a606:	f362 1345 	bfi	r3, r2, #5, #1
 800a60a:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 800a60c:	783b      	ldrb	r3, [r7, #0]
 800a60e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a612:	b2da      	uxtb	r2, r3
 800a614:	7f3b      	ldrb	r3, [r7, #28]
 800a616:	f362 1386 	bfi	r3, r2, #6, #1
 800a61a:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 800a61c:	783b      	ldrb	r3, [r7, #0]
 800a61e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a622:	b2da      	uxtb	r2, r3
 800a624:	7f3b      	ldrb	r3, [r7, #28]
 800a626:	f362 13c7 	bfi	r3, r2, #7, #1
 800a62a:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 800a62c:	f107 021c 	add.w	r2, r7, #28
 800a630:	2301      	movs	r3, #1
 800a632:	210d      	movs	r1, #13
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f7ff fd1b 	bl	800a070 <lsm6dsl_write_reg>
 800a63a:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800a63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d107      	bne.n	800a652 <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 800a642:	f107 0218 	add.w	r2, r7, #24
 800a646:	2301      	movs	r3, #1
 800a648:	215e      	movs	r1, #94	; 0x5e
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7ff fcf8 	bl	800a040 <lsm6dsl_read_reg>
 800a650:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800a652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a654:	2b00      	cmp	r3, #0
 800a656:	d107      	bne.n	800a668 <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 800a658:	f107 0214 	add.w	r2, r7, #20
 800a65c:	2301      	movs	r3, #1
 800a65e:	215f      	movs	r1, #95	; 0x5f
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7ff fced 	bl	800a040 <lsm6dsl_read_reg>
 800a666:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d147      	bne.n	800a6fe <lsm6dsl_pin_int1_route_set+0x172>
        md1_cfg.int1_timer           = val.int1_timer;
 800a66e:	787b      	ldrb	r3, [r7, #1]
 800a670:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a674:	b2da      	uxtb	r2, r3
 800a676:	7e3b      	ldrb	r3, [r7, #24]
 800a678:	f362 0300 	bfi	r3, r2, #0, #1
 800a67c:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_tilt            = val.int1_tilt;
 800a67e:	787b      	ldrb	r3, [r7, #1]
 800a680:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a684:	b2da      	uxtb	r2, r3
 800a686:	7e3b      	ldrb	r3, [r7, #24]
 800a688:	f362 0341 	bfi	r3, r2, #1, #1
 800a68c:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_6d              = val.int1_6d;
 800a68e:	787b      	ldrb	r3, [r7, #1]
 800a690:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a694:	b2da      	uxtb	r2, r3
 800a696:	7e3b      	ldrb	r3, [r7, #24]
 800a698:	f362 0382 	bfi	r3, r2, #2, #1
 800a69c:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_double_tap      = val.int1_double_tap;
 800a69e:	787b      	ldrb	r3, [r7, #1]
 800a6a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	7e3b      	ldrb	r3, [r7, #24]
 800a6a8:	f362 03c3 	bfi	r3, r2, #3, #1
 800a6ac:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_ff              = val.int1_ff;
 800a6ae:	787b      	ldrb	r3, [r7, #1]
 800a6b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a6b4:	b2da      	uxtb	r2, r3
 800a6b6:	7e3b      	ldrb	r3, [r7, #24]
 800a6b8:	f362 1304 	bfi	r3, r2, #4, #1
 800a6bc:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_wu              = val.int1_wu;
 800a6be:	787b      	ldrb	r3, [r7, #1]
 800a6c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a6c4:	b2da      	uxtb	r2, r3
 800a6c6:	7e3b      	ldrb	r3, [r7, #24]
 800a6c8:	f362 1345 	bfi	r3, r2, #5, #1
 800a6cc:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_single_tap      = val.int1_single_tap;
 800a6ce:	787b      	ldrb	r3, [r7, #1]
 800a6d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a6d4:	b2da      	uxtb	r2, r3
 800a6d6:	7e3b      	ldrb	r3, [r7, #24]
 800a6d8:	f362 1386 	bfi	r3, r2, #6, #1
 800a6dc:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_inact_state     = val.int1_inact_state;
 800a6de:	787b      	ldrb	r3, [r7, #1]
 800a6e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	7e3b      	ldrb	r3, [r7, #24]
 800a6e8:	f362 13c7 	bfi	r3, r2, #7, #1
 800a6ec:	763b      	strb	r3, [r7, #24]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 800a6ee:	f107 0218 	add.w	r2, r7, #24
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	215e      	movs	r1, #94	; 0x5e
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7ff fcba 	bl	800a070 <lsm6dsl_write_reg>
 800a6fc:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a700:	2b00      	cmp	r3, #0
 800a702:	d107      	bne.n	800a714 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800a704:	f107 0210 	add.w	r2, r7, #16
 800a708:	2301      	movs	r3, #1
 800a70a:	2113      	movs	r1, #19
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7ff fc97 	bl	800a040 <lsm6dsl_read_reg>
 800a712:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10f      	bne.n	800a73a <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 800a71a:	78bb      	ldrb	r3, [r7, #2]
 800a71c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a720:	b2da      	uxtb	r2, r3
 800a722:	7c3b      	ldrb	r3, [r7, #16]
 800a724:	f362 1304 	bfi	r3, r2, #4, #1
 800a728:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800a72a:	f107 0210 	add.w	r2, r7, #16
 800a72e:	2301      	movs	r3, #1
 800a730:	2113      	movs	r1, #19
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7ff fc9c 	bl	800a070 <lsm6dsl_write_reg>
 800a738:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d107      	bne.n	800a750 <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800a740:	f107 0220 	add.w	r2, r7, #32
 800a744:	2301      	movs	r3, #1
 800a746:	211a      	movs	r1, #26
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f7ff fc79 	bl	800a040 <lsm6dsl_read_reg>
 800a74e:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	2b00      	cmp	r3, #0
 800a754:	d111      	bne.n	800a77a <lsm6dsl_pin_int1_route_set+0x1ee>
     master_config.drdy_on_int1   = val.den_drdy_int1;
 800a756:	78bb      	ldrb	r3, [r7, #2]
 800a758:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a762:	f362 13c7 	bfi	r3, r2, #7, #1
 800a766:	f887 3020 	strb.w	r3, [r7, #32]
     ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800a76a:	f107 0220 	add.w	r2, r7, #32
 800a76e:	2301      	movs	r3, #1
 800a770:	211a      	movs	r1, #26
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff fc7c 	bl	800a070 <lsm6dsl_write_reg>
 800a778:	6278      	str	r0, [r7, #36]	; 0x24
                             (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 800a77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d158      	bne.n	800a832 <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 800a780:	f107 020c 	add.w	r2, r7, #12
 800a784:	2301      	movs	r3, #1
 800a786:	2158      	movs	r1, #88	; 0x58
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f7ff fc59 	bl	800a040 <lsm6dsl_read_reg>
 800a78e:	6278      	str	r0, [r7, #36]	; 0x24
    if ((val.int1_6d != 0x00U) ||
 800a790:	787b      	ldrb	r3, [r7, #1]
 800a792:	f003 0304 	and.w	r3, r3, #4
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d141      	bne.n	800a820 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 800a79c:	787b      	ldrb	r3, [r7, #1]
 800a79e:	f003 0310 	and.w	r3, r3, #16
 800a7a2:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d13b      	bne.n	800a820 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 800a7a8:	787b      	ldrb	r3, [r7, #1]
 800a7aa:	f003 0320 	and.w	r3, r3, #32
 800a7ae:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d135      	bne.n	800a820 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 800a7b4:	787b      	ldrb	r3, [r7, #1]
 800a7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ba:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d12f      	bne.n	800a820 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 800a7c0:	787b      	ldrb	r3, [r7, #1]
 800a7c2:	f003 0308 	and.w	r3, r3, #8
 800a7c6:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d129      	bne.n	800a820 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U)||
 800a7cc:	787b      	ldrb	r3, [r7, #1]
 800a7ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a7d2:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d123      	bne.n	800a820 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 800a7d8:	7d3b      	ldrb	r3, [r7, #20]
 800a7da:	f003 0304 	and.w	r3, r3, #4
 800a7de:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U)||
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d11d      	bne.n	800a820 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 800a7e4:	7d3b      	ldrb	r3, [r7, #20]
 800a7e6:	f003 0310 	and.w	r3, r3, #16
 800a7ea:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d117      	bne.n	800a820 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 800a7f0:	7d3b      	ldrb	r3, [r7, #20]
 800a7f2:	f003 0320 	and.w	r3, r3, #32
 800a7f6:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d111      	bne.n	800a820 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 800a7fc:	7d3b      	ldrb	r3, [r7, #20]
 800a7fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a802:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10b      	bne.n	800a820 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 800a808:	7d3b      	ldrb	r3, [r7, #20]
 800a80a:	f003 0308 	and.w	r3, r3, #8
 800a80e:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 800a810:	2b00      	cmp	r3, #0
 800a812:	d105      	bne.n	800a820 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state!= 0x00U) ){
 800a814:	7d3b      	ldrb	r3, [r7, #20]
 800a816:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a81a:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d004      	beq.n	800a82a <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 800a820:	7b3b      	ldrb	r3, [r7, #12]
 800a822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a826:	733b      	strb	r3, [r7, #12]
 800a828:	e003      	b.n	800a832 <lsm6dsl_pin_int1_route_set+0x2a6>
    }
    else{
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 800a82a:	7b3b      	ldrb	r3, [r7, #12]
 800a82c:	f36f 13c7 	bfc	r3, #7, #1
 800a830:	733b      	strb	r3, [r7, #12]
    }
  }
  if(ret == 0){    
 800a832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a834:	2b00      	cmp	r3, #0
 800a836:	d107      	bne.n	800a848 <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 800a838:	f107 020c 	add.w	r2, r7, #12
 800a83c:	2301      	movs	r3, #1
 800a83e:	2158      	movs	r1, #88	; 0x58
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7ff fc15 	bl	800a070 <lsm6dsl_write_reg>
 800a846:	6278      	str	r0, [r7, #36]	; 0x24
  }
  return ret;
 800a848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3728      	adds	r7, #40	; 0x28
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b088      	sub	sp, #32
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	6039      	str	r1, [r7, #0]
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;

  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 800a85c:	f107 0214 	add.w	r2, r7, #20
 800a860:	2301      	movs	r3, #1
 800a862:	210d      	movs	r1, #13
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7ff fbeb 	bl	800a040 <lsm6dsl_read_reg>
 800a86a:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f040 80c0 	bne.w	800a9f4 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 800a874:	7d3b      	ldrb	r3, [r7, #20]
 800a876:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a87a:	b2d9      	uxtb	r1, r3
 800a87c:	683a      	ldr	r2, [r7, #0]
 800a87e:	7813      	ldrb	r3, [r2, #0]
 800a880:	f361 0300 	bfi	r3, r1, #0, #1
 800a884:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 800a886:	7d3b      	ldrb	r3, [r7, #20]
 800a888:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a88c:	b2d9      	uxtb	r1, r3
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	7813      	ldrb	r3, [r2, #0]
 800a892:	f361 0341 	bfi	r3, r1, #1, #1
 800a896:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 800a898:	7d3b      	ldrb	r3, [r7, #20]
 800a89a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a89e:	b2d9      	uxtb	r1, r3
 800a8a0:	683a      	ldr	r2, [r7, #0]
 800a8a2:	7813      	ldrb	r3, [r2, #0]
 800a8a4:	f361 0382 	bfi	r3, r1, #2, #1
 800a8a8:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 800a8aa:	7d3b      	ldrb	r3, [r7, #20]
 800a8ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a8b0:	b2d9      	uxtb	r1, r3
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	7813      	ldrb	r3, [r2, #0]
 800a8b6:	f361 03c3 	bfi	r3, r1, #3, #1
 800a8ba:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 800a8bc:	7d3b      	ldrb	r3, [r7, #20]
 800a8be:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a8c2:	b2d9      	uxtb	r1, r3
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	7813      	ldrb	r3, [r2, #0]
 800a8c8:	f361 1304 	bfi	r3, r1, #4, #1
 800a8cc:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 800a8ce:	7d3b      	ldrb	r3, [r7, #20]
 800a8d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a8d4:	b2d9      	uxtb	r1, r3
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	7813      	ldrb	r3, [r2, #0]
 800a8da:	f361 1345 	bfi	r3, r1, #5, #1
 800a8de:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 800a8e0:	7d3b      	ldrb	r3, [r7, #20]
 800a8e2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a8e6:	b2d9      	uxtb	r1, r3
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	7813      	ldrb	r3, [r2, #0]
 800a8ec:	f361 1386 	bfi	r3, r1, #6, #1
 800a8f0:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 800a8f2:	7d3b      	ldrb	r3, [r7, #20]
 800a8f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a8f8:	b2d9      	uxtb	r1, r3
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	7813      	ldrb	r3, [r2, #0]
 800a8fe:	f361 13c7 	bfi	r3, r1, #7, #1
 800a902:	7013      	strb	r3, [r2, #0]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 800a904:	f107 0210 	add.w	r2, r7, #16
 800a908:	2301      	movs	r3, #1
 800a90a:	215e      	movs	r1, #94	; 0x5e
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7ff fb97 	bl	800a040 <lsm6dsl_read_reg>
 800a912:	61f8      	str	r0, [r7, #28]
    if(ret == 0){
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d16c      	bne.n	800a9f4 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_timer       = md1_cfg.int1_timer;
 800a91a:	7c3b      	ldrb	r3, [r7, #16]
 800a91c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a920:	b2d9      	uxtb	r1, r3
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	7853      	ldrb	r3, [r2, #1]
 800a926:	f361 0300 	bfi	r3, r1, #0, #1
 800a92a:	7053      	strb	r3, [r2, #1]
    val->int1_tilt        = md1_cfg.int1_tilt;
 800a92c:	7c3b      	ldrb	r3, [r7, #16]
 800a92e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a932:	b2d9      	uxtb	r1, r3
 800a934:	683a      	ldr	r2, [r7, #0]
 800a936:	7853      	ldrb	r3, [r2, #1]
 800a938:	f361 0341 	bfi	r3, r1, #1, #1
 800a93c:	7053      	strb	r3, [r2, #1]
    val->int1_6d          = md1_cfg.int1_6d;
 800a93e:	7c3b      	ldrb	r3, [r7, #16]
 800a940:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a944:	b2d9      	uxtb	r1, r3
 800a946:	683a      	ldr	r2, [r7, #0]
 800a948:	7853      	ldrb	r3, [r2, #1]
 800a94a:	f361 0382 	bfi	r3, r1, #2, #1
 800a94e:	7053      	strb	r3, [r2, #1]
    val->int1_double_tap  = md1_cfg.int1_double_tap;
 800a950:	7c3b      	ldrb	r3, [r7, #16]
 800a952:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a956:	b2d9      	uxtb	r1, r3
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	7853      	ldrb	r3, [r2, #1]
 800a95c:	f361 03c3 	bfi	r3, r1, #3, #1
 800a960:	7053      	strb	r3, [r2, #1]
    val->int1_ff          = md1_cfg.int1_ff;
 800a962:	7c3b      	ldrb	r3, [r7, #16]
 800a964:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a968:	b2d9      	uxtb	r1, r3
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	7853      	ldrb	r3, [r2, #1]
 800a96e:	f361 1304 	bfi	r3, r1, #4, #1
 800a972:	7053      	strb	r3, [r2, #1]
    val->int1_wu          = md1_cfg.int1_wu;
 800a974:	7c3b      	ldrb	r3, [r7, #16]
 800a976:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a97a:	b2d9      	uxtb	r1, r3
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	7853      	ldrb	r3, [r2, #1]
 800a980:	f361 1345 	bfi	r3, r1, #5, #1
 800a984:	7053      	strb	r3, [r2, #1]
    val->int1_single_tap  = md1_cfg.int1_single_tap;
 800a986:	7c3b      	ldrb	r3, [r7, #16]
 800a988:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a98c:	b2d9      	uxtb	r1, r3
 800a98e:	683a      	ldr	r2, [r7, #0]
 800a990:	7853      	ldrb	r3, [r2, #1]
 800a992:	f361 1386 	bfi	r3, r1, #6, #1
 800a996:	7053      	strb	r3, [r2, #1]
    val->int1_inact_state = md1_cfg.int1_inact_state;
 800a998:	7c3b      	ldrb	r3, [r7, #16]
 800a99a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a99e:	b2d9      	uxtb	r1, r3
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	7853      	ldrb	r3, [r2, #1]
 800a9a4:	f361 13c7 	bfi	r3, r1, #7, #1
 800a9a8:	7053      	strb	r3, [r2, #1]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 800a9aa:	f107 020c 	add.w	r2, r7, #12
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	2113      	movs	r1, #19
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7ff fb44 	bl	800a040 <lsm6dsl_read_reg>
 800a9b8:	61f8      	str	r0, [r7, #28]
      if(ret == 0){
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d119      	bne.n	800a9f4 <lsm6dsl_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 800a9c0:	7b3b      	ldrb	r3, [r7, #12]
 800a9c2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a9c6:	b2d9      	uxtb	r1, r3
 800a9c8:	683a      	ldr	r2, [r7, #0]
 800a9ca:	7893      	ldrb	r3, [r2, #2]
 800a9cc:	f361 0300 	bfi	r3, r1, #0, #1
 800a9d0:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800a9d2:	f107 0218 	add.w	r2, r7, #24
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	211a      	movs	r1, #26
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7ff fb30 	bl	800a040 <lsm6dsl_read_reg>
 800a9e0:	61f8      	str	r0, [r7, #28]
                               (uint8_t*)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 800a9e2:	7e3b      	ldrb	r3, [r7, #24]
 800a9e4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a9e8:	b2d9      	uxtb	r1, r3
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	7893      	ldrb	r3, [r2, #2]
 800a9ee:	f361 0300 	bfi	r3, r1, #0, #1
 800a9f2:	7093      	strb	r3, [r2, #2]
      }
    }
  }
  return ret;
 800a9f4:	69fb      	ldr	r3, [r7, #28]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3720      	adds	r7, #32
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <lsm6dsl_pin_polarity_set>:
  * @param  val    Change the values of h_lactive in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_polarity_set(stmdev_ctx_t *ctx, lsm6dsl_h_lactive_t val)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b084      	sub	sp, #16
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	460b      	mov	r3, r1
 800aa08:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800aa0a:	f107 0208 	add.w	r2, r7, #8
 800aa0e:	2301      	movs	r3, #1
 800aa10:	2112      	movs	r1, #18
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff fb14 	bl	800a040 <lsm6dsl_read_reg>
 800aa18:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10f      	bne.n	800aa40 <lsm6dsl_pin_polarity_set+0x42>
    ctrl3_c.h_lactive = (uint8_t) val;
 800aa20:	78fb      	ldrb	r3, [r7, #3]
 800aa22:	f003 0301 	and.w	r3, r3, #1
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	7a3b      	ldrb	r3, [r7, #8]
 800aa2a:	f362 1345 	bfi	r3, r2, #5, #1
 800aa2e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800aa30:	f107 0208 	add.w	r2, r7, #8
 800aa34:	2301      	movs	r3, #1
 800aa36:	2112      	movs	r1, #18
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f7ff fb19 	bl	800a070 <lsm6dsl_write_reg>
 800aa3e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800aa40:	68fb      	ldr	r3, [r7, #12]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <lsm6dsl_fifo_watermark_set>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b086      	sub	sp, #24
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	460b      	mov	r3, r1
 800aa54:	807b      	strh	r3, [r7, #2]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
 800aa56:	f107 020c 	add.w	r2, r7, #12
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	2107      	movs	r1, #7
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7ff faee 	bl	800a040 <lsm6dsl_read_reg>
 800aa64:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d11f      	bne.n	800aaac <lsm6dsl_fifo_watermark_set+0x62>
    fifo_ctrl1.fth = (uint8_t) (0x00FFU & val);
 800aa6c:	887b      	ldrh	r3, [r7, #2]
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	743b      	strb	r3, [r7, #16]
    fifo_ctrl2.fth = (uint8_t) (( 0x0700U & val ) >> 8);
 800aa72:	887b      	ldrh	r3, [r7, #2]
 800aa74:	0a1b      	lsrs	r3, r3, #8
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	f003 0307 	and.w	r3, r3, #7
 800aa7c:	b2da      	uxtb	r2, r3
 800aa7e:	7b3b      	ldrb	r3, [r7, #12]
 800aa80:	f362 0302 	bfi	r3, r2, #0, #3
 800aa84:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL1, (uint8_t*)&fifo_ctrl1, 1);
 800aa86:	f107 0210 	add.w	r2, r7, #16
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	2106      	movs	r1, #6
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7ff faee 	bl	800a070 <lsm6dsl_write_reg>
 800aa94:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d107      	bne.n	800aaac <lsm6dsl_fifo_watermark_set+0x62>
      ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL2,
 800aa9c:	f107 020c 	add.w	r2, r7, #12
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	2107      	movs	r1, #7
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7ff fae3 	bl	800a070 <lsm6dsl_write_reg>
 800aaaa:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl2, 1);
    }
  }
  return ret;
 800aaac:	697b      	ldr	r3, [r7, #20]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3718      	adds	r7, #24
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <lsm6dsl_fifo_watermark_get>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b086      	sub	sp, #24
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL1, (uint8_t*)&fifo_ctrl1, 1);
 800aac0:	f107 0210 	add.w	r2, r7, #16
 800aac4:	2301      	movs	r3, #1
 800aac6:	2106      	movs	r1, #6
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f7ff fab9 	bl	800a040 <lsm6dsl_read_reg>
 800aace:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d107      	bne.n	800aae6 <lsm6dsl_fifo_watermark_get+0x30>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
 800aad6:	f107 020c 	add.w	r2, r7, #12
 800aada:	2301      	movs	r3, #1
 800aadc:	2107      	movs	r1, #7
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7ff faae 	bl	800a040 <lsm6dsl_read_reg>
 800aae4:	6178      	str	r0, [r7, #20]
  }
  *val = ((uint16_t)fifo_ctrl2.fth << 8) + (uint16_t)fifo_ctrl1.fth;
 800aae6:	7b3b      	ldrb	r3, [r7, #12]
 800aae8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	021b      	lsls	r3, r3, #8
 800aaf2:	b29a      	uxth	r2, r3
 800aaf4:	7c3b      	ldrb	r3, [r7, #16]
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	4413      	add	r3, r2
 800aafa:	b29a      	uxth	r2, r3
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	801a      	strh	r2, [r3, #0]

  return ret;
 800ab00:	697b      	ldr	r3, [r7, #20]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3718      	adds	r7, #24
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <lsm6dsl_fifo_data_level_get>:
  *                BDU bit.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_level_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b086      	sub	sp, #24
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
 800ab12:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_status1_t fifo_status1;
  lsm6dsl_fifo_status2_t fifo_status2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS1,
 800ab14:	f107 0210 	add.w	r2, r7, #16
 800ab18:	2301      	movs	r3, #1
 800ab1a:	213a      	movs	r1, #58	; 0x3a
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f7ff fa8f 	bl	800a040 <lsm6dsl_read_reg>
 800ab22:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&fifo_status1, 1);
  if(ret == 0){
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d114      	bne.n	800ab54 <lsm6dsl_fifo_data_level_get+0x4a>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS2,
 800ab2a:	f107 020c 	add.w	r2, r7, #12
 800ab2e:	2301      	movs	r3, #1
 800ab30:	213b      	movs	r1, #59	; 0x3b
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f7ff fa84 	bl	800a040 <lsm6dsl_read_reg>
 800ab38:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&fifo_status2, 1);
    *val = ( (uint16_t) fifo_status2.diff_fifo << 8) +
 800ab3a:	7b3b      	ldrb	r3, [r7, #12]
 800ab3c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	021b      	lsls	r3, r3, #8
 800ab46:	b29a      	uxth	r2, r3
             (uint16_t) fifo_status1.diff_fifo;
 800ab48:	7c3b      	ldrb	r3, [r7, #16]
 800ab4a:	b29b      	uxth	r3, r3
    *val = ( (uint16_t) fifo_status2.diff_fifo << 8) +
 800ab4c:	4413      	add	r3, r2
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 800ab54:	697b      	ldr	r3, [r7, #20]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3718      	adds	r7, #24
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <lsm6dsl_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t val)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	460b      	mov	r3, r1
 800ab68:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800ab6a:	f107 0208 	add.w	r2, r7, #8
 800ab6e:	2301      	movs	r3, #1
 800ab70:	2108      	movs	r1, #8
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7ff fa64 	bl	800a040 <lsm6dsl_read_reg>
 800ab78:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d10f      	bne.n	800aba0 <lsm6dsl_fifo_xl_batch_set+0x42>
    fifo_ctrl3.dec_fifo_xl = (uint8_t)val;
 800ab80:	78fb      	ldrb	r3, [r7, #3]
 800ab82:	f003 0307 	and.w	r3, r3, #7
 800ab86:	b2da      	uxtb	r2, r3
 800ab88:	7a3b      	ldrb	r3, [r7, #8]
 800ab8a:	f362 0302 	bfi	r3, r2, #0, #3
 800ab8e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 800ab90:	f107 0208 	add.w	r2, r7, #8
 800ab94:	2301      	movs	r3, #1
 800ab96:	2108      	movs	r1, #8
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f7ff fa69 	bl	800a070 <lsm6dsl_write_reg>
 800ab9e:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&fifo_ctrl3, 1);
  }
  return ret;
 800aba0:	68fb      	ldr	r3, [r7, #12]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
	...

0800abac <lsm6dsl_fifo_xl_batch_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t *val)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800abb6:	f107 0208 	add.w	r2, r7, #8
 800abba:	2301      	movs	r3, #1
 800abbc:	2108      	movs	r1, #8
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7ff fa3e 	bl	800a040 <lsm6dsl_read_reg>
 800abc4:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl3.dec_fifo_xl) {
 800abc6:	7a3b      	ldrb	r3, [r7, #8]
 800abc8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b07      	cmp	r3, #7
 800abd0:	d832      	bhi.n	800ac38 <lsm6dsl_fifo_xl_batch_get+0x8c>
 800abd2:	a201      	add	r2, pc, #4	; (adr r2, 800abd8 <lsm6dsl_fifo_xl_batch_get+0x2c>)
 800abd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd8:	0800abf9 	.word	0x0800abf9
 800abdc:	0800ac01 	.word	0x0800ac01
 800abe0:	0800ac09 	.word	0x0800ac09
 800abe4:	0800ac11 	.word	0x0800ac11
 800abe8:	0800ac19 	.word	0x0800ac19
 800abec:	0800ac21 	.word	0x0800ac21
 800abf0:	0800ac29 	.word	0x0800ac29
 800abf4:	0800ac31 	.word	0x0800ac31
    case LSM6DSL_FIFO_XL_DISABLE:
      *val = LSM6DSL_FIFO_XL_DISABLE;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	2200      	movs	r2, #0
 800abfc:	701a      	strb	r2, [r3, #0]
      break;
 800abfe:	e01f      	b.n	800ac40 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_NO_DEC:
      *val = LSM6DSL_FIFO_XL_NO_DEC;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	2201      	movs	r2, #1
 800ac04:	701a      	strb	r2, [r3, #0]
      break;
 800ac06:	e01b      	b.n	800ac40 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_2:
      *val = LSM6DSL_FIFO_XL_DEC_2;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	701a      	strb	r2, [r3, #0]
      break;
 800ac0e:	e017      	b.n	800ac40 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_3:
      *val = LSM6DSL_FIFO_XL_DEC_3;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	2203      	movs	r2, #3
 800ac14:	701a      	strb	r2, [r3, #0]
      break;
 800ac16:	e013      	b.n	800ac40 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_4:
      *val = LSM6DSL_FIFO_XL_DEC_4;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	2204      	movs	r2, #4
 800ac1c:	701a      	strb	r2, [r3, #0]
      break;
 800ac1e:	e00f      	b.n	800ac40 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_8:
      *val = LSM6DSL_FIFO_XL_DEC_8;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	2205      	movs	r2, #5
 800ac24:	701a      	strb	r2, [r3, #0]
      break;
 800ac26:	e00b      	b.n	800ac40 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_16:
      *val = LSM6DSL_FIFO_XL_DEC_16;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	2206      	movs	r2, #6
 800ac2c:	701a      	strb	r2, [r3, #0]
      break;
 800ac2e:	e007      	b.n	800ac40 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_32:
      *val = LSM6DSL_FIFO_XL_DEC_32;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	2207      	movs	r2, #7
 800ac34:	701a      	strb	r2, [r3, #0]
      break;
 800ac36:	e003      	b.n	800ac40 <lsm6dsl_fifo_xl_batch_get+0x94>
    default:
      *val = LSM6DSL_FIFO_XL_DEC_ND;
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	2208      	movs	r2, #8
 800ac3c:	701a      	strb	r2, [r3, #0]
      break;
 800ac3e:	bf00      	nop
  }

  return ret;
 800ac40:	68fb      	ldr	r3, [r7, #12]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop

0800ac4c <lsm6dsl_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t val)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	460b      	mov	r3, r1
 800ac56:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800ac58:	f107 0208 	add.w	r2, r7, #8
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	2108      	movs	r1, #8
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f7ff f9ed 	bl	800a040 <lsm6dsl_read_reg>
 800ac66:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10f      	bne.n	800ac8e <lsm6dsl_fifo_gy_batch_set+0x42>
    fifo_ctrl3.dec_fifo_gyro = (uint8_t)val;
 800ac6e:	78fb      	ldrb	r3, [r7, #3]
 800ac70:	f003 0307 	and.w	r3, r3, #7
 800ac74:	b2da      	uxtb	r2, r3
 800ac76:	7a3b      	ldrb	r3, [r7, #8]
 800ac78:	f362 03c5 	bfi	r3, r2, #3, #3
 800ac7c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800ac7e:	f107 0208 	add.w	r2, r7, #8
 800ac82:	2301      	movs	r3, #1
 800ac84:	2108      	movs	r1, #8
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f7ff f9f2 	bl	800a070 <lsm6dsl_write_reg>
 800ac8c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <lsm6dsl_fifo_gy_batch_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t *val)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800aca2:	f107 0208 	add.w	r2, r7, #8
 800aca6:	2301      	movs	r3, #1
 800aca8:	2108      	movs	r1, #8
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7ff f9c8 	bl	800a040 <lsm6dsl_read_reg>
 800acb0:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl3.dec_fifo_gyro) {
 800acb2:	7a3b      	ldrb	r3, [r7, #8]
 800acb4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	2b07      	cmp	r3, #7
 800acbc:	d832      	bhi.n	800ad24 <lsm6dsl_fifo_gy_batch_get+0x8c>
 800acbe:	a201      	add	r2, pc, #4	; (adr r2, 800acc4 <lsm6dsl_fifo_gy_batch_get+0x2c>)
 800acc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc4:	0800ace5 	.word	0x0800ace5
 800acc8:	0800aced 	.word	0x0800aced
 800accc:	0800acf5 	.word	0x0800acf5
 800acd0:	0800acfd 	.word	0x0800acfd
 800acd4:	0800ad05 	.word	0x0800ad05
 800acd8:	0800ad0d 	.word	0x0800ad0d
 800acdc:	0800ad15 	.word	0x0800ad15
 800ace0:	0800ad1d 	.word	0x0800ad1d
    case LSM6DSL_FIFO_GY_DISABLE:
      *val = LSM6DSL_FIFO_GY_DISABLE;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	2200      	movs	r2, #0
 800ace8:	701a      	strb	r2, [r3, #0]
      break;
 800acea:	e01f      	b.n	800ad2c <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_NO_DEC:
      *val = LSM6DSL_FIFO_GY_NO_DEC;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	2201      	movs	r2, #1
 800acf0:	701a      	strb	r2, [r3, #0]
      break;
 800acf2:	e01b      	b.n	800ad2c <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_2:
      *val = LSM6DSL_FIFO_GY_DEC_2;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	2202      	movs	r2, #2
 800acf8:	701a      	strb	r2, [r3, #0]
      break;
 800acfa:	e017      	b.n	800ad2c <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_3:
      *val = LSM6DSL_FIFO_GY_DEC_3;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	2203      	movs	r2, #3
 800ad00:	701a      	strb	r2, [r3, #0]
      break;
 800ad02:	e013      	b.n	800ad2c <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_4:
      *val = LSM6DSL_FIFO_GY_DEC_4;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	2204      	movs	r2, #4
 800ad08:	701a      	strb	r2, [r3, #0]
      break;
 800ad0a:	e00f      	b.n	800ad2c <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_8:
      *val = LSM6DSL_FIFO_GY_DEC_8;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	2205      	movs	r2, #5
 800ad10:	701a      	strb	r2, [r3, #0]
      break;
 800ad12:	e00b      	b.n	800ad2c <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_16:
      *val = LSM6DSL_FIFO_GY_DEC_16;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	2206      	movs	r2, #6
 800ad18:	701a      	strb	r2, [r3, #0]
      break;
 800ad1a:	e007      	b.n	800ad2c <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_32:
      *val = LSM6DSL_FIFO_GY_DEC_32;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	2207      	movs	r2, #7
 800ad20:	701a      	strb	r2, [r3, #0]
      break;
 800ad22:	e003      	b.n	800ad2c <lsm6dsl_fifo_gy_batch_get+0x94>
    default:
      *val = LSM6DSL_FIFO_GY_DEC_ND;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	2208      	movs	r2, #8
 800ad28:	701a      	strb	r2, [r3, #0]
      break;
 800ad2a:	bf00      	nop
  }

  return ret;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop

0800ad38 <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	460b      	mov	r3, r1
 800ad42:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800ad44:	f107 0208 	add.w	r2, r7, #8
 800ad48:	2301      	movs	r3, #1
 800ad4a:	210a      	movs	r1, #10
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff f977 	bl	800a040 <lsm6dsl_read_reg>
 800ad52:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10f      	bne.n	800ad7a <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 800ad5a:	78fb      	ldrb	r3, [r7, #3]
 800ad5c:	f003 0307 	and.w	r3, r3, #7
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	7a3b      	ldrb	r3, [r7, #8]
 800ad64:	f362 0302 	bfi	r3, r2, #0, #3
 800ad68:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800ad6a:	f107 0208 	add.w	r2, r7, #8
 800ad6e:	2301      	movs	r3, #1
 800ad70:	210a      	movs	r1, #10
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7ff f97c 	bl	800a070 <lsm6dsl_write_reg>
 800ad78:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <lsm6dsl_fifo_mode_get>:
  * @param  val    Get the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_get(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t *val)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800ad8e:	f107 0208 	add.w	r2, r7, #8
 800ad92:	2301      	movs	r3, #1
 800ad94:	210a      	movs	r1, #10
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff f952 	bl	800a040 <lsm6dsl_read_reg>
 800ad9c:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl5.fifo_mode) {
 800ad9e:	7a3b      	ldrb	r3, [r7, #8]
 800ada0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	2b06      	cmp	r3, #6
 800ada8:	d824      	bhi.n	800adf4 <lsm6dsl_fifo_mode_get+0x70>
 800adaa:	a201      	add	r2, pc, #4	; (adr r2, 800adb0 <lsm6dsl_fifo_mode_get+0x2c>)
 800adac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb0:	0800adcd 	.word	0x0800adcd
 800adb4:	0800add5 	.word	0x0800add5
 800adb8:	0800adf5 	.word	0x0800adf5
 800adbc:	0800addd 	.word	0x0800addd
 800adc0:	0800ade5 	.word	0x0800ade5
 800adc4:	0800adf5 	.word	0x0800adf5
 800adc8:	0800aded 	.word	0x0800aded
    case LSM6DSL_BYPASS_MODE:
      *val = LSM6DSL_BYPASS_MODE;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	2200      	movs	r2, #0
 800add0:	701a      	strb	r2, [r3, #0]
      break;
 800add2:	e013      	b.n	800adfc <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_FIFO_MODE:
      *val = LSM6DSL_FIFO_MODE;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	2201      	movs	r2, #1
 800add8:	701a      	strb	r2, [r3, #0]
      break;
 800adda:	e00f      	b.n	800adfc <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_STREAM_TO_FIFO_MODE:
      *val = LSM6DSL_STREAM_TO_FIFO_MODE;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	2203      	movs	r2, #3
 800ade0:	701a      	strb	r2, [r3, #0]
      break;
 800ade2:	e00b      	b.n	800adfc <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_BYPASS_TO_STREAM_MODE:
      *val = LSM6DSL_BYPASS_TO_STREAM_MODE;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	2204      	movs	r2, #4
 800ade8:	701a      	strb	r2, [r3, #0]
      break;
 800adea:	e007      	b.n	800adfc <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_STREAM_MODE:
      *val = LSM6DSL_STREAM_MODE;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	2206      	movs	r2, #6
 800adf0:	701a      	strb	r2, [r3, #0]
      break;
 800adf2:	e003      	b.n	800adfc <lsm6dsl_fifo_mode_get+0x78>
    default:
      *val = LSM6DSL_FIFO_MODE_ND;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	2208      	movs	r2, #8
 800adf8:	701a      	strb	r2, [r3, #0]
      break;
 800adfa:	bf00      	nop
  }

  return ret;
 800adfc:	68fb      	ldr	r3, [r7, #12]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop

0800ae08 <lsm6dsl_fifo_data_rate_set>:
  * @param  val    Change the values of odr_fifo in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_fifo_t val)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	460b      	mov	r3, r1
 800ae12:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800ae14:	f107 0208 	add.w	r2, r7, #8
 800ae18:	2301      	movs	r3, #1
 800ae1a:	210a      	movs	r1, #10
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f7ff f90f 	bl	800a040 <lsm6dsl_read_reg>
 800ae22:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d10f      	bne.n	800ae4a <lsm6dsl_fifo_data_rate_set+0x42>
    fifo_ctrl5.odr_fifo = (uint8_t)val;
 800ae2a:	78fb      	ldrb	r3, [r7, #3]
 800ae2c:	f003 030f 	and.w	r3, r3, #15
 800ae30:	b2da      	uxtb	r2, r3
 800ae32:	7a3b      	ldrb	r3, [r7, #8]
 800ae34:	f362 03c6 	bfi	r3, r2, #3, #4
 800ae38:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800ae3a:	f107 0208 	add.w	r2, r7, #8
 800ae3e:	2301      	movs	r3, #1
 800ae40:	210a      	movs	r1, #10
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7ff f914 	bl	800a070 <lsm6dsl_write_reg>
 800ae48:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <lsm6dsl_fifo_data_rate_get>:
  * @param  val    Get the values of odr_fifo in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_fifo_t *val)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800ae5e:	f107 0208 	add.w	r2, r7, #8
 800ae62:	2301      	movs	r3, #1
 800ae64:	210a      	movs	r1, #10
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7ff f8ea 	bl	800a040 <lsm6dsl_read_reg>
 800ae6c:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl5.odr_fifo) {
 800ae6e:	7a3b      	ldrb	r3, [r7, #8]
 800ae70:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	2b0a      	cmp	r3, #10
 800ae78:	d844      	bhi.n	800af04 <lsm6dsl_fifo_data_rate_get+0xb0>
 800ae7a:	a201      	add	r2, pc, #4	; (adr r2, 800ae80 <lsm6dsl_fifo_data_rate_get+0x2c>)
 800ae7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae80:	0800aead 	.word	0x0800aead
 800ae84:	0800aeb5 	.word	0x0800aeb5
 800ae88:	0800aebd 	.word	0x0800aebd
 800ae8c:	0800aec5 	.word	0x0800aec5
 800ae90:	0800aecd 	.word	0x0800aecd
 800ae94:	0800aed5 	.word	0x0800aed5
 800ae98:	0800aedd 	.word	0x0800aedd
 800ae9c:	0800aee5 	.word	0x0800aee5
 800aea0:	0800aeed 	.word	0x0800aeed
 800aea4:	0800aef5 	.word	0x0800aef5
 800aea8:	0800aefd 	.word	0x0800aefd
    case LSM6DSL_FIFO_DISABLE:
      *val = LSM6DSL_FIFO_DISABLE;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	701a      	strb	r2, [r3, #0]
      break;
 800aeb2:	e02b      	b.n	800af0c <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_12Hz5:
      *val = LSM6DSL_FIFO_12Hz5;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	701a      	strb	r2, [r3, #0]
      break;
 800aeba:	e027      	b.n	800af0c <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_26Hz:
      *val = LSM6DSL_FIFO_26Hz;
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	2202      	movs	r2, #2
 800aec0:	701a      	strb	r2, [r3, #0]
      break;
 800aec2:	e023      	b.n	800af0c <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_52Hz:
      *val = LSM6DSL_FIFO_52Hz;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2203      	movs	r2, #3
 800aec8:	701a      	strb	r2, [r3, #0]
      break;
 800aeca:	e01f      	b.n	800af0c <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_104Hz:
      *val = LSM6DSL_FIFO_104Hz;
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	2204      	movs	r2, #4
 800aed0:	701a      	strb	r2, [r3, #0]
      break;
 800aed2:	e01b      	b.n	800af0c <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_208Hz:
      *val = LSM6DSL_FIFO_208Hz;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	2205      	movs	r2, #5
 800aed8:	701a      	strb	r2, [r3, #0]
      break;
 800aeda:	e017      	b.n	800af0c <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_416Hz:
      *val = LSM6DSL_FIFO_416Hz;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	2206      	movs	r2, #6
 800aee0:	701a      	strb	r2, [r3, #0]
      break;
 800aee2:	e013      	b.n	800af0c <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_833Hz:
      *val = LSM6DSL_FIFO_833Hz;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2207      	movs	r2, #7
 800aee8:	701a      	strb	r2, [r3, #0]
      break;
 800aeea:	e00f      	b.n	800af0c <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_1k66Hz:
      *val = LSM6DSL_FIFO_1k66Hz;
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2208      	movs	r2, #8
 800aef0:	701a      	strb	r2, [r3, #0]
      break;
 800aef2:	e00b      	b.n	800af0c <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_3k33Hz:
      *val = LSM6DSL_FIFO_3k33Hz;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2209      	movs	r2, #9
 800aef8:	701a      	strb	r2, [r3, #0]
      break;
 800aefa:	e007      	b.n	800af0c <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_6k66Hz:
      *val = LSM6DSL_FIFO_6k66Hz;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	220a      	movs	r2, #10
 800af00:	701a      	strb	r2, [r3, #0]
      break;
 800af02:	e003      	b.n	800af0c <lsm6dsl_fifo_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_FIFO_RATE_ND;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	220b      	movs	r2, #11
 800af08:	701a      	strb	r2, [r3, #0]
      break;
 800af0a:	bf00      	nop
  }

  return ret;
 800af0c:	68fb      	ldr	r3, [r7, #12]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop

0800af18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uwTickPrio = TICK_INT_PRIORITY;
 800af1c:	4b1f      	ldr	r3, [pc, #124]	; (800af9c <main+0x84>)
 800af1e:	2200      	movs	r2, #0
 800af20:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800af22:	f7f5 ffc9 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800af26:	f000 f83f 	bl	800afa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800af2a:	f7fe fae1 	bl	80094f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800af2e:	f7fe f9c5 	bl	80092bc <MX_DMA_Init>
  MX_CRC_Init();
 800af32:	f7fe f98d 	bl	8009250 <MX_CRC_Init>
  MX_RTC_Init();
 800af36:	f000 f8d3 	bl	800b0e0 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800af3a:	f000 fddb 	bl	800baf4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800af3e:	f000 fd07 	bl	800b950 <MX_TIM3_Init>
  MX_I2C1_Init();
 800af42:	f7fe fb57 	bl	80095f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800af46:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af4a:	4815      	ldr	r0, [pc, #84]	; (800afa0 <main+0x88>)
 800af4c:	f7fa fdf4 	bl	8005b38 <HAL_RTC_DeactivateAlarm>
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800af50:	4813      	ldr	r0, [pc, #76]	; (800afa0 <main+0x88>)
 800af52:	f7fb f843 	bl	8005fdc <HAL_RTCEx_DeactivateWakeUpTimer>

  SYSTEM_DEBUG_wakeupStandbyMode();
 800af56:	f000 fc81 	bl	800b85c <SYSTEM_DEBUG_wakeupStandbyMode>

#ifdef IWDG_ENABLE
	MX_IWDG_Init();
#endif

  COM_halUartReceiveDma();
 800af5a:	f7fd ff1b 	bl	8008d94 <COM_halUartReceiveDma>

  COM_uartPrint(HELLO_WORLD);
 800af5e:	4811      	ldr	r0, [pc, #68]	; (800afa4 <main+0x8c>)
 800af60:	f7fd fef4 	bl	8008d4c <COM_uartPrint>

  SYSTEM_DEBUG_assertMsgPrint();
 800af64:	f000 fb04 	bl	800b570 <SYSTEM_DEBUG_assertMsgPrint>

  LSM6DSL_init();
 800af68:	f7fe fc08 	bl	800977c <LSM6DSL_init>

  SYSTEM_DEBUG_printResetCause();
 800af6c:	f000 fb2a 	bl	800b5c4 <SYSTEM_DEBUG_printResetCause>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	SYSTEM_DEBUG_enterSleepMode();
 800af70:	f000 fbea 	bl	800b748 <SYSTEM_DEBUG_enterSleepMode>

#ifdef IWDG_ENABLE
	kickDog();
#endif

	if (COM_getReadyCommandFlag())
 800af74:	f7fd feac 	bl	8008cd0 <COM_getReadyCommandFlag>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d003      	beq.n	800af86 <main+0x6e>
	{
	  COM_readyCommandProcess();
 800af7e:	f7fd fecf 	bl	8008d20 <COM_readyCommandProcess>
	  COM_setReadyCommandFlagOff();
 800af82:	f7fd febf 	bl	8008d04 <COM_setReadyCommandFlagOff>
	}

	if (LSM6DSL_getInterruptFlag())
 800af86:	f7ff f837 	bl	8009ff8 <LSM6DSL_getInterruptFlag>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d0ef      	beq.n	800af70 <main+0x58>
	{
	  LSM6DSL_processHanlder();
 800af90:	f7fe fba6 	bl	80096e0 <LSM6DSL_processHanlder>
	  LSM6DSL_setInterruptFlagOff();
 800af94:	f7ff f848 	bl	800a028 <LSM6DSL_setInterruptFlagOff>
	SYSTEM_DEBUG_enterSleepMode();
 800af98:	e7ea      	b.n	800af70 <main+0x58>
 800af9a:	bf00      	nop
 800af9c:	20000080 	.word	0x20000080
 800afa0:	20000764 	.word	0x20000764
 800afa4:	0800e63c 	.word	0x0800e63c

0800afa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b09a      	sub	sp, #104	; 0x68
 800afac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800afae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800afb2:	2230      	movs	r2, #48	; 0x30
 800afb4:	2100      	movs	r1, #0
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 fed2 	bl	800bd60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800afbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afc0:	2200      	movs	r2, #0
 800afc2:	601a      	str	r2, [r3, #0]
 800afc4:	605a      	str	r2, [r3, #4]
 800afc6:	609a      	str	r2, [r3, #8]
 800afc8:	60da      	str	r2, [r3, #12]
 800afca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800afcc:	f107 030c 	add.w	r3, r7, #12
 800afd0:	2200      	movs	r2, #0
 800afd2:	601a      	str	r2, [r3, #0]
 800afd4:	605a      	str	r2, [r3, #4]
 800afd6:	609a      	str	r2, [r3, #8]
 800afd8:	60da      	str	r2, [r3, #12]
 800afda:	611a      	str	r2, [r3, #16]
 800afdc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800afde:	2300      	movs	r3, #0
 800afe0:	60bb      	str	r3, [r7, #8]
 800afe2:	4b32      	ldr	r3, [pc, #200]	; (800b0ac <SystemClock_Config+0x104>)
 800afe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe6:	4a31      	ldr	r2, [pc, #196]	; (800b0ac <SystemClock_Config+0x104>)
 800afe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afec:	6413      	str	r3, [r2, #64]	; 0x40
 800afee:	4b2f      	ldr	r3, [pc, #188]	; (800b0ac <SystemClock_Config+0x104>)
 800aff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aff6:	60bb      	str	r3, [r7, #8]
 800aff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800affa:	2300      	movs	r3, #0
 800affc:	607b      	str	r3, [r7, #4]
 800affe:	4b2c      	ldr	r3, [pc, #176]	; (800b0b0 <SystemClock_Config+0x108>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a2b      	ldr	r2, [pc, #172]	; (800b0b0 <SystemClock_Config+0x108>)
 800b004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b008:	6013      	str	r3, [r2, #0]
 800b00a:	4b29      	ldr	r3, [pc, #164]	; (800b0b0 <SystemClock_Config+0x108>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b012:	607b      	str	r3, [r7, #4]
 800b014:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800b016:	230e      	movs	r3, #14
 800b018:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800b01a:	2301      	movs	r3, #1
 800b01c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b01e:	2301      	movs	r3, #1
 800b020:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b022:	2310      	movs	r3, #16
 800b024:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800b026:	2301      	movs	r3, #1
 800b028:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b02a:	2302      	movs	r3, #2
 800b02c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800b02e:	2300      	movs	r3, #0
 800b030:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 800b032:	2310      	movs	r3, #16
 800b034:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 800b036:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800b03a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800b03c:	2304      	movs	r3, #4
 800b03e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800b040:	2304      	movs	r3, #4
 800b042:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b044:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b048:	4618      	mov	r0, r3
 800b04a:	f7f8 ff09 	bl	8003e60 <HAL_RCC_OscConfig>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d001      	beq.n	800b058 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800b054:	f000 f82e 	bl	800b0b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b058:	230f      	movs	r3, #15
 800b05a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b05c:	2302      	movs	r3, #2
 800b05e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b060:	2300      	movs	r3, #0
 800b062:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b068:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b06a:	2300      	movs	r3, #0
 800b06c:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800b06e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b072:	2102      	movs	r1, #2
 800b074:	4618      	mov	r0, r3
 800b076:	f7f9 fa13 	bl	80044a0 <HAL_RCC_ClockConfig>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d001      	beq.n	800b084 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800b080:	f000 f818 	bl	800b0b4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b084:	2302      	movs	r3, #2
 800b086:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b08c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b08e:	f107 030c 	add.w	r3, r7, #12
 800b092:	4618      	mov	r0, r3
 800b094:	f7f9 fcd0 	bl	8004a38 <HAL_RCCEx_PeriphCLKConfig>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800b09e:	f000 f809 	bl	800b0b4 <Error_Handler>
  }
}
 800b0a2:	bf00      	nop
 800b0a4:	3768      	adds	r7, #104	; 0x68
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	40023800 	.word	0x40023800
 800b0b0:	40007000 	.word	0x40007000

0800b0b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	COM_uartPrint("Error");
 800b0b8:	4801      	ldr	r0, [pc, #4]	; (800b0c0 <Error_Handler+0xc>)
 800b0ba:	f7fd fe47 	bl	8008d4c <COM_uartPrint>
	while(1);
 800b0be:	e7fe      	b.n	800b0be <Error_Handler+0xa>
 800b0c0:	0800e64c 	.word	0x0800e64c

0800b0c4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	SYSTEM_DEBUG_assertRecord(file, line);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 fa23 	bl	800b51c <SYSTEM_DEBUG_assertRecord>

  /* USER CODE END 6 */
}
 800b0d6:	bf00      	nop
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
	...

0800b0e0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b090      	sub	sp, #64	; 0x40
 800b0e4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800b0e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	601a      	str	r2, [r3, #0]
 800b0ee:	605a      	str	r2, [r3, #4]
 800b0f0:	609a      	str	r2, [r3, #8]
 800b0f2:	60da      	str	r2, [r3, #12]
 800b0f4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800b0fa:	463b      	mov	r3, r7
 800b0fc:	2228      	movs	r2, #40	; 0x28
 800b0fe:	2100      	movs	r1, #0
 800b100:	4618      	mov	r0, r3
 800b102:	f000 fe2d 	bl	800bd60 <memset>

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800b106:	4b40      	ldr	r3, [pc, #256]	; (800b208 <MX_RTC_Init+0x128>)
 800b108:	4a40      	ldr	r2, [pc, #256]	; (800b20c <MX_RTC_Init+0x12c>)
 800b10a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800b10c:	4b3e      	ldr	r3, [pc, #248]	; (800b208 <MX_RTC_Init+0x128>)
 800b10e:	2200      	movs	r2, #0
 800b110:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800b112:	4b3d      	ldr	r3, [pc, #244]	; (800b208 <MX_RTC_Init+0x128>)
 800b114:	227f      	movs	r2, #127	; 0x7f
 800b116:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800b118:	4b3b      	ldr	r3, [pc, #236]	; (800b208 <MX_RTC_Init+0x128>)
 800b11a:	22ff      	movs	r2, #255	; 0xff
 800b11c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800b11e:	4b3a      	ldr	r3, [pc, #232]	; (800b208 <MX_RTC_Init+0x128>)
 800b120:	2200      	movs	r2, #0
 800b122:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800b124:	4b38      	ldr	r3, [pc, #224]	; (800b208 <MX_RTC_Init+0x128>)
 800b126:	2200      	movs	r2, #0
 800b128:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800b12a:	4b37      	ldr	r3, [pc, #220]	; (800b208 <MX_RTC_Init+0x128>)
 800b12c:	2200      	movs	r2, #0
 800b12e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800b130:	4835      	ldr	r0, [pc, #212]	; (800b208 <MX_RTC_Init+0x128>)
 800b132:	f7f9 fe95 	bl	8004e60 <HAL_RTC_Init>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800b13c:	f7ff ffba 	bl	800b0b4 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 800b140:	2300      	movs	r3, #0
 800b142:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 800b146:	2300      	movs	r3, #0
 800b148:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b152:	2300      	movs	r3, #0
 800b154:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b156:	2300      	movs	r3, #0
 800b158:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800b15a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b15e:	2200      	movs	r2, #0
 800b160:	4619      	mov	r1, r3
 800b162:	4829      	ldr	r0, [pc, #164]	; (800b208 <MX_RTC_Init+0x128>)
 800b164:	f7f9 ff62 	bl	800502c <HAL_RTC_SetTime>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800b16e:	f7ff ffa1 	bl	800b0b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800b172:	2301      	movs	r3, #1
 800b174:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800b178:	2301      	movs	r3, #1
 800b17a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 800b17e:	2301      	movs	r3, #1
 800b180:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 800b184:	2300      	movs	r3, #0
 800b186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800b18a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b18e:	2200      	movs	r2, #0
 800b190:	4619      	mov	r1, r3
 800b192:	481d      	ldr	r0, [pc, #116]	; (800b208 <MX_RTC_Init+0x128>)
 800b194:	f7fa f8b6 	bl	8005304 <HAL_RTC_SetDate>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800b19e:	f7ff ff89 	bl	800b0b4 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 1;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 800b1ba:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 800b1be:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800b1ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800b1d4:	463b      	mov	r3, r7
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	4619      	mov	r1, r3
 800b1da:	480b      	ldr	r0, [pc, #44]	; (800b208 <MX_RTC_Init+0x128>)
 800b1dc:	f7fa f9c2 	bl	8005564 <HAL_RTC_SetAlarm_IT>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d001      	beq.n	800b1ea <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800b1e6:	f7ff ff65 	bl	800b0b4 <Error_Handler>
  }
  /** Enable the WakeUp 
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	4806      	ldr	r0, [pc, #24]	; (800b208 <MX_RTC_Init+0x128>)
 800b1f0:	f7fa fe14 	bl	8005e1c <HAL_RTCEx_SetWakeUpTimer_IT>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <MX_RTC_Init+0x11e>
  {
    Error_Handler();
 800b1fa:	f7ff ff5b 	bl	800b0b4 <Error_Handler>
  }

}
 800b1fe:	bf00      	nop
 800b200:	3740      	adds	r7, #64	; 0x40
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	20000764 	.word	0x20000764
 800b20c:	40002800 	.word	0x40002800

0800b210 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a0c      	ldr	r2, [pc, #48]	; (800b250 <HAL_RTC_MspInit+0x40>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d112      	bne.n	800b248 <HAL_RTC_MspInit+0x38>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b222:	4b0c      	ldr	r3, [pc, #48]	; (800b254 <HAL_RTC_MspInit+0x44>)
 800b224:	2201      	movs	r2, #1
 800b226:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800b228:	2200      	movs	r2, #0
 800b22a:	2100      	movs	r1, #0
 800b22c:	2003      	movs	r0, #3
 800b22e:	f7f5 ff53 	bl	80010d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800b232:	2003      	movs	r0, #3
 800b234:	f7f5 ff7c 	bl	8001130 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800b238:	2200      	movs	r2, #0
 800b23a:	2100      	movs	r1, #0
 800b23c:	2029      	movs	r0, #41	; 0x29
 800b23e:	f7f5 ff4b 	bl	80010d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800b242:	2029      	movs	r0, #41	; 0x29
 800b244:	f7f5 ff74 	bl	8001130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800b248:	bf00      	nop
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	40002800 	.word	0x40002800
 800b254:	42470e3c 	.word	0x42470e3c

0800b258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b25e:	2300      	movs	r3, #0
 800b260:	607b      	str	r3, [r7, #4]
 800b262:	4b10      	ldr	r3, [pc, #64]	; (800b2a4 <HAL_MspInit+0x4c>)
 800b264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b266:	4a0f      	ldr	r2, [pc, #60]	; (800b2a4 <HAL_MspInit+0x4c>)
 800b268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b26c:	6453      	str	r3, [r2, #68]	; 0x44
 800b26e:	4b0d      	ldr	r3, [pc, #52]	; (800b2a4 <HAL_MspInit+0x4c>)
 800b270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b276:	607b      	str	r3, [r7, #4]
 800b278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b27a:	2300      	movs	r3, #0
 800b27c:	603b      	str	r3, [r7, #0]
 800b27e:	4b09      	ldr	r3, [pc, #36]	; (800b2a4 <HAL_MspInit+0x4c>)
 800b280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b282:	4a08      	ldr	r2, [pc, #32]	; (800b2a4 <HAL_MspInit+0x4c>)
 800b284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b288:	6413      	str	r3, [r2, #64]	; 0x40
 800b28a:	4b06      	ldr	r3, [pc, #24]	; (800b2a4 <HAL_MspInit+0x4c>)
 800b28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b28e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b292:	603b      	str	r3, [r7, #0]
 800b294:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800b296:	2007      	movs	r0, #7
 800b298:	f7f5 fefe 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b29c:	bf00      	nop
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	40023800 	.word	0x40023800

0800b2a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b08c      	sub	sp, #48	; 0x30
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	6879      	ldr	r1, [r7, #4]
 800b2bc:	2032      	movs	r0, #50	; 0x32
 800b2be:	f7f5 ff0b 	bl	80010d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 800b2c2:	2032      	movs	r0, #50	; 0x32
 800b2c4:	f7f5 ff34 	bl	8001130 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	4b1f      	ldr	r3, [pc, #124]	; (800b34c <HAL_InitTick+0xa4>)
 800b2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d0:	4a1e      	ldr	r2, [pc, #120]	; (800b34c <HAL_InitTick+0xa4>)
 800b2d2:	f043 0308 	orr.w	r3, r3, #8
 800b2d6:	6413      	str	r3, [r2, #64]	; 0x40
 800b2d8:	4b1c      	ldr	r3, [pc, #112]	; (800b34c <HAL_InitTick+0xa4>)
 800b2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2dc:	f003 0308 	and.w	r3, r3, #8
 800b2e0:	60fb      	str	r3, [r7, #12]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b2e4:	f107 0210 	add.w	r2, r7, #16
 800b2e8:	f107 0314 	add.w	r3, r7, #20
 800b2ec:	4611      	mov	r1, r2
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7f9 fb70 	bl	80049d4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b2f4:	f7f9 fb46 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	005b      	lsls	r3, r3, #1
 800b2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b300:	4a13      	ldr	r2, [pc, #76]	; (800b350 <HAL_InitTick+0xa8>)
 800b302:	fba2 2303 	umull	r2, r3, r2, r3
 800b306:	0c9b      	lsrs	r3, r3, #18
 800b308:	3b01      	subs	r3, #1
 800b30a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800b30c:	4b11      	ldr	r3, [pc, #68]	; (800b354 <HAL_InitTick+0xac>)
 800b30e:	4a12      	ldr	r2, [pc, #72]	; (800b358 <HAL_InitTick+0xb0>)
 800b310:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 800b312:	4b10      	ldr	r3, [pc, #64]	; (800b354 <HAL_InitTick+0xac>)
 800b314:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b318:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800b31a:	4a0e      	ldr	r2, [pc, #56]	; (800b354 <HAL_InitTick+0xac>)
 800b31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800b320:	4b0c      	ldr	r3, [pc, #48]	; (800b354 <HAL_InitTick+0xac>)
 800b322:	2200      	movs	r2, #0
 800b324:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b326:	4b0b      	ldr	r3, [pc, #44]	; (800b354 <HAL_InitTick+0xac>)
 800b328:	2200      	movs	r2, #0
 800b32a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 800b32c:	4809      	ldr	r0, [pc, #36]	; (800b354 <HAL_InitTick+0xac>)
 800b32e:	f7fa fee5 	bl	80060fc <HAL_TIM_Base_Init>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d104      	bne.n	800b342 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 800b338:	4806      	ldr	r0, [pc, #24]	; (800b354 <HAL_InitTick+0xac>)
 800b33a:	f7fa ff81 	bl	8006240 <HAL_TIM_Base_Start_IT>
 800b33e:	4603      	mov	r3, r0
 800b340:	e000      	b.n	800b344 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800b342:	2301      	movs	r3, #1
}
 800b344:	4618      	mov	r0, r3
 800b346:	3730      	adds	r7, #48	; 0x30
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	40023800 	.word	0x40023800
 800b350:	431bde83 	.word	0x431bde83
 800b354:	20000784 	.word	0x20000784
 800b358:	40000c00 	.word	0x40000c00

0800b35c <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM5 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 800b35c:	b480      	push	{r7}
 800b35e:	af00      	add	r7, sp, #0
  /* Disable TIM5 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_UPDATE);                                                  
 800b360:	4b06      	ldr	r3, [pc, #24]	; (800b37c <HAL_SuspendTick+0x20>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68da      	ldr	r2, [r3, #12]
 800b366:	4b05      	ldr	r3, [pc, #20]	; (800b37c <HAL_SuspendTick+0x20>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f022 0201 	bic.w	r2, r2, #1
 800b36e:	60da      	str	r2, [r3, #12]
}
 800b370:	bf00      	nop
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	20000784 	.word	0x20000784

0800b380 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM5 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 800b380:	b480      	push	{r7}
 800b382:	af00      	add	r7, sp, #0
  /* Enable TIM5 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_UPDATE);
 800b384:	4b06      	ldr	r3, [pc, #24]	; (800b3a0 <HAL_ResumeTick+0x20>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	68da      	ldr	r2, [r3, #12]
 800b38a:	4b05      	ldr	r3, [pc, #20]	; (800b3a0 <HAL_ResumeTick+0x20>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f042 0201 	orr.w	r2, r2, #1
 800b392:	60da      	str	r2, [r3, #12]
}
 800b394:	bf00      	nop
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	20000784 	.word	0x20000784

0800b3a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b3a8:	bf00      	nop
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr

0800b3b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b3b2:	b480      	push	{r7}
 800b3b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b3b6:	e7fe      	b.n	800b3b6 <HardFault_Handler+0x4>

0800b3b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b3bc:	e7fe      	b.n	800b3bc <MemManage_Handler+0x4>

0800b3be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b3be:	b480      	push	{r7}
 800b3c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b3c2:	e7fe      	b.n	800b3c2 <BusFault_Handler+0x4>

0800b3c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b3c8:	e7fe      	b.n	800b3c8 <UsageFault_Handler+0x4>

0800b3ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b3ce:	bf00      	nop
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b3dc:	bf00      	nop
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b3e6:	b480      	push	{r7}
 800b3e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b3ea:	bf00      	nop
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b3f8:	bf00      	nop
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
	...

0800b404 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800b408:	4802      	ldr	r0, [pc, #8]	; (800b414 <RTC_WKUP_IRQHandler+0x10>)
 800b40a:	f7fa fe3f 	bl	800608c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800b40e:	bf00      	nop
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	20000764 	.word	0x20000764

0800b418 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800b41c:	4802      	ldr	r0, [pc, #8]	; (800b428 <DMA1_Stream5_IRQHandler+0x10>)
 800b41e:	f7f6 f9a1 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800b422:	bf00      	nop
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	20000804 	.word	0x20000804

0800b42c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800b430:	4802      	ldr	r0, [pc, #8]	; (800b43c <DMA1_Stream6_IRQHandler+0x10>)
 800b432:	f7f6 f997 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800b436:	bf00      	nop
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	20000864 	.word	0x20000864

0800b440 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800b444:	2020      	movs	r0, #32
 800b446:	f7f7 fbdf 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800b44a:	bf00      	nop
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800b454:	4802      	ldr	r0, [pc, #8]	; (800b460 <USART2_IRQHandler+0x10>)
 800b456:	f7fc fd65 	bl	8007f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800b45a:	bf00      	nop
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	200008c4 	.word	0x200008c4

0800b464 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800b468:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b46c:	f7f7 fbcc 	bl	8002c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b470:	bf00      	nop
 800b472:	bd80      	pop	{r7, pc}

0800b474 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800b478:	4802      	ldr	r0, [pc, #8]	; (800b484 <RTC_Alarm_IRQHandler+0x10>)
 800b47a:	f7fa fbf9 	bl	8005c70 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800b47e:	bf00      	nop
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	20000764 	.word	0x20000764

0800b488 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800b48c:	4802      	ldr	r0, [pc, #8]	; (800b498 <TIM5_IRQHandler+0x10>)
 800b48e:	f7fb f967 	bl	8006760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800b492:	bf00      	nop
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	20000784 	.word	0x20000784

0800b49c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b4a4:	4b11      	ldr	r3, [pc, #68]	; (800b4ec <_sbrk+0x50>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d102      	bne.n	800b4b2 <_sbrk+0x16>
		heap_end = &end;
 800b4ac:	4b0f      	ldr	r3, [pc, #60]	; (800b4ec <_sbrk+0x50>)
 800b4ae:	4a10      	ldr	r2, [pc, #64]	; (800b4f0 <_sbrk+0x54>)
 800b4b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b4b2:	4b0e      	ldr	r3, [pc, #56]	; (800b4ec <_sbrk+0x50>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b4b8:	4b0c      	ldr	r3, [pc, #48]	; (800b4ec <_sbrk+0x50>)
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4413      	add	r3, r2
 800b4c0:	466a      	mov	r2, sp
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d907      	bls.n	800b4d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b4c6:	f000 fc21 	bl	800bd0c <__errno>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	230c      	movs	r3, #12
 800b4ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b4d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d4:	e006      	b.n	800b4e4 <_sbrk+0x48>
	}

	heap_end += incr;
 800b4d6:	4b05      	ldr	r3, [pc, #20]	; (800b4ec <_sbrk+0x50>)
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4413      	add	r3, r2
 800b4de:	4a03      	ldr	r2, [pc, #12]	; (800b4ec <_sbrk+0x50>)
 800b4e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3710      	adds	r7, #16
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	200006d4 	.word	0x200006d4
 800b4f0:	20000908 	.word	0x20000908

0800b4f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b4f8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b4fc:	4b05      	ldr	r3, [pc, #20]	; (800b514 <__NVIC_SystemReset+0x20>)
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b504:	4903      	ldr	r1, [pc, #12]	; (800b514 <__NVIC_SystemReset+0x20>)
 800b506:	4b04      	ldr	r3, [pc, #16]	; (800b518 <__NVIC_SystemReset+0x24>)
 800b508:	4313      	orrs	r3, r2
 800b50a:	60cb      	str	r3, [r1, #12]
 800b50c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b510:	bf00      	nop
 800b512:	e7fd      	b.n	800b510 <__NVIC_SystemReset+0x1c>
 800b514:	e000ed00 	.word	0xe000ed00
 800b518:	05fa0004 	.word	0x05fa0004

0800b51c <SYSTEM_DEBUG_assertRecord>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void SYSTEM_DEBUG_assertRecord(uint8_t *p_file, uint32_t line)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
	Assert_Struct.flag = ASSERT_FLAG_ON;
 800b526:	4b11      	ldr	r3, [pc, #68]	; (800b56c <SYSTEM_DEBUG_assertRecord+0x50>)
 800b528:	22aa      	movs	r2, #170	; 0xaa
 800b52a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	for (int i = 0; i < sizeof(Assert_Struct.p_file); i++)
 800b52e:	2300      	movs	r3, #0
 800b530:	60fb      	str	r3, [r7, #12]
 800b532:	e007      	b.n	800b544 <SYSTEM_DEBUG_assertRecord+0x28>
	{
		Assert_Struct.p_file [i]  = 0;
 800b534:	4a0d      	ldr	r2, [pc, #52]	; (800b56c <SYSTEM_DEBUG_assertRecord+0x50>)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	4413      	add	r3, r2
 800b53a:	2200      	movs	r2, #0
 800b53c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(Assert_Struct.p_file); i++)
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	3301      	adds	r3, #1
 800b542:	60fb      	str	r3, [r7, #12]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2b3b      	cmp	r3, #59	; 0x3b
 800b548:	d9f4      	bls.n	800b534 <SYSTEM_DEBUG_assertRecord+0x18>
	}

	strncpy((char*)Assert_Struct.p_file, (char*)p_file, sizeof(Assert_Struct.p_file));
 800b54a:	223c      	movs	r2, #60	; 0x3c
 800b54c:	6879      	ldr	r1, [r7, #4]
 800b54e:	4807      	ldr	r0, [pc, #28]	; (800b56c <SYSTEM_DEBUG_assertRecord+0x50>)
 800b550:	f001 f89c 	bl	800c68c <strncpy>
	Assert_Struct.line = line;
 800b554:	4a05      	ldr	r2, [pc, #20]	; (800b56c <SYSTEM_DEBUG_assertRecord+0x50>)
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	63d3      	str	r3, [r2, #60]	; 0x3c

	while (COM_getTxBusyFlag()); // OK message
 800b55a:	bf00      	nop
 800b55c:	f7fd fc44 	bl	8008de8 <COM_getTxBusyFlag>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1fa      	bne.n	800b55c <SYSTEM_DEBUG_assertRecord+0x40>
	NVIC_SystemReset();
 800b566:	f7ff ffc5 	bl	800b4f4 <__NVIC_SystemReset>
 800b56a:	bf00      	nop
 800b56c:	20000000 	.word	0x20000000

0800b570 <SYSTEM_DEBUG_assertMsgPrint>:
	while (1) {}; // never reached to here
}

void SYSTEM_DEBUG_assertMsgPrint(void)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b09a      	sub	sp, #104	; 0x68
 800b574:	af00      	add	r7, sp, #0
	if (Assert_Struct.flag == ASSERT_FLAG_ON)
 800b576:	4b0a      	ldr	r3, [pc, #40]	; (800b5a0 <SYSTEM_DEBUG_assertMsgPrint+0x30>)
 800b578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b57c:	2baa      	cmp	r3, #170	; 0xaa
 800b57e:	d10a      	bne.n	800b596 <SYSTEM_DEBUG_assertMsgPrint+0x26>
	{
		char temp [100];
		sprintf(temp, "Problem found! Path: %s\tLine: %u\n", Assert_Struct.p_file, (unsigned int)Assert_Struct.line);
 800b580:	4b07      	ldr	r3, [pc, #28]	; (800b5a0 <SYSTEM_DEBUG_assertMsgPrint+0x30>)
 800b582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b584:	1d38      	adds	r0, r7, #4
 800b586:	4a06      	ldr	r2, [pc, #24]	; (800b5a0 <SYSTEM_DEBUG_assertMsgPrint+0x30>)
 800b588:	4906      	ldr	r1, [pc, #24]	; (800b5a4 <SYSTEM_DEBUG_assertMsgPrint+0x34>)
 800b58a:	f001 f84d 	bl	800c628 <siprintf>
		COM_uartPrint(temp);
 800b58e:	1d3b      	adds	r3, r7, #4
 800b590:	4618      	mov	r0, r3
 800b592:	f7fd fbdb 	bl	8008d4c <COM_uartPrint>
	}
}
 800b596:	bf00      	nop
 800b598:	3768      	adds	r7, #104	; 0x68
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	20000000 	.word	0x20000000
 800b5a4:	0800e654 	.word	0x0800e654

0800b5a8 <SYSTEM_DEBUG_assertResetFlag>:

void SYSTEM_DEBUG_assertResetFlag(void)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	af00      	add	r7, sp, #0
	Assert_Struct.flag = ASSERT_FLAG_OFF;
 800b5ac:	4b04      	ldr	r3, [pc, #16]	; (800b5c0 <SYSTEM_DEBUG_assertResetFlag+0x18>)
 800b5ae:	2255      	movs	r2, #85	; 0x55
 800b5b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800b5b4:	bf00      	nop
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	20000000 	.word	0x20000000

0800b5c4 <SYSTEM_DEBUG_printResetCause>:

void SYSTEM_DEBUG_printResetCause(void)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b09a      	sub	sp, #104	; 0x68
 800b5c8:	af00      	add	r7, sp, #0
	Reset_Cause = SYSTEM_DEBUG_resetCauseGet();
 800b5ca:	f000 f81b 	bl	800b604 <SYSTEM_DEBUG_resetCauseGet>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	4b0a      	ldr	r3, [pc, #40]	; (800b5fc <SYSTEM_DEBUG_printResetCause+0x38>)
 800b5d4:	701a      	strb	r2, [r3, #0]

	char temp [100];
	sprintf(temp, "The system reset cause is \%s\"\n", SYSTEM_DEBUG_resetCauseGetName(Reset_Cause));
 800b5d6:	4b09      	ldr	r3, [pc, #36]	; (800b5fc <SYSTEM_DEBUG_printResetCause+0x38>)
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f000 f864 	bl	800b6a8 <SYSTEM_DEBUG_resetCauseGetName>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	1d3b      	adds	r3, r7, #4
 800b5e4:	4906      	ldr	r1, [pc, #24]	; (800b600 <SYSTEM_DEBUG_printResetCause+0x3c>)
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f001 f81e 	bl	800c628 <siprintf>
	COM_uartPrint(temp);
 800b5ec:	1d3b      	adds	r3, r7, #4
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fd fbac 	bl	8008d4c <COM_uartPrint>
}
 800b5f4:	bf00      	nop
 800b5f6:	3768      	adds	r7, #104	; 0x68
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	200006d8 	.word	0x200006d8
 800b600:	0800e678 	.word	0x0800e678

0800b604 <SYSTEM_DEBUG_resetCauseGet>:

reset_cause_t SYSTEM_DEBUG_resetCauseGet(void)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
    reset_cause_t Reset_Cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800b60a:	4b26      	ldr	r3, [pc, #152]	; (800b6a4 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b60c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b60e:	2b00      	cmp	r3, #0
 800b610:	da02      	bge.n	800b618 <SYSTEM_DEBUG_resetCauseGet+0x14>
    {
        Reset_Cause = RESET_CAUSE_LOW_POWER_RESET;
 800b612:	2301      	movs	r3, #1
 800b614:	71fb      	strb	r3, [r7, #7]
 800b616:	e037      	b.n	800b688 <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800b618:	4b22      	ldr	r3, [pc, #136]	; (800b6a4 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b61a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b61c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <SYSTEM_DEBUG_resetCauseGet+0x26>
    {
        Reset_Cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800b624:	2302      	movs	r3, #2
 800b626:	71fb      	strb	r3, [r7, #7]
 800b628:	e02e      	b.n	800b688 <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800b62a:	4b1e      	ldr	r3, [pc, #120]	; (800b6a4 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b62c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b62e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b632:	2b00      	cmp	r3, #0
 800b634:	d002      	beq.n	800b63c <SYSTEM_DEBUG_resetCauseGet+0x38>
    {
        Reset_Cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800b636:	2303      	movs	r3, #3
 800b638:	71fb      	strb	r3, [r7, #7]
 800b63a:	e025      	b.n	800b688 <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800b63c:	4b19      	ldr	r3, [pc, #100]	; (800b6a4 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b63e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <SYSTEM_DEBUG_resetCauseGet+0x4a>
    {
        Reset_Cause = RESET_CAUSE_SOFTWARE_RESET;
 800b648:	2304      	movs	r3, #4
 800b64a:	71fb      	strb	r3, [r7, #7]
 800b64c:	e01c      	b.n	800b688 <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800b64e:	4b15      	ldr	r3, [pc, #84]	; (800b6a4 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b652:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b656:	2b00      	cmp	r3, #0
 800b658:	d002      	beq.n	800b660 <SYSTEM_DEBUG_resetCauseGet+0x5c>
    {
        Reset_Cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 800b65a:	2305      	movs	r3, #5
 800b65c:	71fb      	strb	r3, [r7, #7]
 800b65e:	e013      	b.n	800b688 <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800b660:	4b10      	ldr	r3, [pc, #64]	; (800b6a4 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b664:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d002      	beq.n	800b672 <SYSTEM_DEBUG_resetCauseGet+0x6e>
    {
        Reset_Cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 800b66c:	2306      	movs	r3, #6
 800b66e:	71fb      	strb	r3, [r7, #7]
 800b670:	e00a      	b.n	800b688 <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800b672:	4b0c      	ldr	r3, [pc, #48]	; (800b6a4 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d002      	beq.n	800b684 <SYSTEM_DEBUG_resetCauseGet+0x80>
    {
        Reset_Cause = RESET_CAUSE_BROWNOUT_RESET;
 800b67e:	2307      	movs	r3, #7
 800b680:	71fb      	strb	r3, [r7, #7]
 800b682:	e001      	b.n	800b688 <SYSTEM_DEBUG_resetCauseGet+0x84>
    }
    else
    {
        Reset_Cause = RESET_CAUSE_UNKNOWN;
 800b684:	2300      	movs	r3, #0
 800b686:	71fb      	strb	r3, [r7, #7]
    }

    __HAL_RCC_CLEAR_RESET_FLAGS();
 800b688:	4b06      	ldr	r3, [pc, #24]	; (800b6a4 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b68a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b68c:	4a05      	ldr	r2, [pc, #20]	; (800b6a4 <SYSTEM_DEBUG_resetCauseGet+0xa0>)
 800b68e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b692:	6753      	str	r3, [r2, #116]	; 0x74

    return Reset_Cause;
 800b694:	79fb      	ldrb	r3, [r7, #7]
}
 800b696:	4618      	mov	r0, r3
 800b698:	370c      	adds	r7, #12
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	40023800 	.word	0x40023800

0800b6a8 <SYSTEM_DEBUG_resetCauseGetName>:

const char * SYSTEM_DEBUG_resetCauseGetName(reset_cause_t Reset_Cause)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	71fb      	strb	r3, [r7, #7]
    const char * reset_cause_name = "TBD";
 800b6b2:	4b1c      	ldr	r3, [pc, #112]	; (800b724 <SYSTEM_DEBUG_resetCauseGetName+0x7c>)
 800b6b4:	60fb      	str	r3, [r7, #12]

    switch (Reset_Cause)
 800b6b6:	79fb      	ldrb	r3, [r7, #7]
 800b6b8:	2b07      	cmp	r3, #7
 800b6ba:	d82b      	bhi.n	800b714 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
 800b6bc:	a201      	add	r2, pc, #4	; (adr r2, 800b6c4 <SYSTEM_DEBUG_resetCauseGetName+0x1c>)
 800b6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c2:	bf00      	nop
 800b6c4:	0800b6e5 	.word	0x0800b6e5
 800b6c8:	0800b6eb 	.word	0x0800b6eb
 800b6cc:	0800b6f1 	.word	0x0800b6f1
 800b6d0:	0800b6f7 	.word	0x0800b6f7
 800b6d4:	0800b6fd 	.word	0x0800b6fd
 800b6d8:	0800b703 	.word	0x0800b703
 800b6dc:	0800b709 	.word	0x0800b709
 800b6e0:	0800b70f 	.word	0x0800b70f
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 800b6e4:	4b10      	ldr	r3, [pc, #64]	; (800b728 <SYSTEM_DEBUG_resetCauseGetName+0x80>)
 800b6e6:	60fb      	str	r3, [r7, #12]
            break;
 800b6e8:	e014      	b.n	800b714 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 800b6ea:	4b10      	ldr	r3, [pc, #64]	; (800b72c <SYSTEM_DEBUG_resetCauseGetName+0x84>)
 800b6ec:	60fb      	str	r3, [r7, #12]
            break;
 800b6ee:	e011      	b.n	800b714 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 800b6f0:	4b0f      	ldr	r3, [pc, #60]	; (800b730 <SYSTEM_DEBUG_resetCauseGetName+0x88>)
 800b6f2:	60fb      	str	r3, [r7, #12]
            break;
 800b6f4:	e00e      	b.n	800b714 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800b6f6:	4b0f      	ldr	r3, [pc, #60]	; (800b734 <SYSTEM_DEBUG_resetCauseGetName+0x8c>)
 800b6f8:	60fb      	str	r3, [r7, #12]
            break;
 800b6fa:	e00b      	b.n	800b714 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 800b6fc:	4b0e      	ldr	r3, [pc, #56]	; (800b738 <SYSTEM_DEBUG_resetCauseGetName+0x90>)
 800b6fe:	60fb      	str	r3, [r7, #12]
            break;
 800b700:	e008      	b.n	800b714 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 800b702:	4b0e      	ldr	r3, [pc, #56]	; (800b73c <SYSTEM_DEBUG_resetCauseGetName+0x94>)
 800b704:	60fb      	str	r3, [r7, #12]
            break;
 800b706:	e005      	b.n	800b714 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 800b708:	4b0d      	ldr	r3, [pc, #52]	; (800b740 <SYSTEM_DEBUG_resetCauseGetName+0x98>)
 800b70a:	60fb      	str	r3, [r7, #12]
            break;
 800b70c:	e002      	b.n	800b714 <SYSTEM_DEBUG_resetCauseGetName+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 800b70e:	4b0d      	ldr	r3, [pc, #52]	; (800b744 <SYSTEM_DEBUG_resetCauseGetName+0x9c>)
 800b710:	60fb      	str	r3, [r7, #12]
            break;
 800b712:	bf00      	nop
    }

    return reset_cause_name;
 800b714:	68fb      	ldr	r3, [r7, #12]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3714      	adds	r7, #20
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	0800e698 	.word	0x0800e698
 800b728:	0800e69c 	.word	0x0800e69c
 800b72c:	0800e6a4 	.word	0x0800e6a4
 800b730:	0800e6b4 	.word	0x0800e6b4
 800b734:	0800e6cc 	.word	0x0800e6cc
 800b738:	0800e6e8 	.word	0x0800e6e8
 800b73c:	0800e6f8 	.word	0x0800e6f8
 800b740:	0800e728 	.word	0x0800e728
 800b744:	0800e744 	.word	0x0800e744

0800b748 <SYSTEM_DEBUG_enterSleepMode>:

void SYSTEM_DEBUG_enterSleepMode(void)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800b74c:	2200      	movs	r2, #0
 800b74e:	2120      	movs	r1, #32
 800b750:	4808      	ldr	r0, [pc, #32]	; (800b774 <SYSTEM_DEBUG_enterSleepMode+0x2c>)
 800b752:	f7f7 fa27 	bl	8002ba4 <HAL_GPIO_WritePin>

	// Enters to sleep mode
	HAL_SuspendTick();
 800b756:	f7ff fe01 	bl	800b35c <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800b75a:	2101      	movs	r1, #1
 800b75c:	2000      	movs	r0, #0
 800b75e:	f7f8 faf3 	bl	8003d48 <HAL_PWR_EnterSLEEPMode>
	HAL_ResumeTick();
 800b762:	f7ff fe0d 	bl	800b380 <HAL_ResumeTick>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800b766:	2201      	movs	r2, #1
 800b768:	2120      	movs	r1, #32
 800b76a:	4802      	ldr	r0, [pc, #8]	; (800b774 <SYSTEM_DEBUG_enterSleepMode+0x2c>)
 800b76c:	f7f7 fa1a 	bl	8002ba4 <HAL_GPIO_WritePin>
}
 800b770:	bf00      	nop
 800b772:	bd80      	pop	{r7, pc}
 800b774:	40020000 	.word	0x40020000

0800b778 <SYSTEM_DEBUG_enterStopMode>:

void SYSTEM_DEBUG_enterStopMode(uint32_t wake_up_time)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
	const float wakeup_time_base = 0.00048;
 800b780:	4b1b      	ldr	r3, [pc, #108]	; (800b7f0 <SYSTEM_DEBUG_enterStopMode+0x78>)
 800b782:	60fb      	str	r3, [r7, #12]
	uint32_t wakeup_counter = wake_up_time / wakeup_time_base;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	ee07 3a90 	vmov	s15, r3
 800b78a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b78e:	ed97 7a03 	vldr	s14, [r7, #12]
 800b792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b79a:	ee17 3a90 	vmov	r3, s15
 800b79e:	60bb      	str	r3, [r7, #8]

	COM_uartPrint("STOP MODE is ON\n");
 800b7a0:	4814      	ldr	r0, [pc, #80]	; (800b7f4 <SYSTEM_DEBUG_enterStopMode+0x7c>)
 800b7a2:	f7fd fad3 	bl	8008d4c <COM_uartPrint>

	/* enable the RTC Wakeup */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	68b9      	ldr	r1, [r7, #8]
 800b7aa:	4813      	ldr	r0, [pc, #76]	; (800b7f8 <SYSTEM_DEBUG_enterStopMode+0x80>)
 800b7ac:	f7fa fb36 	bl	8005e1c <HAL_RTCEx_SetWakeUpTimer_IT>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d001      	beq.n	800b7ba <SYSTEM_DEBUG_enterStopMode+0x42>
	{
		Error_Handler();
 800b7b6:	f7ff fc7d 	bl	800b0b4 <Error_Handler>
	}

	// Enters to stop mode
	while (COM_getTxBusyFlag());
 800b7ba:	bf00      	nop
 800b7bc:	f7fd fb14 	bl	8008de8 <COM_getTxBusyFlag>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1fa      	bne.n	800b7bc <SYSTEM_DEBUG_enterStopMode+0x44>
	HAL_SuspendTick();
 800b7c6:	f7ff fdc9 	bl	800b35c <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800b7ca:	2101      	movs	r1, #1
 800b7cc:	2001      	movs	r0, #1
 800b7ce:	f7f8 faed 	bl	8003dac <HAL_PWR_EnterSTOPMode>

	SystemClock_Config();
 800b7d2:	f7ff fbe9 	bl	800afa8 <SystemClock_Config>
	HAL_ResumeTick();
 800b7d6:	f7ff fdd3 	bl	800b380 <HAL_ResumeTick>

	/** Deactivate the RTC wakeup  **/
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800b7da:	4807      	ldr	r0, [pc, #28]	; (800b7f8 <SYSTEM_DEBUG_enterStopMode+0x80>)
 800b7dc:	f7fa fbfe 	bl	8005fdc <HAL_RTCEx_DeactivateWakeUpTimer>

	COM_uartPrint("STOP MODE is OFF\n");
 800b7e0:	4806      	ldr	r0, [pc, #24]	; (800b7fc <SYSTEM_DEBUG_enterStopMode+0x84>)
 800b7e2:	f7fd fab3 	bl	8008d4c <COM_uartPrint>
}
 800b7e6:	bf00      	nop
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	39fba882 	.word	0x39fba882
 800b7f4:	0800e75c 	.word	0x0800e75c
 800b7f8:	20000764 	.word	0x20000764
 800b7fc:	0800e770 	.word	0x0800e770

0800b800 <SYSTEM_DEBUG_enterStandbyMode>:

void SYSTEM_DEBUG_enterStandbyMode(void)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	af00      	add	r7, sp, #0
	/* Clear the WU FLAG */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800b804:	4b12      	ldr	r3, [pc, #72]	; (800b850 <SYSTEM_DEBUG_enterStandbyMode+0x50>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a11      	ldr	r2, [pc, #68]	; (800b850 <SYSTEM_DEBUG_enterStandbyMode+0x50>)
 800b80a:	f043 0304 	orr.w	r3, r3, #4
 800b80e:	6013      	str	r3, [r2, #0]

	 /* clear the RTC Wake UP (WU) flag */
	 __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800b810:	4b10      	ldr	r3, [pc, #64]	; (800b854 <SYSTEM_DEBUG_enterStandbyMode+0x54>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	b2da      	uxtb	r2, r3
 800b818:	4b0e      	ldr	r3, [pc, #56]	; (800b854 <SYSTEM_DEBUG_enterStandbyMode+0x54>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800b820:	60da      	str	r2, [r3, #12]

	 /* Enable the WAKEUP PIN */
	 HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800b822:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b826:	f7f8 fa57 	bl	8003cd8 <HAL_PWR_EnableWakeUpPin>
	      To configure the wake up timer to 5s the WakeUpCounter is set to 0x28b0:
	      RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16
	      Wake-up Time Base = 16 /(32.768KHz) = 0.00048 seconds
	      ==> WakeUpCounter = ~5s/0.00048s = 10416 = 0x28b0
	    */
	 if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2710, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800b82a:	2200      	movs	r2, #0
 800b82c:	f242 7110 	movw	r1, #10000	; 0x2710
 800b830:	4808      	ldr	r0, [pc, #32]	; (800b854 <SYSTEM_DEBUG_enterStandbyMode+0x54>)
 800b832:	f7fa faf3 	bl	8005e1c <HAL_RTCEx_SetWakeUpTimer_IT>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d001      	beq.n	800b840 <SYSTEM_DEBUG_enterStandbyMode+0x40>
	 {
		 Error_Handler();
 800b83c:	f7ff fc3a 	bl	800b0b4 <Error_Handler>
	 }
	 COM_uartPrint("STANDBY MODE is ON\n");
 800b840:	4805      	ldr	r0, [pc, #20]	; (800b858 <SYSTEM_DEBUG_enterStandbyMode+0x58>)
 800b842:	f7fd fa83 	bl	8008d4c <COM_uartPrint>

	 /* Enter the standby mode */
	 HAL_PWR_EnterSTANDBYMode();
 800b846:	f7f8 faf3 	bl	8003e30 <HAL_PWR_EnterSTANDBYMode>
}
 800b84a:	bf00      	nop
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	40007000 	.word	0x40007000
 800b854:	20000764 	.word	0x20000764
 800b858:	0800e784 	.word	0x0800e784

0800b85c <SYSTEM_DEBUG_wakeupStandbyMode>:

void SYSTEM_DEBUG_wakeupStandbyMode(void)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	af00      	add	r7, sp, #0
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800b860:	4b0b      	ldr	r3, [pc, #44]	; (800b890 <SYSTEM_DEBUG_wakeupStandbyMode+0x34>)
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	f003 0302 	and.w	r3, r3, #2
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d10f      	bne.n	800b88c <SYSTEM_DEBUG_wakeupStandbyMode+0x30>
	{
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800b86c:	4b08      	ldr	r3, [pc, #32]	; (800b890 <SYSTEM_DEBUG_wakeupStandbyMode+0x34>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a07      	ldr	r2, [pc, #28]	; (800b890 <SYSTEM_DEBUG_wakeupStandbyMode+0x34>)
 800b872:	f043 0308 	orr.w	r3, r3, #8
 800b876:	6013      	str	r3, [r2, #0]

		COM_uartPrint("Wakeup from STANDBY MODE\n");
 800b878:	4806      	ldr	r0, [pc, #24]	; (800b894 <SYSTEM_DEBUG_wakeupStandbyMode+0x38>)
 800b87a:	f7fd fa67 	bl	8008d4c <COM_uartPrint>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 800b87e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b882:	f7f8 fa45 	bl	8003d10 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800b886:	4804      	ldr	r0, [pc, #16]	; (800b898 <SYSTEM_DEBUG_wakeupStandbyMode+0x3c>)
 800b888:	f7fa fba8 	bl	8005fdc <HAL_RTCEx_DeactivateWakeUpTimer>
	}
}
 800b88c:	bf00      	nop
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	40007000 	.word	0x40007000
 800b894:	0800e798 	.word	0x0800e798
 800b898:	20000764 	.word	0x20000764

0800b89c <HAL_UART_TxCpltCallback>:
 /******************************************************************************
 * Function Definitions
 *******************************************************************************/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
  COM_setTxBusyFlagOff();
 800b8a4:	f7fd fa92 	bl	8008dcc <COM_setTxBusyFlagOff>
}
 800b8a8:	bf00      	nop
 800b8aa:	3708      	adds	r7, #8
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  COM_halUartReceiveDma();
 800b8b8:	f7fd fa6c 	bl	8008d94 <COM_halUartReceiveDma>

  COM_charHandler();
 800b8bc:	f7fd faa0 	bl	8008e00 <COM_charHandler>
}
 800b8c0:	bf00      	nop
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if (GPIO_Pin == GPIO_PIN_5)
 800b8d2:	88fb      	ldrh	r3, [r7, #6]
 800b8d4:	2b20      	cmp	r3, #32
 800b8d6:	d101      	bne.n	800b8dc <HAL_GPIO_EXTI_Callback+0x14>
  {
	  LSM6DSL_setInterruptFlagOn();
 800b8d8:	f7fe fb9a 	bl	800a010 <LSM6DSL_setInterruptFlagOn>
  }
}
 800b8dc:	bf00      	nop
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
  COM_uartPrint(TICK);
 800b8ec:	4803      	ldr	r0, [pc, #12]	; (800b8fc <HAL_RTC_AlarmAEventCallback+0x18>)
 800b8ee:	f7fd fa2d 	bl	8008d4c <COM_uartPrint>
}
 800b8f2:	bf00      	nop
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	0800e7b4 	.word	0x0800e7b4

0800b900 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a04      	ldr	r2, [pc, #16]	; (800b920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d101      	bne.n	800b916 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800b912:	f7f5 faf3 	bl	8000efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800b916:	bf00      	nop
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	40000c00 	.word	0x40000c00

0800b924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b924:	b480      	push	{r7}
 800b926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b928:	4b08      	ldr	r3, [pc, #32]	; (800b94c <SystemInit+0x28>)
 800b92a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b92e:	4a07      	ldr	r2, [pc, #28]	; (800b94c <SystemInit+0x28>)
 800b930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b938:	4b04      	ldr	r3, [pc, #16]	; (800b94c <SystemInit+0x28>)
 800b93a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b93e:	609a      	str	r2, [r3, #8]
#endif
}
 800b940:	bf00      	nop
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	e000ed00 	.word	0xe000ed00

0800b950 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b08e      	sub	sp, #56	; 0x38
 800b954:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b95a:	2200      	movs	r2, #0
 800b95c:	601a      	str	r2, [r3, #0]
 800b95e:	605a      	str	r2, [r3, #4]
 800b960:	609a      	str	r2, [r3, #8]
 800b962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b964:	f107 0320 	add.w	r3, r7, #32
 800b968:	2200      	movs	r2, #0
 800b96a:	601a      	str	r2, [r3, #0]
 800b96c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b96e:	1d3b      	adds	r3, r7, #4
 800b970:	2200      	movs	r2, #0
 800b972:	601a      	str	r2, [r3, #0]
 800b974:	605a      	str	r2, [r3, #4]
 800b976:	609a      	str	r2, [r3, #8]
 800b978:	60da      	str	r2, [r3, #12]
 800b97a:	611a      	str	r2, [r3, #16]
 800b97c:	615a      	str	r2, [r3, #20]
 800b97e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800b980:	4b2c      	ldr	r3, [pc, #176]	; (800ba34 <MX_TIM3_Init+0xe4>)
 800b982:	4a2d      	ldr	r2, [pc, #180]	; (800ba38 <MX_TIM3_Init+0xe8>)
 800b984:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800b986:	4b2b      	ldr	r3, [pc, #172]	; (800ba34 <MX_TIM3_Init+0xe4>)
 800b988:	2253      	movs	r2, #83	; 0x53
 800b98a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b98c:	4b29      	ldr	r3, [pc, #164]	; (800ba34 <MX_TIM3_Init+0xe4>)
 800b98e:	2200      	movs	r2, #0
 800b990:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800b992:	4b28      	ldr	r3, [pc, #160]	; (800ba34 <MX_TIM3_Init+0xe4>)
 800b994:	2263      	movs	r2, #99	; 0x63
 800b996:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b998:	4b26      	ldr	r3, [pc, #152]	; (800ba34 <MX_TIM3_Init+0xe4>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b99e:	4b25      	ldr	r3, [pc, #148]	; (800ba34 <MX_TIM3_Init+0xe4>)
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b9a4:	4823      	ldr	r0, [pc, #140]	; (800ba34 <MX_TIM3_Init+0xe4>)
 800b9a6:	f7fa fba9 	bl	80060fc <HAL_TIM_Base_Init>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d001      	beq.n	800b9b4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800b9b0:	f7ff fb80 	bl	800b0b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b9b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b9ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b9be:	4619      	mov	r1, r3
 800b9c0:	481c      	ldr	r0, [pc, #112]	; (800ba34 <MX_TIM3_Init+0xe4>)
 800b9c2:	f7fb f97f 	bl	8006cc4 <HAL_TIM_ConfigClockSource>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d001      	beq.n	800b9d0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800b9cc:	f7ff fb72 	bl	800b0b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800b9d0:	4818      	ldr	r0, [pc, #96]	; (800ba34 <MX_TIM3_Init+0xe4>)
 800b9d2:	f7fa fc95 	bl	8006300 <HAL_TIM_PWM_Init>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800b9dc:	f7ff fb6a 	bl	800b0b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b9e8:	f107 0320 	add.w	r3, r7, #32
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4811      	ldr	r0, [pc, #68]	; (800ba34 <MX_TIM3_Init+0xe4>)
 800b9f0:	f7fc f824 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800b9fa:	f7ff fb5b 	bl	800b0b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b9fe:	2360      	movs	r3, #96	; 0x60
 800ba00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ba02:	2300      	movs	r3, #0
 800ba04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ba06:	2300      	movs	r3, #0
 800ba08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ba0e:	1d3b      	adds	r3, r7, #4
 800ba10:	2200      	movs	r2, #0
 800ba12:	4619      	mov	r1, r3
 800ba14:	4807      	ldr	r0, [pc, #28]	; (800ba34 <MX_TIM3_Init+0xe4>)
 800ba16:	f7fa ffab 	bl	8006970 <HAL_TIM_PWM_ConfigChannel>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d001      	beq.n	800ba24 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800ba20:	f7ff fb48 	bl	800b0b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800ba24:	4803      	ldr	r0, [pc, #12]	; (800ba34 <MX_TIM3_Init+0xe4>)
 800ba26:	f000 f82b 	bl	800ba80 <HAL_TIM_MspPostInit>

}
 800ba2a:	bf00      	nop
 800ba2c:	3738      	adds	r7, #56	; 0x38
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	200007c4 	.word	0x200007c4
 800ba38:	40000400 	.word	0x40000400

0800ba3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a0b      	ldr	r2, [pc, #44]	; (800ba78 <HAL_TIM_Base_MspInit+0x3c>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d10d      	bne.n	800ba6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ba4e:	2300      	movs	r3, #0
 800ba50:	60fb      	str	r3, [r7, #12]
 800ba52:	4b0a      	ldr	r3, [pc, #40]	; (800ba7c <HAL_TIM_Base_MspInit+0x40>)
 800ba54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba56:	4a09      	ldr	r2, [pc, #36]	; (800ba7c <HAL_TIM_Base_MspInit+0x40>)
 800ba58:	f043 0302 	orr.w	r3, r3, #2
 800ba5c:	6413      	str	r3, [r2, #64]	; 0x40
 800ba5e:	4b07      	ldr	r3, [pc, #28]	; (800ba7c <HAL_TIM_Base_MspInit+0x40>)
 800ba60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba62:	f003 0302 	and.w	r3, r3, #2
 800ba66:	60fb      	str	r3, [r7, #12]
 800ba68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800ba6a:	bf00      	nop
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	40000400 	.word	0x40000400
 800ba7c:	40023800 	.word	0x40023800

0800ba80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b088      	sub	sp, #32
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba88:	f107 030c 	add.w	r3, r7, #12
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	605a      	str	r2, [r3, #4]
 800ba92:	609a      	str	r2, [r3, #8]
 800ba94:	60da      	str	r2, [r3, #12]
 800ba96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a12      	ldr	r2, [pc, #72]	; (800bae8 <HAL_TIM_MspPostInit+0x68>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d11d      	bne.n	800bade <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800baa2:	2300      	movs	r3, #0
 800baa4:	60bb      	str	r3, [r7, #8]
 800baa6:	4b11      	ldr	r3, [pc, #68]	; (800baec <HAL_TIM_MspPostInit+0x6c>)
 800baa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baaa:	4a10      	ldr	r2, [pc, #64]	; (800baec <HAL_TIM_MspPostInit+0x6c>)
 800baac:	f043 0301 	orr.w	r3, r3, #1
 800bab0:	6313      	str	r3, [r2, #48]	; 0x30
 800bab2:	4b0e      	ldr	r3, [pc, #56]	; (800baec <HAL_TIM_MspPostInit+0x6c>)
 800bab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab6:	f003 0301 	and.w	r3, r3, #1
 800baba:	60bb      	str	r3, [r7, #8]
 800babc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800babe:	2340      	movs	r3, #64	; 0x40
 800bac0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bac2:	2302      	movs	r3, #2
 800bac4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bac6:	2300      	movs	r3, #0
 800bac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800baca:	2300      	movs	r3, #0
 800bacc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800bace:	2302      	movs	r3, #2
 800bad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bad2:	f107 030c 	add.w	r3, r7, #12
 800bad6:	4619      	mov	r1, r3
 800bad8:	4805      	ldr	r0, [pc, #20]	; (800baf0 <HAL_TIM_MspPostInit+0x70>)
 800bada:	f7f6 fdbb 	bl	8002654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800bade:	bf00      	nop
 800bae0:	3720      	adds	r7, #32
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	40000400 	.word	0x40000400
 800baec:	40023800 	.word	0x40023800
 800baf0:	40020000 	.word	0x40020000

0800baf4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800baf8:	4b11      	ldr	r3, [pc, #68]	; (800bb40 <MX_USART2_UART_Init+0x4c>)
 800bafa:	4a12      	ldr	r2, [pc, #72]	; (800bb44 <MX_USART2_UART_Init+0x50>)
 800bafc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800bafe:	4b10      	ldr	r3, [pc, #64]	; (800bb40 <MX_USART2_UART_Init+0x4c>)
 800bb00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800bb04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800bb06:	4b0e      	ldr	r3, [pc, #56]	; (800bb40 <MX_USART2_UART_Init+0x4c>)
 800bb08:	2200      	movs	r2, #0
 800bb0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800bb0c:	4b0c      	ldr	r3, [pc, #48]	; (800bb40 <MX_USART2_UART_Init+0x4c>)
 800bb0e:	2200      	movs	r2, #0
 800bb10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800bb12:	4b0b      	ldr	r3, [pc, #44]	; (800bb40 <MX_USART2_UART_Init+0x4c>)
 800bb14:	2200      	movs	r2, #0
 800bb16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800bb18:	4b09      	ldr	r3, [pc, #36]	; (800bb40 <MX_USART2_UART_Init+0x4c>)
 800bb1a:	220c      	movs	r2, #12
 800bb1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bb1e:	4b08      	ldr	r3, [pc, #32]	; (800bb40 <MX_USART2_UART_Init+0x4c>)
 800bb20:	2200      	movs	r2, #0
 800bb22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800bb24:	4b06      	ldr	r3, [pc, #24]	; (800bb40 <MX_USART2_UART_Init+0x4c>)
 800bb26:	2200      	movs	r2, #0
 800bb28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800bb2a:	4805      	ldr	r0, [pc, #20]	; (800bb40 <MX_USART2_UART_Init+0x4c>)
 800bb2c:	f7fc f858 	bl	8007be0 <HAL_UART_Init>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d001      	beq.n	800bb3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800bb36:	f7ff fabd 	bl	800b0b4 <Error_Handler>
  }

}
 800bb3a:	bf00      	nop
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	200008c4 	.word	0x200008c4
 800bb44:	40004400 	.word	0x40004400

0800bb48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b08a      	sub	sp, #40	; 0x28
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb50:	f107 0314 	add.w	r3, r7, #20
 800bb54:	2200      	movs	r2, #0
 800bb56:	601a      	str	r2, [r3, #0]
 800bb58:	605a      	str	r2, [r3, #4]
 800bb5a:	609a      	str	r2, [r3, #8]
 800bb5c:	60da      	str	r2, [r3, #12]
 800bb5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a4b      	ldr	r2, [pc, #300]	; (800bc94 <HAL_UART_MspInit+0x14c>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	f040 8090 	bne.w	800bc8c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	613b      	str	r3, [r7, #16]
 800bb70:	4b49      	ldr	r3, [pc, #292]	; (800bc98 <HAL_UART_MspInit+0x150>)
 800bb72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb74:	4a48      	ldr	r2, [pc, #288]	; (800bc98 <HAL_UART_MspInit+0x150>)
 800bb76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb7a:	6413      	str	r3, [r2, #64]	; 0x40
 800bb7c:	4b46      	ldr	r3, [pc, #280]	; (800bc98 <HAL_UART_MspInit+0x150>)
 800bb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb84:	613b      	str	r3, [r7, #16]
 800bb86:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb88:	2300      	movs	r3, #0
 800bb8a:	60fb      	str	r3, [r7, #12]
 800bb8c:	4b42      	ldr	r3, [pc, #264]	; (800bc98 <HAL_UART_MspInit+0x150>)
 800bb8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb90:	4a41      	ldr	r2, [pc, #260]	; (800bc98 <HAL_UART_MspInit+0x150>)
 800bb92:	f043 0301 	orr.w	r3, r3, #1
 800bb96:	6313      	str	r3, [r2, #48]	; 0x30
 800bb98:	4b3f      	ldr	r3, [pc, #252]	; (800bc98 <HAL_UART_MspInit+0x150>)
 800bb9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb9c:	f003 0301 	and.w	r3, r3, #1
 800bba0:	60fb      	str	r3, [r7, #12]
 800bba2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800bba4:	230c      	movs	r3, #12
 800bba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bba8:	2302      	movs	r3, #2
 800bbaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbac:	2300      	movs	r3, #0
 800bbae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bbb0:	2303      	movs	r3, #3
 800bbb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800bbb4:	2307      	movs	r3, #7
 800bbb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bbb8:	f107 0314 	add.w	r3, r7, #20
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	4837      	ldr	r0, [pc, #220]	; (800bc9c <HAL_UART_MspInit+0x154>)
 800bbc0:	f7f6 fd48 	bl	8002654 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800bbc4:	4b36      	ldr	r3, [pc, #216]	; (800bca0 <HAL_UART_MspInit+0x158>)
 800bbc6:	4a37      	ldr	r2, [pc, #220]	; (800bca4 <HAL_UART_MspInit+0x15c>)
 800bbc8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800bbca:	4b35      	ldr	r3, [pc, #212]	; (800bca0 <HAL_UART_MspInit+0x158>)
 800bbcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bbd0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bbd2:	4b33      	ldr	r3, [pc, #204]	; (800bca0 <HAL_UART_MspInit+0x158>)
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bbd8:	4b31      	ldr	r3, [pc, #196]	; (800bca0 <HAL_UART_MspInit+0x158>)
 800bbda:	2200      	movs	r2, #0
 800bbdc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800bbde:	4b30      	ldr	r3, [pc, #192]	; (800bca0 <HAL_UART_MspInit+0x158>)
 800bbe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bbe4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bbe6:	4b2e      	ldr	r3, [pc, #184]	; (800bca0 <HAL_UART_MspInit+0x158>)
 800bbe8:	2200      	movs	r2, #0
 800bbea:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bbec:	4b2c      	ldr	r3, [pc, #176]	; (800bca0 <HAL_UART_MspInit+0x158>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800bbf2:	4b2b      	ldr	r3, [pc, #172]	; (800bca0 <HAL_UART_MspInit+0x158>)
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800bbf8:	4b29      	ldr	r3, [pc, #164]	; (800bca0 <HAL_UART_MspInit+0x158>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800bbfe:	4b28      	ldr	r3, [pc, #160]	; (800bca0 <HAL_UART_MspInit+0x158>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800bc04:	4826      	ldr	r0, [pc, #152]	; (800bca0 <HAL_UART_MspInit+0x158>)
 800bc06:	f7f5 fb09 	bl	800121c <HAL_DMA_Init>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d001      	beq.n	800bc14 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800bc10:	f7ff fa50 	bl	800b0b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	4a22      	ldr	r2, [pc, #136]	; (800bca0 <HAL_UART_MspInit+0x158>)
 800bc18:	635a      	str	r2, [r3, #52]	; 0x34
 800bc1a:	4a21      	ldr	r2, [pc, #132]	; (800bca0 <HAL_UART_MspInit+0x158>)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800bc20:	4b21      	ldr	r3, [pc, #132]	; (800bca8 <HAL_UART_MspInit+0x160>)
 800bc22:	4a22      	ldr	r2, [pc, #136]	; (800bcac <HAL_UART_MspInit+0x164>)
 800bc24:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800bc26:	4b20      	ldr	r3, [pc, #128]	; (800bca8 <HAL_UART_MspInit+0x160>)
 800bc28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bc2c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bc2e:	4b1e      	ldr	r3, [pc, #120]	; (800bca8 <HAL_UART_MspInit+0x160>)
 800bc30:	2240      	movs	r2, #64	; 0x40
 800bc32:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bc34:	4b1c      	ldr	r3, [pc, #112]	; (800bca8 <HAL_UART_MspInit+0x160>)
 800bc36:	2200      	movs	r2, #0
 800bc38:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800bc3a:	4b1b      	ldr	r3, [pc, #108]	; (800bca8 <HAL_UART_MspInit+0x160>)
 800bc3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bc40:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bc42:	4b19      	ldr	r3, [pc, #100]	; (800bca8 <HAL_UART_MspInit+0x160>)
 800bc44:	2200      	movs	r2, #0
 800bc46:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bc48:	4b17      	ldr	r3, [pc, #92]	; (800bca8 <HAL_UART_MspInit+0x160>)
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800bc4e:	4b16      	ldr	r3, [pc, #88]	; (800bca8 <HAL_UART_MspInit+0x160>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800bc54:	4b14      	ldr	r3, [pc, #80]	; (800bca8 <HAL_UART_MspInit+0x160>)
 800bc56:	2200      	movs	r2, #0
 800bc58:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800bc5a:	4b13      	ldr	r3, [pc, #76]	; (800bca8 <HAL_UART_MspInit+0x160>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800bc60:	4811      	ldr	r0, [pc, #68]	; (800bca8 <HAL_UART_MspInit+0x160>)
 800bc62:	f7f5 fadb 	bl	800121c <HAL_DMA_Init>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d001      	beq.n	800bc70 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800bc6c:	f7ff fa22 	bl	800b0b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4a0d      	ldr	r2, [pc, #52]	; (800bca8 <HAL_UART_MspInit+0x160>)
 800bc74:	631a      	str	r2, [r3, #48]	; 0x30
 800bc76:	4a0c      	ldr	r2, [pc, #48]	; (800bca8 <HAL_UART_MspInit+0x160>)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	2100      	movs	r1, #0
 800bc80:	2026      	movs	r0, #38	; 0x26
 800bc82:	f7f5 fa29 	bl	80010d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800bc86:	2026      	movs	r0, #38	; 0x26
 800bc88:	f7f5 fa52 	bl	8001130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800bc8c:	bf00      	nop
 800bc8e:	3728      	adds	r7, #40	; 0x28
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	40004400 	.word	0x40004400
 800bc98:	40023800 	.word	0x40023800
 800bc9c:	40020000 	.word	0x40020000
 800bca0:	20000804 	.word	0x20000804
 800bca4:	40026088 	.word	0x40026088
 800bca8:	20000864 	.word	0x20000864
 800bcac:	400260a0 	.word	0x400260a0

0800bcb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800bcb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bce8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bcb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bcb6:	e003      	b.n	800bcc0 <LoopCopyDataInit>

0800bcb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bcb8:	4b0c      	ldr	r3, [pc, #48]	; (800bcec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bcba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bcbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bcbe:	3104      	adds	r1, #4

0800bcc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bcc0:	480b      	ldr	r0, [pc, #44]	; (800bcf0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bcc2:	4b0c      	ldr	r3, [pc, #48]	; (800bcf4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bcc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bcc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bcc8:	d3f6      	bcc.n	800bcb8 <CopyDataInit>
  ldr  r2, =_sbss
 800bcca:	4a0b      	ldr	r2, [pc, #44]	; (800bcf8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bccc:	e002      	b.n	800bcd4 <LoopFillZerobss>

0800bcce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bcce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bcd0:	f842 3b04 	str.w	r3, [r2], #4

0800bcd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bcd4:	4b09      	ldr	r3, [pc, #36]	; (800bcfc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bcd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bcd8:	d3f9      	bcc.n	800bcce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bcda:	f7ff fe23 	bl	800b924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bcde:	f000 f81b 	bl	800bd18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bce2:	f7ff f919 	bl	800af18 <main>
  bx  lr    
 800bce6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800bce8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800bcec:	0800eb30 	.word	0x0800eb30
  ldr  r0, =_sdata
 800bcf0:	20000080 	.word	0x20000080
  ldr  r3, =_edata
 800bcf4:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 800bcf8:	2000025c 	.word	0x2000025c
  ldr  r3, = _ebss
 800bcfc:	20000908 	.word	0x20000908

0800bd00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bd00:	e7fe      	b.n	800bd00 <ADC_IRQHandler>

0800bd02 <atoi>:
 800bd02:	220a      	movs	r2, #10
 800bd04:	2100      	movs	r1, #0
 800bd06:	f000 bda7 	b.w	800c858 <strtol>
	...

0800bd0c <__errno>:
 800bd0c:	4b01      	ldr	r3, [pc, #4]	; (800bd14 <__errno+0x8>)
 800bd0e:	6818      	ldr	r0, [r3, #0]
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	2000008c 	.word	0x2000008c

0800bd18 <__libc_init_array>:
 800bd18:	b570      	push	{r4, r5, r6, lr}
 800bd1a:	4e0d      	ldr	r6, [pc, #52]	; (800bd50 <__libc_init_array+0x38>)
 800bd1c:	4c0d      	ldr	r4, [pc, #52]	; (800bd54 <__libc_init_array+0x3c>)
 800bd1e:	1ba4      	subs	r4, r4, r6
 800bd20:	10a4      	asrs	r4, r4, #2
 800bd22:	2500      	movs	r5, #0
 800bd24:	42a5      	cmp	r5, r4
 800bd26:	d109      	bne.n	800bd3c <__libc_init_array+0x24>
 800bd28:	4e0b      	ldr	r6, [pc, #44]	; (800bd58 <__libc_init_array+0x40>)
 800bd2a:	4c0c      	ldr	r4, [pc, #48]	; (800bd5c <__libc_init_array+0x44>)
 800bd2c:	f002 f970 	bl	800e010 <_init>
 800bd30:	1ba4      	subs	r4, r4, r6
 800bd32:	10a4      	asrs	r4, r4, #2
 800bd34:	2500      	movs	r5, #0
 800bd36:	42a5      	cmp	r5, r4
 800bd38:	d105      	bne.n	800bd46 <__libc_init_array+0x2e>
 800bd3a:	bd70      	pop	{r4, r5, r6, pc}
 800bd3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd40:	4798      	blx	r3
 800bd42:	3501      	adds	r5, #1
 800bd44:	e7ee      	b.n	800bd24 <__libc_init_array+0xc>
 800bd46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd4a:	4798      	blx	r3
 800bd4c:	3501      	adds	r5, #1
 800bd4e:	e7f2      	b.n	800bd36 <__libc_init_array+0x1e>
 800bd50:	0800eb28 	.word	0x0800eb28
 800bd54:	0800eb28 	.word	0x0800eb28
 800bd58:	0800eb28 	.word	0x0800eb28
 800bd5c:	0800eb2c 	.word	0x0800eb2c

0800bd60 <memset>:
 800bd60:	4402      	add	r2, r0
 800bd62:	4603      	mov	r3, r0
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d100      	bne.n	800bd6a <memset+0xa>
 800bd68:	4770      	bx	lr
 800bd6a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd6e:	e7f9      	b.n	800bd64 <memset+0x4>

0800bd70 <__cvt>:
 800bd70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd74:	ec55 4b10 	vmov	r4, r5, d0
 800bd78:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bd7a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bd7e:	2d00      	cmp	r5, #0
 800bd80:	460e      	mov	r6, r1
 800bd82:	4691      	mov	r9, r2
 800bd84:	4619      	mov	r1, r3
 800bd86:	bfb8      	it	lt
 800bd88:	4622      	movlt	r2, r4
 800bd8a:	462b      	mov	r3, r5
 800bd8c:	f027 0720 	bic.w	r7, r7, #32
 800bd90:	bfbb      	ittet	lt
 800bd92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bd96:	461d      	movlt	r5, r3
 800bd98:	2300      	movge	r3, #0
 800bd9a:	232d      	movlt	r3, #45	; 0x2d
 800bd9c:	bfb8      	it	lt
 800bd9e:	4614      	movlt	r4, r2
 800bda0:	2f46      	cmp	r7, #70	; 0x46
 800bda2:	700b      	strb	r3, [r1, #0]
 800bda4:	d004      	beq.n	800bdb0 <__cvt+0x40>
 800bda6:	2f45      	cmp	r7, #69	; 0x45
 800bda8:	d100      	bne.n	800bdac <__cvt+0x3c>
 800bdaa:	3601      	adds	r6, #1
 800bdac:	2102      	movs	r1, #2
 800bdae:	e000      	b.n	800bdb2 <__cvt+0x42>
 800bdb0:	2103      	movs	r1, #3
 800bdb2:	ab03      	add	r3, sp, #12
 800bdb4:	9301      	str	r3, [sp, #4]
 800bdb6:	ab02      	add	r3, sp, #8
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	4632      	mov	r2, r6
 800bdbc:	4653      	mov	r3, sl
 800bdbe:	ec45 4b10 	vmov	d0, r4, r5
 800bdc2:	f000 fded 	bl	800c9a0 <_dtoa_r>
 800bdc6:	2f47      	cmp	r7, #71	; 0x47
 800bdc8:	4680      	mov	r8, r0
 800bdca:	d102      	bne.n	800bdd2 <__cvt+0x62>
 800bdcc:	f019 0f01 	tst.w	r9, #1
 800bdd0:	d026      	beq.n	800be20 <__cvt+0xb0>
 800bdd2:	2f46      	cmp	r7, #70	; 0x46
 800bdd4:	eb08 0906 	add.w	r9, r8, r6
 800bdd8:	d111      	bne.n	800bdfe <__cvt+0x8e>
 800bdda:	f898 3000 	ldrb.w	r3, [r8]
 800bdde:	2b30      	cmp	r3, #48	; 0x30
 800bde0:	d10a      	bne.n	800bdf8 <__cvt+0x88>
 800bde2:	2200      	movs	r2, #0
 800bde4:	2300      	movs	r3, #0
 800bde6:	4620      	mov	r0, r4
 800bde8:	4629      	mov	r1, r5
 800bdea:	f7f4 fe75 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdee:	b918      	cbnz	r0, 800bdf8 <__cvt+0x88>
 800bdf0:	f1c6 0601 	rsb	r6, r6, #1
 800bdf4:	f8ca 6000 	str.w	r6, [sl]
 800bdf8:	f8da 3000 	ldr.w	r3, [sl]
 800bdfc:	4499      	add	r9, r3
 800bdfe:	2200      	movs	r2, #0
 800be00:	2300      	movs	r3, #0
 800be02:	4620      	mov	r0, r4
 800be04:	4629      	mov	r1, r5
 800be06:	f7f4 fe67 	bl	8000ad8 <__aeabi_dcmpeq>
 800be0a:	b938      	cbnz	r0, 800be1c <__cvt+0xac>
 800be0c:	2230      	movs	r2, #48	; 0x30
 800be0e:	9b03      	ldr	r3, [sp, #12]
 800be10:	454b      	cmp	r3, r9
 800be12:	d205      	bcs.n	800be20 <__cvt+0xb0>
 800be14:	1c59      	adds	r1, r3, #1
 800be16:	9103      	str	r1, [sp, #12]
 800be18:	701a      	strb	r2, [r3, #0]
 800be1a:	e7f8      	b.n	800be0e <__cvt+0x9e>
 800be1c:	f8cd 900c 	str.w	r9, [sp, #12]
 800be20:	9b03      	ldr	r3, [sp, #12]
 800be22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be24:	eba3 0308 	sub.w	r3, r3, r8
 800be28:	4640      	mov	r0, r8
 800be2a:	6013      	str	r3, [r2, #0]
 800be2c:	b004      	add	sp, #16
 800be2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800be32 <__exponent>:
 800be32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be34:	2900      	cmp	r1, #0
 800be36:	4604      	mov	r4, r0
 800be38:	bfba      	itte	lt
 800be3a:	4249      	neglt	r1, r1
 800be3c:	232d      	movlt	r3, #45	; 0x2d
 800be3e:	232b      	movge	r3, #43	; 0x2b
 800be40:	2909      	cmp	r1, #9
 800be42:	f804 2b02 	strb.w	r2, [r4], #2
 800be46:	7043      	strb	r3, [r0, #1]
 800be48:	dd20      	ble.n	800be8c <__exponent+0x5a>
 800be4a:	f10d 0307 	add.w	r3, sp, #7
 800be4e:	461f      	mov	r7, r3
 800be50:	260a      	movs	r6, #10
 800be52:	fb91 f5f6 	sdiv	r5, r1, r6
 800be56:	fb06 1115 	mls	r1, r6, r5, r1
 800be5a:	3130      	adds	r1, #48	; 0x30
 800be5c:	2d09      	cmp	r5, #9
 800be5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800be62:	f103 32ff 	add.w	r2, r3, #4294967295
 800be66:	4629      	mov	r1, r5
 800be68:	dc09      	bgt.n	800be7e <__exponent+0x4c>
 800be6a:	3130      	adds	r1, #48	; 0x30
 800be6c:	3b02      	subs	r3, #2
 800be6e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800be72:	42bb      	cmp	r3, r7
 800be74:	4622      	mov	r2, r4
 800be76:	d304      	bcc.n	800be82 <__exponent+0x50>
 800be78:	1a10      	subs	r0, r2, r0
 800be7a:	b003      	add	sp, #12
 800be7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be7e:	4613      	mov	r3, r2
 800be80:	e7e7      	b.n	800be52 <__exponent+0x20>
 800be82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be86:	f804 2b01 	strb.w	r2, [r4], #1
 800be8a:	e7f2      	b.n	800be72 <__exponent+0x40>
 800be8c:	2330      	movs	r3, #48	; 0x30
 800be8e:	4419      	add	r1, r3
 800be90:	7083      	strb	r3, [r0, #2]
 800be92:	1d02      	adds	r2, r0, #4
 800be94:	70c1      	strb	r1, [r0, #3]
 800be96:	e7ef      	b.n	800be78 <__exponent+0x46>

0800be98 <_printf_float>:
 800be98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9c:	b08d      	sub	sp, #52	; 0x34
 800be9e:	460c      	mov	r4, r1
 800bea0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800bea4:	4616      	mov	r6, r2
 800bea6:	461f      	mov	r7, r3
 800bea8:	4605      	mov	r5, r0
 800beaa:	f001 fb35 	bl	800d518 <_localeconv_r>
 800beae:	6803      	ldr	r3, [r0, #0]
 800beb0:	9304      	str	r3, [sp, #16]
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7f4 f994 	bl	80001e0 <strlen>
 800beb8:	2300      	movs	r3, #0
 800beba:	930a      	str	r3, [sp, #40]	; 0x28
 800bebc:	f8d8 3000 	ldr.w	r3, [r8]
 800bec0:	9005      	str	r0, [sp, #20]
 800bec2:	3307      	adds	r3, #7
 800bec4:	f023 0307 	bic.w	r3, r3, #7
 800bec8:	f103 0208 	add.w	r2, r3, #8
 800becc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bed0:	f8d4 b000 	ldr.w	fp, [r4]
 800bed4:	f8c8 2000 	str.w	r2, [r8]
 800bed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bedc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bee0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bee4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bee8:	9307      	str	r3, [sp, #28]
 800beea:	f8cd 8018 	str.w	r8, [sp, #24]
 800beee:	f04f 32ff 	mov.w	r2, #4294967295
 800bef2:	4ba7      	ldr	r3, [pc, #668]	; (800c190 <_printf_float+0x2f8>)
 800bef4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bef8:	f7f4 fe20 	bl	8000b3c <__aeabi_dcmpun>
 800befc:	bb70      	cbnz	r0, 800bf5c <_printf_float+0xc4>
 800befe:	f04f 32ff 	mov.w	r2, #4294967295
 800bf02:	4ba3      	ldr	r3, [pc, #652]	; (800c190 <_printf_float+0x2f8>)
 800bf04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf08:	f7f4 fdfa 	bl	8000b00 <__aeabi_dcmple>
 800bf0c:	bb30      	cbnz	r0, 800bf5c <_printf_float+0xc4>
 800bf0e:	2200      	movs	r2, #0
 800bf10:	2300      	movs	r3, #0
 800bf12:	4640      	mov	r0, r8
 800bf14:	4649      	mov	r1, r9
 800bf16:	f7f4 fde9 	bl	8000aec <__aeabi_dcmplt>
 800bf1a:	b110      	cbz	r0, 800bf22 <_printf_float+0x8a>
 800bf1c:	232d      	movs	r3, #45	; 0x2d
 800bf1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf22:	4a9c      	ldr	r2, [pc, #624]	; (800c194 <_printf_float+0x2fc>)
 800bf24:	4b9c      	ldr	r3, [pc, #624]	; (800c198 <_printf_float+0x300>)
 800bf26:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bf2a:	bf8c      	ite	hi
 800bf2c:	4690      	movhi	r8, r2
 800bf2e:	4698      	movls	r8, r3
 800bf30:	2303      	movs	r3, #3
 800bf32:	f02b 0204 	bic.w	r2, fp, #4
 800bf36:	6123      	str	r3, [r4, #16]
 800bf38:	6022      	str	r2, [r4, #0]
 800bf3a:	f04f 0900 	mov.w	r9, #0
 800bf3e:	9700      	str	r7, [sp, #0]
 800bf40:	4633      	mov	r3, r6
 800bf42:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf44:	4621      	mov	r1, r4
 800bf46:	4628      	mov	r0, r5
 800bf48:	f000 f9e6 	bl	800c318 <_printf_common>
 800bf4c:	3001      	adds	r0, #1
 800bf4e:	f040 808d 	bne.w	800c06c <_printf_float+0x1d4>
 800bf52:	f04f 30ff 	mov.w	r0, #4294967295
 800bf56:	b00d      	add	sp, #52	; 0x34
 800bf58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf5c:	4642      	mov	r2, r8
 800bf5e:	464b      	mov	r3, r9
 800bf60:	4640      	mov	r0, r8
 800bf62:	4649      	mov	r1, r9
 800bf64:	f7f4 fdea 	bl	8000b3c <__aeabi_dcmpun>
 800bf68:	b110      	cbz	r0, 800bf70 <_printf_float+0xd8>
 800bf6a:	4a8c      	ldr	r2, [pc, #560]	; (800c19c <_printf_float+0x304>)
 800bf6c:	4b8c      	ldr	r3, [pc, #560]	; (800c1a0 <_printf_float+0x308>)
 800bf6e:	e7da      	b.n	800bf26 <_printf_float+0x8e>
 800bf70:	6861      	ldr	r1, [r4, #4]
 800bf72:	1c4b      	adds	r3, r1, #1
 800bf74:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800bf78:	a80a      	add	r0, sp, #40	; 0x28
 800bf7a:	d13e      	bne.n	800bffa <_printf_float+0x162>
 800bf7c:	2306      	movs	r3, #6
 800bf7e:	6063      	str	r3, [r4, #4]
 800bf80:	2300      	movs	r3, #0
 800bf82:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bf86:	ab09      	add	r3, sp, #36	; 0x24
 800bf88:	9300      	str	r3, [sp, #0]
 800bf8a:	ec49 8b10 	vmov	d0, r8, r9
 800bf8e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf92:	6022      	str	r2, [r4, #0]
 800bf94:	f8cd a004 	str.w	sl, [sp, #4]
 800bf98:	6861      	ldr	r1, [r4, #4]
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	f7ff fee8 	bl	800bd70 <__cvt>
 800bfa0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800bfa4:	2b47      	cmp	r3, #71	; 0x47
 800bfa6:	4680      	mov	r8, r0
 800bfa8:	d109      	bne.n	800bfbe <_printf_float+0x126>
 800bfaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfac:	1cd8      	adds	r0, r3, #3
 800bfae:	db02      	blt.n	800bfb6 <_printf_float+0x11e>
 800bfb0:	6862      	ldr	r2, [r4, #4]
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	dd47      	ble.n	800c046 <_printf_float+0x1ae>
 800bfb6:	f1aa 0a02 	sub.w	sl, sl, #2
 800bfba:	fa5f fa8a 	uxtb.w	sl, sl
 800bfbe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bfc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfc4:	d824      	bhi.n	800c010 <_printf_float+0x178>
 800bfc6:	3901      	subs	r1, #1
 800bfc8:	4652      	mov	r2, sl
 800bfca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bfce:	9109      	str	r1, [sp, #36]	; 0x24
 800bfd0:	f7ff ff2f 	bl	800be32 <__exponent>
 800bfd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfd6:	1813      	adds	r3, r2, r0
 800bfd8:	2a01      	cmp	r2, #1
 800bfda:	4681      	mov	r9, r0
 800bfdc:	6123      	str	r3, [r4, #16]
 800bfde:	dc02      	bgt.n	800bfe6 <_printf_float+0x14e>
 800bfe0:	6822      	ldr	r2, [r4, #0]
 800bfe2:	07d1      	lsls	r1, r2, #31
 800bfe4:	d501      	bpl.n	800bfea <_printf_float+0x152>
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	6123      	str	r3, [r4, #16]
 800bfea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d0a5      	beq.n	800bf3e <_printf_float+0xa6>
 800bff2:	232d      	movs	r3, #45	; 0x2d
 800bff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bff8:	e7a1      	b.n	800bf3e <_printf_float+0xa6>
 800bffa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800bffe:	f000 8177 	beq.w	800c2f0 <_printf_float+0x458>
 800c002:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c006:	d1bb      	bne.n	800bf80 <_printf_float+0xe8>
 800c008:	2900      	cmp	r1, #0
 800c00a:	d1b9      	bne.n	800bf80 <_printf_float+0xe8>
 800c00c:	2301      	movs	r3, #1
 800c00e:	e7b6      	b.n	800bf7e <_printf_float+0xe6>
 800c010:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c014:	d119      	bne.n	800c04a <_printf_float+0x1b2>
 800c016:	2900      	cmp	r1, #0
 800c018:	6863      	ldr	r3, [r4, #4]
 800c01a:	dd0c      	ble.n	800c036 <_printf_float+0x19e>
 800c01c:	6121      	str	r1, [r4, #16]
 800c01e:	b913      	cbnz	r3, 800c026 <_printf_float+0x18e>
 800c020:	6822      	ldr	r2, [r4, #0]
 800c022:	07d2      	lsls	r2, r2, #31
 800c024:	d502      	bpl.n	800c02c <_printf_float+0x194>
 800c026:	3301      	adds	r3, #1
 800c028:	440b      	add	r3, r1
 800c02a:	6123      	str	r3, [r4, #16]
 800c02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c02e:	65a3      	str	r3, [r4, #88]	; 0x58
 800c030:	f04f 0900 	mov.w	r9, #0
 800c034:	e7d9      	b.n	800bfea <_printf_float+0x152>
 800c036:	b913      	cbnz	r3, 800c03e <_printf_float+0x1a6>
 800c038:	6822      	ldr	r2, [r4, #0]
 800c03a:	07d0      	lsls	r0, r2, #31
 800c03c:	d501      	bpl.n	800c042 <_printf_float+0x1aa>
 800c03e:	3302      	adds	r3, #2
 800c040:	e7f3      	b.n	800c02a <_printf_float+0x192>
 800c042:	2301      	movs	r3, #1
 800c044:	e7f1      	b.n	800c02a <_printf_float+0x192>
 800c046:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c04a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c04e:	4293      	cmp	r3, r2
 800c050:	db05      	blt.n	800c05e <_printf_float+0x1c6>
 800c052:	6822      	ldr	r2, [r4, #0]
 800c054:	6123      	str	r3, [r4, #16]
 800c056:	07d1      	lsls	r1, r2, #31
 800c058:	d5e8      	bpl.n	800c02c <_printf_float+0x194>
 800c05a:	3301      	adds	r3, #1
 800c05c:	e7e5      	b.n	800c02a <_printf_float+0x192>
 800c05e:	2b00      	cmp	r3, #0
 800c060:	bfd4      	ite	le
 800c062:	f1c3 0302 	rsble	r3, r3, #2
 800c066:	2301      	movgt	r3, #1
 800c068:	4413      	add	r3, r2
 800c06a:	e7de      	b.n	800c02a <_printf_float+0x192>
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	055a      	lsls	r2, r3, #21
 800c070:	d407      	bmi.n	800c082 <_printf_float+0x1ea>
 800c072:	6923      	ldr	r3, [r4, #16]
 800c074:	4642      	mov	r2, r8
 800c076:	4631      	mov	r1, r6
 800c078:	4628      	mov	r0, r5
 800c07a:	47b8      	blx	r7
 800c07c:	3001      	adds	r0, #1
 800c07e:	d12b      	bne.n	800c0d8 <_printf_float+0x240>
 800c080:	e767      	b.n	800bf52 <_printf_float+0xba>
 800c082:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c086:	f240 80dc 	bls.w	800c242 <_printf_float+0x3aa>
 800c08a:	2200      	movs	r2, #0
 800c08c:	2300      	movs	r3, #0
 800c08e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c092:	f7f4 fd21 	bl	8000ad8 <__aeabi_dcmpeq>
 800c096:	2800      	cmp	r0, #0
 800c098:	d033      	beq.n	800c102 <_printf_float+0x26a>
 800c09a:	2301      	movs	r3, #1
 800c09c:	4a41      	ldr	r2, [pc, #260]	; (800c1a4 <_printf_float+0x30c>)
 800c09e:	4631      	mov	r1, r6
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	47b8      	blx	r7
 800c0a4:	3001      	adds	r0, #1
 800c0a6:	f43f af54 	beq.w	800bf52 <_printf_float+0xba>
 800c0aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	db02      	blt.n	800c0b8 <_printf_float+0x220>
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	07d8      	lsls	r0, r3, #31
 800c0b6:	d50f      	bpl.n	800c0d8 <_printf_float+0x240>
 800c0b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0bc:	4631      	mov	r1, r6
 800c0be:	4628      	mov	r0, r5
 800c0c0:	47b8      	blx	r7
 800c0c2:	3001      	adds	r0, #1
 800c0c4:	f43f af45 	beq.w	800bf52 <_printf_float+0xba>
 800c0c8:	f04f 0800 	mov.w	r8, #0
 800c0cc:	f104 091a 	add.w	r9, r4, #26
 800c0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	4543      	cmp	r3, r8
 800c0d6:	dc09      	bgt.n	800c0ec <_printf_float+0x254>
 800c0d8:	6823      	ldr	r3, [r4, #0]
 800c0da:	079b      	lsls	r3, r3, #30
 800c0dc:	f100 8103 	bmi.w	800c2e6 <_printf_float+0x44e>
 800c0e0:	68e0      	ldr	r0, [r4, #12]
 800c0e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0e4:	4298      	cmp	r0, r3
 800c0e6:	bfb8      	it	lt
 800c0e8:	4618      	movlt	r0, r3
 800c0ea:	e734      	b.n	800bf56 <_printf_float+0xbe>
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	464a      	mov	r2, r9
 800c0f0:	4631      	mov	r1, r6
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	47b8      	blx	r7
 800c0f6:	3001      	adds	r0, #1
 800c0f8:	f43f af2b 	beq.w	800bf52 <_printf_float+0xba>
 800c0fc:	f108 0801 	add.w	r8, r8, #1
 800c100:	e7e6      	b.n	800c0d0 <_printf_float+0x238>
 800c102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c104:	2b00      	cmp	r3, #0
 800c106:	dc2b      	bgt.n	800c160 <_printf_float+0x2c8>
 800c108:	2301      	movs	r3, #1
 800c10a:	4a26      	ldr	r2, [pc, #152]	; (800c1a4 <_printf_float+0x30c>)
 800c10c:	4631      	mov	r1, r6
 800c10e:	4628      	mov	r0, r5
 800c110:	47b8      	blx	r7
 800c112:	3001      	adds	r0, #1
 800c114:	f43f af1d 	beq.w	800bf52 <_printf_float+0xba>
 800c118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c11a:	b923      	cbnz	r3, 800c126 <_printf_float+0x28e>
 800c11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c11e:	b913      	cbnz	r3, 800c126 <_printf_float+0x28e>
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	07d9      	lsls	r1, r3, #31
 800c124:	d5d8      	bpl.n	800c0d8 <_printf_float+0x240>
 800c126:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c12a:	4631      	mov	r1, r6
 800c12c:	4628      	mov	r0, r5
 800c12e:	47b8      	blx	r7
 800c130:	3001      	adds	r0, #1
 800c132:	f43f af0e 	beq.w	800bf52 <_printf_float+0xba>
 800c136:	f04f 0900 	mov.w	r9, #0
 800c13a:	f104 0a1a 	add.w	sl, r4, #26
 800c13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c140:	425b      	negs	r3, r3
 800c142:	454b      	cmp	r3, r9
 800c144:	dc01      	bgt.n	800c14a <_printf_float+0x2b2>
 800c146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c148:	e794      	b.n	800c074 <_printf_float+0x1dc>
 800c14a:	2301      	movs	r3, #1
 800c14c:	4652      	mov	r2, sl
 800c14e:	4631      	mov	r1, r6
 800c150:	4628      	mov	r0, r5
 800c152:	47b8      	blx	r7
 800c154:	3001      	adds	r0, #1
 800c156:	f43f aefc 	beq.w	800bf52 <_printf_float+0xba>
 800c15a:	f109 0901 	add.w	r9, r9, #1
 800c15e:	e7ee      	b.n	800c13e <_printf_float+0x2a6>
 800c160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c164:	429a      	cmp	r2, r3
 800c166:	bfa8      	it	ge
 800c168:	461a      	movge	r2, r3
 800c16a:	2a00      	cmp	r2, #0
 800c16c:	4691      	mov	r9, r2
 800c16e:	dd07      	ble.n	800c180 <_printf_float+0x2e8>
 800c170:	4613      	mov	r3, r2
 800c172:	4631      	mov	r1, r6
 800c174:	4642      	mov	r2, r8
 800c176:	4628      	mov	r0, r5
 800c178:	47b8      	blx	r7
 800c17a:	3001      	adds	r0, #1
 800c17c:	f43f aee9 	beq.w	800bf52 <_printf_float+0xba>
 800c180:	f104 031a 	add.w	r3, r4, #26
 800c184:	f04f 0b00 	mov.w	fp, #0
 800c188:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c18c:	9306      	str	r3, [sp, #24]
 800c18e:	e015      	b.n	800c1bc <_printf_float+0x324>
 800c190:	7fefffff 	.word	0x7fefffff
 800c194:	0800e8c4 	.word	0x0800e8c4
 800c198:	0800e8c0 	.word	0x0800e8c0
 800c19c:	0800e8cc 	.word	0x0800e8cc
 800c1a0:	0800e8c8 	.word	0x0800e8c8
 800c1a4:	0800e8d0 	.word	0x0800e8d0
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	9a06      	ldr	r2, [sp, #24]
 800c1ac:	4631      	mov	r1, r6
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	47b8      	blx	r7
 800c1b2:	3001      	adds	r0, #1
 800c1b4:	f43f aecd 	beq.w	800bf52 <_printf_float+0xba>
 800c1b8:	f10b 0b01 	add.w	fp, fp, #1
 800c1bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c1c0:	ebaa 0309 	sub.w	r3, sl, r9
 800c1c4:	455b      	cmp	r3, fp
 800c1c6:	dcef      	bgt.n	800c1a8 <_printf_float+0x310>
 800c1c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	44d0      	add	r8, sl
 800c1d0:	db15      	blt.n	800c1fe <_printf_float+0x366>
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	07da      	lsls	r2, r3, #31
 800c1d6:	d412      	bmi.n	800c1fe <_printf_float+0x366>
 800c1d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1dc:	eba3 020a 	sub.w	r2, r3, sl
 800c1e0:	eba3 0a01 	sub.w	sl, r3, r1
 800c1e4:	4592      	cmp	sl, r2
 800c1e6:	bfa8      	it	ge
 800c1e8:	4692      	movge	sl, r2
 800c1ea:	f1ba 0f00 	cmp.w	sl, #0
 800c1ee:	dc0e      	bgt.n	800c20e <_printf_float+0x376>
 800c1f0:	f04f 0800 	mov.w	r8, #0
 800c1f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1f8:	f104 091a 	add.w	r9, r4, #26
 800c1fc:	e019      	b.n	800c232 <_printf_float+0x39a>
 800c1fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c202:	4631      	mov	r1, r6
 800c204:	4628      	mov	r0, r5
 800c206:	47b8      	blx	r7
 800c208:	3001      	adds	r0, #1
 800c20a:	d1e5      	bne.n	800c1d8 <_printf_float+0x340>
 800c20c:	e6a1      	b.n	800bf52 <_printf_float+0xba>
 800c20e:	4653      	mov	r3, sl
 800c210:	4642      	mov	r2, r8
 800c212:	4631      	mov	r1, r6
 800c214:	4628      	mov	r0, r5
 800c216:	47b8      	blx	r7
 800c218:	3001      	adds	r0, #1
 800c21a:	d1e9      	bne.n	800c1f0 <_printf_float+0x358>
 800c21c:	e699      	b.n	800bf52 <_printf_float+0xba>
 800c21e:	2301      	movs	r3, #1
 800c220:	464a      	mov	r2, r9
 800c222:	4631      	mov	r1, r6
 800c224:	4628      	mov	r0, r5
 800c226:	47b8      	blx	r7
 800c228:	3001      	adds	r0, #1
 800c22a:	f43f ae92 	beq.w	800bf52 <_printf_float+0xba>
 800c22e:	f108 0801 	add.w	r8, r8, #1
 800c232:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c236:	1a9b      	subs	r3, r3, r2
 800c238:	eba3 030a 	sub.w	r3, r3, sl
 800c23c:	4543      	cmp	r3, r8
 800c23e:	dcee      	bgt.n	800c21e <_printf_float+0x386>
 800c240:	e74a      	b.n	800c0d8 <_printf_float+0x240>
 800c242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c244:	2a01      	cmp	r2, #1
 800c246:	dc01      	bgt.n	800c24c <_printf_float+0x3b4>
 800c248:	07db      	lsls	r3, r3, #31
 800c24a:	d53a      	bpl.n	800c2c2 <_printf_float+0x42a>
 800c24c:	2301      	movs	r3, #1
 800c24e:	4642      	mov	r2, r8
 800c250:	4631      	mov	r1, r6
 800c252:	4628      	mov	r0, r5
 800c254:	47b8      	blx	r7
 800c256:	3001      	adds	r0, #1
 800c258:	f43f ae7b 	beq.w	800bf52 <_printf_float+0xba>
 800c25c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c260:	4631      	mov	r1, r6
 800c262:	4628      	mov	r0, r5
 800c264:	47b8      	blx	r7
 800c266:	3001      	adds	r0, #1
 800c268:	f108 0801 	add.w	r8, r8, #1
 800c26c:	f43f ae71 	beq.w	800bf52 <_printf_float+0xba>
 800c270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c272:	2200      	movs	r2, #0
 800c274:	f103 3aff 	add.w	sl, r3, #4294967295
 800c278:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c27c:	2300      	movs	r3, #0
 800c27e:	f7f4 fc2b 	bl	8000ad8 <__aeabi_dcmpeq>
 800c282:	b9c8      	cbnz	r0, 800c2b8 <_printf_float+0x420>
 800c284:	4653      	mov	r3, sl
 800c286:	4642      	mov	r2, r8
 800c288:	4631      	mov	r1, r6
 800c28a:	4628      	mov	r0, r5
 800c28c:	47b8      	blx	r7
 800c28e:	3001      	adds	r0, #1
 800c290:	d10e      	bne.n	800c2b0 <_printf_float+0x418>
 800c292:	e65e      	b.n	800bf52 <_printf_float+0xba>
 800c294:	2301      	movs	r3, #1
 800c296:	4652      	mov	r2, sl
 800c298:	4631      	mov	r1, r6
 800c29a:	4628      	mov	r0, r5
 800c29c:	47b8      	blx	r7
 800c29e:	3001      	adds	r0, #1
 800c2a0:	f43f ae57 	beq.w	800bf52 <_printf_float+0xba>
 800c2a4:	f108 0801 	add.w	r8, r8, #1
 800c2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	4543      	cmp	r3, r8
 800c2ae:	dcf1      	bgt.n	800c294 <_printf_float+0x3fc>
 800c2b0:	464b      	mov	r3, r9
 800c2b2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c2b6:	e6de      	b.n	800c076 <_printf_float+0x1de>
 800c2b8:	f04f 0800 	mov.w	r8, #0
 800c2bc:	f104 0a1a 	add.w	sl, r4, #26
 800c2c0:	e7f2      	b.n	800c2a8 <_printf_float+0x410>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e7df      	b.n	800c286 <_printf_float+0x3ee>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	464a      	mov	r2, r9
 800c2ca:	4631      	mov	r1, r6
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	47b8      	blx	r7
 800c2d0:	3001      	adds	r0, #1
 800c2d2:	f43f ae3e 	beq.w	800bf52 <_printf_float+0xba>
 800c2d6:	f108 0801 	add.w	r8, r8, #1
 800c2da:	68e3      	ldr	r3, [r4, #12]
 800c2dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2de:	1a9b      	subs	r3, r3, r2
 800c2e0:	4543      	cmp	r3, r8
 800c2e2:	dcf0      	bgt.n	800c2c6 <_printf_float+0x42e>
 800c2e4:	e6fc      	b.n	800c0e0 <_printf_float+0x248>
 800c2e6:	f04f 0800 	mov.w	r8, #0
 800c2ea:	f104 0919 	add.w	r9, r4, #25
 800c2ee:	e7f4      	b.n	800c2da <_printf_float+0x442>
 800c2f0:	2900      	cmp	r1, #0
 800c2f2:	f43f ae8b 	beq.w	800c00c <_printf_float+0x174>
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c2fc:	ab09      	add	r3, sp, #36	; 0x24
 800c2fe:	9300      	str	r3, [sp, #0]
 800c300:	ec49 8b10 	vmov	d0, r8, r9
 800c304:	6022      	str	r2, [r4, #0]
 800c306:	f8cd a004 	str.w	sl, [sp, #4]
 800c30a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c30e:	4628      	mov	r0, r5
 800c310:	f7ff fd2e 	bl	800bd70 <__cvt>
 800c314:	4680      	mov	r8, r0
 800c316:	e648      	b.n	800bfaa <_printf_float+0x112>

0800c318 <_printf_common>:
 800c318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c31c:	4691      	mov	r9, r2
 800c31e:	461f      	mov	r7, r3
 800c320:	688a      	ldr	r2, [r1, #8]
 800c322:	690b      	ldr	r3, [r1, #16]
 800c324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c328:	4293      	cmp	r3, r2
 800c32a:	bfb8      	it	lt
 800c32c:	4613      	movlt	r3, r2
 800c32e:	f8c9 3000 	str.w	r3, [r9]
 800c332:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c336:	4606      	mov	r6, r0
 800c338:	460c      	mov	r4, r1
 800c33a:	b112      	cbz	r2, 800c342 <_printf_common+0x2a>
 800c33c:	3301      	adds	r3, #1
 800c33e:	f8c9 3000 	str.w	r3, [r9]
 800c342:	6823      	ldr	r3, [r4, #0]
 800c344:	0699      	lsls	r1, r3, #26
 800c346:	bf42      	ittt	mi
 800c348:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c34c:	3302      	addmi	r3, #2
 800c34e:	f8c9 3000 	strmi.w	r3, [r9]
 800c352:	6825      	ldr	r5, [r4, #0]
 800c354:	f015 0506 	ands.w	r5, r5, #6
 800c358:	d107      	bne.n	800c36a <_printf_common+0x52>
 800c35a:	f104 0a19 	add.w	sl, r4, #25
 800c35e:	68e3      	ldr	r3, [r4, #12]
 800c360:	f8d9 2000 	ldr.w	r2, [r9]
 800c364:	1a9b      	subs	r3, r3, r2
 800c366:	42ab      	cmp	r3, r5
 800c368:	dc28      	bgt.n	800c3bc <_printf_common+0xa4>
 800c36a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c36e:	6822      	ldr	r2, [r4, #0]
 800c370:	3300      	adds	r3, #0
 800c372:	bf18      	it	ne
 800c374:	2301      	movne	r3, #1
 800c376:	0692      	lsls	r2, r2, #26
 800c378:	d42d      	bmi.n	800c3d6 <_printf_common+0xbe>
 800c37a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c37e:	4639      	mov	r1, r7
 800c380:	4630      	mov	r0, r6
 800c382:	47c0      	blx	r8
 800c384:	3001      	adds	r0, #1
 800c386:	d020      	beq.n	800c3ca <_printf_common+0xb2>
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	68e5      	ldr	r5, [r4, #12]
 800c38c:	f8d9 2000 	ldr.w	r2, [r9]
 800c390:	f003 0306 	and.w	r3, r3, #6
 800c394:	2b04      	cmp	r3, #4
 800c396:	bf08      	it	eq
 800c398:	1aad      	subeq	r5, r5, r2
 800c39a:	68a3      	ldr	r3, [r4, #8]
 800c39c:	6922      	ldr	r2, [r4, #16]
 800c39e:	bf0c      	ite	eq
 800c3a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3a4:	2500      	movne	r5, #0
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	bfc4      	itt	gt
 800c3aa:	1a9b      	subgt	r3, r3, r2
 800c3ac:	18ed      	addgt	r5, r5, r3
 800c3ae:	f04f 0900 	mov.w	r9, #0
 800c3b2:	341a      	adds	r4, #26
 800c3b4:	454d      	cmp	r5, r9
 800c3b6:	d11a      	bne.n	800c3ee <_printf_common+0xd6>
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	e008      	b.n	800c3ce <_printf_common+0xb6>
 800c3bc:	2301      	movs	r3, #1
 800c3be:	4652      	mov	r2, sl
 800c3c0:	4639      	mov	r1, r7
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	47c0      	blx	r8
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	d103      	bne.n	800c3d2 <_printf_common+0xba>
 800c3ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3d2:	3501      	adds	r5, #1
 800c3d4:	e7c3      	b.n	800c35e <_printf_common+0x46>
 800c3d6:	18e1      	adds	r1, r4, r3
 800c3d8:	1c5a      	adds	r2, r3, #1
 800c3da:	2030      	movs	r0, #48	; 0x30
 800c3dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3e0:	4422      	add	r2, r4
 800c3e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3ea:	3302      	adds	r3, #2
 800c3ec:	e7c5      	b.n	800c37a <_printf_common+0x62>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	4639      	mov	r1, r7
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	47c0      	blx	r8
 800c3f8:	3001      	adds	r0, #1
 800c3fa:	d0e6      	beq.n	800c3ca <_printf_common+0xb2>
 800c3fc:	f109 0901 	add.w	r9, r9, #1
 800c400:	e7d8      	b.n	800c3b4 <_printf_common+0x9c>
	...

0800c404 <_printf_i>:
 800c404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c408:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c40c:	460c      	mov	r4, r1
 800c40e:	7e09      	ldrb	r1, [r1, #24]
 800c410:	b085      	sub	sp, #20
 800c412:	296e      	cmp	r1, #110	; 0x6e
 800c414:	4617      	mov	r7, r2
 800c416:	4606      	mov	r6, r0
 800c418:	4698      	mov	r8, r3
 800c41a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c41c:	f000 80b3 	beq.w	800c586 <_printf_i+0x182>
 800c420:	d822      	bhi.n	800c468 <_printf_i+0x64>
 800c422:	2963      	cmp	r1, #99	; 0x63
 800c424:	d036      	beq.n	800c494 <_printf_i+0x90>
 800c426:	d80a      	bhi.n	800c43e <_printf_i+0x3a>
 800c428:	2900      	cmp	r1, #0
 800c42a:	f000 80b9 	beq.w	800c5a0 <_printf_i+0x19c>
 800c42e:	2958      	cmp	r1, #88	; 0x58
 800c430:	f000 8083 	beq.w	800c53a <_printf_i+0x136>
 800c434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c438:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c43c:	e032      	b.n	800c4a4 <_printf_i+0xa0>
 800c43e:	2964      	cmp	r1, #100	; 0x64
 800c440:	d001      	beq.n	800c446 <_printf_i+0x42>
 800c442:	2969      	cmp	r1, #105	; 0x69
 800c444:	d1f6      	bne.n	800c434 <_printf_i+0x30>
 800c446:	6820      	ldr	r0, [r4, #0]
 800c448:	6813      	ldr	r3, [r2, #0]
 800c44a:	0605      	lsls	r5, r0, #24
 800c44c:	f103 0104 	add.w	r1, r3, #4
 800c450:	d52a      	bpl.n	800c4a8 <_printf_i+0xa4>
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6011      	str	r1, [r2, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	da03      	bge.n	800c462 <_printf_i+0x5e>
 800c45a:	222d      	movs	r2, #45	; 0x2d
 800c45c:	425b      	negs	r3, r3
 800c45e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c462:	486f      	ldr	r0, [pc, #444]	; (800c620 <_printf_i+0x21c>)
 800c464:	220a      	movs	r2, #10
 800c466:	e039      	b.n	800c4dc <_printf_i+0xd8>
 800c468:	2973      	cmp	r1, #115	; 0x73
 800c46a:	f000 809d 	beq.w	800c5a8 <_printf_i+0x1a4>
 800c46e:	d808      	bhi.n	800c482 <_printf_i+0x7e>
 800c470:	296f      	cmp	r1, #111	; 0x6f
 800c472:	d020      	beq.n	800c4b6 <_printf_i+0xb2>
 800c474:	2970      	cmp	r1, #112	; 0x70
 800c476:	d1dd      	bne.n	800c434 <_printf_i+0x30>
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	f043 0320 	orr.w	r3, r3, #32
 800c47e:	6023      	str	r3, [r4, #0]
 800c480:	e003      	b.n	800c48a <_printf_i+0x86>
 800c482:	2975      	cmp	r1, #117	; 0x75
 800c484:	d017      	beq.n	800c4b6 <_printf_i+0xb2>
 800c486:	2978      	cmp	r1, #120	; 0x78
 800c488:	d1d4      	bne.n	800c434 <_printf_i+0x30>
 800c48a:	2378      	movs	r3, #120	; 0x78
 800c48c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c490:	4864      	ldr	r0, [pc, #400]	; (800c624 <_printf_i+0x220>)
 800c492:	e055      	b.n	800c540 <_printf_i+0x13c>
 800c494:	6813      	ldr	r3, [r2, #0]
 800c496:	1d19      	adds	r1, r3, #4
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	6011      	str	r1, [r2, #0]
 800c49c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e08c      	b.n	800c5c2 <_printf_i+0x1be>
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	6011      	str	r1, [r2, #0]
 800c4ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c4b0:	bf18      	it	ne
 800c4b2:	b21b      	sxthne	r3, r3
 800c4b4:	e7cf      	b.n	800c456 <_printf_i+0x52>
 800c4b6:	6813      	ldr	r3, [r2, #0]
 800c4b8:	6825      	ldr	r5, [r4, #0]
 800c4ba:	1d18      	adds	r0, r3, #4
 800c4bc:	6010      	str	r0, [r2, #0]
 800c4be:	0628      	lsls	r0, r5, #24
 800c4c0:	d501      	bpl.n	800c4c6 <_printf_i+0xc2>
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	e002      	b.n	800c4cc <_printf_i+0xc8>
 800c4c6:	0668      	lsls	r0, r5, #25
 800c4c8:	d5fb      	bpl.n	800c4c2 <_printf_i+0xbe>
 800c4ca:	881b      	ldrh	r3, [r3, #0]
 800c4cc:	4854      	ldr	r0, [pc, #336]	; (800c620 <_printf_i+0x21c>)
 800c4ce:	296f      	cmp	r1, #111	; 0x6f
 800c4d0:	bf14      	ite	ne
 800c4d2:	220a      	movne	r2, #10
 800c4d4:	2208      	moveq	r2, #8
 800c4d6:	2100      	movs	r1, #0
 800c4d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4dc:	6865      	ldr	r5, [r4, #4]
 800c4de:	60a5      	str	r5, [r4, #8]
 800c4e0:	2d00      	cmp	r5, #0
 800c4e2:	f2c0 8095 	blt.w	800c610 <_printf_i+0x20c>
 800c4e6:	6821      	ldr	r1, [r4, #0]
 800c4e8:	f021 0104 	bic.w	r1, r1, #4
 800c4ec:	6021      	str	r1, [r4, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d13d      	bne.n	800c56e <_printf_i+0x16a>
 800c4f2:	2d00      	cmp	r5, #0
 800c4f4:	f040 808e 	bne.w	800c614 <_printf_i+0x210>
 800c4f8:	4665      	mov	r5, ip
 800c4fa:	2a08      	cmp	r2, #8
 800c4fc:	d10b      	bne.n	800c516 <_printf_i+0x112>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	07db      	lsls	r3, r3, #31
 800c502:	d508      	bpl.n	800c516 <_printf_i+0x112>
 800c504:	6923      	ldr	r3, [r4, #16]
 800c506:	6862      	ldr	r2, [r4, #4]
 800c508:	429a      	cmp	r2, r3
 800c50a:	bfde      	ittt	le
 800c50c:	2330      	movle	r3, #48	; 0x30
 800c50e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c512:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c516:	ebac 0305 	sub.w	r3, ip, r5
 800c51a:	6123      	str	r3, [r4, #16]
 800c51c:	f8cd 8000 	str.w	r8, [sp]
 800c520:	463b      	mov	r3, r7
 800c522:	aa03      	add	r2, sp, #12
 800c524:	4621      	mov	r1, r4
 800c526:	4630      	mov	r0, r6
 800c528:	f7ff fef6 	bl	800c318 <_printf_common>
 800c52c:	3001      	adds	r0, #1
 800c52e:	d14d      	bne.n	800c5cc <_printf_i+0x1c8>
 800c530:	f04f 30ff 	mov.w	r0, #4294967295
 800c534:	b005      	add	sp, #20
 800c536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c53a:	4839      	ldr	r0, [pc, #228]	; (800c620 <_printf_i+0x21c>)
 800c53c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c540:	6813      	ldr	r3, [r2, #0]
 800c542:	6821      	ldr	r1, [r4, #0]
 800c544:	1d1d      	adds	r5, r3, #4
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	6015      	str	r5, [r2, #0]
 800c54a:	060a      	lsls	r2, r1, #24
 800c54c:	d50b      	bpl.n	800c566 <_printf_i+0x162>
 800c54e:	07ca      	lsls	r2, r1, #31
 800c550:	bf44      	itt	mi
 800c552:	f041 0120 	orrmi.w	r1, r1, #32
 800c556:	6021      	strmi	r1, [r4, #0]
 800c558:	b91b      	cbnz	r3, 800c562 <_printf_i+0x15e>
 800c55a:	6822      	ldr	r2, [r4, #0]
 800c55c:	f022 0220 	bic.w	r2, r2, #32
 800c560:	6022      	str	r2, [r4, #0]
 800c562:	2210      	movs	r2, #16
 800c564:	e7b7      	b.n	800c4d6 <_printf_i+0xd2>
 800c566:	064d      	lsls	r5, r1, #25
 800c568:	bf48      	it	mi
 800c56a:	b29b      	uxthmi	r3, r3
 800c56c:	e7ef      	b.n	800c54e <_printf_i+0x14a>
 800c56e:	4665      	mov	r5, ip
 800c570:	fbb3 f1f2 	udiv	r1, r3, r2
 800c574:	fb02 3311 	mls	r3, r2, r1, r3
 800c578:	5cc3      	ldrb	r3, [r0, r3]
 800c57a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c57e:	460b      	mov	r3, r1
 800c580:	2900      	cmp	r1, #0
 800c582:	d1f5      	bne.n	800c570 <_printf_i+0x16c>
 800c584:	e7b9      	b.n	800c4fa <_printf_i+0xf6>
 800c586:	6813      	ldr	r3, [r2, #0]
 800c588:	6825      	ldr	r5, [r4, #0]
 800c58a:	6961      	ldr	r1, [r4, #20]
 800c58c:	1d18      	adds	r0, r3, #4
 800c58e:	6010      	str	r0, [r2, #0]
 800c590:	0628      	lsls	r0, r5, #24
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	d501      	bpl.n	800c59a <_printf_i+0x196>
 800c596:	6019      	str	r1, [r3, #0]
 800c598:	e002      	b.n	800c5a0 <_printf_i+0x19c>
 800c59a:	066a      	lsls	r2, r5, #25
 800c59c:	d5fb      	bpl.n	800c596 <_printf_i+0x192>
 800c59e:	8019      	strh	r1, [r3, #0]
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	6123      	str	r3, [r4, #16]
 800c5a4:	4665      	mov	r5, ip
 800c5a6:	e7b9      	b.n	800c51c <_printf_i+0x118>
 800c5a8:	6813      	ldr	r3, [r2, #0]
 800c5aa:	1d19      	adds	r1, r3, #4
 800c5ac:	6011      	str	r1, [r2, #0]
 800c5ae:	681d      	ldr	r5, [r3, #0]
 800c5b0:	6862      	ldr	r2, [r4, #4]
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	4628      	mov	r0, r5
 800c5b6:	f7f3 fe1b 	bl	80001f0 <memchr>
 800c5ba:	b108      	cbz	r0, 800c5c0 <_printf_i+0x1bc>
 800c5bc:	1b40      	subs	r0, r0, r5
 800c5be:	6060      	str	r0, [r4, #4]
 800c5c0:	6863      	ldr	r3, [r4, #4]
 800c5c2:	6123      	str	r3, [r4, #16]
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5ca:	e7a7      	b.n	800c51c <_printf_i+0x118>
 800c5cc:	6923      	ldr	r3, [r4, #16]
 800c5ce:	462a      	mov	r2, r5
 800c5d0:	4639      	mov	r1, r7
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	47c0      	blx	r8
 800c5d6:	3001      	adds	r0, #1
 800c5d8:	d0aa      	beq.n	800c530 <_printf_i+0x12c>
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	079b      	lsls	r3, r3, #30
 800c5de:	d413      	bmi.n	800c608 <_printf_i+0x204>
 800c5e0:	68e0      	ldr	r0, [r4, #12]
 800c5e2:	9b03      	ldr	r3, [sp, #12]
 800c5e4:	4298      	cmp	r0, r3
 800c5e6:	bfb8      	it	lt
 800c5e8:	4618      	movlt	r0, r3
 800c5ea:	e7a3      	b.n	800c534 <_printf_i+0x130>
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	464a      	mov	r2, r9
 800c5f0:	4639      	mov	r1, r7
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	47c0      	blx	r8
 800c5f6:	3001      	adds	r0, #1
 800c5f8:	d09a      	beq.n	800c530 <_printf_i+0x12c>
 800c5fa:	3501      	adds	r5, #1
 800c5fc:	68e3      	ldr	r3, [r4, #12]
 800c5fe:	9a03      	ldr	r2, [sp, #12]
 800c600:	1a9b      	subs	r3, r3, r2
 800c602:	42ab      	cmp	r3, r5
 800c604:	dcf2      	bgt.n	800c5ec <_printf_i+0x1e8>
 800c606:	e7eb      	b.n	800c5e0 <_printf_i+0x1dc>
 800c608:	2500      	movs	r5, #0
 800c60a:	f104 0919 	add.w	r9, r4, #25
 800c60e:	e7f5      	b.n	800c5fc <_printf_i+0x1f8>
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1ac      	bne.n	800c56e <_printf_i+0x16a>
 800c614:	7803      	ldrb	r3, [r0, #0]
 800c616:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c61a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c61e:	e76c      	b.n	800c4fa <_printf_i+0xf6>
 800c620:	0800e8d2 	.word	0x0800e8d2
 800c624:	0800e8e3 	.word	0x0800e8e3

0800c628 <siprintf>:
 800c628:	b40e      	push	{r1, r2, r3}
 800c62a:	b500      	push	{lr}
 800c62c:	b09c      	sub	sp, #112	; 0x70
 800c62e:	ab1d      	add	r3, sp, #116	; 0x74
 800c630:	9002      	str	r0, [sp, #8]
 800c632:	9006      	str	r0, [sp, #24]
 800c634:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c638:	4809      	ldr	r0, [pc, #36]	; (800c660 <siprintf+0x38>)
 800c63a:	9107      	str	r1, [sp, #28]
 800c63c:	9104      	str	r1, [sp, #16]
 800c63e:	4909      	ldr	r1, [pc, #36]	; (800c664 <siprintf+0x3c>)
 800c640:	f853 2b04 	ldr.w	r2, [r3], #4
 800c644:	9105      	str	r1, [sp, #20]
 800c646:	6800      	ldr	r0, [r0, #0]
 800c648:	9301      	str	r3, [sp, #4]
 800c64a:	a902      	add	r1, sp, #8
 800c64c:	f001 fb82 	bl	800dd54 <_svfiprintf_r>
 800c650:	9b02      	ldr	r3, [sp, #8]
 800c652:	2200      	movs	r2, #0
 800c654:	701a      	strb	r2, [r3, #0]
 800c656:	b01c      	add	sp, #112	; 0x70
 800c658:	f85d eb04 	ldr.w	lr, [sp], #4
 800c65c:	b003      	add	sp, #12
 800c65e:	4770      	bx	lr
 800c660:	2000008c 	.word	0x2000008c
 800c664:	ffff0208 	.word	0xffff0208

0800c668 <strncmp>:
 800c668:	b510      	push	{r4, lr}
 800c66a:	b16a      	cbz	r2, 800c688 <strncmp+0x20>
 800c66c:	3901      	subs	r1, #1
 800c66e:	1884      	adds	r4, r0, r2
 800c670:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c674:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c678:	4293      	cmp	r3, r2
 800c67a:	d103      	bne.n	800c684 <strncmp+0x1c>
 800c67c:	42a0      	cmp	r0, r4
 800c67e:	d001      	beq.n	800c684 <strncmp+0x1c>
 800c680:	2b00      	cmp	r3, #0
 800c682:	d1f5      	bne.n	800c670 <strncmp+0x8>
 800c684:	1a98      	subs	r0, r3, r2
 800c686:	bd10      	pop	{r4, pc}
 800c688:	4610      	mov	r0, r2
 800c68a:	e7fc      	b.n	800c686 <strncmp+0x1e>

0800c68c <strncpy>:
 800c68c:	b570      	push	{r4, r5, r6, lr}
 800c68e:	3901      	subs	r1, #1
 800c690:	4604      	mov	r4, r0
 800c692:	b902      	cbnz	r2, 800c696 <strncpy+0xa>
 800c694:	bd70      	pop	{r4, r5, r6, pc}
 800c696:	4623      	mov	r3, r4
 800c698:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800c69c:	f803 5b01 	strb.w	r5, [r3], #1
 800c6a0:	1e56      	subs	r6, r2, #1
 800c6a2:	b92d      	cbnz	r5, 800c6b0 <strncpy+0x24>
 800c6a4:	4414      	add	r4, r2
 800c6a6:	42a3      	cmp	r3, r4
 800c6a8:	d0f4      	beq.n	800c694 <strncpy+0x8>
 800c6aa:	f803 5b01 	strb.w	r5, [r3], #1
 800c6ae:	e7fa      	b.n	800c6a6 <strncpy+0x1a>
 800c6b0:	461c      	mov	r4, r3
 800c6b2:	4632      	mov	r2, r6
 800c6b4:	e7ed      	b.n	800c692 <strncpy+0x6>
	...

0800c6b8 <strtok>:
 800c6b8:	4b13      	ldr	r3, [pc, #76]	; (800c708 <strtok+0x50>)
 800c6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6be:	681d      	ldr	r5, [r3, #0]
 800c6c0:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	460f      	mov	r7, r1
 800c6c6:	b9b4      	cbnz	r4, 800c6f6 <strtok+0x3e>
 800c6c8:	2050      	movs	r0, #80	; 0x50
 800c6ca:	f000 ff33 	bl	800d534 <malloc>
 800c6ce:	65a8      	str	r0, [r5, #88]	; 0x58
 800c6d0:	e9c0 4400 	strd	r4, r4, [r0]
 800c6d4:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c6d8:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c6dc:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c6e0:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c6e4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c6e8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c6ec:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c6f0:	6184      	str	r4, [r0, #24]
 800c6f2:	7704      	strb	r4, [r0, #28]
 800c6f4:	6244      	str	r4, [r0, #36]	; 0x24
 800c6f6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800c6f8:	4639      	mov	r1, r7
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c702:	f000 b803 	b.w	800c70c <__strtok_r>
 800c706:	bf00      	nop
 800c708:	2000008c 	.word	0x2000008c

0800c70c <__strtok_r>:
 800c70c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c70e:	b918      	cbnz	r0, 800c718 <__strtok_r+0xc>
 800c710:	6810      	ldr	r0, [r2, #0]
 800c712:	b908      	cbnz	r0, 800c718 <__strtok_r+0xc>
 800c714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c716:	4620      	mov	r0, r4
 800c718:	4604      	mov	r4, r0
 800c71a:	460f      	mov	r7, r1
 800c71c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c720:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c724:	b91e      	cbnz	r6, 800c72e <__strtok_r+0x22>
 800c726:	b96d      	cbnz	r5, 800c744 <__strtok_r+0x38>
 800c728:	6015      	str	r5, [r2, #0]
 800c72a:	4628      	mov	r0, r5
 800c72c:	e7f2      	b.n	800c714 <__strtok_r+0x8>
 800c72e:	42b5      	cmp	r5, r6
 800c730:	d1f6      	bne.n	800c720 <__strtok_r+0x14>
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1ef      	bne.n	800c716 <__strtok_r+0xa>
 800c736:	6014      	str	r4, [r2, #0]
 800c738:	7003      	strb	r3, [r0, #0]
 800c73a:	e7eb      	b.n	800c714 <__strtok_r+0x8>
 800c73c:	462b      	mov	r3, r5
 800c73e:	e00d      	b.n	800c75c <__strtok_r+0x50>
 800c740:	b926      	cbnz	r6, 800c74c <__strtok_r+0x40>
 800c742:	461c      	mov	r4, r3
 800c744:	4623      	mov	r3, r4
 800c746:	460f      	mov	r7, r1
 800c748:	f813 5b01 	ldrb.w	r5, [r3], #1
 800c74c:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c750:	42b5      	cmp	r5, r6
 800c752:	d1f5      	bne.n	800c740 <__strtok_r+0x34>
 800c754:	2d00      	cmp	r5, #0
 800c756:	d0f1      	beq.n	800c73c <__strtok_r+0x30>
 800c758:	2100      	movs	r1, #0
 800c75a:	7021      	strb	r1, [r4, #0]
 800c75c:	6013      	str	r3, [r2, #0]
 800c75e:	e7d9      	b.n	800c714 <__strtok_r+0x8>

0800c760 <_strtol_l.isra.0>:
 800c760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c764:	4680      	mov	r8, r0
 800c766:	4689      	mov	r9, r1
 800c768:	4692      	mov	sl, r2
 800c76a:	461e      	mov	r6, r3
 800c76c:	460f      	mov	r7, r1
 800c76e:	463d      	mov	r5, r7
 800c770:	9808      	ldr	r0, [sp, #32]
 800c772:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c776:	f000 fecb 	bl	800d510 <__locale_ctype_ptr_l>
 800c77a:	4420      	add	r0, r4
 800c77c:	7843      	ldrb	r3, [r0, #1]
 800c77e:	f013 0308 	ands.w	r3, r3, #8
 800c782:	d132      	bne.n	800c7ea <_strtol_l.isra.0+0x8a>
 800c784:	2c2d      	cmp	r4, #45	; 0x2d
 800c786:	d132      	bne.n	800c7ee <_strtol_l.isra.0+0x8e>
 800c788:	787c      	ldrb	r4, [r7, #1]
 800c78a:	1cbd      	adds	r5, r7, #2
 800c78c:	2201      	movs	r2, #1
 800c78e:	2e00      	cmp	r6, #0
 800c790:	d05d      	beq.n	800c84e <_strtol_l.isra.0+0xee>
 800c792:	2e10      	cmp	r6, #16
 800c794:	d109      	bne.n	800c7aa <_strtol_l.isra.0+0x4a>
 800c796:	2c30      	cmp	r4, #48	; 0x30
 800c798:	d107      	bne.n	800c7aa <_strtol_l.isra.0+0x4a>
 800c79a:	782b      	ldrb	r3, [r5, #0]
 800c79c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c7a0:	2b58      	cmp	r3, #88	; 0x58
 800c7a2:	d14f      	bne.n	800c844 <_strtol_l.isra.0+0xe4>
 800c7a4:	786c      	ldrb	r4, [r5, #1]
 800c7a6:	2610      	movs	r6, #16
 800c7a8:	3502      	adds	r5, #2
 800c7aa:	2a00      	cmp	r2, #0
 800c7ac:	bf14      	ite	ne
 800c7ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c7b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c7b6:	2700      	movs	r7, #0
 800c7b8:	fbb1 fcf6 	udiv	ip, r1, r6
 800c7bc:	4638      	mov	r0, r7
 800c7be:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c7c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c7c6:	2b09      	cmp	r3, #9
 800c7c8:	d817      	bhi.n	800c7fa <_strtol_l.isra.0+0x9a>
 800c7ca:	461c      	mov	r4, r3
 800c7cc:	42a6      	cmp	r6, r4
 800c7ce:	dd23      	ble.n	800c818 <_strtol_l.isra.0+0xb8>
 800c7d0:	1c7b      	adds	r3, r7, #1
 800c7d2:	d007      	beq.n	800c7e4 <_strtol_l.isra.0+0x84>
 800c7d4:	4584      	cmp	ip, r0
 800c7d6:	d31c      	bcc.n	800c812 <_strtol_l.isra.0+0xb2>
 800c7d8:	d101      	bne.n	800c7de <_strtol_l.isra.0+0x7e>
 800c7da:	45a6      	cmp	lr, r4
 800c7dc:	db19      	blt.n	800c812 <_strtol_l.isra.0+0xb2>
 800c7de:	fb00 4006 	mla	r0, r0, r6, r4
 800c7e2:	2701      	movs	r7, #1
 800c7e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7e8:	e7eb      	b.n	800c7c2 <_strtol_l.isra.0+0x62>
 800c7ea:	462f      	mov	r7, r5
 800c7ec:	e7bf      	b.n	800c76e <_strtol_l.isra.0+0xe>
 800c7ee:	2c2b      	cmp	r4, #43	; 0x2b
 800c7f0:	bf04      	itt	eq
 800c7f2:	1cbd      	addeq	r5, r7, #2
 800c7f4:	787c      	ldrbeq	r4, [r7, #1]
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	e7c9      	b.n	800c78e <_strtol_l.isra.0+0x2e>
 800c7fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c7fe:	2b19      	cmp	r3, #25
 800c800:	d801      	bhi.n	800c806 <_strtol_l.isra.0+0xa6>
 800c802:	3c37      	subs	r4, #55	; 0x37
 800c804:	e7e2      	b.n	800c7cc <_strtol_l.isra.0+0x6c>
 800c806:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c80a:	2b19      	cmp	r3, #25
 800c80c:	d804      	bhi.n	800c818 <_strtol_l.isra.0+0xb8>
 800c80e:	3c57      	subs	r4, #87	; 0x57
 800c810:	e7dc      	b.n	800c7cc <_strtol_l.isra.0+0x6c>
 800c812:	f04f 37ff 	mov.w	r7, #4294967295
 800c816:	e7e5      	b.n	800c7e4 <_strtol_l.isra.0+0x84>
 800c818:	1c7b      	adds	r3, r7, #1
 800c81a:	d108      	bne.n	800c82e <_strtol_l.isra.0+0xce>
 800c81c:	2322      	movs	r3, #34	; 0x22
 800c81e:	f8c8 3000 	str.w	r3, [r8]
 800c822:	4608      	mov	r0, r1
 800c824:	f1ba 0f00 	cmp.w	sl, #0
 800c828:	d107      	bne.n	800c83a <_strtol_l.isra.0+0xda>
 800c82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c82e:	b102      	cbz	r2, 800c832 <_strtol_l.isra.0+0xd2>
 800c830:	4240      	negs	r0, r0
 800c832:	f1ba 0f00 	cmp.w	sl, #0
 800c836:	d0f8      	beq.n	800c82a <_strtol_l.isra.0+0xca>
 800c838:	b10f      	cbz	r7, 800c83e <_strtol_l.isra.0+0xde>
 800c83a:	f105 39ff 	add.w	r9, r5, #4294967295
 800c83e:	f8ca 9000 	str.w	r9, [sl]
 800c842:	e7f2      	b.n	800c82a <_strtol_l.isra.0+0xca>
 800c844:	2430      	movs	r4, #48	; 0x30
 800c846:	2e00      	cmp	r6, #0
 800c848:	d1af      	bne.n	800c7aa <_strtol_l.isra.0+0x4a>
 800c84a:	2608      	movs	r6, #8
 800c84c:	e7ad      	b.n	800c7aa <_strtol_l.isra.0+0x4a>
 800c84e:	2c30      	cmp	r4, #48	; 0x30
 800c850:	d0a3      	beq.n	800c79a <_strtol_l.isra.0+0x3a>
 800c852:	260a      	movs	r6, #10
 800c854:	e7a9      	b.n	800c7aa <_strtol_l.isra.0+0x4a>
	...

0800c858 <strtol>:
 800c858:	4b08      	ldr	r3, [pc, #32]	; (800c87c <strtol+0x24>)
 800c85a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c85c:	681c      	ldr	r4, [r3, #0]
 800c85e:	4d08      	ldr	r5, [pc, #32]	; (800c880 <strtol+0x28>)
 800c860:	6a23      	ldr	r3, [r4, #32]
 800c862:	2b00      	cmp	r3, #0
 800c864:	bf08      	it	eq
 800c866:	462b      	moveq	r3, r5
 800c868:	9300      	str	r3, [sp, #0]
 800c86a:	4613      	mov	r3, r2
 800c86c:	460a      	mov	r2, r1
 800c86e:	4601      	mov	r1, r0
 800c870:	4620      	mov	r0, r4
 800c872:	f7ff ff75 	bl	800c760 <_strtol_l.isra.0>
 800c876:	b003      	add	sp, #12
 800c878:	bd30      	pop	{r4, r5, pc}
 800c87a:	bf00      	nop
 800c87c:	2000008c 	.word	0x2000008c
 800c880:	200000f0 	.word	0x200000f0

0800c884 <quorem>:
 800c884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c888:	6903      	ldr	r3, [r0, #16]
 800c88a:	690c      	ldr	r4, [r1, #16]
 800c88c:	42a3      	cmp	r3, r4
 800c88e:	4680      	mov	r8, r0
 800c890:	f2c0 8082 	blt.w	800c998 <quorem+0x114>
 800c894:	3c01      	subs	r4, #1
 800c896:	f101 0714 	add.w	r7, r1, #20
 800c89a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c89e:	f100 0614 	add.w	r6, r0, #20
 800c8a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c8a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c8aa:	eb06 030c 	add.w	r3, r6, ip
 800c8ae:	3501      	adds	r5, #1
 800c8b0:	eb07 090c 	add.w	r9, r7, ip
 800c8b4:	9301      	str	r3, [sp, #4]
 800c8b6:	fbb0 f5f5 	udiv	r5, r0, r5
 800c8ba:	b395      	cbz	r5, 800c922 <quorem+0x9e>
 800c8bc:	f04f 0a00 	mov.w	sl, #0
 800c8c0:	4638      	mov	r0, r7
 800c8c2:	46b6      	mov	lr, r6
 800c8c4:	46d3      	mov	fp, sl
 800c8c6:	f850 2b04 	ldr.w	r2, [r0], #4
 800c8ca:	b293      	uxth	r3, r2
 800c8cc:	fb05 a303 	mla	r3, r5, r3, sl
 800c8d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	ebab 0303 	sub.w	r3, fp, r3
 800c8da:	0c12      	lsrs	r2, r2, #16
 800c8dc:	f8de b000 	ldr.w	fp, [lr]
 800c8e0:	fb05 a202 	mla	r2, r5, r2, sl
 800c8e4:	fa13 f38b 	uxtah	r3, r3, fp
 800c8e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c8ec:	fa1f fb82 	uxth.w	fp, r2
 800c8f0:	f8de 2000 	ldr.w	r2, [lr]
 800c8f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c8f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8fc:	b29b      	uxth	r3, r3
 800c8fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c902:	4581      	cmp	r9, r0
 800c904:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c908:	f84e 3b04 	str.w	r3, [lr], #4
 800c90c:	d2db      	bcs.n	800c8c6 <quorem+0x42>
 800c90e:	f856 300c 	ldr.w	r3, [r6, ip]
 800c912:	b933      	cbnz	r3, 800c922 <quorem+0x9e>
 800c914:	9b01      	ldr	r3, [sp, #4]
 800c916:	3b04      	subs	r3, #4
 800c918:	429e      	cmp	r6, r3
 800c91a:	461a      	mov	r2, r3
 800c91c:	d330      	bcc.n	800c980 <quorem+0xfc>
 800c91e:	f8c8 4010 	str.w	r4, [r8, #16]
 800c922:	4640      	mov	r0, r8
 800c924:	f001 f840 	bl	800d9a8 <__mcmp>
 800c928:	2800      	cmp	r0, #0
 800c92a:	db25      	blt.n	800c978 <quorem+0xf4>
 800c92c:	3501      	adds	r5, #1
 800c92e:	4630      	mov	r0, r6
 800c930:	f04f 0c00 	mov.w	ip, #0
 800c934:	f857 2b04 	ldr.w	r2, [r7], #4
 800c938:	f8d0 e000 	ldr.w	lr, [r0]
 800c93c:	b293      	uxth	r3, r2
 800c93e:	ebac 0303 	sub.w	r3, ip, r3
 800c942:	0c12      	lsrs	r2, r2, #16
 800c944:	fa13 f38e 	uxtah	r3, r3, lr
 800c948:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c94c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c950:	b29b      	uxth	r3, r3
 800c952:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c956:	45b9      	cmp	r9, r7
 800c958:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c95c:	f840 3b04 	str.w	r3, [r0], #4
 800c960:	d2e8      	bcs.n	800c934 <quorem+0xb0>
 800c962:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c966:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c96a:	b92a      	cbnz	r2, 800c978 <quorem+0xf4>
 800c96c:	3b04      	subs	r3, #4
 800c96e:	429e      	cmp	r6, r3
 800c970:	461a      	mov	r2, r3
 800c972:	d30b      	bcc.n	800c98c <quorem+0x108>
 800c974:	f8c8 4010 	str.w	r4, [r8, #16]
 800c978:	4628      	mov	r0, r5
 800c97a:	b003      	add	sp, #12
 800c97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c980:	6812      	ldr	r2, [r2, #0]
 800c982:	3b04      	subs	r3, #4
 800c984:	2a00      	cmp	r2, #0
 800c986:	d1ca      	bne.n	800c91e <quorem+0x9a>
 800c988:	3c01      	subs	r4, #1
 800c98a:	e7c5      	b.n	800c918 <quorem+0x94>
 800c98c:	6812      	ldr	r2, [r2, #0]
 800c98e:	3b04      	subs	r3, #4
 800c990:	2a00      	cmp	r2, #0
 800c992:	d1ef      	bne.n	800c974 <quorem+0xf0>
 800c994:	3c01      	subs	r4, #1
 800c996:	e7ea      	b.n	800c96e <quorem+0xea>
 800c998:	2000      	movs	r0, #0
 800c99a:	e7ee      	b.n	800c97a <quorem+0xf6>
 800c99c:	0000      	movs	r0, r0
	...

0800c9a0 <_dtoa_r>:
 800c9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a4:	ec57 6b10 	vmov	r6, r7, d0
 800c9a8:	b097      	sub	sp, #92	; 0x5c
 800c9aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c9ac:	9106      	str	r1, [sp, #24]
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	920b      	str	r2, [sp, #44]	; 0x2c
 800c9b2:	9312      	str	r3, [sp, #72]	; 0x48
 800c9b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c9b8:	e9cd 6700 	strd	r6, r7, [sp]
 800c9bc:	b93d      	cbnz	r5, 800c9ce <_dtoa_r+0x2e>
 800c9be:	2010      	movs	r0, #16
 800c9c0:	f000 fdb8 	bl	800d534 <malloc>
 800c9c4:	6260      	str	r0, [r4, #36]	; 0x24
 800c9c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c9ca:	6005      	str	r5, [r0, #0]
 800c9cc:	60c5      	str	r5, [r0, #12]
 800c9ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9d0:	6819      	ldr	r1, [r3, #0]
 800c9d2:	b151      	cbz	r1, 800c9ea <_dtoa_r+0x4a>
 800c9d4:	685a      	ldr	r2, [r3, #4]
 800c9d6:	604a      	str	r2, [r1, #4]
 800c9d8:	2301      	movs	r3, #1
 800c9da:	4093      	lsls	r3, r2
 800c9dc:	608b      	str	r3, [r1, #8]
 800c9de:	4620      	mov	r0, r4
 800c9e0:	f000 fe01 	bl	800d5e6 <_Bfree>
 800c9e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	601a      	str	r2, [r3, #0]
 800c9ea:	1e3b      	subs	r3, r7, #0
 800c9ec:	bfbb      	ittet	lt
 800c9ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c9f2:	9301      	strlt	r3, [sp, #4]
 800c9f4:	2300      	movge	r3, #0
 800c9f6:	2201      	movlt	r2, #1
 800c9f8:	bfac      	ite	ge
 800c9fa:	f8c8 3000 	strge.w	r3, [r8]
 800c9fe:	f8c8 2000 	strlt.w	r2, [r8]
 800ca02:	4baf      	ldr	r3, [pc, #700]	; (800ccc0 <_dtoa_r+0x320>)
 800ca04:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ca08:	ea33 0308 	bics.w	r3, r3, r8
 800ca0c:	d114      	bne.n	800ca38 <_dtoa_r+0x98>
 800ca0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca10:	f242 730f 	movw	r3, #9999	; 0x270f
 800ca14:	6013      	str	r3, [r2, #0]
 800ca16:	9b00      	ldr	r3, [sp, #0]
 800ca18:	b923      	cbnz	r3, 800ca24 <_dtoa_r+0x84>
 800ca1a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	f000 8542 	beq.w	800d4a8 <_dtoa_r+0xb08>
 800ca24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca26:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ccd4 <_dtoa_r+0x334>
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	f000 8544 	beq.w	800d4b8 <_dtoa_r+0xb18>
 800ca30:	f10b 0303 	add.w	r3, fp, #3
 800ca34:	f000 bd3e 	b.w	800d4b4 <_dtoa_r+0xb14>
 800ca38:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	2300      	movs	r3, #0
 800ca40:	4630      	mov	r0, r6
 800ca42:	4639      	mov	r1, r7
 800ca44:	f7f4 f848 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca48:	4681      	mov	r9, r0
 800ca4a:	b168      	cbz	r0, 800ca68 <_dtoa_r+0xc8>
 800ca4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca4e:	2301      	movs	r3, #1
 800ca50:	6013      	str	r3, [r2, #0]
 800ca52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f000 8524 	beq.w	800d4a2 <_dtoa_r+0xb02>
 800ca5a:	4b9a      	ldr	r3, [pc, #616]	; (800ccc4 <_dtoa_r+0x324>)
 800ca5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca5e:	f103 3bff 	add.w	fp, r3, #4294967295
 800ca62:	6013      	str	r3, [r2, #0]
 800ca64:	f000 bd28 	b.w	800d4b8 <_dtoa_r+0xb18>
 800ca68:	aa14      	add	r2, sp, #80	; 0x50
 800ca6a:	a915      	add	r1, sp, #84	; 0x54
 800ca6c:	ec47 6b10 	vmov	d0, r6, r7
 800ca70:	4620      	mov	r0, r4
 800ca72:	f001 f810 	bl	800da96 <__d2b>
 800ca76:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ca7a:	9004      	str	r0, [sp, #16]
 800ca7c:	2d00      	cmp	r5, #0
 800ca7e:	d07c      	beq.n	800cb7a <_dtoa_r+0x1da>
 800ca80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ca84:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ca88:	46b2      	mov	sl, r6
 800ca8a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ca8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ca92:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ca96:	2200      	movs	r2, #0
 800ca98:	4b8b      	ldr	r3, [pc, #556]	; (800ccc8 <_dtoa_r+0x328>)
 800ca9a:	4650      	mov	r0, sl
 800ca9c:	4659      	mov	r1, fp
 800ca9e:	f7f3 fbfb 	bl	8000298 <__aeabi_dsub>
 800caa2:	a381      	add	r3, pc, #516	; (adr r3, 800cca8 <_dtoa_r+0x308>)
 800caa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa8:	f7f3 fdae 	bl	8000608 <__aeabi_dmul>
 800caac:	a380      	add	r3, pc, #512	; (adr r3, 800ccb0 <_dtoa_r+0x310>)
 800caae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab2:	f7f3 fbf3 	bl	800029c <__adddf3>
 800cab6:	4606      	mov	r6, r0
 800cab8:	4628      	mov	r0, r5
 800caba:	460f      	mov	r7, r1
 800cabc:	f7f3 fd3a 	bl	8000534 <__aeabi_i2d>
 800cac0:	a37d      	add	r3, pc, #500	; (adr r3, 800ccb8 <_dtoa_r+0x318>)
 800cac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac6:	f7f3 fd9f 	bl	8000608 <__aeabi_dmul>
 800caca:	4602      	mov	r2, r0
 800cacc:	460b      	mov	r3, r1
 800cace:	4630      	mov	r0, r6
 800cad0:	4639      	mov	r1, r7
 800cad2:	f7f3 fbe3 	bl	800029c <__adddf3>
 800cad6:	4606      	mov	r6, r0
 800cad8:	460f      	mov	r7, r1
 800cada:	f7f4 f845 	bl	8000b68 <__aeabi_d2iz>
 800cade:	2200      	movs	r2, #0
 800cae0:	4682      	mov	sl, r0
 800cae2:	2300      	movs	r3, #0
 800cae4:	4630      	mov	r0, r6
 800cae6:	4639      	mov	r1, r7
 800cae8:	f7f4 f800 	bl	8000aec <__aeabi_dcmplt>
 800caec:	b148      	cbz	r0, 800cb02 <_dtoa_r+0x162>
 800caee:	4650      	mov	r0, sl
 800caf0:	f7f3 fd20 	bl	8000534 <__aeabi_i2d>
 800caf4:	4632      	mov	r2, r6
 800caf6:	463b      	mov	r3, r7
 800caf8:	f7f3 ffee 	bl	8000ad8 <__aeabi_dcmpeq>
 800cafc:	b908      	cbnz	r0, 800cb02 <_dtoa_r+0x162>
 800cafe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb02:	f1ba 0f16 	cmp.w	sl, #22
 800cb06:	d859      	bhi.n	800cbbc <_dtoa_r+0x21c>
 800cb08:	4970      	ldr	r1, [pc, #448]	; (800cccc <_dtoa_r+0x32c>)
 800cb0a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cb0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb16:	f7f4 f807 	bl	8000b28 <__aeabi_dcmpgt>
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	d050      	beq.n	800cbc0 <_dtoa_r+0x220>
 800cb1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb22:	2300      	movs	r3, #0
 800cb24:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb28:	1b5d      	subs	r5, r3, r5
 800cb2a:	f1b5 0801 	subs.w	r8, r5, #1
 800cb2e:	bf49      	itett	mi
 800cb30:	f1c5 0301 	rsbmi	r3, r5, #1
 800cb34:	2300      	movpl	r3, #0
 800cb36:	9305      	strmi	r3, [sp, #20]
 800cb38:	f04f 0800 	movmi.w	r8, #0
 800cb3c:	bf58      	it	pl
 800cb3e:	9305      	strpl	r3, [sp, #20]
 800cb40:	f1ba 0f00 	cmp.w	sl, #0
 800cb44:	db3e      	blt.n	800cbc4 <_dtoa_r+0x224>
 800cb46:	2300      	movs	r3, #0
 800cb48:	44d0      	add	r8, sl
 800cb4a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cb4e:	9307      	str	r3, [sp, #28]
 800cb50:	9b06      	ldr	r3, [sp, #24]
 800cb52:	2b09      	cmp	r3, #9
 800cb54:	f200 8090 	bhi.w	800cc78 <_dtoa_r+0x2d8>
 800cb58:	2b05      	cmp	r3, #5
 800cb5a:	bfc4      	itt	gt
 800cb5c:	3b04      	subgt	r3, #4
 800cb5e:	9306      	strgt	r3, [sp, #24]
 800cb60:	9b06      	ldr	r3, [sp, #24]
 800cb62:	f1a3 0302 	sub.w	r3, r3, #2
 800cb66:	bfcc      	ite	gt
 800cb68:	2500      	movgt	r5, #0
 800cb6a:	2501      	movle	r5, #1
 800cb6c:	2b03      	cmp	r3, #3
 800cb6e:	f200 808f 	bhi.w	800cc90 <_dtoa_r+0x2f0>
 800cb72:	e8df f003 	tbb	[pc, r3]
 800cb76:	7f7d      	.short	0x7f7d
 800cb78:	7131      	.short	0x7131
 800cb7a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800cb7e:	441d      	add	r5, r3
 800cb80:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cb84:	2820      	cmp	r0, #32
 800cb86:	dd13      	ble.n	800cbb0 <_dtoa_r+0x210>
 800cb88:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cb8c:	9b00      	ldr	r3, [sp, #0]
 800cb8e:	fa08 f800 	lsl.w	r8, r8, r0
 800cb92:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cb96:	fa23 f000 	lsr.w	r0, r3, r0
 800cb9a:	ea48 0000 	orr.w	r0, r8, r0
 800cb9e:	f7f3 fcb9 	bl	8000514 <__aeabi_ui2d>
 800cba2:	2301      	movs	r3, #1
 800cba4:	4682      	mov	sl, r0
 800cba6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800cbaa:	3d01      	subs	r5, #1
 800cbac:	9313      	str	r3, [sp, #76]	; 0x4c
 800cbae:	e772      	b.n	800ca96 <_dtoa_r+0xf6>
 800cbb0:	9b00      	ldr	r3, [sp, #0]
 800cbb2:	f1c0 0020 	rsb	r0, r0, #32
 800cbb6:	fa03 f000 	lsl.w	r0, r3, r0
 800cbba:	e7f0      	b.n	800cb9e <_dtoa_r+0x1fe>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e7b1      	b.n	800cb24 <_dtoa_r+0x184>
 800cbc0:	900f      	str	r0, [sp, #60]	; 0x3c
 800cbc2:	e7b0      	b.n	800cb26 <_dtoa_r+0x186>
 800cbc4:	9b05      	ldr	r3, [sp, #20]
 800cbc6:	eba3 030a 	sub.w	r3, r3, sl
 800cbca:	9305      	str	r3, [sp, #20]
 800cbcc:	f1ca 0300 	rsb	r3, sl, #0
 800cbd0:	9307      	str	r3, [sp, #28]
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	930e      	str	r3, [sp, #56]	; 0x38
 800cbd6:	e7bb      	b.n	800cb50 <_dtoa_r+0x1b0>
 800cbd8:	2301      	movs	r3, #1
 800cbda:	930a      	str	r3, [sp, #40]	; 0x28
 800cbdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	dd59      	ble.n	800cc96 <_dtoa_r+0x2f6>
 800cbe2:	9302      	str	r3, [sp, #8]
 800cbe4:	4699      	mov	r9, r3
 800cbe6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cbe8:	2200      	movs	r2, #0
 800cbea:	6072      	str	r2, [r6, #4]
 800cbec:	2204      	movs	r2, #4
 800cbee:	f102 0014 	add.w	r0, r2, #20
 800cbf2:	4298      	cmp	r0, r3
 800cbf4:	6871      	ldr	r1, [r6, #4]
 800cbf6:	d953      	bls.n	800cca0 <_dtoa_r+0x300>
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f000 fcc0 	bl	800d57e <_Balloc>
 800cbfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc00:	6030      	str	r0, [r6, #0]
 800cc02:	f1b9 0f0e 	cmp.w	r9, #14
 800cc06:	f8d3 b000 	ldr.w	fp, [r3]
 800cc0a:	f200 80e6 	bhi.w	800cdda <_dtoa_r+0x43a>
 800cc0e:	2d00      	cmp	r5, #0
 800cc10:	f000 80e3 	beq.w	800cdda <_dtoa_r+0x43a>
 800cc14:	ed9d 7b00 	vldr	d7, [sp]
 800cc18:	f1ba 0f00 	cmp.w	sl, #0
 800cc1c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cc20:	dd74      	ble.n	800cd0c <_dtoa_r+0x36c>
 800cc22:	4a2a      	ldr	r2, [pc, #168]	; (800cccc <_dtoa_r+0x32c>)
 800cc24:	f00a 030f 	and.w	r3, sl, #15
 800cc28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cc2c:	ed93 7b00 	vldr	d7, [r3]
 800cc30:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cc34:	06f0      	lsls	r0, r6, #27
 800cc36:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cc3a:	d565      	bpl.n	800cd08 <_dtoa_r+0x368>
 800cc3c:	4b24      	ldr	r3, [pc, #144]	; (800ccd0 <_dtoa_r+0x330>)
 800cc3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cc42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc46:	f7f3 fe09 	bl	800085c <__aeabi_ddiv>
 800cc4a:	e9cd 0100 	strd	r0, r1, [sp]
 800cc4e:	f006 060f 	and.w	r6, r6, #15
 800cc52:	2503      	movs	r5, #3
 800cc54:	4f1e      	ldr	r7, [pc, #120]	; (800ccd0 <_dtoa_r+0x330>)
 800cc56:	e04c      	b.n	800ccf2 <_dtoa_r+0x352>
 800cc58:	2301      	movs	r3, #1
 800cc5a:	930a      	str	r3, [sp, #40]	; 0x28
 800cc5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc5e:	4453      	add	r3, sl
 800cc60:	f103 0901 	add.w	r9, r3, #1
 800cc64:	9302      	str	r3, [sp, #8]
 800cc66:	464b      	mov	r3, r9
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	bfb8      	it	lt
 800cc6c:	2301      	movlt	r3, #1
 800cc6e:	e7ba      	b.n	800cbe6 <_dtoa_r+0x246>
 800cc70:	2300      	movs	r3, #0
 800cc72:	e7b2      	b.n	800cbda <_dtoa_r+0x23a>
 800cc74:	2300      	movs	r3, #0
 800cc76:	e7f0      	b.n	800cc5a <_dtoa_r+0x2ba>
 800cc78:	2501      	movs	r5, #1
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	9306      	str	r3, [sp, #24]
 800cc7e:	950a      	str	r5, [sp, #40]	; 0x28
 800cc80:	f04f 33ff 	mov.w	r3, #4294967295
 800cc84:	9302      	str	r3, [sp, #8]
 800cc86:	4699      	mov	r9, r3
 800cc88:	2200      	movs	r2, #0
 800cc8a:	2312      	movs	r3, #18
 800cc8c:	920b      	str	r2, [sp, #44]	; 0x2c
 800cc8e:	e7aa      	b.n	800cbe6 <_dtoa_r+0x246>
 800cc90:	2301      	movs	r3, #1
 800cc92:	930a      	str	r3, [sp, #40]	; 0x28
 800cc94:	e7f4      	b.n	800cc80 <_dtoa_r+0x2e0>
 800cc96:	2301      	movs	r3, #1
 800cc98:	9302      	str	r3, [sp, #8]
 800cc9a:	4699      	mov	r9, r3
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	e7f5      	b.n	800cc8c <_dtoa_r+0x2ec>
 800cca0:	3101      	adds	r1, #1
 800cca2:	6071      	str	r1, [r6, #4]
 800cca4:	0052      	lsls	r2, r2, #1
 800cca6:	e7a2      	b.n	800cbee <_dtoa_r+0x24e>
 800cca8:	636f4361 	.word	0x636f4361
 800ccac:	3fd287a7 	.word	0x3fd287a7
 800ccb0:	8b60c8b3 	.word	0x8b60c8b3
 800ccb4:	3fc68a28 	.word	0x3fc68a28
 800ccb8:	509f79fb 	.word	0x509f79fb
 800ccbc:	3fd34413 	.word	0x3fd34413
 800ccc0:	7ff00000 	.word	0x7ff00000
 800ccc4:	0800e8d1 	.word	0x0800e8d1
 800ccc8:	3ff80000 	.word	0x3ff80000
 800cccc:	0800e938 	.word	0x0800e938
 800ccd0:	0800e910 	.word	0x0800e910
 800ccd4:	0800e8fd 	.word	0x0800e8fd
 800ccd8:	07f1      	lsls	r1, r6, #31
 800ccda:	d508      	bpl.n	800ccee <_dtoa_r+0x34e>
 800ccdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cce4:	f7f3 fc90 	bl	8000608 <__aeabi_dmul>
 800cce8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ccec:	3501      	adds	r5, #1
 800ccee:	1076      	asrs	r6, r6, #1
 800ccf0:	3708      	adds	r7, #8
 800ccf2:	2e00      	cmp	r6, #0
 800ccf4:	d1f0      	bne.n	800ccd8 <_dtoa_r+0x338>
 800ccf6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ccfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccfe:	f7f3 fdad 	bl	800085c <__aeabi_ddiv>
 800cd02:	e9cd 0100 	strd	r0, r1, [sp]
 800cd06:	e01a      	b.n	800cd3e <_dtoa_r+0x39e>
 800cd08:	2502      	movs	r5, #2
 800cd0a:	e7a3      	b.n	800cc54 <_dtoa_r+0x2b4>
 800cd0c:	f000 80a0 	beq.w	800ce50 <_dtoa_r+0x4b0>
 800cd10:	f1ca 0600 	rsb	r6, sl, #0
 800cd14:	4b9f      	ldr	r3, [pc, #636]	; (800cf94 <_dtoa_r+0x5f4>)
 800cd16:	4fa0      	ldr	r7, [pc, #640]	; (800cf98 <_dtoa_r+0x5f8>)
 800cd18:	f006 020f 	and.w	r2, r6, #15
 800cd1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cd28:	f7f3 fc6e 	bl	8000608 <__aeabi_dmul>
 800cd2c:	e9cd 0100 	strd	r0, r1, [sp]
 800cd30:	1136      	asrs	r6, r6, #4
 800cd32:	2300      	movs	r3, #0
 800cd34:	2502      	movs	r5, #2
 800cd36:	2e00      	cmp	r6, #0
 800cd38:	d17f      	bne.n	800ce3a <_dtoa_r+0x49a>
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d1e1      	bne.n	800cd02 <_dtoa_r+0x362>
 800cd3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f000 8087 	beq.w	800ce54 <_dtoa_r+0x4b4>
 800cd46:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	4b93      	ldr	r3, [pc, #588]	; (800cf9c <_dtoa_r+0x5fc>)
 800cd4e:	4630      	mov	r0, r6
 800cd50:	4639      	mov	r1, r7
 800cd52:	f7f3 fecb 	bl	8000aec <__aeabi_dcmplt>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d07c      	beq.n	800ce54 <_dtoa_r+0x4b4>
 800cd5a:	f1b9 0f00 	cmp.w	r9, #0
 800cd5e:	d079      	beq.n	800ce54 <_dtoa_r+0x4b4>
 800cd60:	9b02      	ldr	r3, [sp, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	dd35      	ble.n	800cdd2 <_dtoa_r+0x432>
 800cd66:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cd6a:	9308      	str	r3, [sp, #32]
 800cd6c:	4639      	mov	r1, r7
 800cd6e:	2200      	movs	r2, #0
 800cd70:	4b8b      	ldr	r3, [pc, #556]	; (800cfa0 <_dtoa_r+0x600>)
 800cd72:	4630      	mov	r0, r6
 800cd74:	f7f3 fc48 	bl	8000608 <__aeabi_dmul>
 800cd78:	e9cd 0100 	strd	r0, r1, [sp]
 800cd7c:	9f02      	ldr	r7, [sp, #8]
 800cd7e:	3501      	adds	r5, #1
 800cd80:	4628      	mov	r0, r5
 800cd82:	f7f3 fbd7 	bl	8000534 <__aeabi_i2d>
 800cd86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd8a:	f7f3 fc3d 	bl	8000608 <__aeabi_dmul>
 800cd8e:	2200      	movs	r2, #0
 800cd90:	4b84      	ldr	r3, [pc, #528]	; (800cfa4 <_dtoa_r+0x604>)
 800cd92:	f7f3 fa83 	bl	800029c <__adddf3>
 800cd96:	4605      	mov	r5, r0
 800cd98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cd9c:	2f00      	cmp	r7, #0
 800cd9e:	d15d      	bne.n	800ce5c <_dtoa_r+0x4bc>
 800cda0:	2200      	movs	r2, #0
 800cda2:	4b81      	ldr	r3, [pc, #516]	; (800cfa8 <_dtoa_r+0x608>)
 800cda4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cda8:	f7f3 fa76 	bl	8000298 <__aeabi_dsub>
 800cdac:	462a      	mov	r2, r5
 800cdae:	4633      	mov	r3, r6
 800cdb0:	e9cd 0100 	strd	r0, r1, [sp]
 800cdb4:	f7f3 feb8 	bl	8000b28 <__aeabi_dcmpgt>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	f040 8288 	bne.w	800d2ce <_dtoa_r+0x92e>
 800cdbe:	462a      	mov	r2, r5
 800cdc0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cdc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdc8:	f7f3 fe90 	bl	8000aec <__aeabi_dcmplt>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	f040 827c 	bne.w	800d2ca <_dtoa_r+0x92a>
 800cdd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cdd6:	e9cd 2300 	strd	r2, r3, [sp]
 800cdda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f2c0 8150 	blt.w	800d082 <_dtoa_r+0x6e2>
 800cde2:	f1ba 0f0e 	cmp.w	sl, #14
 800cde6:	f300 814c 	bgt.w	800d082 <_dtoa_r+0x6e2>
 800cdea:	4b6a      	ldr	r3, [pc, #424]	; (800cf94 <_dtoa_r+0x5f4>)
 800cdec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cdf0:	ed93 7b00 	vldr	d7, [r3]
 800cdf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cdfc:	f280 80d8 	bge.w	800cfb0 <_dtoa_r+0x610>
 800ce00:	f1b9 0f00 	cmp.w	r9, #0
 800ce04:	f300 80d4 	bgt.w	800cfb0 <_dtoa_r+0x610>
 800ce08:	f040 825e 	bne.w	800d2c8 <_dtoa_r+0x928>
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	4b66      	ldr	r3, [pc, #408]	; (800cfa8 <_dtoa_r+0x608>)
 800ce10:	ec51 0b17 	vmov	r0, r1, d7
 800ce14:	f7f3 fbf8 	bl	8000608 <__aeabi_dmul>
 800ce18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce1c:	f7f3 fe7a 	bl	8000b14 <__aeabi_dcmpge>
 800ce20:	464f      	mov	r7, r9
 800ce22:	464e      	mov	r6, r9
 800ce24:	2800      	cmp	r0, #0
 800ce26:	f040 8234 	bne.w	800d292 <_dtoa_r+0x8f2>
 800ce2a:	2331      	movs	r3, #49	; 0x31
 800ce2c:	f10b 0501 	add.w	r5, fp, #1
 800ce30:	f88b 3000 	strb.w	r3, [fp]
 800ce34:	f10a 0a01 	add.w	sl, sl, #1
 800ce38:	e22f      	b.n	800d29a <_dtoa_r+0x8fa>
 800ce3a:	07f2      	lsls	r2, r6, #31
 800ce3c:	d505      	bpl.n	800ce4a <_dtoa_r+0x4aa>
 800ce3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce42:	f7f3 fbe1 	bl	8000608 <__aeabi_dmul>
 800ce46:	3501      	adds	r5, #1
 800ce48:	2301      	movs	r3, #1
 800ce4a:	1076      	asrs	r6, r6, #1
 800ce4c:	3708      	adds	r7, #8
 800ce4e:	e772      	b.n	800cd36 <_dtoa_r+0x396>
 800ce50:	2502      	movs	r5, #2
 800ce52:	e774      	b.n	800cd3e <_dtoa_r+0x39e>
 800ce54:	f8cd a020 	str.w	sl, [sp, #32]
 800ce58:	464f      	mov	r7, r9
 800ce5a:	e791      	b.n	800cd80 <_dtoa_r+0x3e0>
 800ce5c:	4b4d      	ldr	r3, [pc, #308]	; (800cf94 <_dtoa_r+0x5f4>)
 800ce5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ce62:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ce66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d047      	beq.n	800cefc <_dtoa_r+0x55c>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	460b      	mov	r3, r1
 800ce70:	2000      	movs	r0, #0
 800ce72:	494e      	ldr	r1, [pc, #312]	; (800cfac <_dtoa_r+0x60c>)
 800ce74:	f7f3 fcf2 	bl	800085c <__aeabi_ddiv>
 800ce78:	462a      	mov	r2, r5
 800ce7a:	4633      	mov	r3, r6
 800ce7c:	f7f3 fa0c 	bl	8000298 <__aeabi_dsub>
 800ce80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ce84:	465d      	mov	r5, fp
 800ce86:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce8a:	f7f3 fe6d 	bl	8000b68 <__aeabi_d2iz>
 800ce8e:	4606      	mov	r6, r0
 800ce90:	f7f3 fb50 	bl	8000534 <__aeabi_i2d>
 800ce94:	4602      	mov	r2, r0
 800ce96:	460b      	mov	r3, r1
 800ce98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce9c:	f7f3 f9fc 	bl	8000298 <__aeabi_dsub>
 800cea0:	3630      	adds	r6, #48	; 0x30
 800cea2:	f805 6b01 	strb.w	r6, [r5], #1
 800cea6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ceaa:	e9cd 0100 	strd	r0, r1, [sp]
 800ceae:	f7f3 fe1d 	bl	8000aec <__aeabi_dcmplt>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	d163      	bne.n	800cf7e <_dtoa_r+0x5de>
 800ceb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ceba:	2000      	movs	r0, #0
 800cebc:	4937      	ldr	r1, [pc, #220]	; (800cf9c <_dtoa_r+0x5fc>)
 800cebe:	f7f3 f9eb 	bl	8000298 <__aeabi_dsub>
 800cec2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cec6:	f7f3 fe11 	bl	8000aec <__aeabi_dcmplt>
 800ceca:	2800      	cmp	r0, #0
 800cecc:	f040 80b7 	bne.w	800d03e <_dtoa_r+0x69e>
 800ced0:	eba5 030b 	sub.w	r3, r5, fp
 800ced4:	429f      	cmp	r7, r3
 800ced6:	f77f af7c 	ble.w	800cdd2 <_dtoa_r+0x432>
 800ceda:	2200      	movs	r2, #0
 800cedc:	4b30      	ldr	r3, [pc, #192]	; (800cfa0 <_dtoa_r+0x600>)
 800cede:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cee2:	f7f3 fb91 	bl	8000608 <__aeabi_dmul>
 800cee6:	2200      	movs	r2, #0
 800cee8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ceec:	4b2c      	ldr	r3, [pc, #176]	; (800cfa0 <_dtoa_r+0x600>)
 800ceee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cef2:	f7f3 fb89 	bl	8000608 <__aeabi_dmul>
 800cef6:	e9cd 0100 	strd	r0, r1, [sp]
 800cefa:	e7c4      	b.n	800ce86 <_dtoa_r+0x4e6>
 800cefc:	462a      	mov	r2, r5
 800cefe:	4633      	mov	r3, r6
 800cf00:	f7f3 fb82 	bl	8000608 <__aeabi_dmul>
 800cf04:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cf08:	eb0b 0507 	add.w	r5, fp, r7
 800cf0c:	465e      	mov	r6, fp
 800cf0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf12:	f7f3 fe29 	bl	8000b68 <__aeabi_d2iz>
 800cf16:	4607      	mov	r7, r0
 800cf18:	f7f3 fb0c 	bl	8000534 <__aeabi_i2d>
 800cf1c:	3730      	adds	r7, #48	; 0x30
 800cf1e:	4602      	mov	r2, r0
 800cf20:	460b      	mov	r3, r1
 800cf22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf26:	f7f3 f9b7 	bl	8000298 <__aeabi_dsub>
 800cf2a:	f806 7b01 	strb.w	r7, [r6], #1
 800cf2e:	42ae      	cmp	r6, r5
 800cf30:	e9cd 0100 	strd	r0, r1, [sp]
 800cf34:	f04f 0200 	mov.w	r2, #0
 800cf38:	d126      	bne.n	800cf88 <_dtoa_r+0x5e8>
 800cf3a:	4b1c      	ldr	r3, [pc, #112]	; (800cfac <_dtoa_r+0x60c>)
 800cf3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cf40:	f7f3 f9ac 	bl	800029c <__adddf3>
 800cf44:	4602      	mov	r2, r0
 800cf46:	460b      	mov	r3, r1
 800cf48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf4c:	f7f3 fdec 	bl	8000b28 <__aeabi_dcmpgt>
 800cf50:	2800      	cmp	r0, #0
 800cf52:	d174      	bne.n	800d03e <_dtoa_r+0x69e>
 800cf54:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cf58:	2000      	movs	r0, #0
 800cf5a:	4914      	ldr	r1, [pc, #80]	; (800cfac <_dtoa_r+0x60c>)
 800cf5c:	f7f3 f99c 	bl	8000298 <__aeabi_dsub>
 800cf60:	4602      	mov	r2, r0
 800cf62:	460b      	mov	r3, r1
 800cf64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf68:	f7f3 fdc0 	bl	8000aec <__aeabi_dcmplt>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	f43f af30 	beq.w	800cdd2 <_dtoa_r+0x432>
 800cf72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cf76:	2b30      	cmp	r3, #48	; 0x30
 800cf78:	f105 32ff 	add.w	r2, r5, #4294967295
 800cf7c:	d002      	beq.n	800cf84 <_dtoa_r+0x5e4>
 800cf7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cf82:	e04a      	b.n	800d01a <_dtoa_r+0x67a>
 800cf84:	4615      	mov	r5, r2
 800cf86:	e7f4      	b.n	800cf72 <_dtoa_r+0x5d2>
 800cf88:	4b05      	ldr	r3, [pc, #20]	; (800cfa0 <_dtoa_r+0x600>)
 800cf8a:	f7f3 fb3d 	bl	8000608 <__aeabi_dmul>
 800cf8e:	e9cd 0100 	strd	r0, r1, [sp]
 800cf92:	e7bc      	b.n	800cf0e <_dtoa_r+0x56e>
 800cf94:	0800e938 	.word	0x0800e938
 800cf98:	0800e910 	.word	0x0800e910
 800cf9c:	3ff00000 	.word	0x3ff00000
 800cfa0:	40240000 	.word	0x40240000
 800cfa4:	401c0000 	.word	0x401c0000
 800cfa8:	40140000 	.word	0x40140000
 800cfac:	3fe00000 	.word	0x3fe00000
 800cfb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cfb4:	465d      	mov	r5, fp
 800cfb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfba:	4630      	mov	r0, r6
 800cfbc:	4639      	mov	r1, r7
 800cfbe:	f7f3 fc4d 	bl	800085c <__aeabi_ddiv>
 800cfc2:	f7f3 fdd1 	bl	8000b68 <__aeabi_d2iz>
 800cfc6:	4680      	mov	r8, r0
 800cfc8:	f7f3 fab4 	bl	8000534 <__aeabi_i2d>
 800cfcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfd0:	f7f3 fb1a 	bl	8000608 <__aeabi_dmul>
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	4630      	mov	r0, r6
 800cfda:	4639      	mov	r1, r7
 800cfdc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cfe0:	f7f3 f95a 	bl	8000298 <__aeabi_dsub>
 800cfe4:	f805 6b01 	strb.w	r6, [r5], #1
 800cfe8:	eba5 060b 	sub.w	r6, r5, fp
 800cfec:	45b1      	cmp	r9, r6
 800cfee:	4602      	mov	r2, r0
 800cff0:	460b      	mov	r3, r1
 800cff2:	d139      	bne.n	800d068 <_dtoa_r+0x6c8>
 800cff4:	f7f3 f952 	bl	800029c <__adddf3>
 800cff8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cffc:	4606      	mov	r6, r0
 800cffe:	460f      	mov	r7, r1
 800d000:	f7f3 fd92 	bl	8000b28 <__aeabi_dcmpgt>
 800d004:	b9c8      	cbnz	r0, 800d03a <_dtoa_r+0x69a>
 800d006:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d00a:	4630      	mov	r0, r6
 800d00c:	4639      	mov	r1, r7
 800d00e:	f7f3 fd63 	bl	8000ad8 <__aeabi_dcmpeq>
 800d012:	b110      	cbz	r0, 800d01a <_dtoa_r+0x67a>
 800d014:	f018 0f01 	tst.w	r8, #1
 800d018:	d10f      	bne.n	800d03a <_dtoa_r+0x69a>
 800d01a:	9904      	ldr	r1, [sp, #16]
 800d01c:	4620      	mov	r0, r4
 800d01e:	f000 fae2 	bl	800d5e6 <_Bfree>
 800d022:	2300      	movs	r3, #0
 800d024:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d026:	702b      	strb	r3, [r5, #0]
 800d028:	f10a 0301 	add.w	r3, sl, #1
 800d02c:	6013      	str	r3, [r2, #0]
 800d02e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d030:	2b00      	cmp	r3, #0
 800d032:	f000 8241 	beq.w	800d4b8 <_dtoa_r+0xb18>
 800d036:	601d      	str	r5, [r3, #0]
 800d038:	e23e      	b.n	800d4b8 <_dtoa_r+0xb18>
 800d03a:	f8cd a020 	str.w	sl, [sp, #32]
 800d03e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d042:	2a39      	cmp	r2, #57	; 0x39
 800d044:	f105 33ff 	add.w	r3, r5, #4294967295
 800d048:	d108      	bne.n	800d05c <_dtoa_r+0x6bc>
 800d04a:	459b      	cmp	fp, r3
 800d04c:	d10a      	bne.n	800d064 <_dtoa_r+0x6c4>
 800d04e:	9b08      	ldr	r3, [sp, #32]
 800d050:	3301      	adds	r3, #1
 800d052:	9308      	str	r3, [sp, #32]
 800d054:	2330      	movs	r3, #48	; 0x30
 800d056:	f88b 3000 	strb.w	r3, [fp]
 800d05a:	465b      	mov	r3, fp
 800d05c:	781a      	ldrb	r2, [r3, #0]
 800d05e:	3201      	adds	r2, #1
 800d060:	701a      	strb	r2, [r3, #0]
 800d062:	e78c      	b.n	800cf7e <_dtoa_r+0x5de>
 800d064:	461d      	mov	r5, r3
 800d066:	e7ea      	b.n	800d03e <_dtoa_r+0x69e>
 800d068:	2200      	movs	r2, #0
 800d06a:	4b9b      	ldr	r3, [pc, #620]	; (800d2d8 <_dtoa_r+0x938>)
 800d06c:	f7f3 facc 	bl	8000608 <__aeabi_dmul>
 800d070:	2200      	movs	r2, #0
 800d072:	2300      	movs	r3, #0
 800d074:	4606      	mov	r6, r0
 800d076:	460f      	mov	r7, r1
 800d078:	f7f3 fd2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	d09a      	beq.n	800cfb6 <_dtoa_r+0x616>
 800d080:	e7cb      	b.n	800d01a <_dtoa_r+0x67a>
 800d082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d084:	2a00      	cmp	r2, #0
 800d086:	f000 808b 	beq.w	800d1a0 <_dtoa_r+0x800>
 800d08a:	9a06      	ldr	r2, [sp, #24]
 800d08c:	2a01      	cmp	r2, #1
 800d08e:	dc6e      	bgt.n	800d16e <_dtoa_r+0x7ce>
 800d090:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d092:	2a00      	cmp	r2, #0
 800d094:	d067      	beq.n	800d166 <_dtoa_r+0x7c6>
 800d096:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d09a:	9f07      	ldr	r7, [sp, #28]
 800d09c:	9d05      	ldr	r5, [sp, #20]
 800d09e:	9a05      	ldr	r2, [sp, #20]
 800d0a0:	2101      	movs	r1, #1
 800d0a2:	441a      	add	r2, r3
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	9205      	str	r2, [sp, #20]
 800d0a8:	4498      	add	r8, r3
 800d0aa:	f000 fb3c 	bl	800d726 <__i2b>
 800d0ae:	4606      	mov	r6, r0
 800d0b0:	2d00      	cmp	r5, #0
 800d0b2:	dd0c      	ble.n	800d0ce <_dtoa_r+0x72e>
 800d0b4:	f1b8 0f00 	cmp.w	r8, #0
 800d0b8:	dd09      	ble.n	800d0ce <_dtoa_r+0x72e>
 800d0ba:	4545      	cmp	r5, r8
 800d0bc:	9a05      	ldr	r2, [sp, #20]
 800d0be:	462b      	mov	r3, r5
 800d0c0:	bfa8      	it	ge
 800d0c2:	4643      	movge	r3, r8
 800d0c4:	1ad2      	subs	r2, r2, r3
 800d0c6:	9205      	str	r2, [sp, #20]
 800d0c8:	1aed      	subs	r5, r5, r3
 800d0ca:	eba8 0803 	sub.w	r8, r8, r3
 800d0ce:	9b07      	ldr	r3, [sp, #28]
 800d0d0:	b1eb      	cbz	r3, 800d10e <_dtoa_r+0x76e>
 800d0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d067      	beq.n	800d1a8 <_dtoa_r+0x808>
 800d0d8:	b18f      	cbz	r7, 800d0fe <_dtoa_r+0x75e>
 800d0da:	4631      	mov	r1, r6
 800d0dc:	463a      	mov	r2, r7
 800d0de:	4620      	mov	r0, r4
 800d0e0:	f000 fbc0 	bl	800d864 <__pow5mult>
 800d0e4:	9a04      	ldr	r2, [sp, #16]
 800d0e6:	4601      	mov	r1, r0
 800d0e8:	4606      	mov	r6, r0
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f000 fb24 	bl	800d738 <__multiply>
 800d0f0:	9904      	ldr	r1, [sp, #16]
 800d0f2:	9008      	str	r0, [sp, #32]
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	f000 fa76 	bl	800d5e6 <_Bfree>
 800d0fa:	9b08      	ldr	r3, [sp, #32]
 800d0fc:	9304      	str	r3, [sp, #16]
 800d0fe:	9b07      	ldr	r3, [sp, #28]
 800d100:	1bda      	subs	r2, r3, r7
 800d102:	d004      	beq.n	800d10e <_dtoa_r+0x76e>
 800d104:	9904      	ldr	r1, [sp, #16]
 800d106:	4620      	mov	r0, r4
 800d108:	f000 fbac 	bl	800d864 <__pow5mult>
 800d10c:	9004      	str	r0, [sp, #16]
 800d10e:	2101      	movs	r1, #1
 800d110:	4620      	mov	r0, r4
 800d112:	f000 fb08 	bl	800d726 <__i2b>
 800d116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d118:	4607      	mov	r7, r0
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	f000 81d0 	beq.w	800d4c0 <_dtoa_r+0xb20>
 800d120:	461a      	mov	r2, r3
 800d122:	4601      	mov	r1, r0
 800d124:	4620      	mov	r0, r4
 800d126:	f000 fb9d 	bl	800d864 <__pow5mult>
 800d12a:	9b06      	ldr	r3, [sp, #24]
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	4607      	mov	r7, r0
 800d130:	dc40      	bgt.n	800d1b4 <_dtoa_r+0x814>
 800d132:	9b00      	ldr	r3, [sp, #0]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d139      	bne.n	800d1ac <_dtoa_r+0x80c>
 800d138:	9b01      	ldr	r3, [sp, #4]
 800d13a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d136      	bne.n	800d1b0 <_dtoa_r+0x810>
 800d142:	9b01      	ldr	r3, [sp, #4]
 800d144:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d148:	0d1b      	lsrs	r3, r3, #20
 800d14a:	051b      	lsls	r3, r3, #20
 800d14c:	b12b      	cbz	r3, 800d15a <_dtoa_r+0x7ba>
 800d14e:	9b05      	ldr	r3, [sp, #20]
 800d150:	3301      	adds	r3, #1
 800d152:	9305      	str	r3, [sp, #20]
 800d154:	f108 0801 	add.w	r8, r8, #1
 800d158:	2301      	movs	r3, #1
 800d15a:	9307      	str	r3, [sp, #28]
 800d15c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d12a      	bne.n	800d1b8 <_dtoa_r+0x818>
 800d162:	2001      	movs	r0, #1
 800d164:	e030      	b.n	800d1c8 <_dtoa_r+0x828>
 800d166:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d168:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d16c:	e795      	b.n	800d09a <_dtoa_r+0x6fa>
 800d16e:	9b07      	ldr	r3, [sp, #28]
 800d170:	f109 37ff 	add.w	r7, r9, #4294967295
 800d174:	42bb      	cmp	r3, r7
 800d176:	bfbf      	itttt	lt
 800d178:	9b07      	ldrlt	r3, [sp, #28]
 800d17a:	9707      	strlt	r7, [sp, #28]
 800d17c:	1afa      	sublt	r2, r7, r3
 800d17e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d180:	bfbb      	ittet	lt
 800d182:	189b      	addlt	r3, r3, r2
 800d184:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d186:	1bdf      	subge	r7, r3, r7
 800d188:	2700      	movlt	r7, #0
 800d18a:	f1b9 0f00 	cmp.w	r9, #0
 800d18e:	bfb5      	itete	lt
 800d190:	9b05      	ldrlt	r3, [sp, #20]
 800d192:	9d05      	ldrge	r5, [sp, #20]
 800d194:	eba3 0509 	sublt.w	r5, r3, r9
 800d198:	464b      	movge	r3, r9
 800d19a:	bfb8      	it	lt
 800d19c:	2300      	movlt	r3, #0
 800d19e:	e77e      	b.n	800d09e <_dtoa_r+0x6fe>
 800d1a0:	9f07      	ldr	r7, [sp, #28]
 800d1a2:	9d05      	ldr	r5, [sp, #20]
 800d1a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d1a6:	e783      	b.n	800d0b0 <_dtoa_r+0x710>
 800d1a8:	9a07      	ldr	r2, [sp, #28]
 800d1aa:	e7ab      	b.n	800d104 <_dtoa_r+0x764>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	e7d4      	b.n	800d15a <_dtoa_r+0x7ba>
 800d1b0:	9b00      	ldr	r3, [sp, #0]
 800d1b2:	e7d2      	b.n	800d15a <_dtoa_r+0x7ba>
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	9307      	str	r3, [sp, #28]
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d1be:	6918      	ldr	r0, [r3, #16]
 800d1c0:	f000 fa63 	bl	800d68a <__hi0bits>
 800d1c4:	f1c0 0020 	rsb	r0, r0, #32
 800d1c8:	4440      	add	r0, r8
 800d1ca:	f010 001f 	ands.w	r0, r0, #31
 800d1ce:	d047      	beq.n	800d260 <_dtoa_r+0x8c0>
 800d1d0:	f1c0 0320 	rsb	r3, r0, #32
 800d1d4:	2b04      	cmp	r3, #4
 800d1d6:	dd3b      	ble.n	800d250 <_dtoa_r+0x8b0>
 800d1d8:	9b05      	ldr	r3, [sp, #20]
 800d1da:	f1c0 001c 	rsb	r0, r0, #28
 800d1de:	4403      	add	r3, r0
 800d1e0:	9305      	str	r3, [sp, #20]
 800d1e2:	4405      	add	r5, r0
 800d1e4:	4480      	add	r8, r0
 800d1e6:	9b05      	ldr	r3, [sp, #20]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	dd05      	ble.n	800d1f8 <_dtoa_r+0x858>
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	9904      	ldr	r1, [sp, #16]
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f000 fb85 	bl	800d900 <__lshift>
 800d1f6:	9004      	str	r0, [sp, #16]
 800d1f8:	f1b8 0f00 	cmp.w	r8, #0
 800d1fc:	dd05      	ble.n	800d20a <_dtoa_r+0x86a>
 800d1fe:	4639      	mov	r1, r7
 800d200:	4642      	mov	r2, r8
 800d202:	4620      	mov	r0, r4
 800d204:	f000 fb7c 	bl	800d900 <__lshift>
 800d208:	4607      	mov	r7, r0
 800d20a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d20c:	b353      	cbz	r3, 800d264 <_dtoa_r+0x8c4>
 800d20e:	4639      	mov	r1, r7
 800d210:	9804      	ldr	r0, [sp, #16]
 800d212:	f000 fbc9 	bl	800d9a8 <__mcmp>
 800d216:	2800      	cmp	r0, #0
 800d218:	da24      	bge.n	800d264 <_dtoa_r+0x8c4>
 800d21a:	2300      	movs	r3, #0
 800d21c:	220a      	movs	r2, #10
 800d21e:	9904      	ldr	r1, [sp, #16]
 800d220:	4620      	mov	r0, r4
 800d222:	f000 f9f7 	bl	800d614 <__multadd>
 800d226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d228:	9004      	str	r0, [sp, #16]
 800d22a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f000 814d 	beq.w	800d4ce <_dtoa_r+0xb2e>
 800d234:	2300      	movs	r3, #0
 800d236:	4631      	mov	r1, r6
 800d238:	220a      	movs	r2, #10
 800d23a:	4620      	mov	r0, r4
 800d23c:	f000 f9ea 	bl	800d614 <__multadd>
 800d240:	9b02      	ldr	r3, [sp, #8]
 800d242:	2b00      	cmp	r3, #0
 800d244:	4606      	mov	r6, r0
 800d246:	dc4f      	bgt.n	800d2e8 <_dtoa_r+0x948>
 800d248:	9b06      	ldr	r3, [sp, #24]
 800d24a:	2b02      	cmp	r3, #2
 800d24c:	dd4c      	ble.n	800d2e8 <_dtoa_r+0x948>
 800d24e:	e011      	b.n	800d274 <_dtoa_r+0x8d4>
 800d250:	d0c9      	beq.n	800d1e6 <_dtoa_r+0x846>
 800d252:	9a05      	ldr	r2, [sp, #20]
 800d254:	331c      	adds	r3, #28
 800d256:	441a      	add	r2, r3
 800d258:	9205      	str	r2, [sp, #20]
 800d25a:	441d      	add	r5, r3
 800d25c:	4498      	add	r8, r3
 800d25e:	e7c2      	b.n	800d1e6 <_dtoa_r+0x846>
 800d260:	4603      	mov	r3, r0
 800d262:	e7f6      	b.n	800d252 <_dtoa_r+0x8b2>
 800d264:	f1b9 0f00 	cmp.w	r9, #0
 800d268:	dc38      	bgt.n	800d2dc <_dtoa_r+0x93c>
 800d26a:	9b06      	ldr	r3, [sp, #24]
 800d26c:	2b02      	cmp	r3, #2
 800d26e:	dd35      	ble.n	800d2dc <_dtoa_r+0x93c>
 800d270:	f8cd 9008 	str.w	r9, [sp, #8]
 800d274:	9b02      	ldr	r3, [sp, #8]
 800d276:	b963      	cbnz	r3, 800d292 <_dtoa_r+0x8f2>
 800d278:	4639      	mov	r1, r7
 800d27a:	2205      	movs	r2, #5
 800d27c:	4620      	mov	r0, r4
 800d27e:	f000 f9c9 	bl	800d614 <__multadd>
 800d282:	4601      	mov	r1, r0
 800d284:	4607      	mov	r7, r0
 800d286:	9804      	ldr	r0, [sp, #16]
 800d288:	f000 fb8e 	bl	800d9a8 <__mcmp>
 800d28c:	2800      	cmp	r0, #0
 800d28e:	f73f adcc 	bgt.w	800ce2a <_dtoa_r+0x48a>
 800d292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d294:	465d      	mov	r5, fp
 800d296:	ea6f 0a03 	mvn.w	sl, r3
 800d29a:	f04f 0900 	mov.w	r9, #0
 800d29e:	4639      	mov	r1, r7
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f000 f9a0 	bl	800d5e6 <_Bfree>
 800d2a6:	2e00      	cmp	r6, #0
 800d2a8:	f43f aeb7 	beq.w	800d01a <_dtoa_r+0x67a>
 800d2ac:	f1b9 0f00 	cmp.w	r9, #0
 800d2b0:	d005      	beq.n	800d2be <_dtoa_r+0x91e>
 800d2b2:	45b1      	cmp	r9, r6
 800d2b4:	d003      	beq.n	800d2be <_dtoa_r+0x91e>
 800d2b6:	4649      	mov	r1, r9
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	f000 f994 	bl	800d5e6 <_Bfree>
 800d2be:	4631      	mov	r1, r6
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f000 f990 	bl	800d5e6 <_Bfree>
 800d2c6:	e6a8      	b.n	800d01a <_dtoa_r+0x67a>
 800d2c8:	2700      	movs	r7, #0
 800d2ca:	463e      	mov	r6, r7
 800d2cc:	e7e1      	b.n	800d292 <_dtoa_r+0x8f2>
 800d2ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d2d2:	463e      	mov	r6, r7
 800d2d4:	e5a9      	b.n	800ce2a <_dtoa_r+0x48a>
 800d2d6:	bf00      	nop
 800d2d8:	40240000 	.word	0x40240000
 800d2dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2de:	f8cd 9008 	str.w	r9, [sp, #8]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	f000 80fa 	beq.w	800d4dc <_dtoa_r+0xb3c>
 800d2e8:	2d00      	cmp	r5, #0
 800d2ea:	dd05      	ble.n	800d2f8 <_dtoa_r+0x958>
 800d2ec:	4631      	mov	r1, r6
 800d2ee:	462a      	mov	r2, r5
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f000 fb05 	bl	800d900 <__lshift>
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	9b07      	ldr	r3, [sp, #28]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d04c      	beq.n	800d398 <_dtoa_r+0x9f8>
 800d2fe:	6871      	ldr	r1, [r6, #4]
 800d300:	4620      	mov	r0, r4
 800d302:	f000 f93c 	bl	800d57e <_Balloc>
 800d306:	6932      	ldr	r2, [r6, #16]
 800d308:	3202      	adds	r2, #2
 800d30a:	4605      	mov	r5, r0
 800d30c:	0092      	lsls	r2, r2, #2
 800d30e:	f106 010c 	add.w	r1, r6, #12
 800d312:	300c      	adds	r0, #12
 800d314:	f000 f928 	bl	800d568 <memcpy>
 800d318:	2201      	movs	r2, #1
 800d31a:	4629      	mov	r1, r5
 800d31c:	4620      	mov	r0, r4
 800d31e:	f000 faef 	bl	800d900 <__lshift>
 800d322:	9b00      	ldr	r3, [sp, #0]
 800d324:	f8cd b014 	str.w	fp, [sp, #20]
 800d328:	f003 0301 	and.w	r3, r3, #1
 800d32c:	46b1      	mov	r9, r6
 800d32e:	9307      	str	r3, [sp, #28]
 800d330:	4606      	mov	r6, r0
 800d332:	4639      	mov	r1, r7
 800d334:	9804      	ldr	r0, [sp, #16]
 800d336:	f7ff faa5 	bl	800c884 <quorem>
 800d33a:	4649      	mov	r1, r9
 800d33c:	4605      	mov	r5, r0
 800d33e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d342:	9804      	ldr	r0, [sp, #16]
 800d344:	f000 fb30 	bl	800d9a8 <__mcmp>
 800d348:	4632      	mov	r2, r6
 800d34a:	9000      	str	r0, [sp, #0]
 800d34c:	4639      	mov	r1, r7
 800d34e:	4620      	mov	r0, r4
 800d350:	f000 fb44 	bl	800d9dc <__mdiff>
 800d354:	68c3      	ldr	r3, [r0, #12]
 800d356:	4602      	mov	r2, r0
 800d358:	bb03      	cbnz	r3, 800d39c <_dtoa_r+0x9fc>
 800d35a:	4601      	mov	r1, r0
 800d35c:	9008      	str	r0, [sp, #32]
 800d35e:	9804      	ldr	r0, [sp, #16]
 800d360:	f000 fb22 	bl	800d9a8 <__mcmp>
 800d364:	9a08      	ldr	r2, [sp, #32]
 800d366:	4603      	mov	r3, r0
 800d368:	4611      	mov	r1, r2
 800d36a:	4620      	mov	r0, r4
 800d36c:	9308      	str	r3, [sp, #32]
 800d36e:	f000 f93a 	bl	800d5e6 <_Bfree>
 800d372:	9b08      	ldr	r3, [sp, #32]
 800d374:	b9a3      	cbnz	r3, 800d3a0 <_dtoa_r+0xa00>
 800d376:	9a06      	ldr	r2, [sp, #24]
 800d378:	b992      	cbnz	r2, 800d3a0 <_dtoa_r+0xa00>
 800d37a:	9a07      	ldr	r2, [sp, #28]
 800d37c:	b982      	cbnz	r2, 800d3a0 <_dtoa_r+0xa00>
 800d37e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d382:	d029      	beq.n	800d3d8 <_dtoa_r+0xa38>
 800d384:	9b00      	ldr	r3, [sp, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	dd01      	ble.n	800d38e <_dtoa_r+0x9ee>
 800d38a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d38e:	9b05      	ldr	r3, [sp, #20]
 800d390:	1c5d      	adds	r5, r3, #1
 800d392:	f883 8000 	strb.w	r8, [r3]
 800d396:	e782      	b.n	800d29e <_dtoa_r+0x8fe>
 800d398:	4630      	mov	r0, r6
 800d39a:	e7c2      	b.n	800d322 <_dtoa_r+0x982>
 800d39c:	2301      	movs	r3, #1
 800d39e:	e7e3      	b.n	800d368 <_dtoa_r+0x9c8>
 800d3a0:	9a00      	ldr	r2, [sp, #0]
 800d3a2:	2a00      	cmp	r2, #0
 800d3a4:	db04      	blt.n	800d3b0 <_dtoa_r+0xa10>
 800d3a6:	d125      	bne.n	800d3f4 <_dtoa_r+0xa54>
 800d3a8:	9a06      	ldr	r2, [sp, #24]
 800d3aa:	bb1a      	cbnz	r2, 800d3f4 <_dtoa_r+0xa54>
 800d3ac:	9a07      	ldr	r2, [sp, #28]
 800d3ae:	bb0a      	cbnz	r2, 800d3f4 <_dtoa_r+0xa54>
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	ddec      	ble.n	800d38e <_dtoa_r+0x9ee>
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	9904      	ldr	r1, [sp, #16]
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f000 faa1 	bl	800d900 <__lshift>
 800d3be:	4639      	mov	r1, r7
 800d3c0:	9004      	str	r0, [sp, #16]
 800d3c2:	f000 faf1 	bl	800d9a8 <__mcmp>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	dc03      	bgt.n	800d3d2 <_dtoa_r+0xa32>
 800d3ca:	d1e0      	bne.n	800d38e <_dtoa_r+0x9ee>
 800d3cc:	f018 0f01 	tst.w	r8, #1
 800d3d0:	d0dd      	beq.n	800d38e <_dtoa_r+0x9ee>
 800d3d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d3d6:	d1d8      	bne.n	800d38a <_dtoa_r+0x9ea>
 800d3d8:	9b05      	ldr	r3, [sp, #20]
 800d3da:	9a05      	ldr	r2, [sp, #20]
 800d3dc:	1c5d      	adds	r5, r3, #1
 800d3de:	2339      	movs	r3, #57	; 0x39
 800d3e0:	7013      	strb	r3, [r2, #0]
 800d3e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d3e6:	2b39      	cmp	r3, #57	; 0x39
 800d3e8:	f105 32ff 	add.w	r2, r5, #4294967295
 800d3ec:	d04f      	beq.n	800d48e <_dtoa_r+0xaee>
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	7013      	strb	r3, [r2, #0]
 800d3f2:	e754      	b.n	800d29e <_dtoa_r+0x8fe>
 800d3f4:	9a05      	ldr	r2, [sp, #20]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	f102 0501 	add.w	r5, r2, #1
 800d3fc:	dd06      	ble.n	800d40c <_dtoa_r+0xa6c>
 800d3fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d402:	d0e9      	beq.n	800d3d8 <_dtoa_r+0xa38>
 800d404:	f108 0801 	add.w	r8, r8, #1
 800d408:	9b05      	ldr	r3, [sp, #20]
 800d40a:	e7c2      	b.n	800d392 <_dtoa_r+0x9f2>
 800d40c:	9a02      	ldr	r2, [sp, #8]
 800d40e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d412:	eba5 030b 	sub.w	r3, r5, fp
 800d416:	4293      	cmp	r3, r2
 800d418:	d021      	beq.n	800d45e <_dtoa_r+0xabe>
 800d41a:	2300      	movs	r3, #0
 800d41c:	220a      	movs	r2, #10
 800d41e:	9904      	ldr	r1, [sp, #16]
 800d420:	4620      	mov	r0, r4
 800d422:	f000 f8f7 	bl	800d614 <__multadd>
 800d426:	45b1      	cmp	r9, r6
 800d428:	9004      	str	r0, [sp, #16]
 800d42a:	f04f 0300 	mov.w	r3, #0
 800d42e:	f04f 020a 	mov.w	r2, #10
 800d432:	4649      	mov	r1, r9
 800d434:	4620      	mov	r0, r4
 800d436:	d105      	bne.n	800d444 <_dtoa_r+0xaa4>
 800d438:	f000 f8ec 	bl	800d614 <__multadd>
 800d43c:	4681      	mov	r9, r0
 800d43e:	4606      	mov	r6, r0
 800d440:	9505      	str	r5, [sp, #20]
 800d442:	e776      	b.n	800d332 <_dtoa_r+0x992>
 800d444:	f000 f8e6 	bl	800d614 <__multadd>
 800d448:	4631      	mov	r1, r6
 800d44a:	4681      	mov	r9, r0
 800d44c:	2300      	movs	r3, #0
 800d44e:	220a      	movs	r2, #10
 800d450:	4620      	mov	r0, r4
 800d452:	f000 f8df 	bl	800d614 <__multadd>
 800d456:	4606      	mov	r6, r0
 800d458:	e7f2      	b.n	800d440 <_dtoa_r+0xaa0>
 800d45a:	f04f 0900 	mov.w	r9, #0
 800d45e:	2201      	movs	r2, #1
 800d460:	9904      	ldr	r1, [sp, #16]
 800d462:	4620      	mov	r0, r4
 800d464:	f000 fa4c 	bl	800d900 <__lshift>
 800d468:	4639      	mov	r1, r7
 800d46a:	9004      	str	r0, [sp, #16]
 800d46c:	f000 fa9c 	bl	800d9a8 <__mcmp>
 800d470:	2800      	cmp	r0, #0
 800d472:	dcb6      	bgt.n	800d3e2 <_dtoa_r+0xa42>
 800d474:	d102      	bne.n	800d47c <_dtoa_r+0xadc>
 800d476:	f018 0f01 	tst.w	r8, #1
 800d47a:	d1b2      	bne.n	800d3e2 <_dtoa_r+0xa42>
 800d47c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d480:	2b30      	cmp	r3, #48	; 0x30
 800d482:	f105 32ff 	add.w	r2, r5, #4294967295
 800d486:	f47f af0a 	bne.w	800d29e <_dtoa_r+0x8fe>
 800d48a:	4615      	mov	r5, r2
 800d48c:	e7f6      	b.n	800d47c <_dtoa_r+0xadc>
 800d48e:	4593      	cmp	fp, r2
 800d490:	d105      	bne.n	800d49e <_dtoa_r+0xafe>
 800d492:	2331      	movs	r3, #49	; 0x31
 800d494:	f10a 0a01 	add.w	sl, sl, #1
 800d498:	f88b 3000 	strb.w	r3, [fp]
 800d49c:	e6ff      	b.n	800d29e <_dtoa_r+0x8fe>
 800d49e:	4615      	mov	r5, r2
 800d4a0:	e79f      	b.n	800d3e2 <_dtoa_r+0xa42>
 800d4a2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d508 <_dtoa_r+0xb68>
 800d4a6:	e007      	b.n	800d4b8 <_dtoa_r+0xb18>
 800d4a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4aa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d50c <_dtoa_r+0xb6c>
 800d4ae:	b11b      	cbz	r3, 800d4b8 <_dtoa_r+0xb18>
 800d4b0:	f10b 0308 	add.w	r3, fp, #8
 800d4b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d4b6:	6013      	str	r3, [r2, #0]
 800d4b8:	4658      	mov	r0, fp
 800d4ba:	b017      	add	sp, #92	; 0x5c
 800d4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4c0:	9b06      	ldr	r3, [sp, #24]
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	f77f ae35 	ble.w	800d132 <_dtoa_r+0x792>
 800d4c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4ca:	9307      	str	r3, [sp, #28]
 800d4cc:	e649      	b.n	800d162 <_dtoa_r+0x7c2>
 800d4ce:	9b02      	ldr	r3, [sp, #8]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	dc03      	bgt.n	800d4dc <_dtoa_r+0xb3c>
 800d4d4:	9b06      	ldr	r3, [sp, #24]
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	f73f aecc 	bgt.w	800d274 <_dtoa_r+0x8d4>
 800d4dc:	465d      	mov	r5, fp
 800d4de:	4639      	mov	r1, r7
 800d4e0:	9804      	ldr	r0, [sp, #16]
 800d4e2:	f7ff f9cf 	bl	800c884 <quorem>
 800d4e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d4ea:	f805 8b01 	strb.w	r8, [r5], #1
 800d4ee:	9a02      	ldr	r2, [sp, #8]
 800d4f0:	eba5 030b 	sub.w	r3, r5, fp
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	ddb0      	ble.n	800d45a <_dtoa_r+0xaba>
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	220a      	movs	r2, #10
 800d4fc:	9904      	ldr	r1, [sp, #16]
 800d4fe:	4620      	mov	r0, r4
 800d500:	f000 f888 	bl	800d614 <__multadd>
 800d504:	9004      	str	r0, [sp, #16]
 800d506:	e7ea      	b.n	800d4de <_dtoa_r+0xb3e>
 800d508:	0800e8d0 	.word	0x0800e8d0
 800d50c:	0800e8f4 	.word	0x0800e8f4

0800d510 <__locale_ctype_ptr_l>:
 800d510:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d514:	4770      	bx	lr
	...

0800d518 <_localeconv_r>:
 800d518:	4b04      	ldr	r3, [pc, #16]	; (800d52c <_localeconv_r+0x14>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	6a18      	ldr	r0, [r3, #32]
 800d51e:	4b04      	ldr	r3, [pc, #16]	; (800d530 <_localeconv_r+0x18>)
 800d520:	2800      	cmp	r0, #0
 800d522:	bf08      	it	eq
 800d524:	4618      	moveq	r0, r3
 800d526:	30f0      	adds	r0, #240	; 0xf0
 800d528:	4770      	bx	lr
 800d52a:	bf00      	nop
 800d52c:	2000008c 	.word	0x2000008c
 800d530:	200000f0 	.word	0x200000f0

0800d534 <malloc>:
 800d534:	4b02      	ldr	r3, [pc, #8]	; (800d540 <malloc+0xc>)
 800d536:	4601      	mov	r1, r0
 800d538:	6818      	ldr	r0, [r3, #0]
 800d53a:	f000 bb57 	b.w	800dbec <_malloc_r>
 800d53e:	bf00      	nop
 800d540:	2000008c 	.word	0x2000008c

0800d544 <__ascii_mbtowc>:
 800d544:	b082      	sub	sp, #8
 800d546:	b901      	cbnz	r1, 800d54a <__ascii_mbtowc+0x6>
 800d548:	a901      	add	r1, sp, #4
 800d54a:	b142      	cbz	r2, 800d55e <__ascii_mbtowc+0x1a>
 800d54c:	b14b      	cbz	r3, 800d562 <__ascii_mbtowc+0x1e>
 800d54e:	7813      	ldrb	r3, [r2, #0]
 800d550:	600b      	str	r3, [r1, #0]
 800d552:	7812      	ldrb	r2, [r2, #0]
 800d554:	1c10      	adds	r0, r2, #0
 800d556:	bf18      	it	ne
 800d558:	2001      	movne	r0, #1
 800d55a:	b002      	add	sp, #8
 800d55c:	4770      	bx	lr
 800d55e:	4610      	mov	r0, r2
 800d560:	e7fb      	b.n	800d55a <__ascii_mbtowc+0x16>
 800d562:	f06f 0001 	mvn.w	r0, #1
 800d566:	e7f8      	b.n	800d55a <__ascii_mbtowc+0x16>

0800d568 <memcpy>:
 800d568:	b510      	push	{r4, lr}
 800d56a:	1e43      	subs	r3, r0, #1
 800d56c:	440a      	add	r2, r1
 800d56e:	4291      	cmp	r1, r2
 800d570:	d100      	bne.n	800d574 <memcpy+0xc>
 800d572:	bd10      	pop	{r4, pc}
 800d574:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d578:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d57c:	e7f7      	b.n	800d56e <memcpy+0x6>

0800d57e <_Balloc>:
 800d57e:	b570      	push	{r4, r5, r6, lr}
 800d580:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d582:	4604      	mov	r4, r0
 800d584:	460e      	mov	r6, r1
 800d586:	b93d      	cbnz	r5, 800d598 <_Balloc+0x1a>
 800d588:	2010      	movs	r0, #16
 800d58a:	f7ff ffd3 	bl	800d534 <malloc>
 800d58e:	6260      	str	r0, [r4, #36]	; 0x24
 800d590:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d594:	6005      	str	r5, [r0, #0]
 800d596:	60c5      	str	r5, [r0, #12]
 800d598:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d59a:	68eb      	ldr	r3, [r5, #12]
 800d59c:	b183      	cbz	r3, 800d5c0 <_Balloc+0x42>
 800d59e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d5a6:	b9b8      	cbnz	r0, 800d5d8 <_Balloc+0x5a>
 800d5a8:	2101      	movs	r1, #1
 800d5aa:	fa01 f506 	lsl.w	r5, r1, r6
 800d5ae:	1d6a      	adds	r2, r5, #5
 800d5b0:	0092      	lsls	r2, r2, #2
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f000 fabe 	bl	800db34 <_calloc_r>
 800d5b8:	b160      	cbz	r0, 800d5d4 <_Balloc+0x56>
 800d5ba:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d5be:	e00e      	b.n	800d5de <_Balloc+0x60>
 800d5c0:	2221      	movs	r2, #33	; 0x21
 800d5c2:	2104      	movs	r1, #4
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	f000 fab5 	bl	800db34 <_calloc_r>
 800d5ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5cc:	60e8      	str	r0, [r5, #12]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d1e4      	bne.n	800d59e <_Balloc+0x20>
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	bd70      	pop	{r4, r5, r6, pc}
 800d5d8:	6802      	ldr	r2, [r0, #0]
 800d5da:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d5de:	2300      	movs	r3, #0
 800d5e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d5e4:	e7f7      	b.n	800d5d6 <_Balloc+0x58>

0800d5e6 <_Bfree>:
 800d5e6:	b570      	push	{r4, r5, r6, lr}
 800d5e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	460d      	mov	r5, r1
 800d5ee:	b93c      	cbnz	r4, 800d600 <_Bfree+0x1a>
 800d5f0:	2010      	movs	r0, #16
 800d5f2:	f7ff ff9f 	bl	800d534 <malloc>
 800d5f6:	6270      	str	r0, [r6, #36]	; 0x24
 800d5f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d5fc:	6004      	str	r4, [r0, #0]
 800d5fe:	60c4      	str	r4, [r0, #12]
 800d600:	b13d      	cbz	r5, 800d612 <_Bfree+0x2c>
 800d602:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d604:	686a      	ldr	r2, [r5, #4]
 800d606:	68db      	ldr	r3, [r3, #12]
 800d608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d60c:	6029      	str	r1, [r5, #0]
 800d60e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d612:	bd70      	pop	{r4, r5, r6, pc}

0800d614 <__multadd>:
 800d614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d618:	690d      	ldr	r5, [r1, #16]
 800d61a:	461f      	mov	r7, r3
 800d61c:	4606      	mov	r6, r0
 800d61e:	460c      	mov	r4, r1
 800d620:	f101 0c14 	add.w	ip, r1, #20
 800d624:	2300      	movs	r3, #0
 800d626:	f8dc 0000 	ldr.w	r0, [ip]
 800d62a:	b281      	uxth	r1, r0
 800d62c:	fb02 7101 	mla	r1, r2, r1, r7
 800d630:	0c0f      	lsrs	r7, r1, #16
 800d632:	0c00      	lsrs	r0, r0, #16
 800d634:	fb02 7000 	mla	r0, r2, r0, r7
 800d638:	b289      	uxth	r1, r1
 800d63a:	3301      	adds	r3, #1
 800d63c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d640:	429d      	cmp	r5, r3
 800d642:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d646:	f84c 1b04 	str.w	r1, [ip], #4
 800d64a:	dcec      	bgt.n	800d626 <__multadd+0x12>
 800d64c:	b1d7      	cbz	r7, 800d684 <__multadd+0x70>
 800d64e:	68a3      	ldr	r3, [r4, #8]
 800d650:	42ab      	cmp	r3, r5
 800d652:	dc12      	bgt.n	800d67a <__multadd+0x66>
 800d654:	6861      	ldr	r1, [r4, #4]
 800d656:	4630      	mov	r0, r6
 800d658:	3101      	adds	r1, #1
 800d65a:	f7ff ff90 	bl	800d57e <_Balloc>
 800d65e:	6922      	ldr	r2, [r4, #16]
 800d660:	3202      	adds	r2, #2
 800d662:	f104 010c 	add.w	r1, r4, #12
 800d666:	4680      	mov	r8, r0
 800d668:	0092      	lsls	r2, r2, #2
 800d66a:	300c      	adds	r0, #12
 800d66c:	f7ff ff7c 	bl	800d568 <memcpy>
 800d670:	4621      	mov	r1, r4
 800d672:	4630      	mov	r0, r6
 800d674:	f7ff ffb7 	bl	800d5e6 <_Bfree>
 800d678:	4644      	mov	r4, r8
 800d67a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d67e:	3501      	adds	r5, #1
 800d680:	615f      	str	r7, [r3, #20]
 800d682:	6125      	str	r5, [r4, #16]
 800d684:	4620      	mov	r0, r4
 800d686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d68a <__hi0bits>:
 800d68a:	0c02      	lsrs	r2, r0, #16
 800d68c:	0412      	lsls	r2, r2, #16
 800d68e:	4603      	mov	r3, r0
 800d690:	b9b2      	cbnz	r2, 800d6c0 <__hi0bits+0x36>
 800d692:	0403      	lsls	r3, r0, #16
 800d694:	2010      	movs	r0, #16
 800d696:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d69a:	bf04      	itt	eq
 800d69c:	021b      	lsleq	r3, r3, #8
 800d69e:	3008      	addeq	r0, #8
 800d6a0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d6a4:	bf04      	itt	eq
 800d6a6:	011b      	lsleq	r3, r3, #4
 800d6a8:	3004      	addeq	r0, #4
 800d6aa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d6ae:	bf04      	itt	eq
 800d6b0:	009b      	lsleq	r3, r3, #2
 800d6b2:	3002      	addeq	r0, #2
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	db06      	blt.n	800d6c6 <__hi0bits+0x3c>
 800d6b8:	005b      	lsls	r3, r3, #1
 800d6ba:	d503      	bpl.n	800d6c4 <__hi0bits+0x3a>
 800d6bc:	3001      	adds	r0, #1
 800d6be:	4770      	bx	lr
 800d6c0:	2000      	movs	r0, #0
 800d6c2:	e7e8      	b.n	800d696 <__hi0bits+0xc>
 800d6c4:	2020      	movs	r0, #32
 800d6c6:	4770      	bx	lr

0800d6c8 <__lo0bits>:
 800d6c8:	6803      	ldr	r3, [r0, #0]
 800d6ca:	f013 0207 	ands.w	r2, r3, #7
 800d6ce:	4601      	mov	r1, r0
 800d6d0:	d00b      	beq.n	800d6ea <__lo0bits+0x22>
 800d6d2:	07da      	lsls	r2, r3, #31
 800d6d4:	d423      	bmi.n	800d71e <__lo0bits+0x56>
 800d6d6:	0798      	lsls	r0, r3, #30
 800d6d8:	bf49      	itett	mi
 800d6da:	085b      	lsrmi	r3, r3, #1
 800d6dc:	089b      	lsrpl	r3, r3, #2
 800d6de:	2001      	movmi	r0, #1
 800d6e0:	600b      	strmi	r3, [r1, #0]
 800d6e2:	bf5c      	itt	pl
 800d6e4:	600b      	strpl	r3, [r1, #0]
 800d6e6:	2002      	movpl	r0, #2
 800d6e8:	4770      	bx	lr
 800d6ea:	b298      	uxth	r0, r3
 800d6ec:	b9a8      	cbnz	r0, 800d71a <__lo0bits+0x52>
 800d6ee:	0c1b      	lsrs	r3, r3, #16
 800d6f0:	2010      	movs	r0, #16
 800d6f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d6f6:	bf04      	itt	eq
 800d6f8:	0a1b      	lsreq	r3, r3, #8
 800d6fa:	3008      	addeq	r0, #8
 800d6fc:	071a      	lsls	r2, r3, #28
 800d6fe:	bf04      	itt	eq
 800d700:	091b      	lsreq	r3, r3, #4
 800d702:	3004      	addeq	r0, #4
 800d704:	079a      	lsls	r2, r3, #30
 800d706:	bf04      	itt	eq
 800d708:	089b      	lsreq	r3, r3, #2
 800d70a:	3002      	addeq	r0, #2
 800d70c:	07da      	lsls	r2, r3, #31
 800d70e:	d402      	bmi.n	800d716 <__lo0bits+0x4e>
 800d710:	085b      	lsrs	r3, r3, #1
 800d712:	d006      	beq.n	800d722 <__lo0bits+0x5a>
 800d714:	3001      	adds	r0, #1
 800d716:	600b      	str	r3, [r1, #0]
 800d718:	4770      	bx	lr
 800d71a:	4610      	mov	r0, r2
 800d71c:	e7e9      	b.n	800d6f2 <__lo0bits+0x2a>
 800d71e:	2000      	movs	r0, #0
 800d720:	4770      	bx	lr
 800d722:	2020      	movs	r0, #32
 800d724:	4770      	bx	lr

0800d726 <__i2b>:
 800d726:	b510      	push	{r4, lr}
 800d728:	460c      	mov	r4, r1
 800d72a:	2101      	movs	r1, #1
 800d72c:	f7ff ff27 	bl	800d57e <_Balloc>
 800d730:	2201      	movs	r2, #1
 800d732:	6144      	str	r4, [r0, #20]
 800d734:	6102      	str	r2, [r0, #16]
 800d736:	bd10      	pop	{r4, pc}

0800d738 <__multiply>:
 800d738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	4614      	mov	r4, r2
 800d73e:	690a      	ldr	r2, [r1, #16]
 800d740:	6923      	ldr	r3, [r4, #16]
 800d742:	429a      	cmp	r2, r3
 800d744:	bfb8      	it	lt
 800d746:	460b      	movlt	r3, r1
 800d748:	4688      	mov	r8, r1
 800d74a:	bfbc      	itt	lt
 800d74c:	46a0      	movlt	r8, r4
 800d74e:	461c      	movlt	r4, r3
 800d750:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d754:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d758:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d75c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d760:	eb07 0609 	add.w	r6, r7, r9
 800d764:	42b3      	cmp	r3, r6
 800d766:	bfb8      	it	lt
 800d768:	3101      	addlt	r1, #1
 800d76a:	f7ff ff08 	bl	800d57e <_Balloc>
 800d76e:	f100 0514 	add.w	r5, r0, #20
 800d772:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d776:	462b      	mov	r3, r5
 800d778:	2200      	movs	r2, #0
 800d77a:	4573      	cmp	r3, lr
 800d77c:	d316      	bcc.n	800d7ac <__multiply+0x74>
 800d77e:	f104 0214 	add.w	r2, r4, #20
 800d782:	f108 0114 	add.w	r1, r8, #20
 800d786:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d78a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d78e:	9300      	str	r3, [sp, #0]
 800d790:	9b00      	ldr	r3, [sp, #0]
 800d792:	9201      	str	r2, [sp, #4]
 800d794:	4293      	cmp	r3, r2
 800d796:	d80c      	bhi.n	800d7b2 <__multiply+0x7a>
 800d798:	2e00      	cmp	r6, #0
 800d79a:	dd03      	ble.n	800d7a4 <__multiply+0x6c>
 800d79c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d05d      	beq.n	800d860 <__multiply+0x128>
 800d7a4:	6106      	str	r6, [r0, #16]
 800d7a6:	b003      	add	sp, #12
 800d7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ac:	f843 2b04 	str.w	r2, [r3], #4
 800d7b0:	e7e3      	b.n	800d77a <__multiply+0x42>
 800d7b2:	f8b2 b000 	ldrh.w	fp, [r2]
 800d7b6:	f1bb 0f00 	cmp.w	fp, #0
 800d7ba:	d023      	beq.n	800d804 <__multiply+0xcc>
 800d7bc:	4689      	mov	r9, r1
 800d7be:	46ac      	mov	ip, r5
 800d7c0:	f04f 0800 	mov.w	r8, #0
 800d7c4:	f859 4b04 	ldr.w	r4, [r9], #4
 800d7c8:	f8dc a000 	ldr.w	sl, [ip]
 800d7cc:	b2a3      	uxth	r3, r4
 800d7ce:	fa1f fa8a 	uxth.w	sl, sl
 800d7d2:	fb0b a303 	mla	r3, fp, r3, sl
 800d7d6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d7da:	f8dc 4000 	ldr.w	r4, [ip]
 800d7de:	4443      	add	r3, r8
 800d7e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d7e4:	fb0b 840a 	mla	r4, fp, sl, r8
 800d7e8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d7ec:	46e2      	mov	sl, ip
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d7f4:	454f      	cmp	r7, r9
 800d7f6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d7fa:	f84a 3b04 	str.w	r3, [sl], #4
 800d7fe:	d82b      	bhi.n	800d858 <__multiply+0x120>
 800d800:	f8cc 8004 	str.w	r8, [ip, #4]
 800d804:	9b01      	ldr	r3, [sp, #4]
 800d806:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d80a:	3204      	adds	r2, #4
 800d80c:	f1ba 0f00 	cmp.w	sl, #0
 800d810:	d020      	beq.n	800d854 <__multiply+0x11c>
 800d812:	682b      	ldr	r3, [r5, #0]
 800d814:	4689      	mov	r9, r1
 800d816:	46a8      	mov	r8, r5
 800d818:	f04f 0b00 	mov.w	fp, #0
 800d81c:	f8b9 c000 	ldrh.w	ip, [r9]
 800d820:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d824:	fb0a 440c 	mla	r4, sl, ip, r4
 800d828:	445c      	add	r4, fp
 800d82a:	46c4      	mov	ip, r8
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d832:	f84c 3b04 	str.w	r3, [ip], #4
 800d836:	f859 3b04 	ldr.w	r3, [r9], #4
 800d83a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d83e:	0c1b      	lsrs	r3, r3, #16
 800d840:	fb0a b303 	mla	r3, sl, r3, fp
 800d844:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d848:	454f      	cmp	r7, r9
 800d84a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d84e:	d805      	bhi.n	800d85c <__multiply+0x124>
 800d850:	f8c8 3004 	str.w	r3, [r8, #4]
 800d854:	3504      	adds	r5, #4
 800d856:	e79b      	b.n	800d790 <__multiply+0x58>
 800d858:	46d4      	mov	ip, sl
 800d85a:	e7b3      	b.n	800d7c4 <__multiply+0x8c>
 800d85c:	46e0      	mov	r8, ip
 800d85e:	e7dd      	b.n	800d81c <__multiply+0xe4>
 800d860:	3e01      	subs	r6, #1
 800d862:	e799      	b.n	800d798 <__multiply+0x60>

0800d864 <__pow5mult>:
 800d864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d868:	4615      	mov	r5, r2
 800d86a:	f012 0203 	ands.w	r2, r2, #3
 800d86e:	4606      	mov	r6, r0
 800d870:	460f      	mov	r7, r1
 800d872:	d007      	beq.n	800d884 <__pow5mult+0x20>
 800d874:	3a01      	subs	r2, #1
 800d876:	4c21      	ldr	r4, [pc, #132]	; (800d8fc <__pow5mult+0x98>)
 800d878:	2300      	movs	r3, #0
 800d87a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d87e:	f7ff fec9 	bl	800d614 <__multadd>
 800d882:	4607      	mov	r7, r0
 800d884:	10ad      	asrs	r5, r5, #2
 800d886:	d035      	beq.n	800d8f4 <__pow5mult+0x90>
 800d888:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d88a:	b93c      	cbnz	r4, 800d89c <__pow5mult+0x38>
 800d88c:	2010      	movs	r0, #16
 800d88e:	f7ff fe51 	bl	800d534 <malloc>
 800d892:	6270      	str	r0, [r6, #36]	; 0x24
 800d894:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d898:	6004      	str	r4, [r0, #0]
 800d89a:	60c4      	str	r4, [r0, #12]
 800d89c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d8a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d8a4:	b94c      	cbnz	r4, 800d8ba <__pow5mult+0x56>
 800d8a6:	f240 2171 	movw	r1, #625	; 0x271
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	f7ff ff3b 	bl	800d726 <__i2b>
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d8b6:	4604      	mov	r4, r0
 800d8b8:	6003      	str	r3, [r0, #0]
 800d8ba:	f04f 0800 	mov.w	r8, #0
 800d8be:	07eb      	lsls	r3, r5, #31
 800d8c0:	d50a      	bpl.n	800d8d8 <__pow5mult+0x74>
 800d8c2:	4639      	mov	r1, r7
 800d8c4:	4622      	mov	r2, r4
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	f7ff ff36 	bl	800d738 <__multiply>
 800d8cc:	4639      	mov	r1, r7
 800d8ce:	4681      	mov	r9, r0
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	f7ff fe88 	bl	800d5e6 <_Bfree>
 800d8d6:	464f      	mov	r7, r9
 800d8d8:	106d      	asrs	r5, r5, #1
 800d8da:	d00b      	beq.n	800d8f4 <__pow5mult+0x90>
 800d8dc:	6820      	ldr	r0, [r4, #0]
 800d8de:	b938      	cbnz	r0, 800d8f0 <__pow5mult+0x8c>
 800d8e0:	4622      	mov	r2, r4
 800d8e2:	4621      	mov	r1, r4
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	f7ff ff27 	bl	800d738 <__multiply>
 800d8ea:	6020      	str	r0, [r4, #0]
 800d8ec:	f8c0 8000 	str.w	r8, [r0]
 800d8f0:	4604      	mov	r4, r0
 800d8f2:	e7e4      	b.n	800d8be <__pow5mult+0x5a>
 800d8f4:	4638      	mov	r0, r7
 800d8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8fa:	bf00      	nop
 800d8fc:	0800ea00 	.word	0x0800ea00

0800d900 <__lshift>:
 800d900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d904:	460c      	mov	r4, r1
 800d906:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d90a:	6923      	ldr	r3, [r4, #16]
 800d90c:	6849      	ldr	r1, [r1, #4]
 800d90e:	eb0a 0903 	add.w	r9, sl, r3
 800d912:	68a3      	ldr	r3, [r4, #8]
 800d914:	4607      	mov	r7, r0
 800d916:	4616      	mov	r6, r2
 800d918:	f109 0501 	add.w	r5, r9, #1
 800d91c:	42ab      	cmp	r3, r5
 800d91e:	db32      	blt.n	800d986 <__lshift+0x86>
 800d920:	4638      	mov	r0, r7
 800d922:	f7ff fe2c 	bl	800d57e <_Balloc>
 800d926:	2300      	movs	r3, #0
 800d928:	4680      	mov	r8, r0
 800d92a:	f100 0114 	add.w	r1, r0, #20
 800d92e:	461a      	mov	r2, r3
 800d930:	4553      	cmp	r3, sl
 800d932:	db2b      	blt.n	800d98c <__lshift+0x8c>
 800d934:	6920      	ldr	r0, [r4, #16]
 800d936:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d93a:	f104 0314 	add.w	r3, r4, #20
 800d93e:	f016 021f 	ands.w	r2, r6, #31
 800d942:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d946:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d94a:	d025      	beq.n	800d998 <__lshift+0x98>
 800d94c:	f1c2 0e20 	rsb	lr, r2, #32
 800d950:	2000      	movs	r0, #0
 800d952:	681e      	ldr	r6, [r3, #0]
 800d954:	468a      	mov	sl, r1
 800d956:	4096      	lsls	r6, r2
 800d958:	4330      	orrs	r0, r6
 800d95a:	f84a 0b04 	str.w	r0, [sl], #4
 800d95e:	f853 0b04 	ldr.w	r0, [r3], #4
 800d962:	459c      	cmp	ip, r3
 800d964:	fa20 f00e 	lsr.w	r0, r0, lr
 800d968:	d814      	bhi.n	800d994 <__lshift+0x94>
 800d96a:	6048      	str	r0, [r1, #4]
 800d96c:	b108      	cbz	r0, 800d972 <__lshift+0x72>
 800d96e:	f109 0502 	add.w	r5, r9, #2
 800d972:	3d01      	subs	r5, #1
 800d974:	4638      	mov	r0, r7
 800d976:	f8c8 5010 	str.w	r5, [r8, #16]
 800d97a:	4621      	mov	r1, r4
 800d97c:	f7ff fe33 	bl	800d5e6 <_Bfree>
 800d980:	4640      	mov	r0, r8
 800d982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d986:	3101      	adds	r1, #1
 800d988:	005b      	lsls	r3, r3, #1
 800d98a:	e7c7      	b.n	800d91c <__lshift+0x1c>
 800d98c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d990:	3301      	adds	r3, #1
 800d992:	e7cd      	b.n	800d930 <__lshift+0x30>
 800d994:	4651      	mov	r1, sl
 800d996:	e7dc      	b.n	800d952 <__lshift+0x52>
 800d998:	3904      	subs	r1, #4
 800d99a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d99e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d9a2:	459c      	cmp	ip, r3
 800d9a4:	d8f9      	bhi.n	800d99a <__lshift+0x9a>
 800d9a6:	e7e4      	b.n	800d972 <__lshift+0x72>

0800d9a8 <__mcmp>:
 800d9a8:	6903      	ldr	r3, [r0, #16]
 800d9aa:	690a      	ldr	r2, [r1, #16]
 800d9ac:	1a9b      	subs	r3, r3, r2
 800d9ae:	b530      	push	{r4, r5, lr}
 800d9b0:	d10c      	bne.n	800d9cc <__mcmp+0x24>
 800d9b2:	0092      	lsls	r2, r2, #2
 800d9b4:	3014      	adds	r0, #20
 800d9b6:	3114      	adds	r1, #20
 800d9b8:	1884      	adds	r4, r0, r2
 800d9ba:	4411      	add	r1, r2
 800d9bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d9c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d9c4:	4295      	cmp	r5, r2
 800d9c6:	d003      	beq.n	800d9d0 <__mcmp+0x28>
 800d9c8:	d305      	bcc.n	800d9d6 <__mcmp+0x2e>
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	bd30      	pop	{r4, r5, pc}
 800d9d0:	42a0      	cmp	r0, r4
 800d9d2:	d3f3      	bcc.n	800d9bc <__mcmp+0x14>
 800d9d4:	e7fa      	b.n	800d9cc <__mcmp+0x24>
 800d9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d9da:	e7f7      	b.n	800d9cc <__mcmp+0x24>

0800d9dc <__mdiff>:
 800d9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9e0:	460d      	mov	r5, r1
 800d9e2:	4607      	mov	r7, r0
 800d9e4:	4611      	mov	r1, r2
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	4614      	mov	r4, r2
 800d9ea:	f7ff ffdd 	bl	800d9a8 <__mcmp>
 800d9ee:	1e06      	subs	r6, r0, #0
 800d9f0:	d108      	bne.n	800da04 <__mdiff+0x28>
 800d9f2:	4631      	mov	r1, r6
 800d9f4:	4638      	mov	r0, r7
 800d9f6:	f7ff fdc2 	bl	800d57e <_Balloc>
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800da00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da04:	bfa4      	itt	ge
 800da06:	4623      	movge	r3, r4
 800da08:	462c      	movge	r4, r5
 800da0a:	4638      	mov	r0, r7
 800da0c:	6861      	ldr	r1, [r4, #4]
 800da0e:	bfa6      	itte	ge
 800da10:	461d      	movge	r5, r3
 800da12:	2600      	movge	r6, #0
 800da14:	2601      	movlt	r6, #1
 800da16:	f7ff fdb2 	bl	800d57e <_Balloc>
 800da1a:	692b      	ldr	r3, [r5, #16]
 800da1c:	60c6      	str	r6, [r0, #12]
 800da1e:	6926      	ldr	r6, [r4, #16]
 800da20:	f105 0914 	add.w	r9, r5, #20
 800da24:	f104 0214 	add.w	r2, r4, #20
 800da28:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800da2c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800da30:	f100 0514 	add.w	r5, r0, #20
 800da34:	f04f 0e00 	mov.w	lr, #0
 800da38:	f852 ab04 	ldr.w	sl, [r2], #4
 800da3c:	f859 4b04 	ldr.w	r4, [r9], #4
 800da40:	fa1e f18a 	uxtah	r1, lr, sl
 800da44:	b2a3      	uxth	r3, r4
 800da46:	1ac9      	subs	r1, r1, r3
 800da48:	0c23      	lsrs	r3, r4, #16
 800da4a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800da4e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800da52:	b289      	uxth	r1, r1
 800da54:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800da58:	45c8      	cmp	r8, r9
 800da5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800da5e:	4694      	mov	ip, r2
 800da60:	f845 3b04 	str.w	r3, [r5], #4
 800da64:	d8e8      	bhi.n	800da38 <__mdiff+0x5c>
 800da66:	45bc      	cmp	ip, r7
 800da68:	d304      	bcc.n	800da74 <__mdiff+0x98>
 800da6a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800da6e:	b183      	cbz	r3, 800da92 <__mdiff+0xb6>
 800da70:	6106      	str	r6, [r0, #16]
 800da72:	e7c5      	b.n	800da00 <__mdiff+0x24>
 800da74:	f85c 1b04 	ldr.w	r1, [ip], #4
 800da78:	fa1e f381 	uxtah	r3, lr, r1
 800da7c:	141a      	asrs	r2, r3, #16
 800da7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800da82:	b29b      	uxth	r3, r3
 800da84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da88:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800da8c:	f845 3b04 	str.w	r3, [r5], #4
 800da90:	e7e9      	b.n	800da66 <__mdiff+0x8a>
 800da92:	3e01      	subs	r6, #1
 800da94:	e7e9      	b.n	800da6a <__mdiff+0x8e>

0800da96 <__d2b>:
 800da96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da9a:	460e      	mov	r6, r1
 800da9c:	2101      	movs	r1, #1
 800da9e:	ec59 8b10 	vmov	r8, r9, d0
 800daa2:	4615      	mov	r5, r2
 800daa4:	f7ff fd6b 	bl	800d57e <_Balloc>
 800daa8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800daac:	4607      	mov	r7, r0
 800daae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dab2:	bb34      	cbnz	r4, 800db02 <__d2b+0x6c>
 800dab4:	9301      	str	r3, [sp, #4]
 800dab6:	f1b8 0300 	subs.w	r3, r8, #0
 800daba:	d027      	beq.n	800db0c <__d2b+0x76>
 800dabc:	a802      	add	r0, sp, #8
 800dabe:	f840 3d08 	str.w	r3, [r0, #-8]!
 800dac2:	f7ff fe01 	bl	800d6c8 <__lo0bits>
 800dac6:	9900      	ldr	r1, [sp, #0]
 800dac8:	b1f0      	cbz	r0, 800db08 <__d2b+0x72>
 800daca:	9a01      	ldr	r2, [sp, #4]
 800dacc:	f1c0 0320 	rsb	r3, r0, #32
 800dad0:	fa02 f303 	lsl.w	r3, r2, r3
 800dad4:	430b      	orrs	r3, r1
 800dad6:	40c2      	lsrs	r2, r0
 800dad8:	617b      	str	r3, [r7, #20]
 800dada:	9201      	str	r2, [sp, #4]
 800dadc:	9b01      	ldr	r3, [sp, #4]
 800dade:	61bb      	str	r3, [r7, #24]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	bf14      	ite	ne
 800dae4:	2102      	movne	r1, #2
 800dae6:	2101      	moveq	r1, #1
 800dae8:	6139      	str	r1, [r7, #16]
 800daea:	b1c4      	cbz	r4, 800db1e <__d2b+0x88>
 800daec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800daf0:	4404      	add	r4, r0
 800daf2:	6034      	str	r4, [r6, #0]
 800daf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800daf8:	6028      	str	r0, [r5, #0]
 800dafa:	4638      	mov	r0, r7
 800dafc:	b003      	add	sp, #12
 800dafe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db06:	e7d5      	b.n	800dab4 <__d2b+0x1e>
 800db08:	6179      	str	r1, [r7, #20]
 800db0a:	e7e7      	b.n	800dadc <__d2b+0x46>
 800db0c:	a801      	add	r0, sp, #4
 800db0e:	f7ff fddb 	bl	800d6c8 <__lo0bits>
 800db12:	9b01      	ldr	r3, [sp, #4]
 800db14:	617b      	str	r3, [r7, #20]
 800db16:	2101      	movs	r1, #1
 800db18:	6139      	str	r1, [r7, #16]
 800db1a:	3020      	adds	r0, #32
 800db1c:	e7e5      	b.n	800daea <__d2b+0x54>
 800db1e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800db22:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db26:	6030      	str	r0, [r6, #0]
 800db28:	6918      	ldr	r0, [r3, #16]
 800db2a:	f7ff fdae 	bl	800d68a <__hi0bits>
 800db2e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800db32:	e7e1      	b.n	800daf8 <__d2b+0x62>

0800db34 <_calloc_r>:
 800db34:	b538      	push	{r3, r4, r5, lr}
 800db36:	fb02 f401 	mul.w	r4, r2, r1
 800db3a:	4621      	mov	r1, r4
 800db3c:	f000 f856 	bl	800dbec <_malloc_r>
 800db40:	4605      	mov	r5, r0
 800db42:	b118      	cbz	r0, 800db4c <_calloc_r+0x18>
 800db44:	4622      	mov	r2, r4
 800db46:	2100      	movs	r1, #0
 800db48:	f7fe f90a 	bl	800bd60 <memset>
 800db4c:	4628      	mov	r0, r5
 800db4e:	bd38      	pop	{r3, r4, r5, pc}

0800db50 <_free_r>:
 800db50:	b538      	push	{r3, r4, r5, lr}
 800db52:	4605      	mov	r5, r0
 800db54:	2900      	cmp	r1, #0
 800db56:	d045      	beq.n	800dbe4 <_free_r+0x94>
 800db58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db5c:	1f0c      	subs	r4, r1, #4
 800db5e:	2b00      	cmp	r3, #0
 800db60:	bfb8      	it	lt
 800db62:	18e4      	addlt	r4, r4, r3
 800db64:	f000 fa24 	bl	800dfb0 <__malloc_lock>
 800db68:	4a1f      	ldr	r2, [pc, #124]	; (800dbe8 <_free_r+0x98>)
 800db6a:	6813      	ldr	r3, [r2, #0]
 800db6c:	4610      	mov	r0, r2
 800db6e:	b933      	cbnz	r3, 800db7e <_free_r+0x2e>
 800db70:	6063      	str	r3, [r4, #4]
 800db72:	6014      	str	r4, [r2, #0]
 800db74:	4628      	mov	r0, r5
 800db76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db7a:	f000 ba1a 	b.w	800dfb2 <__malloc_unlock>
 800db7e:	42a3      	cmp	r3, r4
 800db80:	d90c      	bls.n	800db9c <_free_r+0x4c>
 800db82:	6821      	ldr	r1, [r4, #0]
 800db84:	1862      	adds	r2, r4, r1
 800db86:	4293      	cmp	r3, r2
 800db88:	bf04      	itt	eq
 800db8a:	681a      	ldreq	r2, [r3, #0]
 800db8c:	685b      	ldreq	r3, [r3, #4]
 800db8e:	6063      	str	r3, [r4, #4]
 800db90:	bf04      	itt	eq
 800db92:	1852      	addeq	r2, r2, r1
 800db94:	6022      	streq	r2, [r4, #0]
 800db96:	6004      	str	r4, [r0, #0]
 800db98:	e7ec      	b.n	800db74 <_free_r+0x24>
 800db9a:	4613      	mov	r3, r2
 800db9c:	685a      	ldr	r2, [r3, #4]
 800db9e:	b10a      	cbz	r2, 800dba4 <_free_r+0x54>
 800dba0:	42a2      	cmp	r2, r4
 800dba2:	d9fa      	bls.n	800db9a <_free_r+0x4a>
 800dba4:	6819      	ldr	r1, [r3, #0]
 800dba6:	1858      	adds	r0, r3, r1
 800dba8:	42a0      	cmp	r0, r4
 800dbaa:	d10b      	bne.n	800dbc4 <_free_r+0x74>
 800dbac:	6820      	ldr	r0, [r4, #0]
 800dbae:	4401      	add	r1, r0
 800dbb0:	1858      	adds	r0, r3, r1
 800dbb2:	4282      	cmp	r2, r0
 800dbb4:	6019      	str	r1, [r3, #0]
 800dbb6:	d1dd      	bne.n	800db74 <_free_r+0x24>
 800dbb8:	6810      	ldr	r0, [r2, #0]
 800dbba:	6852      	ldr	r2, [r2, #4]
 800dbbc:	605a      	str	r2, [r3, #4]
 800dbbe:	4401      	add	r1, r0
 800dbc0:	6019      	str	r1, [r3, #0]
 800dbc2:	e7d7      	b.n	800db74 <_free_r+0x24>
 800dbc4:	d902      	bls.n	800dbcc <_free_r+0x7c>
 800dbc6:	230c      	movs	r3, #12
 800dbc8:	602b      	str	r3, [r5, #0]
 800dbca:	e7d3      	b.n	800db74 <_free_r+0x24>
 800dbcc:	6820      	ldr	r0, [r4, #0]
 800dbce:	1821      	adds	r1, r4, r0
 800dbd0:	428a      	cmp	r2, r1
 800dbd2:	bf04      	itt	eq
 800dbd4:	6811      	ldreq	r1, [r2, #0]
 800dbd6:	6852      	ldreq	r2, [r2, #4]
 800dbd8:	6062      	str	r2, [r4, #4]
 800dbda:	bf04      	itt	eq
 800dbdc:	1809      	addeq	r1, r1, r0
 800dbde:	6021      	streq	r1, [r4, #0]
 800dbe0:	605c      	str	r4, [r3, #4]
 800dbe2:	e7c7      	b.n	800db74 <_free_r+0x24>
 800dbe4:	bd38      	pop	{r3, r4, r5, pc}
 800dbe6:	bf00      	nop
 800dbe8:	200006dc 	.word	0x200006dc

0800dbec <_malloc_r>:
 800dbec:	b570      	push	{r4, r5, r6, lr}
 800dbee:	1ccd      	adds	r5, r1, #3
 800dbf0:	f025 0503 	bic.w	r5, r5, #3
 800dbf4:	3508      	adds	r5, #8
 800dbf6:	2d0c      	cmp	r5, #12
 800dbf8:	bf38      	it	cc
 800dbfa:	250c      	movcc	r5, #12
 800dbfc:	2d00      	cmp	r5, #0
 800dbfe:	4606      	mov	r6, r0
 800dc00:	db01      	blt.n	800dc06 <_malloc_r+0x1a>
 800dc02:	42a9      	cmp	r1, r5
 800dc04:	d903      	bls.n	800dc0e <_malloc_r+0x22>
 800dc06:	230c      	movs	r3, #12
 800dc08:	6033      	str	r3, [r6, #0]
 800dc0a:	2000      	movs	r0, #0
 800dc0c:	bd70      	pop	{r4, r5, r6, pc}
 800dc0e:	f000 f9cf 	bl	800dfb0 <__malloc_lock>
 800dc12:	4a21      	ldr	r2, [pc, #132]	; (800dc98 <_malloc_r+0xac>)
 800dc14:	6814      	ldr	r4, [r2, #0]
 800dc16:	4621      	mov	r1, r4
 800dc18:	b991      	cbnz	r1, 800dc40 <_malloc_r+0x54>
 800dc1a:	4c20      	ldr	r4, [pc, #128]	; (800dc9c <_malloc_r+0xb0>)
 800dc1c:	6823      	ldr	r3, [r4, #0]
 800dc1e:	b91b      	cbnz	r3, 800dc28 <_malloc_r+0x3c>
 800dc20:	4630      	mov	r0, r6
 800dc22:	f000 f98f 	bl	800df44 <_sbrk_r>
 800dc26:	6020      	str	r0, [r4, #0]
 800dc28:	4629      	mov	r1, r5
 800dc2a:	4630      	mov	r0, r6
 800dc2c:	f000 f98a 	bl	800df44 <_sbrk_r>
 800dc30:	1c43      	adds	r3, r0, #1
 800dc32:	d124      	bne.n	800dc7e <_malloc_r+0x92>
 800dc34:	230c      	movs	r3, #12
 800dc36:	6033      	str	r3, [r6, #0]
 800dc38:	4630      	mov	r0, r6
 800dc3a:	f000 f9ba 	bl	800dfb2 <__malloc_unlock>
 800dc3e:	e7e4      	b.n	800dc0a <_malloc_r+0x1e>
 800dc40:	680b      	ldr	r3, [r1, #0]
 800dc42:	1b5b      	subs	r3, r3, r5
 800dc44:	d418      	bmi.n	800dc78 <_malloc_r+0x8c>
 800dc46:	2b0b      	cmp	r3, #11
 800dc48:	d90f      	bls.n	800dc6a <_malloc_r+0x7e>
 800dc4a:	600b      	str	r3, [r1, #0]
 800dc4c:	50cd      	str	r5, [r1, r3]
 800dc4e:	18cc      	adds	r4, r1, r3
 800dc50:	4630      	mov	r0, r6
 800dc52:	f000 f9ae 	bl	800dfb2 <__malloc_unlock>
 800dc56:	f104 000b 	add.w	r0, r4, #11
 800dc5a:	1d23      	adds	r3, r4, #4
 800dc5c:	f020 0007 	bic.w	r0, r0, #7
 800dc60:	1ac3      	subs	r3, r0, r3
 800dc62:	d0d3      	beq.n	800dc0c <_malloc_r+0x20>
 800dc64:	425a      	negs	r2, r3
 800dc66:	50e2      	str	r2, [r4, r3]
 800dc68:	e7d0      	b.n	800dc0c <_malloc_r+0x20>
 800dc6a:	428c      	cmp	r4, r1
 800dc6c:	684b      	ldr	r3, [r1, #4]
 800dc6e:	bf16      	itet	ne
 800dc70:	6063      	strne	r3, [r4, #4]
 800dc72:	6013      	streq	r3, [r2, #0]
 800dc74:	460c      	movne	r4, r1
 800dc76:	e7eb      	b.n	800dc50 <_malloc_r+0x64>
 800dc78:	460c      	mov	r4, r1
 800dc7a:	6849      	ldr	r1, [r1, #4]
 800dc7c:	e7cc      	b.n	800dc18 <_malloc_r+0x2c>
 800dc7e:	1cc4      	adds	r4, r0, #3
 800dc80:	f024 0403 	bic.w	r4, r4, #3
 800dc84:	42a0      	cmp	r0, r4
 800dc86:	d005      	beq.n	800dc94 <_malloc_r+0xa8>
 800dc88:	1a21      	subs	r1, r4, r0
 800dc8a:	4630      	mov	r0, r6
 800dc8c:	f000 f95a 	bl	800df44 <_sbrk_r>
 800dc90:	3001      	adds	r0, #1
 800dc92:	d0cf      	beq.n	800dc34 <_malloc_r+0x48>
 800dc94:	6025      	str	r5, [r4, #0]
 800dc96:	e7db      	b.n	800dc50 <_malloc_r+0x64>
 800dc98:	200006dc 	.word	0x200006dc
 800dc9c:	200006e0 	.word	0x200006e0

0800dca0 <__ssputs_r>:
 800dca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dca4:	688e      	ldr	r6, [r1, #8]
 800dca6:	429e      	cmp	r6, r3
 800dca8:	4682      	mov	sl, r0
 800dcaa:	460c      	mov	r4, r1
 800dcac:	4690      	mov	r8, r2
 800dcae:	4699      	mov	r9, r3
 800dcb0:	d837      	bhi.n	800dd22 <__ssputs_r+0x82>
 800dcb2:	898a      	ldrh	r2, [r1, #12]
 800dcb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dcb8:	d031      	beq.n	800dd1e <__ssputs_r+0x7e>
 800dcba:	6825      	ldr	r5, [r4, #0]
 800dcbc:	6909      	ldr	r1, [r1, #16]
 800dcbe:	1a6f      	subs	r7, r5, r1
 800dcc0:	6965      	ldr	r5, [r4, #20]
 800dcc2:	2302      	movs	r3, #2
 800dcc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dcc8:	fb95 f5f3 	sdiv	r5, r5, r3
 800dccc:	f109 0301 	add.w	r3, r9, #1
 800dcd0:	443b      	add	r3, r7
 800dcd2:	429d      	cmp	r5, r3
 800dcd4:	bf38      	it	cc
 800dcd6:	461d      	movcc	r5, r3
 800dcd8:	0553      	lsls	r3, r2, #21
 800dcda:	d530      	bpl.n	800dd3e <__ssputs_r+0x9e>
 800dcdc:	4629      	mov	r1, r5
 800dcde:	f7ff ff85 	bl	800dbec <_malloc_r>
 800dce2:	4606      	mov	r6, r0
 800dce4:	b950      	cbnz	r0, 800dcfc <__ssputs_r+0x5c>
 800dce6:	230c      	movs	r3, #12
 800dce8:	f8ca 3000 	str.w	r3, [sl]
 800dcec:	89a3      	ldrh	r3, [r4, #12]
 800dcee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcf2:	81a3      	strh	r3, [r4, #12]
 800dcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcfc:	463a      	mov	r2, r7
 800dcfe:	6921      	ldr	r1, [r4, #16]
 800dd00:	f7ff fc32 	bl	800d568 <memcpy>
 800dd04:	89a3      	ldrh	r3, [r4, #12]
 800dd06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd0e:	81a3      	strh	r3, [r4, #12]
 800dd10:	6126      	str	r6, [r4, #16]
 800dd12:	6165      	str	r5, [r4, #20]
 800dd14:	443e      	add	r6, r7
 800dd16:	1bed      	subs	r5, r5, r7
 800dd18:	6026      	str	r6, [r4, #0]
 800dd1a:	60a5      	str	r5, [r4, #8]
 800dd1c:	464e      	mov	r6, r9
 800dd1e:	454e      	cmp	r6, r9
 800dd20:	d900      	bls.n	800dd24 <__ssputs_r+0x84>
 800dd22:	464e      	mov	r6, r9
 800dd24:	4632      	mov	r2, r6
 800dd26:	4641      	mov	r1, r8
 800dd28:	6820      	ldr	r0, [r4, #0]
 800dd2a:	f000 f928 	bl	800df7e <memmove>
 800dd2e:	68a3      	ldr	r3, [r4, #8]
 800dd30:	1b9b      	subs	r3, r3, r6
 800dd32:	60a3      	str	r3, [r4, #8]
 800dd34:	6823      	ldr	r3, [r4, #0]
 800dd36:	441e      	add	r6, r3
 800dd38:	6026      	str	r6, [r4, #0]
 800dd3a:	2000      	movs	r0, #0
 800dd3c:	e7dc      	b.n	800dcf8 <__ssputs_r+0x58>
 800dd3e:	462a      	mov	r2, r5
 800dd40:	f000 f938 	bl	800dfb4 <_realloc_r>
 800dd44:	4606      	mov	r6, r0
 800dd46:	2800      	cmp	r0, #0
 800dd48:	d1e2      	bne.n	800dd10 <__ssputs_r+0x70>
 800dd4a:	6921      	ldr	r1, [r4, #16]
 800dd4c:	4650      	mov	r0, sl
 800dd4e:	f7ff feff 	bl	800db50 <_free_r>
 800dd52:	e7c8      	b.n	800dce6 <__ssputs_r+0x46>

0800dd54 <_svfiprintf_r>:
 800dd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd58:	461d      	mov	r5, r3
 800dd5a:	898b      	ldrh	r3, [r1, #12]
 800dd5c:	061f      	lsls	r7, r3, #24
 800dd5e:	b09d      	sub	sp, #116	; 0x74
 800dd60:	4680      	mov	r8, r0
 800dd62:	460c      	mov	r4, r1
 800dd64:	4616      	mov	r6, r2
 800dd66:	d50f      	bpl.n	800dd88 <_svfiprintf_r+0x34>
 800dd68:	690b      	ldr	r3, [r1, #16]
 800dd6a:	b96b      	cbnz	r3, 800dd88 <_svfiprintf_r+0x34>
 800dd6c:	2140      	movs	r1, #64	; 0x40
 800dd6e:	f7ff ff3d 	bl	800dbec <_malloc_r>
 800dd72:	6020      	str	r0, [r4, #0]
 800dd74:	6120      	str	r0, [r4, #16]
 800dd76:	b928      	cbnz	r0, 800dd84 <_svfiprintf_r+0x30>
 800dd78:	230c      	movs	r3, #12
 800dd7a:	f8c8 3000 	str.w	r3, [r8]
 800dd7e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd82:	e0c8      	b.n	800df16 <_svfiprintf_r+0x1c2>
 800dd84:	2340      	movs	r3, #64	; 0x40
 800dd86:	6163      	str	r3, [r4, #20]
 800dd88:	2300      	movs	r3, #0
 800dd8a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd8c:	2320      	movs	r3, #32
 800dd8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd92:	2330      	movs	r3, #48	; 0x30
 800dd94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd98:	9503      	str	r5, [sp, #12]
 800dd9a:	f04f 0b01 	mov.w	fp, #1
 800dd9e:	4637      	mov	r7, r6
 800dda0:	463d      	mov	r5, r7
 800dda2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dda6:	b10b      	cbz	r3, 800ddac <_svfiprintf_r+0x58>
 800dda8:	2b25      	cmp	r3, #37	; 0x25
 800ddaa:	d13e      	bne.n	800de2a <_svfiprintf_r+0xd6>
 800ddac:	ebb7 0a06 	subs.w	sl, r7, r6
 800ddb0:	d00b      	beq.n	800ddca <_svfiprintf_r+0x76>
 800ddb2:	4653      	mov	r3, sl
 800ddb4:	4632      	mov	r2, r6
 800ddb6:	4621      	mov	r1, r4
 800ddb8:	4640      	mov	r0, r8
 800ddba:	f7ff ff71 	bl	800dca0 <__ssputs_r>
 800ddbe:	3001      	adds	r0, #1
 800ddc0:	f000 80a4 	beq.w	800df0c <_svfiprintf_r+0x1b8>
 800ddc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddc6:	4453      	add	r3, sl
 800ddc8:	9309      	str	r3, [sp, #36]	; 0x24
 800ddca:	783b      	ldrb	r3, [r7, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	f000 809d 	beq.w	800df0c <_svfiprintf_r+0x1b8>
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	f04f 32ff 	mov.w	r2, #4294967295
 800ddd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dddc:	9304      	str	r3, [sp, #16]
 800ddde:	9307      	str	r3, [sp, #28]
 800dde0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dde4:	931a      	str	r3, [sp, #104]	; 0x68
 800dde6:	462f      	mov	r7, r5
 800dde8:	2205      	movs	r2, #5
 800ddea:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ddee:	4850      	ldr	r0, [pc, #320]	; (800df30 <_svfiprintf_r+0x1dc>)
 800ddf0:	f7f2 f9fe 	bl	80001f0 <memchr>
 800ddf4:	9b04      	ldr	r3, [sp, #16]
 800ddf6:	b9d0      	cbnz	r0, 800de2e <_svfiprintf_r+0xda>
 800ddf8:	06d9      	lsls	r1, r3, #27
 800ddfa:	bf44      	itt	mi
 800ddfc:	2220      	movmi	r2, #32
 800ddfe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800de02:	071a      	lsls	r2, r3, #28
 800de04:	bf44      	itt	mi
 800de06:	222b      	movmi	r2, #43	; 0x2b
 800de08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800de0c:	782a      	ldrb	r2, [r5, #0]
 800de0e:	2a2a      	cmp	r2, #42	; 0x2a
 800de10:	d015      	beq.n	800de3e <_svfiprintf_r+0xea>
 800de12:	9a07      	ldr	r2, [sp, #28]
 800de14:	462f      	mov	r7, r5
 800de16:	2000      	movs	r0, #0
 800de18:	250a      	movs	r5, #10
 800de1a:	4639      	mov	r1, r7
 800de1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de20:	3b30      	subs	r3, #48	; 0x30
 800de22:	2b09      	cmp	r3, #9
 800de24:	d94d      	bls.n	800dec2 <_svfiprintf_r+0x16e>
 800de26:	b1b8      	cbz	r0, 800de58 <_svfiprintf_r+0x104>
 800de28:	e00f      	b.n	800de4a <_svfiprintf_r+0xf6>
 800de2a:	462f      	mov	r7, r5
 800de2c:	e7b8      	b.n	800dda0 <_svfiprintf_r+0x4c>
 800de2e:	4a40      	ldr	r2, [pc, #256]	; (800df30 <_svfiprintf_r+0x1dc>)
 800de30:	1a80      	subs	r0, r0, r2
 800de32:	fa0b f000 	lsl.w	r0, fp, r0
 800de36:	4318      	orrs	r0, r3
 800de38:	9004      	str	r0, [sp, #16]
 800de3a:	463d      	mov	r5, r7
 800de3c:	e7d3      	b.n	800dde6 <_svfiprintf_r+0x92>
 800de3e:	9a03      	ldr	r2, [sp, #12]
 800de40:	1d11      	adds	r1, r2, #4
 800de42:	6812      	ldr	r2, [r2, #0]
 800de44:	9103      	str	r1, [sp, #12]
 800de46:	2a00      	cmp	r2, #0
 800de48:	db01      	blt.n	800de4e <_svfiprintf_r+0xfa>
 800de4a:	9207      	str	r2, [sp, #28]
 800de4c:	e004      	b.n	800de58 <_svfiprintf_r+0x104>
 800de4e:	4252      	negs	r2, r2
 800de50:	f043 0302 	orr.w	r3, r3, #2
 800de54:	9207      	str	r2, [sp, #28]
 800de56:	9304      	str	r3, [sp, #16]
 800de58:	783b      	ldrb	r3, [r7, #0]
 800de5a:	2b2e      	cmp	r3, #46	; 0x2e
 800de5c:	d10c      	bne.n	800de78 <_svfiprintf_r+0x124>
 800de5e:	787b      	ldrb	r3, [r7, #1]
 800de60:	2b2a      	cmp	r3, #42	; 0x2a
 800de62:	d133      	bne.n	800decc <_svfiprintf_r+0x178>
 800de64:	9b03      	ldr	r3, [sp, #12]
 800de66:	1d1a      	adds	r2, r3, #4
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	9203      	str	r2, [sp, #12]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	bfb8      	it	lt
 800de70:	f04f 33ff 	movlt.w	r3, #4294967295
 800de74:	3702      	adds	r7, #2
 800de76:	9305      	str	r3, [sp, #20]
 800de78:	4d2e      	ldr	r5, [pc, #184]	; (800df34 <_svfiprintf_r+0x1e0>)
 800de7a:	7839      	ldrb	r1, [r7, #0]
 800de7c:	2203      	movs	r2, #3
 800de7e:	4628      	mov	r0, r5
 800de80:	f7f2 f9b6 	bl	80001f0 <memchr>
 800de84:	b138      	cbz	r0, 800de96 <_svfiprintf_r+0x142>
 800de86:	2340      	movs	r3, #64	; 0x40
 800de88:	1b40      	subs	r0, r0, r5
 800de8a:	fa03 f000 	lsl.w	r0, r3, r0
 800de8e:	9b04      	ldr	r3, [sp, #16]
 800de90:	4303      	orrs	r3, r0
 800de92:	3701      	adds	r7, #1
 800de94:	9304      	str	r3, [sp, #16]
 800de96:	7839      	ldrb	r1, [r7, #0]
 800de98:	4827      	ldr	r0, [pc, #156]	; (800df38 <_svfiprintf_r+0x1e4>)
 800de9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de9e:	2206      	movs	r2, #6
 800dea0:	1c7e      	adds	r6, r7, #1
 800dea2:	f7f2 f9a5 	bl	80001f0 <memchr>
 800dea6:	2800      	cmp	r0, #0
 800dea8:	d038      	beq.n	800df1c <_svfiprintf_r+0x1c8>
 800deaa:	4b24      	ldr	r3, [pc, #144]	; (800df3c <_svfiprintf_r+0x1e8>)
 800deac:	bb13      	cbnz	r3, 800def4 <_svfiprintf_r+0x1a0>
 800deae:	9b03      	ldr	r3, [sp, #12]
 800deb0:	3307      	adds	r3, #7
 800deb2:	f023 0307 	bic.w	r3, r3, #7
 800deb6:	3308      	adds	r3, #8
 800deb8:	9303      	str	r3, [sp, #12]
 800deba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800debc:	444b      	add	r3, r9
 800debe:	9309      	str	r3, [sp, #36]	; 0x24
 800dec0:	e76d      	b.n	800dd9e <_svfiprintf_r+0x4a>
 800dec2:	fb05 3202 	mla	r2, r5, r2, r3
 800dec6:	2001      	movs	r0, #1
 800dec8:	460f      	mov	r7, r1
 800deca:	e7a6      	b.n	800de1a <_svfiprintf_r+0xc6>
 800decc:	2300      	movs	r3, #0
 800dece:	3701      	adds	r7, #1
 800ded0:	9305      	str	r3, [sp, #20]
 800ded2:	4619      	mov	r1, r3
 800ded4:	250a      	movs	r5, #10
 800ded6:	4638      	mov	r0, r7
 800ded8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dedc:	3a30      	subs	r2, #48	; 0x30
 800dede:	2a09      	cmp	r2, #9
 800dee0:	d903      	bls.n	800deea <_svfiprintf_r+0x196>
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d0c8      	beq.n	800de78 <_svfiprintf_r+0x124>
 800dee6:	9105      	str	r1, [sp, #20]
 800dee8:	e7c6      	b.n	800de78 <_svfiprintf_r+0x124>
 800deea:	fb05 2101 	mla	r1, r5, r1, r2
 800deee:	2301      	movs	r3, #1
 800def0:	4607      	mov	r7, r0
 800def2:	e7f0      	b.n	800ded6 <_svfiprintf_r+0x182>
 800def4:	ab03      	add	r3, sp, #12
 800def6:	9300      	str	r3, [sp, #0]
 800def8:	4622      	mov	r2, r4
 800defa:	4b11      	ldr	r3, [pc, #68]	; (800df40 <_svfiprintf_r+0x1ec>)
 800defc:	a904      	add	r1, sp, #16
 800defe:	4640      	mov	r0, r8
 800df00:	f7fd ffca 	bl	800be98 <_printf_float>
 800df04:	f1b0 3fff 	cmp.w	r0, #4294967295
 800df08:	4681      	mov	r9, r0
 800df0a:	d1d6      	bne.n	800deba <_svfiprintf_r+0x166>
 800df0c:	89a3      	ldrh	r3, [r4, #12]
 800df0e:	065b      	lsls	r3, r3, #25
 800df10:	f53f af35 	bmi.w	800dd7e <_svfiprintf_r+0x2a>
 800df14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df16:	b01d      	add	sp, #116	; 0x74
 800df18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df1c:	ab03      	add	r3, sp, #12
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	4622      	mov	r2, r4
 800df22:	4b07      	ldr	r3, [pc, #28]	; (800df40 <_svfiprintf_r+0x1ec>)
 800df24:	a904      	add	r1, sp, #16
 800df26:	4640      	mov	r0, r8
 800df28:	f7fe fa6c 	bl	800c404 <_printf_i>
 800df2c:	e7ea      	b.n	800df04 <_svfiprintf_r+0x1b0>
 800df2e:	bf00      	nop
 800df30:	0800ea0c 	.word	0x0800ea0c
 800df34:	0800ea12 	.word	0x0800ea12
 800df38:	0800ea16 	.word	0x0800ea16
 800df3c:	0800be99 	.word	0x0800be99
 800df40:	0800dca1 	.word	0x0800dca1

0800df44 <_sbrk_r>:
 800df44:	b538      	push	{r3, r4, r5, lr}
 800df46:	4c06      	ldr	r4, [pc, #24]	; (800df60 <_sbrk_r+0x1c>)
 800df48:	2300      	movs	r3, #0
 800df4a:	4605      	mov	r5, r0
 800df4c:	4608      	mov	r0, r1
 800df4e:	6023      	str	r3, [r4, #0]
 800df50:	f7fd faa4 	bl	800b49c <_sbrk>
 800df54:	1c43      	adds	r3, r0, #1
 800df56:	d102      	bne.n	800df5e <_sbrk_r+0x1a>
 800df58:	6823      	ldr	r3, [r4, #0]
 800df5a:	b103      	cbz	r3, 800df5e <_sbrk_r+0x1a>
 800df5c:	602b      	str	r3, [r5, #0]
 800df5e:	bd38      	pop	{r3, r4, r5, pc}
 800df60:	20000904 	.word	0x20000904

0800df64 <__ascii_wctomb>:
 800df64:	b149      	cbz	r1, 800df7a <__ascii_wctomb+0x16>
 800df66:	2aff      	cmp	r2, #255	; 0xff
 800df68:	bf85      	ittet	hi
 800df6a:	238a      	movhi	r3, #138	; 0x8a
 800df6c:	6003      	strhi	r3, [r0, #0]
 800df6e:	700a      	strbls	r2, [r1, #0]
 800df70:	f04f 30ff 	movhi.w	r0, #4294967295
 800df74:	bf98      	it	ls
 800df76:	2001      	movls	r0, #1
 800df78:	4770      	bx	lr
 800df7a:	4608      	mov	r0, r1
 800df7c:	4770      	bx	lr

0800df7e <memmove>:
 800df7e:	4288      	cmp	r0, r1
 800df80:	b510      	push	{r4, lr}
 800df82:	eb01 0302 	add.w	r3, r1, r2
 800df86:	d807      	bhi.n	800df98 <memmove+0x1a>
 800df88:	1e42      	subs	r2, r0, #1
 800df8a:	4299      	cmp	r1, r3
 800df8c:	d00a      	beq.n	800dfa4 <memmove+0x26>
 800df8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df92:	f802 4f01 	strb.w	r4, [r2, #1]!
 800df96:	e7f8      	b.n	800df8a <memmove+0xc>
 800df98:	4283      	cmp	r3, r0
 800df9a:	d9f5      	bls.n	800df88 <memmove+0xa>
 800df9c:	1881      	adds	r1, r0, r2
 800df9e:	1ad2      	subs	r2, r2, r3
 800dfa0:	42d3      	cmn	r3, r2
 800dfa2:	d100      	bne.n	800dfa6 <memmove+0x28>
 800dfa4:	bd10      	pop	{r4, pc}
 800dfa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dfaa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dfae:	e7f7      	b.n	800dfa0 <memmove+0x22>

0800dfb0 <__malloc_lock>:
 800dfb0:	4770      	bx	lr

0800dfb2 <__malloc_unlock>:
 800dfb2:	4770      	bx	lr

0800dfb4 <_realloc_r>:
 800dfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfb6:	4607      	mov	r7, r0
 800dfb8:	4614      	mov	r4, r2
 800dfba:	460e      	mov	r6, r1
 800dfbc:	b921      	cbnz	r1, 800dfc8 <_realloc_r+0x14>
 800dfbe:	4611      	mov	r1, r2
 800dfc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dfc4:	f7ff be12 	b.w	800dbec <_malloc_r>
 800dfc8:	b922      	cbnz	r2, 800dfd4 <_realloc_r+0x20>
 800dfca:	f7ff fdc1 	bl	800db50 <_free_r>
 800dfce:	4625      	mov	r5, r4
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfd4:	f000 f814 	bl	800e000 <_malloc_usable_size_r>
 800dfd8:	42a0      	cmp	r0, r4
 800dfda:	d20f      	bcs.n	800dffc <_realloc_r+0x48>
 800dfdc:	4621      	mov	r1, r4
 800dfde:	4638      	mov	r0, r7
 800dfe0:	f7ff fe04 	bl	800dbec <_malloc_r>
 800dfe4:	4605      	mov	r5, r0
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	d0f2      	beq.n	800dfd0 <_realloc_r+0x1c>
 800dfea:	4631      	mov	r1, r6
 800dfec:	4622      	mov	r2, r4
 800dfee:	f7ff fabb 	bl	800d568 <memcpy>
 800dff2:	4631      	mov	r1, r6
 800dff4:	4638      	mov	r0, r7
 800dff6:	f7ff fdab 	bl	800db50 <_free_r>
 800dffa:	e7e9      	b.n	800dfd0 <_realloc_r+0x1c>
 800dffc:	4635      	mov	r5, r6
 800dffe:	e7e7      	b.n	800dfd0 <_realloc_r+0x1c>

0800e000 <_malloc_usable_size_r>:
 800e000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e004:	1f18      	subs	r0, r3, #4
 800e006:	2b00      	cmp	r3, #0
 800e008:	bfbc      	itt	lt
 800e00a:	580b      	ldrlt	r3, [r1, r0]
 800e00c:	18c0      	addlt	r0, r0, r3
 800e00e:	4770      	bx	lr

0800e010 <_init>:
 800e010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e012:	bf00      	nop
 800e014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e016:	bc08      	pop	{r3}
 800e018:	469e      	mov	lr, r3
 800e01a:	4770      	bx	lr

0800e01c <_fini>:
 800e01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e01e:	bf00      	nop
 800e020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e022:	bc08      	pop	{r3}
 800e024:	469e      	mov	lr, r3
 800e026:	4770      	bx	lr
