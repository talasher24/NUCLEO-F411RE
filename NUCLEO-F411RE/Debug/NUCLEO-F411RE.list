
NUCLEO-F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d264  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab0  0800d408  0800d408  0001d408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800deb8  0800deb8  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800deb8  0800deb8  0001deb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dec0  0800dec0  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dec0  0800dec0  0001dec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dec4  0800dec4  0001dec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000080  0800dec8  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .noinit       00000044  20000000  20000000  00030000  2**2
                  ALLOC
 10 .ip_code      00000000  08060000  08060000  0002025c  2**0
                  CONTENTS
 11 .bss          00000674  2000025c  2000025c  0002025c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200008d0  200008d0  0002025c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000217a2  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00003667  00000000  00000000  00041a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001cb0  00000000  00000000  00045098  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b18  00000000  00000000  00046d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0001a164  00000000  00000000  00048860  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00016f79  00000000  00000000  000629c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0009ccbe  00000000  00000000  0007993d  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001165fb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000084f8  00000000  00000000  00116678  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000025c 	.word	0x2000025c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d3ec 	.word	0x0800d3ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000260 	.word	0x20000260
 80001dc:	0800d3ec 	.word	0x0800d3ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_Init+0x40>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_Init+0x40>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_Init+0x40>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f94d 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f808 	bl	8000efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f009 fe56 	bl	800ab9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x54>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x58>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f9ac 	bl	8001278 <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00e      	b.n	8000f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d80a      	bhi.n	8000f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 f942 	bl	80011c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <HAL_InitTick+0x5c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000088 	.word	0x20000088
 8000f54:	20000084 	.word	0x20000084
 8000f58:	20000080 	.word	0x20000080

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x20>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x24>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_IncTick+0x24>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000084 	.word	0x20000084
 8000f80:	2000028c 	.word	0x2000028c

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_GetTick+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	2000028c 	.word	0x2000028c

08000f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fce:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	60d3      	str	r3, [r2, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <__NVIC_GetPriorityGrouping+0x18>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	f003 0307 	and.w	r3, r3, #7
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	db0b      	blt.n	800102a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	f003 021f 	and.w	r2, r3, #31
 8001018:	4907      	ldr	r1, [pc, #28]	; (8001038 <__NVIC_EnableIRQ+0x38>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	095b      	lsrs	r3, r3, #5
 8001020:	2001      	movs	r0, #1
 8001022:	fa00 f202 	lsl.w	r2, r0, r2
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100

0800103c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db10      	blt.n	8001070 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4909      	ldr	r1, [pc, #36]	; (800107c <__NVIC_DisableIRQ+0x40>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	3320      	adds	r3, #32
 8001064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001068:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800106c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	; (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800114c:	d301      	bcc.n	8001152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114e:	2301      	movs	r3, #1
 8001150:	e00f      	b.n	8001172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <SysTick_Config+0x40>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115a:	210f      	movs	r1, #15
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff ff8e 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SysTick_Config+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <SysTick_Config+0x40>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b07      	cmp	r3, #7
 800118c:	d00f      	beq.n	80011ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b06      	cmp	r3, #6
 8001192:	d00c      	beq.n	80011ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b05      	cmp	r3, #5
 8001198:	d009      	beq.n	80011ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b04      	cmp	r3, #4
 800119e:	d006      	beq.n	80011ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d003      	beq.n	80011ae <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011a6:	2192      	movs	r1, #146	; 0x92
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80011aa:	f009 fcd3 	bl	800ab54 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fef4 	bl	8000f9c <__NVIC_SetPriorityGrouping>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	0800d408 	.word	0x0800d408

080011c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d903      	bls.n	80011e0 <HAL_NVIC_SetPriority+0x20>
 80011d8:	21aa      	movs	r1, #170	; 0xaa
 80011da:	480e      	ldr	r0, [pc, #56]	; (8001214 <HAL_NVIC_SetPriority+0x54>)
 80011dc:	f009 fcba 	bl	800ab54 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	2b0f      	cmp	r3, #15
 80011e4:	d903      	bls.n	80011ee <HAL_NVIC_SetPriority+0x2e>
 80011e6:	21ab      	movs	r1, #171	; 0xab
 80011e8:	480a      	ldr	r0, [pc, #40]	; (8001214 <HAL_NVIC_SetPriority+0x54>)
 80011ea:	f009 fcb3 	bl	800ab54 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ee:	f7ff fef9 	bl	8000fe4 <__NVIC_GetPriorityGrouping>
 80011f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	68b9      	ldr	r1, [r7, #8]
 80011f8:	6978      	ldr	r0, [r7, #20]
 80011fa:	f7ff ff6b 	bl	80010d4 <NVIC_EncodePriority>
 80011fe:	4602      	mov	r2, r0
 8001200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff3a 	bl	8001080 <__NVIC_SetPriority>
}
 800120c:	bf00      	nop
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	0800d408 	.word	0x0800d408

08001218 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	da03      	bge.n	8001232 <HAL_NVIC_EnableIRQ+0x1a>
 800122a:	21be      	movs	r1, #190	; 0xbe
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_NVIC_EnableIRQ+0x2c>)
 800122e:	f009 fc91 	bl	800ab54 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fee2 	bl	8001000 <__NVIC_EnableIRQ>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	0800d408 	.word	0x0800d408

08001248 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	da03      	bge.n	8001262 <HAL_NVIC_DisableIRQ+0x1a>
 800125a:	21ce      	movs	r1, #206	; 0xce
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <HAL_NVIC_DisableIRQ+0x2c>)
 800125e:	f009 fc79 	bl	800ab54 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fee8 	bl	800103c <__NVIC_DisableIRQ>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	0800d408 	.word	0x0800d408

08001278 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff5b 	bl	800113c <SysTick_Config>
 8001286:	4603      	mov	r3, r0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e017      	b.n	80012d2 <HAL_CRC_Init+0x42>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <HAL_CRC_Init+0x4c>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d003      	beq.n	80012b4 <HAL_CRC_Init+0x24>
 80012ac:	2168      	movs	r1, #104	; 0x68
 80012ae:	480c      	ldr	r0, [pc, #48]	; (80012e0 <HAL_CRC_Init+0x50>)
 80012b0:	f009 fc50 	bl	800ab54 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	795b      	ldrb	r3, [r3, #5]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d105      	bne.n	80012ca <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f009 fc91 	bl	800abec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023000 	.word	0x40023000
 80012e0:	0800d444 	.word	0x0800d444

080012e4 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2202      	movs	r2, #2
 80012f8:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 0201 	orr.w	r2, r2, #1
 8001308:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	e00a      	b.n	8001326 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	441a      	add	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	429a      	cmp	r2, r3
 800132c:	d3f0      	bcc.n	8001310 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2201      	movs	r2, #1
 800133a:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800133c:	693b      	ldr	r3, [r7, #16]
}
 800133e:	4618      	mov	r0, r3
 8001340:	371c      	adds	r7, #28
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff fe14 	bl	8000f84 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e204      	b.n	8001772 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a97      	ldr	r2, [pc, #604]	; (80015cc <HAL_DMA_Init+0x280>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d04e      	beq.n	8001410 <HAL_DMA_Init+0xc4>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a96      	ldr	r2, [pc, #600]	; (80015d0 <HAL_DMA_Init+0x284>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d049      	beq.n	8001410 <HAL_DMA_Init+0xc4>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a94      	ldr	r2, [pc, #592]	; (80015d4 <HAL_DMA_Init+0x288>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d044      	beq.n	8001410 <HAL_DMA_Init+0xc4>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a93      	ldr	r2, [pc, #588]	; (80015d8 <HAL_DMA_Init+0x28c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d03f      	beq.n	8001410 <HAL_DMA_Init+0xc4>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a91      	ldr	r2, [pc, #580]	; (80015dc <HAL_DMA_Init+0x290>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d03a      	beq.n	8001410 <HAL_DMA_Init+0xc4>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a90      	ldr	r2, [pc, #576]	; (80015e0 <HAL_DMA_Init+0x294>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d035      	beq.n	8001410 <HAL_DMA_Init+0xc4>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a8e      	ldr	r2, [pc, #568]	; (80015e4 <HAL_DMA_Init+0x298>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d030      	beq.n	8001410 <HAL_DMA_Init+0xc4>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a8d      	ldr	r2, [pc, #564]	; (80015e8 <HAL_DMA_Init+0x29c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d02b      	beq.n	8001410 <HAL_DMA_Init+0xc4>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a8b      	ldr	r2, [pc, #556]	; (80015ec <HAL_DMA_Init+0x2a0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d026      	beq.n	8001410 <HAL_DMA_Init+0xc4>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a8a      	ldr	r2, [pc, #552]	; (80015f0 <HAL_DMA_Init+0x2a4>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d021      	beq.n	8001410 <HAL_DMA_Init+0xc4>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a88      	ldr	r2, [pc, #544]	; (80015f4 <HAL_DMA_Init+0x2a8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d01c      	beq.n	8001410 <HAL_DMA_Init+0xc4>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a87      	ldr	r2, [pc, #540]	; (80015f8 <HAL_DMA_Init+0x2ac>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d017      	beq.n	8001410 <HAL_DMA_Init+0xc4>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a85      	ldr	r2, [pc, #532]	; (80015fc <HAL_DMA_Init+0x2b0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d012      	beq.n	8001410 <HAL_DMA_Init+0xc4>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a84      	ldr	r2, [pc, #528]	; (8001600 <HAL_DMA_Init+0x2b4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d00d      	beq.n	8001410 <HAL_DMA_Init+0xc4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a82      	ldr	r2, [pc, #520]	; (8001604 <HAL_DMA_Init+0x2b8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d008      	beq.n	8001410 <HAL_DMA_Init+0xc4>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a81      	ldr	r2, [pc, #516]	; (8001608 <HAL_DMA_Init+0x2bc>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d003      	beq.n	8001410 <HAL_DMA_Init+0xc4>
 8001408:	21b8      	movs	r1, #184	; 0xb8
 800140a:	4880      	ldr	r0, [pc, #512]	; (800160c <HAL_DMA_Init+0x2c0>)
 800140c:	f009 fba2 	bl	800ab54 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d026      	beq.n	8001466 <HAL_DMA_Init+0x11a>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001420:	d021      	beq.n	8001466 <HAL_DMA_Init+0x11a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800142a:	d01c      	beq.n	8001466 <HAL_DMA_Init+0x11a>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001434:	d017      	beq.n	8001466 <HAL_DMA_Init+0x11a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800143e:	d012      	beq.n	8001466 <HAL_DMA_Init+0x11a>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001448:	d00d      	beq.n	8001466 <HAL_DMA_Init+0x11a>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001452:	d008      	beq.n	8001466 <HAL_DMA_Init+0x11a>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800145c:	d003      	beq.n	8001466 <HAL_DMA_Init+0x11a>
 800145e:	21b9      	movs	r1, #185	; 0xb9
 8001460:	486a      	ldr	r0, [pc, #424]	; (800160c <HAL_DMA_Init+0x2c0>)
 8001462:	f009 fb77 	bl	800ab54 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <HAL_DMA_Init+0x13a>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b40      	cmp	r3, #64	; 0x40
 8001474:	d007      	beq.n	8001486 <HAL_DMA_Init+0x13a>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b80      	cmp	r3, #128	; 0x80
 800147c:	d003      	beq.n	8001486 <HAL_DMA_Init+0x13a>
 800147e:	21ba      	movs	r1, #186	; 0xba
 8001480:	4862      	ldr	r0, [pc, #392]	; (800160c <HAL_DMA_Init+0x2c0>)
 8001482:	f009 fb67 	bl	800ab54 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800148e:	d007      	beq.n	80014a0 <HAL_DMA_Init+0x154>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_DMA_Init+0x154>
 8001498:	21bb      	movs	r1, #187	; 0xbb
 800149a:	485c      	ldr	r0, [pc, #368]	; (800160c <HAL_DMA_Init+0x2c0>)
 800149c:	f009 fb5a 	bl	800ab54 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a8:	d007      	beq.n	80014ba <HAL_DMA_Init+0x16e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_DMA_Init+0x16e>
 80014b2:	21bc      	movs	r1, #188	; 0xbc
 80014b4:	4855      	ldr	r0, [pc, #340]	; (800160c <HAL_DMA_Init+0x2c0>)
 80014b6:	f009 fb4d 	bl	800ab54 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00d      	beq.n	80014de <HAL_DMA_Init+0x192>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014ca:	d008      	beq.n	80014de <HAL_DMA_Init+0x192>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014d4:	d003      	beq.n	80014de <HAL_DMA_Init+0x192>
 80014d6:	21bd      	movs	r1, #189	; 0xbd
 80014d8:	484c      	ldr	r0, [pc, #304]	; (800160c <HAL_DMA_Init+0x2c0>)
 80014da:	f009 fb3b 	bl	800ab54 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00d      	beq.n	8001502 <HAL_DMA_Init+0x1b6>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ee:	d008      	beq.n	8001502 <HAL_DMA_Init+0x1b6>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014f8:	d003      	beq.n	8001502 <HAL_DMA_Init+0x1b6>
 80014fa:	21be      	movs	r1, #190	; 0xbe
 80014fc:	4843      	ldr	r0, [pc, #268]	; (800160c <HAL_DMA_Init+0x2c0>)
 80014fe:	f009 fb29 	bl	800ab54 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00c      	beq.n	8001524 <HAL_DMA_Init+0x1d8>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001512:	d007      	beq.n	8001524 <HAL_DMA_Init+0x1d8>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	2b20      	cmp	r3, #32
 800151a:	d003      	beq.n	8001524 <HAL_DMA_Init+0x1d8>
 800151c:	21bf      	movs	r1, #191	; 0xbf
 800151e:	483b      	ldr	r0, [pc, #236]	; (800160c <HAL_DMA_Init+0x2c0>)
 8001520:	f009 fb18 	bl	800ab54 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d012      	beq.n	8001552 <HAL_DMA_Init+0x206>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001534:	d00d      	beq.n	8001552 <HAL_DMA_Init+0x206>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800153e:	d008      	beq.n	8001552 <HAL_DMA_Init+0x206>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001548:	d003      	beq.n	8001552 <HAL_DMA_Init+0x206>
 800154a:	21c0      	movs	r1, #192	; 0xc0
 800154c:	482f      	ldr	r0, [pc, #188]	; (800160c <HAL_DMA_Init+0x2c0>)
 800154e:	f009 fb01 	bl	800ab54 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	2b00      	cmp	r3, #0
 8001558:	d007      	beq.n	800156a <HAL_DMA_Init+0x21e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	2b04      	cmp	r3, #4
 8001560:	d003      	beq.n	800156a <HAL_DMA_Init+0x21e>
 8001562:	21c1      	movs	r1, #193	; 0xc1
 8001564:	4829      	ldr	r0, [pc, #164]	; (800160c <HAL_DMA_Init+0x2c0>)
 8001566:	f009 faf5 	bl	800ab54 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	2b00      	cmp	r3, #0
 8001570:	d065      	beq.n	800163e <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00f      	beq.n	800159a <HAL_DMA_Init+0x24e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	2b01      	cmp	r3, #1
 8001580:	d00b      	beq.n	800159a <HAL_DMA_Init+0x24e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	2b02      	cmp	r3, #2
 8001588:	d007      	beq.n	800159a <HAL_DMA_Init+0x24e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	2b03      	cmp	r3, #3
 8001590:	d003      	beq.n	800159a <HAL_DMA_Init+0x24e>
 8001592:	21c6      	movs	r1, #198	; 0xc6
 8001594:	481d      	ldr	r0, [pc, #116]	; (800160c <HAL_DMA_Init+0x2c0>)
 8001596:	f009 fadd 	bl	800ab54 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d036      	beq.n	8001610 <HAL_DMA_Init+0x2c4>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80015aa:	d031      	beq.n	8001610 <HAL_DMA_Init+0x2c4>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b4:	d02c      	beq.n	8001610 <HAL_DMA_Init+0x2c4>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015be:	d027      	beq.n	8001610 <HAL_DMA_Init+0x2c4>
 80015c0:	21c7      	movs	r1, #199	; 0xc7
 80015c2:	4812      	ldr	r0, [pc, #72]	; (800160c <HAL_DMA_Init+0x2c0>)
 80015c4:	f009 fac6 	bl	800ab54 <assert_failed>
 80015c8:	e022      	b.n	8001610 <HAL_DMA_Init+0x2c4>
 80015ca:	bf00      	nop
 80015cc:	40026010 	.word	0x40026010
 80015d0:	40026028 	.word	0x40026028
 80015d4:	40026040 	.word	0x40026040
 80015d8:	40026058 	.word	0x40026058
 80015dc:	40026070 	.word	0x40026070
 80015e0:	40026088 	.word	0x40026088
 80015e4:	400260a0 	.word	0x400260a0
 80015e8:	400260b8 	.word	0x400260b8
 80015ec:	40026410 	.word	0x40026410
 80015f0:	40026428 	.word	0x40026428
 80015f4:	40026440 	.word	0x40026440
 80015f8:	40026458 	.word	0x40026458
 80015fc:	40026470 	.word	0x40026470
 8001600:	40026488 	.word	0x40026488
 8001604:	400264a0 	.word	0x400264a0
 8001608:	400264b8 	.word	0x400264b8
 800160c:	0800d47c 	.word	0x0800d47c
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	2b00      	cmp	r3, #0
 8001616:	d012      	beq.n	800163e <HAL_DMA_Init+0x2f2>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001620:	d00d      	beq.n	800163e <HAL_DMA_Init+0x2f2>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800162a:	d008      	beq.n	800163e <HAL_DMA_Init+0x2f2>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001634:	d003      	beq.n	800163e <HAL_DMA_Init+0x2f2>
 8001636:	21c8      	movs	r1, #200	; 0xc8
 8001638:	4850      	ldr	r0, [pc, #320]	; (800177c <HAL_DMA_Init+0x430>)
 800163a:	f009 fa8b 	bl	800ab54 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2202      	movs	r2, #2
 800164a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0201 	bic.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165e:	e00f      	b.n	8001680 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001660:	f7ff fc90 	bl	8000f84 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b05      	cmp	r3, #5
 800166c:	d908      	bls.n	8001680 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2220      	movs	r2, #32
 8001672:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2203      	movs	r2, #3
 8001678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e078      	b.n	8001772 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1e8      	bne.n	8001660 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4b39      	ldr	r3, [pc, #228]	; (8001780 <HAL_DMA_Init+0x434>)
 800169a:	4013      	ands	r3, r2
 800169c:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d107      	bne.n	80016ea <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4313      	orrs	r3, r2
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f023 0307 	bic.w	r3, r3, #7
 8001700:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	4313      	orrs	r3, r2
 800170a:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	2b04      	cmp	r3, #4
 8001712:	d117      	bne.n	8001744 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4313      	orrs	r3, r2
 800171c:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00e      	beq.n	8001744 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 faa2 	bl	8001c70 <DMA_CheckFifoParam>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d008      	beq.n	8001744 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2240      	movs	r2, #64	; 0x40
 8001736:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001740:	2301      	movs	r3, #1
 8001742:	e016      	b.n	8001772 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fa59 	bl	8001c04 <DMA_CalcBaseAndBitshift>
 8001752:	4603      	mov	r3, r0
 8001754:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175a:	223f      	movs	r2, #63	; 0x3f
 800175c:	409a      	lsls	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	0800d47c 	.word	0x0800d47c
 8001780:	f010803f 	.word	0xf010803f

08001784 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_DMA_Start_IT+0x26>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a8:	d304      	bcc.n	80017b4 <HAL_DMA_Start_IT+0x30>
 80017aa:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80017ae:	4827      	ldr	r0, [pc, #156]	; (800184c <HAL_DMA_Start_IT+0xc8>)
 80017b0:	f009 f9d0 	bl	800ab54 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <HAL_DMA_Start_IT+0x3e>
 80017be:	2302      	movs	r3, #2
 80017c0:	e040      	b.n	8001844 <HAL_DMA_Start_IT+0xc0>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d12f      	bne.n	8001836 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2202      	movs	r2, #2
 80017da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 f9dc 	bl	8001ba8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f4:	223f      	movs	r2, #63	; 0x3f
 80017f6:	409a      	lsls	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0216 	orr.w	r2, r2, #22
 800180a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	2b00      	cmp	r3, #0
 8001812:	d007      	beq.n	8001824 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0208 	orr.w	r2, r2, #8
 8001822:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 0201 	orr.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	e005      	b.n	8001842 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800183e:	2302      	movs	r3, #2
 8001840:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001842:	7dfb      	ldrb	r3, [r7, #23]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	0800d47c 	.word	0x0800d47c

08001850 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d004      	beq.n	800186e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2280      	movs	r2, #128	; 0x80
 8001868:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e00c      	b.n	8001888 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2205      	movs	r2, #5
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018a0:	4b92      	ldr	r3, [pc, #584]	; (8001aec <HAL_DMA_IRQHandler+0x258>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a92      	ldr	r2, [pc, #584]	; (8001af0 <HAL_DMA_IRQHandler+0x25c>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	0a9b      	lsrs	r3, r3, #10
 80018ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018be:	2208      	movs	r2, #8
 80018c0:	409a      	lsls	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d01a      	beq.n	8001900 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d013      	beq.n	8001900 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0204 	bic.w	r2, r2, #4
 80018e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ec:	2208      	movs	r2, #8
 80018ee:	409a      	lsls	r2, r3
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f8:	f043 0201 	orr.w	r2, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001904:	2201      	movs	r2, #1
 8001906:	409a      	lsls	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d012      	beq.n	8001936 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00b      	beq.n	8001936 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001922:	2201      	movs	r2, #1
 8001924:	409a      	lsls	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192e:	f043 0202 	orr.w	r2, r3, #2
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	2204      	movs	r2, #4
 800193c:	409a      	lsls	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4013      	ands	r3, r2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d012      	beq.n	800196c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00b      	beq.n	800196c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001958:	2204      	movs	r2, #4
 800195a:	409a      	lsls	r2, r3
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001964:	f043 0204 	orr.w	r2, r3, #4
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001970:	2210      	movs	r2, #16
 8001972:	409a      	lsls	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d043      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d03c      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198e:	2210      	movs	r2, #16
 8001990:	409a      	lsls	r2, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d018      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d108      	bne.n	80019c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d024      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	4798      	blx	r3
 80019c2:	e01f      	b.n	8001a04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d01b      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	4798      	blx	r3
 80019d4:	e016      	b.n	8001a04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d107      	bne.n	80019f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0208 	bic.w	r2, r2, #8
 80019f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a08:	2220      	movs	r2, #32
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 808e 	beq.w	8001b32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 8086 	beq.w	8001b32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d136      	bne.n	8001aac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0216 	bic.w	r2, r2, #22
 8001a4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d103      	bne.n	8001a6e <HAL_DMA_IRQHandler+0x1da>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0208 	bic.w	r2, r2, #8
 8001a7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a82:	223f      	movs	r2, #63	; 0x3f
 8001a84:	409a      	lsls	r2, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d07d      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	4798      	blx	r3
        }
        return;
 8001aaa:	e078      	b.n	8001b9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01c      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d108      	bne.n	8001ada <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d030      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	4798      	blx	r3
 8001ad8:	e02b      	b.n	8001b32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d027      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	4798      	blx	r3
 8001aea:	e022      	b.n	8001b32 <HAL_DMA_IRQHandler+0x29e>
 8001aec:	20000088 	.word	0x20000088
 8001af0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10f      	bne.n	8001b22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0210 	bic.w	r2, r2, #16
 8001b10:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d032      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d022      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2205      	movs	r2, #5
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	3301      	adds	r3, #1
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d307      	bcc.n	8001b7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f2      	bne.n	8001b5e <HAL_DMA_IRQHandler+0x2ca>
 8001b78:	e000      	b.n	8001b7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b7a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	4798      	blx	r3
 8001b9c:	e000      	b.n	8001ba0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b9e:	bf00      	nop
    }
  }
}
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop

08001ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b40      	cmp	r3, #64	; 0x40
 8001bd4:	d108      	bne.n	8001be8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001be6:	e007      	b.n	8001bf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	60da      	str	r2, [r3, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	3b10      	subs	r3, #16
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <DMA_CalcBaseAndBitshift+0x64>)
 8001c16:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c1e:	4a13      	ldr	r2, [pc, #76]	; (8001c6c <DMA_CalcBaseAndBitshift+0x68>)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d909      	bls.n	8001c46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c3a:	f023 0303 	bic.w	r3, r3, #3
 8001c3e:	1d1a      	adds	r2, r3, #4
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	659a      	str	r2, [r3, #88]	; 0x58
 8001c44:	e007      	b.n	8001c56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c4e:	f023 0303 	bic.w	r3, r3, #3
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	aaaaaaab 	.word	0xaaaaaaab
 8001c6c:	0800db6c 	.word	0x0800db6c

08001c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d11f      	bne.n	8001cca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d855      	bhi.n	8001d3c <DMA_CheckFifoParam+0xcc>
 8001c90:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <DMA_CheckFifoParam+0x28>)
 8001c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c96:	bf00      	nop
 8001c98:	08001ca9 	.word	0x08001ca9
 8001c9c:	08001cbb 	.word	0x08001cbb
 8001ca0:	08001ca9 	.word	0x08001ca9
 8001ca4:	08001d3d 	.word	0x08001d3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d045      	beq.n	8001d40 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cb8:	e042      	b.n	8001d40 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cc2:	d13f      	bne.n	8001d44 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cc8:	e03c      	b.n	8001d44 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cd2:	d121      	bne.n	8001d18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d836      	bhi.n	8001d48 <DMA_CheckFifoParam+0xd8>
 8001cda:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <DMA_CheckFifoParam+0x70>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001cf1 	.word	0x08001cf1
 8001ce4:	08001cf7 	.word	0x08001cf7
 8001ce8:	08001cf1 	.word	0x08001cf1
 8001cec:	08001d09 	.word	0x08001d09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf4:	e02f      	b.n	8001d56 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d024      	beq.n	8001d4c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d06:	e021      	b.n	8001d4c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d10:	d11e      	bne.n	8001d50 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d16:	e01b      	b.n	8001d50 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d902      	bls.n	8001d24 <DMA_CheckFifoParam+0xb4>
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d003      	beq.n	8001d2a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d22:	e018      	b.n	8001d56 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
      break;
 8001d28:	e015      	b.n	8001d56 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00e      	beq.n	8001d54 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
      break;
 8001d3a:	e00b      	b.n	8001d54 <DMA_CheckFifoParam+0xe4>
      break;
 8001d3c:	bf00      	nop
 8001d3e:	e00a      	b.n	8001d56 <DMA_CheckFifoParam+0xe6>
      break;
 8001d40:	bf00      	nop
 8001d42:	e008      	b.n	8001d56 <DMA_CheckFifoParam+0xe6>
      break;
 8001d44:	bf00      	nop
 8001d46:	e006      	b.n	8001d56 <DMA_CheckFifoParam+0xe6>
      break;
 8001d48:	bf00      	nop
 8001d4a:	e004      	b.n	8001d56 <DMA_CheckFifoParam+0xe6>
      break;
 8001d4c:	bf00      	nop
 8001d4e:	e002      	b.n	8001d56 <DMA_CheckFifoParam+0xe6>
      break;   
 8001d50:	bf00      	nop
 8001d52:	e000      	b.n	8001d56 <DMA_CheckFifoParam+0xe6>
      break;
 8001d54:	bf00      	nop
    }
  } 
  
  return status; 
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d76:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_FLASH_Program+0xc0>)
 8001d78:	7e1b      	ldrb	r3, [r3, #24]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_FLASH_Program+0x1e>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e04b      	b.n	8001e1a <HAL_FLASH_Program+0xb6>
 8001d82:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <HAL_FLASH_Program+0xc0>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00c      	beq.n	8001da8 <HAL_FLASH_Program+0x44>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d009      	beq.n	8001da8 <HAL_FLASH_Program+0x44>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d006      	beq.n	8001da8 <HAL_FLASH_Program+0x44>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d003      	beq.n	8001da8 <HAL_FLASH_Program+0x44>
 8001da0:	21a4      	movs	r1, #164	; 0xa4
 8001da2:	4821      	ldr	r0, [pc, #132]	; (8001e28 <HAL_FLASH_Program+0xc4>)
 8001da4:	f008 fed6 	bl	800ab54 <assert_failed>
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001da8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dac:	f000 f8b2 	bl	8001f14 <FLASH_WaitForLastOperation>
 8001db0:	4603      	mov	r3, r0
 8001db2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d12b      	bne.n	8001e12 <HAL_FLASH_Program+0xae>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <HAL_FLASH_Program+0x68>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001dc0:	783b      	ldrb	r3, [r7, #0]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	68b8      	ldr	r0, [r7, #8]
 8001dc6:	f000 f9ad 	bl	8002124 <FLASH_Program_Byte>
 8001dca:	e016      	b.n	8001dfa <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d105      	bne.n	8001dde <HAL_FLASH_Program+0x7a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001dd2:	883b      	ldrh	r3, [r7, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	68b8      	ldr	r0, [r7, #8]
 8001dd8:	f000 f966 	bl	80020a8 <FLASH_Program_HalfWord>
 8001ddc:	e00d      	b.n	8001dfa <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d105      	bne.n	8001df0 <HAL_FLASH_Program+0x8c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	68b8      	ldr	r0, [r7, #8]
 8001dea:	f000 f91f 	bl	800202c <FLASH_Program_Word>
 8001dee:	e004      	b.n	8001dfa <HAL_FLASH_Program+0x96>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001df4:	68b8      	ldr	r0, [r7, #8]
 8001df6:	f000 f8cd 	bl	8001f94 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dfa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dfe:	f000 f889 	bl	8001f14 <FLASH_WaitForLastOperation>
 8001e02:	4603      	mov	r3, r0
 8001e04:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <HAL_FLASH_Program+0xc8>)
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	4a08      	ldr	r2, [pc, #32]	; (8001e2c <HAL_FLASH_Program+0xc8>)
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e12:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <HAL_FLASH_Program+0xc0>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000290 	.word	0x20000290
 8001e28:	0800d4b4 	.word	0x0800d4b4
 8001e2c:	40023c00 	.word	0x40023c00

08001e30 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_FLASH_Unlock+0x38>)
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	da0b      	bge.n	8001e5a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_FLASH_Unlock+0x38>)
 8001e44:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <HAL_FLASH_Unlock+0x3c>)
 8001e46:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <HAL_FLASH_Unlock+0x38>)
 8001e4a:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <HAL_FLASH_Unlock+0x40>)
 8001e4c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_FLASH_Unlock+0x38>)
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	da01      	bge.n	8001e5a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40023c00 	.word	0x40023c00
 8001e6c:	45670123 	.word	0x45670123
 8001e70:	cdef89ab 	.word	0xcdef89ab

08001e74 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_FLASH_Lock+0x1c>)
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <HAL_FLASH_Lock+0x1c>)
 8001e7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e82:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	40023c00 	.word	0x40023c00

08001e94 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_FLASH_OB_Unlock+0x2c>)
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_FLASH_OB_Unlock+0x2c>)
 8001ea6:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_FLASH_OB_Unlock+0x30>)
 8001ea8:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_FLASH_OB_Unlock+0x2c>)
 8001eac:	4a06      	ldr	r2, [pc, #24]	; (8001ec8 <HAL_FLASH_OB_Unlock+0x34>)
 8001eae:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e000      	b.n	8001eb6 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40023c00 	.word	0x40023c00
 8001ec4:	08192a3b 	.word	0x08192a3b
 8001ec8:	4c5d6e7f 	.word	0x4c5d6e7f

08001ecc <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_FLASH_OB_Lock+0x1c>)
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_FLASH_OB_Lock+0x1c>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	40023c00 	.word	0x40023c00

08001eec <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <HAL_FLASH_OB_Launch+0x24>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <HAL_FLASH_OB_Launch+0x24>)
 8001ef8:	f043 0302 	orr.w	r3, r3, #2
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8001f00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f04:	f000 f806 	bl	8001f14 <FLASH_WaitForLastOperation>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023c14 	.word	0x40023c14

08001f14 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <FLASH_WaitForLastOperation+0x78>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f26:	f7ff f82d 	bl	8000f84 <HAL_GetTick>
 8001f2a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001f2c:	e010      	b.n	8001f50 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f34:	d00c      	beq.n	8001f50 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d007      	beq.n	8001f4c <FLASH_WaitForLastOperation+0x38>
 8001f3c:	f7ff f822 	bl	8000f84 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d201      	bcs.n	8001f50 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e019      	b.n	8001f84 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <FLASH_WaitForLastOperation+0x7c>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1e8      	bne.n	8001f2e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <FLASH_WaitForLastOperation+0x7c>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <FLASH_WaitForLastOperation+0x7c>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <FLASH_WaitForLastOperation+0x7c>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001f7a:	f000 f90f 	bl	800219c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
  
}  
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000290 	.word	0x20000290
 8001f90:	40023c00 	.word	0x40023c00

08001f94 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fa6:	d303      	bcc.n	8001fb0 <FLASH_Program_DoubleWord+0x1c>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <FLASH_Program_DoubleWord+0x84>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d90c      	bls.n	8001fca <FLASH_Program_DoubleWord+0x36>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4a1a      	ldr	r2, [pc, #104]	; (800201c <FLASH_Program_DoubleWord+0x88>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d903      	bls.n	8001fc0 <FLASH_Program_DoubleWord+0x2c>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a19      	ldr	r2, [pc, #100]	; (8002020 <FLASH_Program_DoubleWord+0x8c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d904      	bls.n	8001fca <FLASH_Program_DoubleWord+0x36>
 8001fc0:	f240 2167 	movw	r1, #615	; 0x267
 8001fc4:	4817      	ldr	r0, [pc, #92]	; (8002024 <FLASH_Program_DoubleWord+0x90>)
 8001fc6:	f008 fdc5 	bl	800ab54 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <FLASH_Program_DoubleWord+0x94>)
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	4a16      	ldr	r2, [pc, #88]	; (8002028 <FLASH_Program_DoubleWord+0x94>)
 8001fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <FLASH_Program_DoubleWord+0x94>)
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	4a13      	ldr	r2, [pc, #76]	; (8002028 <FLASH_Program_DoubleWord+0x94>)
 8001fdc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001fe0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <FLASH_Program_DoubleWord+0x94>)
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	4a10      	ldr	r2, [pc, #64]	; (8002028 <FLASH_Program_DoubleWord+0x94>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001ff8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	f04f 0400 	mov.w	r4, #0
 8002004:	0013      	movs	r3, r2
 8002006:	2400      	movs	r4, #0
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	3204      	adds	r2, #4
 800200c:	6013      	str	r3, [r2, #0]
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	bd90      	pop	{r4, r7, pc}
 8002016:	bf00      	nop
 8002018:	0807ffff 	.word	0x0807ffff
 800201c:	1fff77ff 	.word	0x1fff77ff
 8002020:	1fff7a0f 	.word	0x1fff7a0f
 8002024:	0800d4b4 	.word	0x0800d4b4
 8002028:	40023c00 	.word	0x40023c00

0800202c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800203c:	d303      	bcc.n	8002046 <FLASH_Program_Word+0x1a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a14      	ldr	r2, [pc, #80]	; (8002094 <FLASH_Program_Word+0x68>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d90c      	bls.n	8002060 <FLASH_Program_Word+0x34>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a13      	ldr	r2, [pc, #76]	; (8002098 <FLASH_Program_Word+0x6c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d903      	bls.n	8002056 <FLASH_Program_Word+0x2a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a12      	ldr	r2, [pc, #72]	; (800209c <FLASH_Program_Word+0x70>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d904      	bls.n	8002060 <FLASH_Program_Word+0x34>
 8002056:	f240 2189 	movw	r1, #649	; 0x289
 800205a:	4811      	ldr	r0, [pc, #68]	; (80020a0 <FLASH_Program_Word+0x74>)
 800205c:	f008 fd7a 	bl	800ab54 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002060:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <FLASH_Program_Word+0x78>)
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <FLASH_Program_Word+0x78>)
 8002066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800206a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800206c:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <FLASH_Program_Word+0x78>)
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <FLASH_Program_Word+0x78>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002076:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <FLASH_Program_Word+0x78>)
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <FLASH_Program_Word+0x78>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	0807ffff 	.word	0x0807ffff
 8002098:	1fff77ff 	.word	0x1fff77ff
 800209c:	1fff7a0f 	.word	0x1fff7a0f
 80020a0:	0800d4b4 	.word	0x0800d4b4
 80020a4:	40023c00 	.word	0x40023c00

080020a8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020ba:	d303      	bcc.n	80020c4 <FLASH_Program_HalfWord+0x1c>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a14      	ldr	r2, [pc, #80]	; (8002110 <FLASH_Program_HalfWord+0x68>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d90c      	bls.n	80020de <FLASH_Program_HalfWord+0x36>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a13      	ldr	r2, [pc, #76]	; (8002114 <FLASH_Program_HalfWord+0x6c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d903      	bls.n	80020d4 <FLASH_Program_HalfWord+0x2c>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a12      	ldr	r2, [pc, #72]	; (8002118 <FLASH_Program_HalfWord+0x70>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d904      	bls.n	80020de <FLASH_Program_HalfWord+0x36>
 80020d4:	f240 21a2 	movw	r1, #674	; 0x2a2
 80020d8:	4810      	ldr	r0, [pc, #64]	; (800211c <FLASH_Program_HalfWord+0x74>)
 80020da:	f008 fd3b 	bl	800ab54 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <FLASH_Program_HalfWord+0x78>)
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <FLASH_Program_HalfWord+0x78>)
 80020e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <FLASH_Program_HalfWord+0x78>)
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <FLASH_Program_HalfWord+0x78>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <FLASH_Program_HalfWord+0x78>)
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	4a09      	ldr	r2, [pc, #36]	; (8002120 <FLASH_Program_HalfWord+0x78>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	887a      	ldrh	r2, [r7, #2]
 8002106:	801a      	strh	r2, [r3, #0]
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	0807ffff 	.word	0x0807ffff
 8002114:	1fff77ff 	.word	0x1fff77ff
 8002118:	1fff7a0f 	.word	0x1fff7a0f
 800211c:	0800d4b4 	.word	0x0800d4b4
 8002120:	40023c00 	.word	0x40023c00

08002124 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002136:	d303      	bcc.n	8002140 <FLASH_Program_Byte+0x1c>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a13      	ldr	r2, [pc, #76]	; (8002188 <FLASH_Program_Byte+0x64>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d90c      	bls.n	800215a <FLASH_Program_Byte+0x36>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a12      	ldr	r2, [pc, #72]	; (800218c <FLASH_Program_Byte+0x68>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d903      	bls.n	8002150 <FLASH_Program_Byte+0x2c>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a11      	ldr	r2, [pc, #68]	; (8002190 <FLASH_Program_Byte+0x6c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d904      	bls.n	800215a <FLASH_Program_Byte+0x36>
 8002150:	f240 21bb 	movw	r1, #699	; 0x2bb
 8002154:	480f      	ldr	r0, [pc, #60]	; (8002194 <FLASH_Program_Byte+0x70>)
 8002156:	f008 fcfd 	bl	800ab54 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <FLASH_Program_Byte+0x74>)
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <FLASH_Program_Byte+0x74>)
 8002160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002164:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <FLASH_Program_Byte+0x74>)
 8002168:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <FLASH_Program_Byte+0x74>)
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <FLASH_Program_Byte+0x74>)
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	4a09      	ldr	r2, [pc, #36]	; (8002198 <FLASH_Program_Byte+0x74>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	78fa      	ldrb	r2, [r7, #3]
 800217e:	701a      	strb	r2, [r3, #0]
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	0807ffff 	.word	0x0807ffff
 800218c:	1fff77ff 	.word	0x1fff77ff
 8002190:	1fff7a0f 	.word	0x1fff7a0f
 8002194:	0800d4b4 	.word	0x0800d4b4
 8002198:	40023c00 	.word	0x40023c00

0800219c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80021a0:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <FLASH_SetErrorCode+0xc4>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80021ac:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <FLASH_SetErrorCode+0xc8>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	f043 0310 	orr.w	r3, r3, #16
 80021b4:	4a2b      	ldr	r2, [pc, #172]	; (8002264 <FLASH_SetErrorCode+0xc8>)
 80021b6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80021b8:	4b29      	ldr	r3, [pc, #164]	; (8002260 <FLASH_SetErrorCode+0xc4>)
 80021ba:	2210      	movs	r2, #16
 80021bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80021be:	4b28      	ldr	r3, [pc, #160]	; (8002260 <FLASH_SetErrorCode+0xc4>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <FLASH_SetErrorCode+0xc8>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f043 0308 	orr.w	r3, r3, #8
 80021d2:	4a24      	ldr	r2, [pc, #144]	; (8002264 <FLASH_SetErrorCode+0xc8>)
 80021d4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80021d6:	4b22      	ldr	r3, [pc, #136]	; (8002260 <FLASH_SetErrorCode+0xc4>)
 80021d8:	2220      	movs	r2, #32
 80021da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80021dc:	4b20      	ldr	r3, [pc, #128]	; (8002260 <FLASH_SetErrorCode+0xc4>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80021e8:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <FLASH_SetErrorCode+0xc8>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	4a1c      	ldr	r2, [pc, #112]	; (8002264 <FLASH_SetErrorCode+0xc8>)
 80021f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80021f4:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <FLASH_SetErrorCode+0xc4>)
 80021f6:	2240      	movs	r2, #64	; 0x40
 80021f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80021fa:	4b19      	ldr	r3, [pc, #100]	; (8002260 <FLASH_SetErrorCode+0xc4>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <FLASH_SetErrorCode+0xc8>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f043 0302 	orr.w	r3, r3, #2
 800220e:	4a15      	ldr	r2, [pc, #84]	; (8002264 <FLASH_SetErrorCode+0xc8>)
 8002210:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <FLASH_SetErrorCode+0xc4>)
 8002214:	2280      	movs	r2, #128	; 0x80
 8002216:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <FLASH_SetErrorCode+0xc4>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d009      	beq.n	8002238 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <FLASH_SetErrorCode+0xc8>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	4a0d      	ldr	r2, [pc, #52]	; (8002264 <FLASH_SetErrorCode+0xc8>)
 800222e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <FLASH_SetErrorCode+0xc4>)
 8002232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002236:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <FLASH_SetErrorCode+0xc4>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002244:	4b07      	ldr	r3, [pc, #28]	; (8002264 <FLASH_SetErrorCode+0xc8>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	f043 0320 	orr.w	r3, r3, #32
 800224c:	4a05      	ldr	r2, [pc, #20]	; (8002264 <FLASH_SetErrorCode+0xc8>)
 800224e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <FLASH_SetErrorCode+0xc4>)
 8002252:	2202      	movs	r2, #2
 8002254:	60da      	str	r2, [r3, #12]
  }
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	40023c00 	.word	0x40023c00
 8002264:	20000290 	.word	0x20000290

08002268 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002274:	4b3d      	ldr	r3, [pc, #244]	; (800236c <HAL_FLASHEx_OBProgram+0x104>)
 8002276:	7e1b      	ldrb	r3, [r3, #24]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_FLASHEx_OBProgram+0x18>
 800227c:	2302      	movs	r3, #2
 800227e:	e071      	b.n	8002364 <HAL_FLASHEx_OBProgram+0xfc>
 8002280:	4b3a      	ldr	r3, [pc, #232]	; (800236c <HAL_FLASHEx_OBProgram+0x104>)
 8002282:	2201      	movs	r2, #1
 8002284:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b0f      	cmp	r3, #15
 800228c:	d904      	bls.n	8002298 <HAL_FLASHEx_OBProgram+0x30>
 800228e:	f44f 7193 	mov.w	r1, #294	; 0x126
 8002292:	4837      	ldr	r0, [pc, #220]	; (8002370 <HAL_FLASHEx_OBProgram+0x108>)
 8002294:	f008 fc5e 	bl	800ab54 <assert_failed>

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d025      	beq.n	80022f0 <HAL_FLASHEx_OBProgram+0x88>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_FLASHEx_OBProgram+0x56>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d004      	beq.n	80022be <HAL_FLASHEx_OBProgram+0x56>
 80022b4:	f240 112b 	movw	r1, #299	; 0x12b
 80022b8:	482d      	ldr	r0, [pc, #180]	; (8002370 <HAL_FLASHEx_OBProgram+0x108>)
 80022ba:	f008 fc4b 	bl	800ab54 <assert_failed>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d10a      	bne.n	80022dc <HAL_FLASHEx_OBProgram+0x74>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	4619      	mov	r1, r3
 80022d0:	4610      	mov	r0, r2
 80022d2:	f000 f8e9 	bl	80024a8 <FLASH_OB_EnableWRP>
 80022d6:	4603      	mov	r3, r0
 80022d8:	73fb      	strb	r3, [r7, #15]
 80022da:	e009      	b.n	80022f0 <HAL_FLASHEx_OBProgram+0x88>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4619      	mov	r1, r3
 80022e6:	4610      	mov	r0, r2
 80022e8:	f000 f91a 	bl	8002520 <FLASH_OB_DisableWRP>
 80022ec:	4603      	mov	r3, r0
 80022ee:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <HAL_FLASHEx_OBProgram+0xa4>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	4618      	mov	r0, r3
 8002304:	f000 f946 	bl	8002594 <FLASH_OB_RDP_LevelConfig>
 8002308:	4603      	mov	r3, r0
 800230a:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d013      	beq.n	8002340 <HAL_FLASHEx_OBProgram+0xd8>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7e1b      	ldrb	r3, [r3, #24]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	b2d8      	uxtb	r0, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8002326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232a:	b2d9      	uxtb	r1, r3
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 8002330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	f000 f956 	bl	80025e8 <FLASH_OB_UserConfig>
 800233c:	4603      	mov	r3, r0
 800233e:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d007      	beq.n	800235c <HAL_FLASHEx_OBProgram+0xf4>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f99a 	bl	800268c <FLASH_OB_BOR_LevelConfig>
 8002358:	4603      	mov	r3, r0
 800235a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_FLASHEx_OBProgram+0x104>)
 800235e:	2200      	movs	r2, #0
 8002360:	761a      	strb	r2, [r3, #24]

  return status;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000290 	.word	0x20000290
 8002370:	0800d4f0 	.word	0x0800d4f0

08002374 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	220f      	movs	r2, #15
 8002380:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8002382:	f000 f9c3 	bl	800270c <FLASH_OB_GetWRP>
 8002386:	4603      	mov	r3, r0
 8002388:	461a      	mov	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800238e:	f000 f9c9 	bl	8002724 <FLASH_OB_GetRDP>
 8002392:	4603      	mov	r3, r0
 8002394:	461a      	mov	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800239a:	f000 f9a7 	bl	80026ec <FLASH_OB_GetUser>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 80023a6:	f000 f9dd 	bl	8002764 <FLASH_OB_GetBOR>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461a      	mov	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	615a      	str	r2, [r3, #20]
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d019      	beq.n	8002406 <FLASH_Erase_Sector+0x4a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d016      	beq.n	8002406 <FLASH_Erase_Sector+0x4a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d013      	beq.n	8002406 <FLASH_Erase_Sector+0x4a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d010      	beq.n	8002406 <FLASH_Erase_Sector+0x4a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d00d      	beq.n	8002406 <FLASH_Erase_Sector+0x4a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d00a      	beq.n	8002406 <FLASH_Erase_Sector+0x4a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d007      	beq.n	8002406 <FLASH_Erase_Sector+0x4a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b07      	cmp	r3, #7
 80023fa:	d004      	beq.n	8002406 <FLASH_Erase_Sector+0x4a>
 80023fc:	f240 31db 	movw	r1, #987	; 0x3db
 8002400:	4827      	ldr	r0, [pc, #156]	; (80024a0 <FLASH_Erase_Sector+0xe4>)
 8002402:	f008 fba7 	bl	800ab54 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00d      	beq.n	8002428 <FLASH_Erase_Sector+0x6c>
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d00a      	beq.n	8002428 <FLASH_Erase_Sector+0x6c>
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d007      	beq.n	8002428 <FLASH_Erase_Sector+0x6c>
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d004      	beq.n	8002428 <FLASH_Erase_Sector+0x6c>
 800241e:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 8002422:	481f      	ldr	r0, [pc, #124]	; (80024a0 <FLASH_Erase_Sector+0xe4>)
 8002424:	f008 fb96 	bl	800ab54 <assert_failed>
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <FLASH_Erase_Sector+0x78>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	e010      	b.n	8002456 <FLASH_Erase_Sector+0x9a>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d103      	bne.n	8002442 <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800243a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e009      	b.n	8002456 <FLASH_Erase_Sector+0x9a>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d103      	bne.n	8002450 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	e002      	b.n	8002456 <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002450:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002454:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <FLASH_Erase_Sector+0xe8>)
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <FLASH_Erase_Sector+0xe8>)
 800245c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002460:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <FLASH_Erase_Sector+0xe8>)
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	490f      	ldr	r1, [pc, #60]	; (80024a4 <FLASH_Erase_Sector+0xe8>)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <FLASH_Erase_Sector+0xe8>)
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <FLASH_Erase_Sector+0xe8>)
 8002474:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002478:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <FLASH_Erase_Sector+0xe8>)
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4313      	orrs	r3, r2
 8002484:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <FLASH_Erase_Sector+0xe8>)
 8002486:	f043 0302 	orr.w	r3, r3, #2
 800248a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <FLASH_Erase_Sector+0xe8>)
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <FLASH_Erase_Sector+0xe8>)
 8002492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002496:	6113      	str	r3, [r2, #16]
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	0800d4f0 	.word	0x0800d4f0
 80024a4:	40023c00 	.word	0x40023c00

080024a8 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80024bc:	f023 030f 	bic.w	r3, r3, #15
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <FLASH_OB_EnableWRP+0x22>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d104      	bne.n	80024d4 <FLASH_OB_EnableWRP+0x2c>
 80024ca:	f240 410d 	movw	r1, #1037	; 0x40d
 80024ce:	4812      	ldr	r0, [pc, #72]	; (8002518 <FLASH_OB_EnableWRP+0x70>)
 80024d0:	f008 fb40 	bl	800ab54 <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d004      	beq.n	80024e4 <FLASH_OB_EnableWRP+0x3c>
 80024da:	f240 410e 	movw	r1, #1038	; 0x40e
 80024de:	480e      	ldr	r0, [pc, #56]	; (8002518 <FLASH_OB_EnableWRP+0x70>)
 80024e0:	f008 fb38 	bl	800ab54 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024e8:	f7ff fd14 	bl	8001f14 <FLASH_WaitForLastOperation>
 80024ec:	4603      	mov	r3, r0
 80024ee:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10a      	bne.n	800250c <FLASH_OB_EnableWRP+0x64>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <FLASH_OB_EnableWRP+0x74>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	b29b      	uxth	r3, r3
 8002504:	4905      	ldr	r1, [pc, #20]	; (800251c <FLASH_OB_EnableWRP+0x74>)
 8002506:	4013      	ands	r3, r2
 8002508:	b29b      	uxth	r3, r3
 800250a:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	0800d4f0 	.word	0x0800d4f0
 800251c:	40023c16 	.word	0x40023c16

08002520 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002534:	f023 030f 	bic.w	r3, r3, #15
 8002538:	2b00      	cmp	r3, #0
 800253a:	d102      	bne.n	8002542 <FLASH_OB_DisableWRP+0x22>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d104      	bne.n	800254c <FLASH_OB_DisableWRP+0x2c>
 8002542:	f240 4131 	movw	r1, #1073	; 0x431
 8002546:	4811      	ldr	r0, [pc, #68]	; (800258c <FLASH_OB_DisableWRP+0x6c>)
 8002548:	f008 fb04 	bl	800ab54 <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d004      	beq.n	800255c <FLASH_OB_DisableWRP+0x3c>
 8002552:	f240 4132 	movw	r1, #1074	; 0x432
 8002556:	480d      	ldr	r0, [pc, #52]	; (800258c <FLASH_OB_DisableWRP+0x6c>)
 8002558:	f008 fafc 	bl	800ab54 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800255c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002560:	f7ff fcd8 	bl	8001f14 <FLASH_WaitForLastOperation>
 8002564:	4603      	mov	r3, r0
 8002566:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d108      	bne.n	8002580 <FLASH_OB_DisableWRP+0x60>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <FLASH_OB_DisableWRP+0x70>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29a      	uxth	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	b29b      	uxth	r3, r3
 8002578:	4905      	ldr	r1, [pc, #20]	; (8002590 <FLASH_OB_DisableWRP+0x70>)
 800257a:	4313      	orrs	r3, r2
 800257c:	b29b      	uxth	r3, r3
 800257e:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	0800d4f0 	.word	0x0800d4f0
 8002590:	40023c16 	.word	0x40023c16

08002594 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	2baa      	cmp	r3, #170	; 0xaa
 80025a6:	d00a      	beq.n	80025be <FLASH_OB_RDP_LevelConfig+0x2a>
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	2b55      	cmp	r3, #85	; 0x55
 80025ac:	d007      	beq.n	80025be <FLASH_OB_RDP_LevelConfig+0x2a>
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	2bcc      	cmp	r3, #204	; 0xcc
 80025b2:	d004      	beq.n	80025be <FLASH_OB_RDP_LevelConfig+0x2a>
 80025b4:	f240 418f 	movw	r1, #1167	; 0x48f
 80025b8:	4809      	ldr	r0, [pc, #36]	; (80025e0 <FLASH_OB_RDP_LevelConfig+0x4c>)
 80025ba:	f008 facb 	bl	800ab54 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025c2:	f7ff fca7 	bl	8001f14 <FLASH_WaitForLastOperation>
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <FLASH_OB_RDP_LevelConfig+0x42>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 80025d0:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <FLASH_OB_RDP_LevelConfig+0x50>)
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	0800d4f0 	.word	0x0800d4f0
 80025e4:	40023c15 	.word	0x40023c15

080025e8 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
 80025f2:	460b      	mov	r3, r1
 80025f4:	71bb      	strb	r3, [r7, #6]
 80025f6:	4613      	mov	r3, r2
 80025f8:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 80025fa:	23ff      	movs	r3, #255	; 0xff
 80025fc:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	2b20      	cmp	r3, #32
 8002606:	d007      	beq.n	8002618 <FLASH_OB_UserConfig+0x30>
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d004      	beq.n	8002618 <FLASH_OB_UserConfig+0x30>
 800260e:	f240 41b2 	movw	r1, #1202	; 0x4b2
 8002612:	481c      	ldr	r0, [pc, #112]	; (8002684 <FLASH_OB_UserConfig+0x9c>)
 8002614:	f008 fa9e 	bl	800ab54 <assert_failed>
  assert_param(IS_OB_STOP_SOURCE(Stop));
 8002618:	79bb      	ldrb	r3, [r7, #6]
 800261a:	2b40      	cmp	r3, #64	; 0x40
 800261c:	d007      	beq.n	800262e <FLASH_OB_UserConfig+0x46>
 800261e:	79bb      	ldrb	r3, [r7, #6]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d004      	beq.n	800262e <FLASH_OB_UserConfig+0x46>
 8002624:	f240 41b3 	movw	r1, #1203	; 0x4b3
 8002628:	4816      	ldr	r0, [pc, #88]	; (8002684 <FLASH_OB_UserConfig+0x9c>)
 800262a:	f008 fa93 	bl	800ab54 <assert_failed>
  assert_param(IS_OB_STDBY_SOURCE(Stdby));
 800262e:	797b      	ldrb	r3, [r7, #5]
 8002630:	2b80      	cmp	r3, #128	; 0x80
 8002632:	d007      	beq.n	8002644 <FLASH_OB_UserConfig+0x5c>
 8002634:	797b      	ldrb	r3, [r7, #5]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <FLASH_OB_UserConfig+0x5c>
 800263a:	f240 41b4 	movw	r1, #1204	; 0x4b4
 800263e:	4811      	ldr	r0, [pc, #68]	; (8002684 <FLASH_OB_UserConfig+0x9c>)
 8002640:	f008 fa88 	bl	800ab54 <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002644:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002648:	f7ff fc64 	bl	8001f14 <FLASH_WaitForLastOperation>
 800264c:	4603      	mov	r3, r0
 800264e:	73bb      	strb	r3, [r7, #14]
  
  if(status == HAL_OK)
 8002650:	7bbb      	ldrb	r3, [r7, #14]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d111      	bne.n	800267a <FLASH_OB_UserConfig+0x92>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <FLASH_OB_UserConfig+0xa0>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 8002662:	79ba      	ldrb	r2, [r7, #6]
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	4313      	orrs	r3, r2
 8002668:	b2da      	uxtb	r2, r3
 800266a:	797b      	ldrb	r3, [r7, #5]
 800266c:	4313      	orrs	r3, r2
 800266e:	b2da      	uxtb	r2, r3
 8002670:	4905      	ldr	r1, [pc, #20]	; (8002688 <FLASH_OB_UserConfig+0xa0>)
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	4313      	orrs	r3, r2
 8002676:	b2db      	uxtb	r3, r3
 8002678:	700b      	strb	r3, [r1, #0]
  }
  
  return status; 
 800267a:	7bbb      	ldrb	r3, [r7, #14]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	0800d4f0 	.word	0x0800d4f0
 8002688:	40023c14 	.word	0x40023c14

0800268c <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	2b08      	cmp	r3, #8
 800269a:	d00d      	beq.n	80026b8 <FLASH_OB_BOR_LevelConfig+0x2c>
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d00a      	beq.n	80026b8 <FLASH_OB_BOR_LevelConfig+0x2c>
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <FLASH_OB_BOR_LevelConfig+0x2c>
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	2b0c      	cmp	r3, #12
 80026ac:	d004      	beq.n	80026b8 <FLASH_OB_BOR_LevelConfig+0x2c>
 80026ae:	f240 41d2 	movw	r1, #1234	; 0x4d2
 80026b2:	480c      	ldr	r0, [pc, #48]	; (80026e4 <FLASH_OB_BOR_LevelConfig+0x58>)
 80026b4:	f008 fa4e 	bl	800ab54 <assert_failed>

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <FLASH_OB_BOR_LevelConfig+0x5c>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <FLASH_OB_BOR_LevelConfig+0x5c>)
 80026c0:	f023 030c 	bic.w	r3, r3, #12
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <FLASH_OB_BOR_LevelConfig+0x5c>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4906      	ldr	r1, [pc, #24]	; (80026e8 <FLASH_OB_BOR_LevelConfig+0x5c>)
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	700b      	strb	r3, [r1, #0]
  
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
  
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	0800d4f0 	.word	0x0800d4f0
 80026e8:	40023c14 	.word	0x40023c14

080026ec <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <FLASH_OB_GetUser+0x1c>)
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f023 031f 	bic.w	r3, r3, #31
 80026fa:	b2db      	uxtb	r3, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40023c00 	.word	0x40023c00

0800270c <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <FLASH_OB_GetWRP+0x14>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	b29b      	uxth	r3, r3
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40023c16 	.word	0x40023c16

08002724 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800272a:	23aa      	movs	r3, #170	; 0xaa
 800272c:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <FLASH_OB_GetRDP+0x3c>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2bcc      	cmp	r3, #204	; 0xcc
 8002736:	d102      	bne.n	800273e <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002738:	23cc      	movs	r3, #204	; 0xcc
 800273a:	71fb      	strb	r3, [r7, #7]
 800273c:	e009      	b.n	8002752 <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <FLASH_OB_GetRDP+0x3c>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2baa      	cmp	r3, #170	; 0xaa
 8002746:	d102      	bne.n	800274e <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002748:	23aa      	movs	r3, #170	; 0xaa
 800274a:	71fb      	strb	r3, [r7, #7]
 800274c:	e001      	b.n	8002752 <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 800274e:	2355      	movs	r3, #85	; 0x55
 8002750:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002752:	79fb      	ldrb	r3, [r7, #7]
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	40023c15 	.word	0x40023c15

08002764 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <FLASH_OB_GetBOR+0x1c>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	b2db      	uxtb	r3, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40023c14 	.word	0x40023c14

08002784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002796:	2300      	movs	r3, #0
 8002798:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a3b      	ldr	r2, [pc, #236]	; (800288c <HAL_GPIO_Init+0x108>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d017      	beq.n	80027d2 <HAL_GPIO_Init+0x4e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a3a      	ldr	r2, [pc, #232]	; (8002890 <HAL_GPIO_Init+0x10c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d013      	beq.n	80027d2 <HAL_GPIO_Init+0x4e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a39      	ldr	r2, [pc, #228]	; (8002894 <HAL_GPIO_Init+0x110>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00f      	beq.n	80027d2 <HAL_GPIO_Init+0x4e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a38      	ldr	r2, [pc, #224]	; (8002898 <HAL_GPIO_Init+0x114>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00b      	beq.n	80027d2 <HAL_GPIO_Init+0x4e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a37      	ldr	r2, [pc, #220]	; (800289c <HAL_GPIO_Init+0x118>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d007      	beq.n	80027d2 <HAL_GPIO_Init+0x4e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a36      	ldr	r2, [pc, #216]	; (80028a0 <HAL_GPIO_Init+0x11c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x4e>
 80027ca:	21b3      	movs	r1, #179	; 0xb3
 80027cc:	4835      	ldr	r0, [pc, #212]	; (80028a4 <HAL_GPIO_Init+0x120>)
 80027ce:	f008 f9c1 	bl	800ab54 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_GPIO_Init+0x64>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	0c1b      	lsrs	r3, r3, #16
 80027e2:	041b      	lsls	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x6c>
 80027e8:	21b4      	movs	r1, #180	; 0xb4
 80027ea:	482e      	ldr	r0, [pc, #184]	; (80028a4 <HAL_GPIO_Init+0x120>)
 80027ec:	f008 f9b2 	bl	800ab54 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d035      	beq.n	8002864 <HAL_GPIO_Init+0xe0>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d031      	beq.n	8002864 <HAL_GPIO_Init+0xe0>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b11      	cmp	r3, #17
 8002806:	d02d      	beq.n	8002864 <HAL_GPIO_Init+0xe0>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d029      	beq.n	8002864 <HAL_GPIO_Init+0xe0>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b12      	cmp	r3, #18
 8002816:	d025      	beq.n	8002864 <HAL_GPIO_Init+0xe0>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4a22      	ldr	r2, [pc, #136]	; (80028a8 <HAL_GPIO_Init+0x124>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d020      	beq.n	8002864 <HAL_GPIO_Init+0xe0>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a21      	ldr	r2, [pc, #132]	; (80028ac <HAL_GPIO_Init+0x128>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d01b      	beq.n	8002864 <HAL_GPIO_Init+0xe0>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <HAL_GPIO_Init+0x12c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d016      	beq.n	8002864 <HAL_GPIO_Init+0xe0>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <HAL_GPIO_Init+0x130>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d011      	beq.n	8002864 <HAL_GPIO_Init+0xe0>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <HAL_GPIO_Init+0x134>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00c      	beq.n	8002864 <HAL_GPIO_Init+0xe0>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <HAL_GPIO_Init+0x138>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d007      	beq.n	8002864 <HAL_GPIO_Init+0xe0>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b03      	cmp	r3, #3
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0xe0>
 800285c:	21b5      	movs	r1, #181	; 0xb5
 800285e:	4811      	ldr	r0, [pc, #68]	; (80028a4 <HAL_GPIO_Init+0x120>)
 8002860:	f008 f978 	bl	800ab54 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00b      	beq.n	8002884 <HAL_GPIO_Init+0x100>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d007      	beq.n	8002884 <HAL_GPIO_Init+0x100>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x100>
 800287c:	21b6      	movs	r1, #182	; 0xb6
 800287e:	4809      	ldr	r0, [pc, #36]	; (80028a4 <HAL_GPIO_Init+0x120>)
 8002880:	f008 f968 	bl	800ab54 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	e211      	b.n	8002cae <HAL_GPIO_Init+0x52a>
 800288a:	bf00      	nop
 800288c:	40020000 	.word	0x40020000
 8002890:	40020400 	.word	0x40020400
 8002894:	40020800 	.word	0x40020800
 8002898:	40020c00 	.word	0x40020c00
 800289c:	40021000 	.word	0x40021000
 80028a0:	40021c00 	.word	0x40021c00
 80028a4:	0800d530 	.word	0x0800d530
 80028a8:	10110000 	.word	0x10110000
 80028ac:	10210000 	.word	0x10210000
 80028b0:	10310000 	.word	0x10310000
 80028b4:	10120000 	.word	0x10120000
 80028b8:	10220000 	.word	0x10220000
 80028bc:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c0:	2201      	movs	r2, #1
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	429a      	cmp	r2, r3
 80028da:	f040 81e5 	bne.w	8002ca8 <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d00b      	beq.n	80028fe <HAL_GPIO_Init+0x17a>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d007      	beq.n	80028fe <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028f2:	2b11      	cmp	r3, #17
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b12      	cmp	r3, #18
 80028fc:	d144      	bne.n	8002988 <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00f      	beq.n	8002926 <HAL_GPIO_Init+0x1a2>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d00b      	beq.n	8002926 <HAL_GPIO_Init+0x1a2>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d007      	beq.n	8002926 <HAL_GPIO_Init+0x1a2>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b03      	cmp	r3, #3
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x1a2>
 800291e:	21c8      	movs	r1, #200	; 0xc8
 8002920:	489f      	ldr	r0, [pc, #636]	; (8002ba0 <HAL_GPIO_Init+0x41c>)
 8002922:	f008 f917 	bl	800ab54 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	2203      	movs	r2, #3
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800295c:	2201      	movs	r2, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 0201 	and.w	r2, r3, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d004      	beq.n	80029ca <HAL_GPIO_Init+0x246>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b12      	cmp	r3, #18
 80029c6:	f040 80a0 	bne.w	8002b0a <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d077      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b09      	cmp	r3, #9
 80029d8:	d073      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d06f      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d06b      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d067      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d063      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d05f      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d05b      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d057      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d053      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d04f      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d04b      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d047      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d043      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d03f      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b05      	cmp	r3, #5
 8002a48:	d03b      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d037      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d033      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d02f      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b05      	cmp	r3, #5
 8002a68:	d02b      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d027      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b07      	cmp	r3, #7
 8002a78:	d023      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b07      	cmp	r3, #7
 8002a80:	d01f      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2b07      	cmp	r3, #7
 8002a88:	d01b      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d017      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b0a      	cmp	r3, #10
 8002a98:	d013      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b09      	cmp	r3, #9
 8002aa0:	d00f      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b09      	cmp	r3, #9
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d007      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b0f      	cmp	r3, #15
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x33e>
 8002aba:	21e0      	movs	r1, #224	; 0xe0
 8002abc:	4838      	ldr	r0, [pc, #224]	; (8002ba0 <HAL_GPIO_Init+0x41c>)
 8002abe:	f008 f849 	bl	800ab54 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	08da      	lsrs	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3208      	adds	r2, #8
 8002aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	220f      	movs	r2, #15
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	08da      	lsrs	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3208      	adds	r2, #8
 8002b04:	69b9      	ldr	r1, [r7, #24]
 8002b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0203 	and.w	r2, r3, #3
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 80ae 	beq.w	8002ca8 <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <HAL_GPIO_Init+0x420>)
 8002b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b54:	4a13      	ldr	r2, [pc, #76]	; (8002ba4 <HAL_GPIO_Init+0x420>)
 8002b56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b5a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_GPIO_Init+0x420>)
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b68:	4a0f      	ldr	r2, [pc, #60]	; (8002ba8 <HAL_GPIO_Init+0x424>)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	089b      	lsrs	r3, r3, #2
 8002b6e:	3302      	adds	r3, #2
 8002b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	220f      	movs	r2, #15
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a07      	ldr	r2, [pc, #28]	; (8002bac <HAL_GPIO_Init+0x428>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d025      	beq.n	8002be0 <HAL_GPIO_Init+0x45c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a06      	ldr	r2, [pc, #24]	; (8002bb0 <HAL_GPIO_Init+0x42c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d01f      	beq.n	8002bdc <HAL_GPIO_Init+0x458>
 8002b9c:	e00a      	b.n	8002bb4 <HAL_GPIO_Init+0x430>
 8002b9e:	bf00      	nop
 8002ba0:	0800d530 	.word	0x0800d530
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40013800 	.word	0x40013800
 8002bac:	40020000 	.word	0x40020000
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a42      	ldr	r2, [pc, #264]	; (8002cc0 <HAL_GPIO_Init+0x53c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00d      	beq.n	8002bd8 <HAL_GPIO_Init+0x454>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a41      	ldr	r2, [pc, #260]	; (8002cc4 <HAL_GPIO_Init+0x540>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d007      	beq.n	8002bd4 <HAL_GPIO_Init+0x450>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a40      	ldr	r2, [pc, #256]	; (8002cc8 <HAL_GPIO_Init+0x544>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d101      	bne.n	8002bd0 <HAL_GPIO_Init+0x44c>
 8002bcc:	2304      	movs	r3, #4
 8002bce:	e008      	b.n	8002be2 <HAL_GPIO_Init+0x45e>
 8002bd0:	2307      	movs	r3, #7
 8002bd2:	e006      	b.n	8002be2 <HAL_GPIO_Init+0x45e>
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e004      	b.n	8002be2 <HAL_GPIO_Init+0x45e>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e002      	b.n	8002be2 <HAL_GPIO_Init+0x45e>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <HAL_GPIO_Init+0x45e>
 8002be0:	2300      	movs	r3, #0
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	f002 0203 	and.w	r2, r2, #3
 8002be8:	0092      	lsls	r2, r2, #2
 8002bea:	4093      	lsls	r3, r2
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bf2:	4936      	ldr	r1, [pc, #216]	; (8002ccc <HAL_GPIO_Init+0x548>)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c00:	4b33      	ldr	r3, [pc, #204]	; (8002cd0 <HAL_GPIO_Init+0x54c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c24:	4a2a      	ldr	r2, [pc, #168]	; (8002cd0 <HAL_GPIO_Init+0x54c>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c2a:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <HAL_GPIO_Init+0x54c>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4e:	4a20      	ldr	r2, [pc, #128]	; (8002cd0 <HAL_GPIO_Init+0x54c>)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c54:	4b1e      	ldr	r3, [pc, #120]	; (8002cd0 <HAL_GPIO_Init+0x54c>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c78:	4a15      	ldr	r2, [pc, #84]	; (8002cd0 <HAL_GPIO_Init+0x54c>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c7e:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <HAL_GPIO_Init+0x54c>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca2:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <HAL_GPIO_Init+0x54c>)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	3301      	adds	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	2b0f      	cmp	r3, #15
 8002cb2:	f67f ae05 	bls.w	80028c0 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40020800 	.word	0x40020800
 8002cc4:	40020c00 	.word	0x40020c00
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40013800 	.word	0x40013800
 8002cd0:	40013c00 	.word	0x40013c00

08002cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	807b      	strh	r3, [r7, #2]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002ce4:	887b      	ldrh	r3, [r7, #2]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d004      	beq.n	8002cf4 <HAL_GPIO_WritePin+0x20>
 8002cea:	887b      	ldrh	r3, [r7, #2]
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	041b      	lsls	r3, r3, #16
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <HAL_GPIO_WritePin+0x2a>
 8002cf4:	f240 119f 	movw	r1, #415	; 0x19f
 8002cf8:	480e      	ldr	r0, [pc, #56]	; (8002d34 <HAL_GPIO_WritePin+0x60>)
 8002cfa:	f007 ff2b 	bl	800ab54 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002cfe:	787b      	ldrb	r3, [r7, #1]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <HAL_GPIO_WritePin+0x40>
 8002d04:	787b      	ldrb	r3, [r7, #1]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d004      	beq.n	8002d14 <HAL_GPIO_WritePin+0x40>
 8002d0a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002d0e:	4809      	ldr	r0, [pc, #36]	; (8002d34 <HAL_GPIO_WritePin+0x60>)
 8002d10:	f007 ff20 	bl	800ab54 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002d14:	787b      	ldrb	r3, [r7, #1]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d1a:	887a      	ldrh	r2, [r7, #2]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d20:	e003      	b.n	8002d2a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d22:	887b      	ldrh	r3, [r7, #2]
 8002d24:	041a      	lsls	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	619a      	str	r2, [r3, #24]
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	0800d530 	.word	0x0800d530

08002d38 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002d44:	887b      	ldrh	r3, [r7, #2]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <HAL_GPIO_TogglePin+0x1c>
 8002d4a:	887b      	ldrh	r3, [r7, #2]
 8002d4c:	0c1b      	lsrs	r3, r3, #16
 8002d4e:	041b      	lsls	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d004      	beq.n	8002d5e <HAL_GPIO_TogglePin+0x26>
 8002d54:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002d58:	480a      	ldr	r0, [pc, #40]	; (8002d84 <HAL_GPIO_TogglePin+0x4c>)
 8002d5a:	f007 fefb 	bl	800ab54 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	887b      	ldrh	r3, [r7, #2]
 8002d64:	401a      	ands	r2, r3
 8002d66:	887b      	ldrh	r3, [r7, #2]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d104      	bne.n	8002d76 <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d6c:	887b      	ldrh	r3, [r7, #2]
 8002d6e:	041a      	lsls	r2, r3, #16
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002d74:	e002      	b.n	8002d7c <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	619a      	str	r2, [r3, #24]
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	0800d530 	.word	0x0800d530

08002d88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d006      	beq.n	8002dac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d9e:	4a05      	ldr	r2, [pc, #20]	; (8002db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f007 fe1a 	bl	800a9e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40013c00 	.word	0x40013c00

08002db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e1b1      	b.n	800312e <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4aa2      	ldr	r2, [pc, #648]	; (8003058 <HAL_I2C_Init+0x2a0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d00e      	beq.n	8002df2 <HAL_I2C_Init+0x3a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4aa0      	ldr	r2, [pc, #640]	; (800305c <HAL_I2C_Init+0x2a4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d009      	beq.n	8002df2 <HAL_I2C_Init+0x3a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a9f      	ldr	r2, [pc, #636]	; (8003060 <HAL_I2C_Init+0x2a8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d004      	beq.n	8002df2 <HAL_I2C_Init+0x3a>
 8002de8:	f240 11bd 	movw	r1, #445	; 0x1bd
 8002dec:	489d      	ldr	r0, [pc, #628]	; (8003064 <HAL_I2C_Init+0x2ac>)
 8002dee:	f007 feb1 	bl	800ab54 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d004      	beq.n	8002e04 <HAL_I2C_Init+0x4c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4a9a      	ldr	r2, [pc, #616]	; (8003068 <HAL_I2C_Init+0x2b0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d904      	bls.n	8002e0e <HAL_I2C_Init+0x56>
 8002e04:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002e08:	4896      	ldr	r0, [pc, #600]	; (8003064 <HAL_I2C_Init+0x2ac>)
 8002e0a:	f007 fea3 	bl	800ab54 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <HAL_I2C_Init+0x72>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e1e:	d004      	beq.n	8002e2a <HAL_I2C_Init+0x72>
 8002e20:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002e24:	488f      	ldr	r0, [pc, #572]	; (8003064 <HAL_I2C_Init+0x2ac>)
 8002e26:	f007 fe95 	bl	800ab54 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e32:	f023 0303 	bic.w	r3, r3, #3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d004      	beq.n	8002e44 <HAL_I2C_Init+0x8c>
 8002e3a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002e3e:	4889      	ldr	r0, [pc, #548]	; (8003064 <HAL_I2C_Init+0x2ac>)
 8002e40:	f007 fe88 	bl	800ab54 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e4c:	d009      	beq.n	8002e62 <HAL_I2C_Init+0xaa>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e56:	d004      	beq.n	8002e62 <HAL_I2C_Init+0xaa>
 8002e58:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002e5c:	4881      	ldr	r0, [pc, #516]	; (8003064 <HAL_I2C_Init+0x2ac>)
 8002e5e:	f007 fe79 	bl	800ab54 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_I2C_Init+0xc4>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d004      	beq.n	8002e7c <HAL_I2C_Init+0xc4>
 8002e72:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002e76:	487b      	ldr	r0, [pc, #492]	; (8003064 <HAL_I2C_Init+0x2ac>)
 8002e78:	f007 fe6c 	bl	800ab54 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <HAL_I2C_Init+0xda>
 8002e88:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002e8c:	4875      	ldr	r0, [pc, #468]	; (8003064 <HAL_I2C_Init+0x2ac>)
 8002e8e:	f007 fe61 	bl	800ab54 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <HAL_I2C_Init+0xf4>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	2b40      	cmp	r3, #64	; 0x40
 8002ea0:	d004      	beq.n	8002eac <HAL_I2C_Init+0xf4>
 8002ea2:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002ea6:	486f      	ldr	r0, [pc, #444]	; (8003064 <HAL_I2C_Init+0x2ac>)
 8002ea8:	f007 fe54 	bl	800ab54 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_I2C_Init+0x10e>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	2b80      	cmp	r3, #128	; 0x80
 8002eba:	d004      	beq.n	8002ec6 <HAL_I2C_Init+0x10e>
 8002ebc:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002ec0:	4868      	ldr	r0, [pc, #416]	; (8003064 <HAL_I2C_Init+0x2ac>)
 8002ec2:	f007 fe47 	bl	800ab54 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f007 fea8 	bl	800ac30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2224      	movs	r2, #36	; 0x24
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f18:	f001 fdb0 	bl	8004a7c <HAL_RCC_GetPCLK1Freq>
 8002f1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a52      	ldr	r2, [pc, #328]	; (800306c <HAL_I2C_Init+0x2b4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d807      	bhi.n	8002f38 <HAL_I2C_Init+0x180>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4a51      	ldr	r2, [pc, #324]	; (8003070 <HAL_I2C_Init+0x2b8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	bf94      	ite	ls
 8002f30:	2301      	movls	r3, #1
 8002f32:	2300      	movhi	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e006      	b.n	8002f46 <HAL_I2C_Init+0x18e>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a4e      	ldr	r2, [pc, #312]	; (8003074 <HAL_I2C_Init+0x2bc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	bf94      	ite	ls
 8002f40:	2301      	movls	r3, #1
 8002f42:	2300      	movhi	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0ef      	b.n	800312e <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4a49      	ldr	r2, [pc, #292]	; (8003078 <HAL_I2C_Init+0x2c0>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	0c9b      	lsrs	r3, r3, #18
 8002f58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a3b      	ldr	r2, [pc, #236]	; (800306c <HAL_I2C_Init+0x2b4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d802      	bhi.n	8002f88 <HAL_I2C_Init+0x1d0>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	3301      	adds	r3, #1
 8002f86:	e009      	b.n	8002f9c <HAL_I2C_Init+0x1e4>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	4a3a      	ldr	r2, [pc, #232]	; (800307c <HAL_I2C_Init+0x2c4>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	099b      	lsrs	r3, r3, #6
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	492d      	ldr	r1, [pc, #180]	; (800306c <HAL_I2C_Init+0x2b4>)
 8002fb8:	428b      	cmp	r3, r1
 8002fba:	d80d      	bhi.n	8002fd8 <HAL_I2C_Init+0x220>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1e59      	subs	r1, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	bf38      	it	cc
 8002fd4:	2304      	movcc	r3, #4
 8002fd6:	e063      	b.n	80030a0 <HAL_I2C_Init+0x2e8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d111      	bne.n	8003004 <HAL_I2C_Init+0x24c>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1e58      	subs	r0, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6859      	ldr	r1, [r3, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	440b      	add	r3, r1
 8002fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2301      	moveq	r3, #1
 8002ffe:	2300      	movne	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	e012      	b.n	800302a <HAL_I2C_Init+0x272>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1e58      	subs	r0, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6859      	ldr	r1, [r3, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	0099      	lsls	r1, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	fbb0 f3f3 	udiv	r3, r0, r3
 800301a:	3301      	adds	r3, #1
 800301c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Init+0x27a>
 800302e:	2301      	movs	r3, #1
 8003030:	e036      	b.n	80030a0 <HAL_I2C_Init+0x2e8>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d122      	bne.n	8003080 <HAL_I2C_Init+0x2c8>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1e58      	subs	r0, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6859      	ldr	r1, [r3, #4]
 8003042:	460b      	mov	r3, r1
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	440b      	add	r3, r1
 8003048:	fbb0 f3f3 	udiv	r3, r0, r3
 800304c:	3301      	adds	r3, #1
 800304e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003056:	e023      	b.n	80030a0 <HAL_I2C_Init+0x2e8>
 8003058:	40005400 	.word	0x40005400
 800305c:	40005800 	.word	0x40005800
 8003060:	40005c00 	.word	0x40005c00
 8003064:	0800d56c 	.word	0x0800d56c
 8003068:	00061a80 	.word	0x00061a80
 800306c:	000186a0 	.word	0x000186a0
 8003070:	001e847f 	.word	0x001e847f
 8003074:	003d08ff 	.word	0x003d08ff
 8003078:	431bde83 	.word	0x431bde83
 800307c:	10624dd3 	.word	0x10624dd3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1e58      	subs	r0, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	0099      	lsls	r1, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	fbb0 f3f3 	udiv	r3, r0, r3
 8003096:	3301      	adds	r3, #1
 8003098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	6809      	ldr	r1, [r1, #0]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6911      	ldr	r1, [r2, #16]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68d2      	ldr	r2, [r2, #12]
 80030da:	4311      	orrs	r1, r2
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	430b      	orrs	r3, r1
 80030e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop

08003138 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	4608      	mov	r0, r1
 8003142:	4611      	mov	r1, r2
 8003144:	461a      	mov	r2, r3
 8003146:	4603      	mov	r3, r0
 8003148:	817b      	strh	r3, [r7, #10]
 800314a:	460b      	mov	r3, r1
 800314c:	813b      	strh	r3, [r7, #8]
 800314e:	4613      	mov	r3, r2
 8003150:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003152:	f7fd ff17 	bl	8000f84 <HAL_GetTick>
 8003156:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d007      	beq.n	800316e <HAL_I2C_Mem_Write+0x36>
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	2b10      	cmp	r3, #16
 8003162:	d004      	beq.n	800316e <HAL_I2C_Mem_Write+0x36>
 8003164:	f640 1173 	movw	r1, #2419	; 0x973
 8003168:	4873      	ldr	r0, [pc, #460]	; (8003338 <HAL_I2C_Mem_Write+0x200>)
 800316a:	f007 fcf3 	bl	800ab54 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b20      	cmp	r3, #32
 8003178:	f040 80d9 	bne.w	800332e <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	2319      	movs	r3, #25
 8003182:	2201      	movs	r2, #1
 8003184:	496d      	ldr	r1, [pc, #436]	; (800333c <HAL_I2C_Mem_Write+0x204>)
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 fc88 	bl	8003a9c <I2C_WaitOnFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
 8003194:	e0cc      	b.n	8003330 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_I2C_Mem_Write+0x6c>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e0c5      	b.n	8003330 <HAL_I2C_Mem_Write+0x1f8>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d007      	beq.n	80031ca <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0201 	orr.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031d8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2221      	movs	r2, #33	; 0x21
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2240      	movs	r2, #64	; 0x40
 80031e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a3a      	ldr	r2, [r7, #32]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4a4d      	ldr	r2, [pc, #308]	; (8003340 <HAL_I2C_Mem_Write+0x208>)
 800320a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800320c:	88f8      	ldrh	r0, [r7, #6]
 800320e:	893a      	ldrh	r2, [r7, #8]
 8003210:	8979      	ldrh	r1, [r7, #10]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	4603      	mov	r3, r0
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fac3 	bl	80037a8 <I2C_RequestMemoryWrite>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d052      	beq.n	80032ce <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e081      	b.n	8003330 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 fd09 	bl	8003c48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00d      	beq.n	8003258 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	2b04      	cmp	r3, #4
 8003242:	d107      	bne.n	8003254 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003252:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e06b      	b.n	8003330 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	781a      	ldrb	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b04      	cmp	r3, #4
 8003294:	d11b      	bne.n	80032ce <HAL_I2C_Mem_Write+0x196>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	2b00      	cmp	r3, #0
 800329c:	d017      	beq.n	80032ce <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1aa      	bne.n	800322c <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fcf5 	bl	8003cca <I2C_WaitOnBTFFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00d      	beq.n	8003302 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d107      	bne.n	80032fe <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e016      	b.n	8003330 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003310:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	e000      	b.n	8003330 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 800332e:	2302      	movs	r3, #2
  }
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	0800d56c 	.word	0x0800d56c
 800333c:	00100002 	.word	0x00100002
 8003340:	ffff0000 	.word	0xffff0000

08003344 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08c      	sub	sp, #48	; 0x30
 8003348:	af02      	add	r7, sp, #8
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	4608      	mov	r0, r1
 800334e:	4611      	mov	r1, r2
 8003350:	461a      	mov	r2, r3
 8003352:	4603      	mov	r3, r0
 8003354:	817b      	strh	r3, [r7, #10]
 8003356:	460b      	mov	r3, r1
 8003358:	813b      	strh	r3, [r7, #8]
 800335a:	4613      	mov	r3, r2
 800335c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800335e:	f7fd fe11 	bl	8000f84 <HAL_GetTick>
 8003362:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d007      	beq.n	800337a <HAL_I2C_Mem_Read+0x36>
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	2b10      	cmp	r3, #16
 800336e:	d004      	beq.n	800337a <HAL_I2C_Mem_Read+0x36>
 8003370:	f640 11ee 	movw	r1, #2542	; 0x9ee
 8003374:	4881      	ldr	r0, [pc, #516]	; (800357c <HAL_I2C_Mem_Read+0x238>)
 8003376:	f007 fbed 	bl	800ab54 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b20      	cmp	r3, #32
 8003384:	f040 8209 	bne.w	800379a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2319      	movs	r3, #25
 800338e:	2201      	movs	r2, #1
 8003390:	497b      	ldr	r1, [pc, #492]	; (8003580 <HAL_I2C_Mem_Read+0x23c>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 fb82 	bl	8003a9c <I2C_WaitOnFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 800339e:	2302      	movs	r3, #2
 80033a0:	e1fc      	b.n	800379c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_I2C_Mem_Read+0x6c>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e1f5      	b.n	800379c <HAL_I2C_Mem_Read+0x458>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d007      	beq.n	80033d6 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2222      	movs	r2, #34	; 0x22
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2240      	movs	r2, #64	; 0x40
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003400:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003406:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a5b      	ldr	r2, [pc, #364]	; (8003584 <HAL_I2C_Mem_Read+0x240>)
 8003416:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003418:	88f8      	ldrh	r0, [r7, #6]
 800341a:	893a      	ldrh	r2, [r7, #8]
 800341c:	8979      	ldrh	r1, [r7, #10]
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	4603      	mov	r3, r0
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fa51 	bl	80038d0 <I2C_RequestMemoryRead>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e1b1      	b.n	800379c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343c:	2b00      	cmp	r3, #0
 800343e:	d113      	bne.n	8003468 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003440:	2300      	movs	r3, #0
 8003442:	623b      	str	r3, [r7, #32]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	623b      	str	r3, [r7, #32]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	623b      	str	r3, [r7, #32]
 8003454:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e185      	b.n	8003774 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	2b01      	cmp	r3, #1
 800346e:	d11b      	bne.n	80034a8 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	61fb      	str	r3, [r7, #28]
 8003494:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	e165      	b.n	8003774 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d11b      	bne.n	80034e8 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034be:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ce:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	e145      	b.n	8003774 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034fe:	e139      	b.n	8003774 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003504:	2b03      	cmp	r3, #3
 8003506:	f200 80f2 	bhi.w	80036ee <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350e:	2b01      	cmp	r3, #1
 8003510:	d123      	bne.n	800355a <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003514:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fc18 	bl	8003d4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e13a      	b.n	800379c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003558:	e10c      	b.n	8003774 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355e:	2b02      	cmp	r3, #2
 8003560:	d14f      	bne.n	8003602 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003568:	2200      	movs	r2, #0
 800356a:	4907      	ldr	r1, [pc, #28]	; (8003588 <HAL_I2C_Mem_Read+0x244>)
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fa95 	bl	8003a9c <I2C_WaitOnFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e10f      	b.n	800379c <HAL_I2C_Mem_Read+0x458>
 800357c:	0800d56c 	.word	0x0800d56c
 8003580:	00100002 	.word	0x00100002
 8003584:	ffff0000 	.word	0xffff0000
 8003588:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003600:	e0b8      	b.n	8003774 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003608:	2200      	movs	r2, #0
 800360a:	4966      	ldr	r1, [pc, #408]	; (80037a4 <HAL_I2C_Mem_Read+0x460>)
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fa45 	bl	8003a9c <I2C_WaitOnFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0bf      	b.n	800379c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	2200      	movs	r2, #0
 8003666:	494f      	ldr	r1, [pc, #316]	; (80037a4 <HAL_I2C_Mem_Read+0x460>)
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 fa17 	bl	8003a9c <I2C_WaitOnFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e091      	b.n	800379c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036ec:	e042      	b.n	8003774 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 fb2a 	bl	8003d4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e04c      	b.n	800379c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b04      	cmp	r3, #4
 8003740:	d118      	bne.n	8003774 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	f47f aec1 	bne.w	8003500 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	e000      	b.n	800379c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800379a:	2302      	movs	r3, #2
  }
}
 800379c:	4618      	mov	r0, r3
 800379e:	3728      	adds	r7, #40	; 0x28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	00010004 	.word	0x00010004

080037a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	4608      	mov	r0, r1
 80037b2:	4611      	mov	r1, r2
 80037b4:	461a      	mov	r2, r3
 80037b6:	4603      	mov	r3, r0
 80037b8:	817b      	strh	r3, [r7, #10]
 80037ba:	460b      	mov	r3, r1
 80037bc:	813b      	strh	r3, [r7, #8]
 80037be:	4613      	mov	r3, r2
 80037c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	2200      	movs	r2, #0
 80037da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f95c 	bl	8003a9c <I2C_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00c      	beq.n	8003804 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e05f      	b.n	80038c4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003804:	897b      	ldrh	r3, [r7, #10]
 8003806:	b2db      	uxtb	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003812:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	6a3a      	ldr	r2, [r7, #32]
 8003818:	492c      	ldr	r1, [pc, #176]	; (80038cc <I2C_RequestMemoryWrite+0x124>)
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f995 	bl	8003b4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e04c      	b.n	80038c4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003842:	6a39      	ldr	r1, [r7, #32]
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f9ff 	bl	8003c48 <I2C_WaitOnTXEFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00d      	beq.n	800386c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	2b04      	cmp	r3, #4
 8003856:	d107      	bne.n	8003868 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003866:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e02b      	b.n	80038c4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d105      	bne.n	800387e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003872:	893b      	ldrh	r3, [r7, #8]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	611a      	str	r2, [r3, #16]
 800387c:	e021      	b.n	80038c2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800387e:	893b      	ldrh	r3, [r7, #8]
 8003880:	0a1b      	lsrs	r3, r3, #8
 8003882:	b29b      	uxth	r3, r3
 8003884:	b2da      	uxtb	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800388c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388e:	6a39      	ldr	r1, [r7, #32]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f9d9 	bl	8003c48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00d      	beq.n	80038b8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d107      	bne.n	80038b4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e005      	b.n	80038c4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038b8:	893b      	ldrh	r3, [r7, #8]
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	00010002 	.word	0x00010002

080038d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	4608      	mov	r0, r1
 80038da:	4611      	mov	r1, r2
 80038dc:	461a      	mov	r2, r3
 80038de:	4603      	mov	r3, r0
 80038e0:	817b      	strh	r3, [r7, #10]
 80038e2:	460b      	mov	r3, r1
 80038e4:	813b      	strh	r3, [r7, #8]
 80038e6:	4613      	mov	r3, r2
 80038e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003908:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	2200      	movs	r2, #0
 8003912:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f8c0 	bl	8003a9c <I2C_WaitOnFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00c      	beq.n	800393c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003936:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e0a9      	b.n	8003a90 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800393c:	897b      	ldrh	r3, [r7, #10]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800394a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	6a3a      	ldr	r2, [r7, #32]
 8003950:	4951      	ldr	r1, [pc, #324]	; (8003a98 <I2C_RequestMemoryRead+0x1c8>)
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f8f9 	bl	8003b4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e096      	b.n	8003a90 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397a:	6a39      	ldr	r1, [r7, #32]
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f963 	bl	8003c48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00d      	beq.n	80039a4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	2b04      	cmp	r3, #4
 800398e:	d107      	bne.n	80039a0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e075      	b.n	8003a90 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d105      	bne.n	80039b6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039aa:	893b      	ldrh	r3, [r7, #8]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	611a      	str	r2, [r3, #16]
 80039b4:	e021      	b.n	80039fa <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039b6:	893b      	ldrh	r3, [r7, #8]
 80039b8:	0a1b      	lsrs	r3, r3, #8
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c6:	6a39      	ldr	r1, [r7, #32]
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f93d 	bl	8003c48 <I2C_WaitOnTXEFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00d      	beq.n	80039f0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d107      	bne.n	80039ec <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e04f      	b.n	8003a90 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039f0:	893b      	ldrh	r3, [r7, #8]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fc:	6a39      	ldr	r1, [r7, #32]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f922 	bl	8003c48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00d      	beq.n	8003a26 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d107      	bne.n	8003a22 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e034      	b.n	8003a90 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f82a 	bl	8003a9c <I2C_WaitOnFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00c      	beq.n	8003a68 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e013      	b.n	8003a90 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a68:	897b      	ldrh	r3, [r7, #10]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	6a3a      	ldr	r2, [r7, #32]
 8003a7c:	4906      	ldr	r1, [pc, #24]	; (8003a98 <I2C_RequestMemoryRead+0x1c8>)
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f863 	bl	8003b4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	00010002 	.word	0x00010002

08003a9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aac:	e025      	b.n	8003afa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d021      	beq.n	8003afa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab6:	f7fd fa65 	bl	8000f84 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d302      	bcc.n	8003acc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d116      	bne.n	8003afa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f043 0220 	orr.w	r2, r3, #32
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e023      	b.n	8003b42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d10d      	bne.n	8003b20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf0c      	ite	eq
 8003b16:	2301      	moveq	r3, #1
 8003b18:	2300      	movne	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	e00c      	b.n	8003b3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	43da      	mvns	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bf0c      	ite	eq
 8003b32:	2301      	moveq	r3, #1
 8003b34:	2300      	movne	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d0b6      	beq.n	8003aae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b58:	e051      	b.n	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b68:	d123      	bne.n	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f043 0204 	orr.w	r2, r3, #4
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e046      	b.n	8003c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d021      	beq.n	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bba:	f7fd f9e3 	bl	8000f84 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d302      	bcc.n	8003bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d116      	bne.n	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f043 0220 	orr.w	r2, r3, #32
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e020      	b.n	8003c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d10c      	bne.n	8003c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	43da      	mvns	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4013      	ands	r3, r2
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bf14      	ite	ne
 8003c1a:	2301      	movne	r3, #1
 8003c1c:	2300      	moveq	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	e00b      	b.n	8003c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	43da      	mvns	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf14      	ite	ne
 8003c34:	2301      	movne	r3, #1
 8003c36:	2300      	moveq	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d18d      	bne.n	8003b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c54:	e02d      	b.n	8003cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 f8ce 	bl	8003df8 <I2C_IsAcknowledgeFailed>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e02d      	b.n	8003cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d021      	beq.n	8003cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6e:	f7fd f989 	bl	8000f84 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d302      	bcc.n	8003c84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d116      	bne.n	8003cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f043 0220 	orr.w	r2, r3, #32
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e007      	b.n	8003cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbc:	2b80      	cmp	r3, #128	; 0x80
 8003cbe:	d1ca      	bne.n	8003c56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b084      	sub	sp, #16
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cd6:	e02d      	b.n	8003d34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f88d 	bl	8003df8 <I2C_IsAcknowledgeFailed>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e02d      	b.n	8003d44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d021      	beq.n	8003d34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf0:	f7fd f948 	bl	8000f84 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d302      	bcc.n	8003d06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d116      	bne.n	8003d34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	f043 0220 	orr.w	r2, r3, #32
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e007      	b.n	8003d44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d1ca      	bne.n	8003cd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d58:	e042      	b.n	8003de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d119      	bne.n	8003d9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0210 	mvn.w	r2, #16
 8003d70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e029      	b.n	8003df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9c:	f7fd f8f2 	bl	8000f84 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d302      	bcc.n	8003db2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d116      	bne.n	8003de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	f043 0220 	orr.w	r2, r3, #32
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e007      	b.n	8003df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dea:	2b40      	cmp	r3, #64	; 0x40
 8003dec:	d1b5      	bne.n	8003d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0e:	d11b      	bne.n	8003e48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	f043 0204 	orr.w	r2, r3, #4
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e05d      	b.n	8003f26 <HAL_IWDG_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a30      	ldr	r2, [pc, #192]	; (8003f30 <HAL_IWDG_Init+0xd8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <HAL_IWDG_Init+0x24>
 8003e74:	219e      	movs	r1, #158	; 0x9e
 8003e76:	482f      	ldr	r0, [pc, #188]	; (8003f34 <HAL_IWDG_Init+0xdc>)
 8003e78:	f006 fe6c 	bl	800ab54 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01b      	beq.n	8003ebc <HAL_IWDG_Init+0x64>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d017      	beq.n	8003ebc <HAL_IWDG_Init+0x64>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d013      	beq.n	8003ebc <HAL_IWDG_Init+0x64>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d00f      	beq.n	8003ebc <HAL_IWDG_Init+0x64>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d00b      	beq.n	8003ebc <HAL_IWDG_Init+0x64>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b05      	cmp	r3, #5
 8003eaa:	d007      	beq.n	8003ebc <HAL_IWDG_Init+0x64>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b06      	cmp	r3, #6
 8003eb2:	d003      	beq.n	8003ebc <HAL_IWDG_Init+0x64>
 8003eb4:	219f      	movs	r1, #159	; 0x9f
 8003eb6:	481f      	ldr	r0, [pc, #124]	; (8003f34 <HAL_IWDG_Init+0xdc>)
 8003eb8:	f006 fe4c 	bl	800ab54 <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec4:	d303      	bcc.n	8003ece <HAL_IWDG_Init+0x76>
 8003ec6:	21a0      	movs	r1, #160	; 0xa0
 8003ec8:	481a      	ldr	r0, [pc, #104]	; (8003f34 <HAL_IWDG_Init+0xdc>)
 8003eca:	f006 fe43 	bl	800ab54 <assert_failed>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003ed6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f245 5255 	movw	r2, #21845	; 0x5555
 8003ee0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6852      	ldr	r2, [r2, #4]
 8003eea:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6892      	ldr	r2, [r2, #8]
 8003ef4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003ef6:	f7fd f845 	bl	8000f84 <HAL_GetTick>
 8003efa:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8003efc:	e008      	b.n	8003f10 <HAL_IWDG_Init+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003efe:	f7fd f841 	bl	8000f84 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b30      	cmp	r3, #48	; 0x30
 8003f0a:	d901      	bls.n	8003f10 <HAL_IWDG_Init+0xb8>
    {
      return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e00a      	b.n	8003f26 <HAL_IWDG_Init+0xce>
  while (hiwdg->Instance->SR != 0x00u)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f1      	bne.n	8003efe <HAL_IWDG_Init+0xa6>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003f22:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40003000 	.word	0x40003000
 8003f34:	0800d5a4 	.word	0x0800d5a4

08003f38 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003f48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e30d      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b0f      	cmp	r3, #15
 8003f70:	d903      	bls.n	8003f7a <HAL_RCC_OscConfig+0x22>
 8003f72:	21e8      	movs	r1, #232	; 0xe8
 8003f74:	48a3      	ldr	r0, [pc, #652]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003f76:	f006 fded 	bl	800ab54 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 8088 	beq.w	8004098 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <HAL_RCC_OscConfig+0x54>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f98:	d008      	beq.n	8003fac <HAL_RCC_OscConfig+0x54>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fa2:	d003      	beq.n	8003fac <HAL_RCC_OscConfig+0x54>
 8003fa4:	21ed      	movs	r1, #237	; 0xed
 8003fa6:	4897      	ldr	r0, [pc, #604]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	f006 fdd4 	bl	800ab54 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fac:	4b96      	ldr	r3, [pc, #600]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d00c      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb8:	4b93      	ldr	r3, [pc, #588]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d112      	bne.n	8003fea <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fc4:	4b90      	ldr	r3, [pc, #576]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd0:	d10b      	bne.n	8003fea <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd2:	4b8d      	ldr	r3, [pc, #564]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d05b      	beq.n	8004096 <HAL_RCC_OscConfig+0x13e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d157      	bne.n	8004096 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e2cd      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff2:	d106      	bne.n	8004002 <HAL_RCC_OscConfig+0xaa>
 8003ff4:	4b84      	ldr	r3, [pc, #528]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a83      	ldr	r2, [pc, #524]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 8003ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	e01d      	b.n	800403e <HAL_RCC_OscConfig+0xe6>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800400a:	d10c      	bne.n	8004026 <HAL_RCC_OscConfig+0xce>
 800400c:	4b7e      	ldr	r3, [pc, #504]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a7d      	ldr	r2, [pc, #500]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 8004012:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	4b7b      	ldr	r3, [pc, #492]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a7a      	ldr	r2, [pc, #488]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 800401e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	e00b      	b.n	800403e <HAL_RCC_OscConfig+0xe6>
 8004026:	4b78      	ldr	r3, [pc, #480]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a77      	ldr	r2, [pc, #476]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 800402c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	4b75      	ldr	r3, [pc, #468]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a74      	ldr	r2, [pc, #464]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 8004038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800403c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d013      	beq.n	800406e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004046:	f7fc ff9d 	bl	8000f84 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800404e:	f7fc ff99 	bl	8000f84 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b64      	cmp	r3, #100	; 0x64
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e292      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004060:	4b69      	ldr	r3, [pc, #420]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0xf6>
 800406c:	e014      	b.n	8004098 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406e:	f7fc ff89 	bl	8000f84 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004076:	f7fc ff85 	bl	8000f84 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b64      	cmp	r3, #100	; 0x64
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e27e      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004088:	4b5f      	ldr	r3, [pc, #380]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f0      	bne.n	8004076 <HAL_RCC_OscConfig+0x11e>
 8004094:	e000      	b.n	8004098 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004096:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d079      	beq.n	8004198 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCC_OscConfig+0x166>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d004      	beq.n	80040be <HAL_RCC_OscConfig+0x166>
 80040b4:	f240 111f 	movw	r1, #287	; 0x11f
 80040b8:	4852      	ldr	r0, [pc, #328]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	f006 fd4b 	bl	800ab54 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b1f      	cmp	r3, #31
 80040c4:	d904      	bls.n	80040d0 <HAL_RCC_OscConfig+0x178>
 80040c6:	f44f 7190 	mov.w	r1, #288	; 0x120
 80040ca:	484e      	ldr	r0, [pc, #312]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	f006 fd42 	bl	800ab54 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040d0:	4b4d      	ldr	r3, [pc, #308]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00b      	beq.n	80040f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040dc:	4b4a      	ldr	r3, [pc, #296]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d11c      	bne.n	8004122 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040e8:	4b47      	ldr	r3, [pc, #284]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d116      	bne.n	8004122 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f4:	4b44      	ldr	r3, [pc, #272]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_RCC_OscConfig+0x1b4>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d001      	beq.n	800410c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e23c      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410c:	4b3e      	ldr	r3, [pc, #248]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	493b      	ldr	r1, [pc, #236]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 800411c:	4313      	orrs	r3, r2
 800411e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004120:	e03a      	b.n	8004198 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d020      	beq.n	800416c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800412a:	4b38      	ldr	r3, [pc, #224]	; (800420c <HAL_RCC_OscConfig+0x2b4>)
 800412c:	2201      	movs	r2, #1
 800412e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fc ff28 	bl	8000f84 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004138:	f7fc ff24 	bl	8000f84 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e21d      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414a:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004156:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4928      	ldr	r1, [pc, #160]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]
 800416a:	e015      	b.n	8004198 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416c:	4b27      	ldr	r3, [pc, #156]	; (800420c <HAL_RCC_OscConfig+0x2b4>)
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004172:	f7fc ff07 	bl	8000f84 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800417a:	f7fc ff03 	bl	8000f84 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e1fc      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418c:	4b1e      	ldr	r3, [pc, #120]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f0      	bne.n	800417a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d046      	beq.n	8004232 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_RCC_OscConfig+0x266>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d004      	beq.n	80041be <HAL_RCC_OscConfig+0x266>
 80041b4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80041b8:	4812      	ldr	r0, [pc, #72]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80041ba:	f006 fccb 	bl	800ab54 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d016      	beq.n	80041f4 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c6:	4b12      	ldr	r3, [pc, #72]	; (8004210 <HAL_RCC_OscConfig+0x2b8>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041cc:	f7fc feda 	bl	8000f84 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d4:	f7fc fed6 	bl	8000f84 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e1cf      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e6:	4b08      	ldr	r3, [pc, #32]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 80041e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x27c>
 80041f2:	e01e      	b.n	8004232 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_RCC_OscConfig+0x2b8>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fa:	f7fc fec3 	bl	8000f84 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004200:	e011      	b.n	8004226 <HAL_RCC_OscConfig+0x2ce>
 8004202:	bf00      	nop
 8004204:	0800d5e0 	.word	0x0800d5e0
 8004208:	40023800 	.word	0x40023800
 800420c:	42470000 	.word	0x42470000
 8004210:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004214:	f7fc feb6 	bl	8000f84 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e1af      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004226:	4b97      	ldr	r3, [pc, #604]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 8004228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1f0      	bne.n	8004214 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 80a8 	beq.w	8004390 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004240:	2300      	movs	r3, #0
 8004242:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00c      	beq.n	8004266 <HAL_RCC_OscConfig+0x30e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d008      	beq.n	8004266 <HAL_RCC_OscConfig+0x30e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b05      	cmp	r3, #5
 800425a:	d004      	beq.n	8004266 <HAL_RCC_OscConfig+0x30e>
 800425c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004260:	4889      	ldr	r0, [pc, #548]	; (8004488 <HAL_RCC_OscConfig+0x530>)
 8004262:	f006 fc77 	bl	800ab54 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004266:	4b87      	ldr	r3, [pc, #540]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10f      	bne.n	8004292 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004272:	2300      	movs	r3, #0
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	4b83      	ldr	r3, [pc, #524]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	4a82      	ldr	r2, [pc, #520]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004280:	6413      	str	r3, [r2, #64]	; 0x40
 8004282:	4b80      	ldr	r3, [pc, #512]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800428e:	2301      	movs	r3, #1
 8004290:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004292:	4b7e      	ldr	r3, [pc, #504]	; (800448c <HAL_RCC_OscConfig+0x534>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429a:	2b00      	cmp	r3, #0
 800429c:	d118      	bne.n	80042d0 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800429e:	4b7b      	ldr	r3, [pc, #492]	; (800448c <HAL_RCC_OscConfig+0x534>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a7a      	ldr	r2, [pc, #488]	; (800448c <HAL_RCC_OscConfig+0x534>)
 80042a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042aa:	f7fc fe6b 	bl	8000f84 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b2:	f7fc fe67 	bl	8000f84 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e160      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c4:	4b71      	ldr	r3, [pc, #452]	; (800448c <HAL_RCC_OscConfig+0x534>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d106      	bne.n	80042e6 <HAL_RCC_OscConfig+0x38e>
 80042d8:	4b6a      	ldr	r3, [pc, #424]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	4a69      	ldr	r2, [pc, #420]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6713      	str	r3, [r2, #112]	; 0x70
 80042e4:	e01c      	b.n	8004320 <HAL_RCC_OscConfig+0x3c8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b05      	cmp	r3, #5
 80042ec:	d10c      	bne.n	8004308 <HAL_RCC_OscConfig+0x3b0>
 80042ee:	4b65      	ldr	r3, [pc, #404]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	4a64      	ldr	r2, [pc, #400]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 80042f4:	f043 0304 	orr.w	r3, r3, #4
 80042f8:	6713      	str	r3, [r2, #112]	; 0x70
 80042fa:	4b62      	ldr	r3, [pc, #392]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	4a61      	ldr	r2, [pc, #388]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	6713      	str	r3, [r2, #112]	; 0x70
 8004306:	e00b      	b.n	8004320 <HAL_RCC_OscConfig+0x3c8>
 8004308:	4b5e      	ldr	r3, [pc, #376]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430c:	4a5d      	ldr	r2, [pc, #372]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 800430e:	f023 0301 	bic.w	r3, r3, #1
 8004312:	6713      	str	r3, [r2, #112]	; 0x70
 8004314:	4b5b      	ldr	r3, [pc, #364]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	4a5a      	ldr	r2, [pc, #360]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 800431a:	f023 0304 	bic.w	r3, r3, #4
 800431e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d015      	beq.n	8004354 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004328:	f7fc fe2c 	bl	8000f84 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432e:	e00a      	b.n	8004346 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004330:	f7fc fe28 	bl	8000f84 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	; 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e11f      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004346:	4b4f      	ldr	r3, [pc, #316]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0ee      	beq.n	8004330 <HAL_RCC_OscConfig+0x3d8>
 8004352:	e014      	b.n	800437e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004354:	f7fc fe16 	bl	8000f84 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800435a:	e00a      	b.n	8004372 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800435c:	f7fc fe12 	bl	8000f84 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	f241 3288 	movw	r2, #5000	; 0x1388
 800436a:	4293      	cmp	r3, r2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e109      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004372:	4b44      	ldr	r3, [pc, #272]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1ee      	bne.n	800435c <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800437e:	7dfb      	ldrb	r3, [r7, #23]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d105      	bne.n	8004390 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004384:	4b3f      	ldr	r3, [pc, #252]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	4a3e      	ldr	r2, [pc, #248]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 800438a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800438e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00c      	beq.n	80043b2 <HAL_RCC_OscConfig+0x45a>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d008      	beq.n	80043b2 <HAL_RCC_OscConfig+0x45a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d004      	beq.n	80043b2 <HAL_RCC_OscConfig+0x45a>
 80043a8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80043ac:	4836      	ldr	r0, [pc, #216]	; (8004488 <HAL_RCC_OscConfig+0x530>)
 80043ae:	f006 fbd1 	bl	800ab54 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80e4 	beq.w	8004584 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043bc:	4b31      	ldr	r3, [pc, #196]	; (8004484 <HAL_RCC_OscConfig+0x52c>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 030c 	and.w	r3, r3, #12
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	f000 80ae 	beq.w	8004526 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	f040 8092 	bne.w	80044f8 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d009      	beq.n	80043f0 <HAL_RCC_OscConfig+0x498>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e4:	d004      	beq.n	80043f0 <HAL_RCC_OscConfig+0x498>
 80043e6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80043ea:	4827      	ldr	r0, [pc, #156]	; (8004488 <HAL_RCC_OscConfig+0x530>)
 80043ec:	f006 fbb2 	bl	800ab54 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	2b3f      	cmp	r3, #63	; 0x3f
 80043f6:	d904      	bls.n	8004402 <HAL_RCC_OscConfig+0x4aa>
 80043f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80043fc:	4822      	ldr	r0, [pc, #136]	; (8004488 <HAL_RCC_OscConfig+0x530>)
 80043fe:	f006 fba9 	bl	800ab54 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	2bbf      	cmp	r3, #191	; 0xbf
 8004408:	d904      	bls.n	8004414 <HAL_RCC_OscConfig+0x4bc>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004412:	d904      	bls.n	800441e <HAL_RCC_OscConfig+0x4c6>
 8004414:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004418:	481b      	ldr	r0, [pc, #108]	; (8004488 <HAL_RCC_OscConfig+0x530>)
 800441a:	f006 fb9b 	bl	800ab54 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	2b02      	cmp	r3, #2
 8004424:	d010      	beq.n	8004448 <HAL_RCC_OscConfig+0x4f0>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	2b04      	cmp	r3, #4
 800442c:	d00c      	beq.n	8004448 <HAL_RCC_OscConfig+0x4f0>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	2b06      	cmp	r3, #6
 8004434:	d008      	beq.n	8004448 <HAL_RCC_OscConfig+0x4f0>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	2b08      	cmp	r3, #8
 800443c:	d004      	beq.n	8004448 <HAL_RCC_OscConfig+0x4f0>
 800443e:	f240 11db 	movw	r1, #475	; 0x1db
 8004442:	4811      	ldr	r0, [pc, #68]	; (8004488 <HAL_RCC_OscConfig+0x530>)
 8004444:	f006 fb86 	bl	800ab54 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	2b01      	cmp	r3, #1
 800444e:	d903      	bls.n	8004458 <HAL_RCC_OscConfig+0x500>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	2b0f      	cmp	r3, #15
 8004456:	d904      	bls.n	8004462 <HAL_RCC_OscConfig+0x50a>
 8004458:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800445c:	480a      	ldr	r0, [pc, #40]	; (8004488 <HAL_RCC_OscConfig+0x530>)
 800445e:	f006 fb79 	bl	800ab54 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCC_OscConfig+0x538>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fc fd8c 	bl	8000f84 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446e:	e011      	b.n	8004494 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004470:	f7fc fd88 	bl	8000f84 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d90a      	bls.n	8004494 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e081      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800
 8004488:	0800d5e0 	.word	0x0800d5e0
 800448c:	40007000 	.word	0x40007000
 8004490:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004494:	4b3e      	ldr	r3, [pc, #248]	; (8004590 <HAL_RCC_OscConfig+0x638>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e7      	bne.n	8004470 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	019b      	lsls	r3, r3, #6
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b6:	085b      	lsrs	r3, r3, #1
 80044b8:	3b01      	subs	r3, #1
 80044ba:	041b      	lsls	r3, r3, #16
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	061b      	lsls	r3, r3, #24
 80044c4:	4932      	ldr	r1, [pc, #200]	; (8004590 <HAL_RCC_OscConfig+0x638>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ca:	4b32      	ldr	r3, [pc, #200]	; (8004594 <HAL_RCC_OscConfig+0x63c>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fc fd58 	bl	8000f84 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fc fd54 	bl	8000f84 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e04d      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ea:	4b29      	ldr	r3, [pc, #164]	; (8004590 <HAL_RCC_OscConfig+0x638>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x580>
 80044f6:	e045      	b.n	8004584 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f8:	4b26      	ldr	r3, [pc, #152]	; (8004594 <HAL_RCC_OscConfig+0x63c>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fe:	f7fc fd41 	bl	8000f84 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004506:	f7fc fd3d 	bl	8000f84 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e036      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004518:	4b1d      	ldr	r3, [pc, #116]	; (8004590 <HAL_RCC_OscConfig+0x638>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x5ae>
 8004524:	e02e      	b.n	8004584 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e029      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004532:	4b17      	ldr	r3, [pc, #92]	; (8004590 <HAL_RCC_OscConfig+0x638>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	429a      	cmp	r2, r3
 8004544:	d11c      	bne.n	8004580 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004550:	429a      	cmp	r2, r3
 8004552:	d115      	bne.n	8004580 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800455a:	4013      	ands	r3, r2
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004560:	4293      	cmp	r3, r2
 8004562:	d10d      	bne.n	8004580 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800456e:	429a      	cmp	r2, r3
 8004570:	d106      	bne.n	8004580 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40023800 	.word	0x40023800
 8004594:	42470060 	.word	0x42470060

08004598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e174      	b.n	8004896 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_RCC_ClockConfig+0x24>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b0f      	cmp	r3, #15
 80045ba:	d904      	bls.n	80045c6 <HAL_RCC_ClockConfig+0x2e>
 80045bc:	f240 2151 	movw	r1, #593	; 0x251
 80045c0:	487b      	ldr	r0, [pc, #492]	; (80047b0 <HAL_RCC_ClockConfig+0x218>)
 80045c2:	f006 fac7 	bl	800ab54 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d019      	beq.n	8004600 <HAL_RCC_ClockConfig+0x68>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d016      	beq.n	8004600 <HAL_RCC_ClockConfig+0x68>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d013      	beq.n	8004600 <HAL_RCC_ClockConfig+0x68>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d010      	beq.n	8004600 <HAL_RCC_ClockConfig+0x68>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d00d      	beq.n	8004600 <HAL_RCC_ClockConfig+0x68>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b05      	cmp	r3, #5
 80045e8:	d00a      	beq.n	8004600 <HAL_RCC_ClockConfig+0x68>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b06      	cmp	r3, #6
 80045ee:	d007      	beq.n	8004600 <HAL_RCC_ClockConfig+0x68>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b07      	cmp	r3, #7
 80045f4:	d004      	beq.n	8004600 <HAL_RCC_ClockConfig+0x68>
 80045f6:	f240 2152 	movw	r1, #594	; 0x252
 80045fa:	486d      	ldr	r0, [pc, #436]	; (80047b0 <HAL_RCC_ClockConfig+0x218>)
 80045fc:	f006 faaa 	bl	800ab54 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004600:	4b6c      	ldr	r3, [pc, #432]	; (80047b4 <HAL_RCC_ClockConfig+0x21c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 030f 	and.w	r3, r3, #15
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d90c      	bls.n	8004628 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460e:	4b69      	ldr	r3, [pc, #420]	; (80047b4 <HAL_RCC_ClockConfig+0x21c>)
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004616:	4b67      	ldr	r3, [pc, #412]	; (80047b4 <HAL_RCC_ClockConfig+0x21c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d001      	beq.n	8004628 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e136      	b.n	8004896 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d049      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004640:	4b5d      	ldr	r3, [pc, #372]	; (80047b8 <HAL_RCC_ClockConfig+0x220>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	4a5c      	ldr	r2, [pc, #368]	; (80047b8 <HAL_RCC_ClockConfig+0x220>)
 8004646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800464a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004658:	4b57      	ldr	r3, [pc, #348]	; (80047b8 <HAL_RCC_ClockConfig+0x220>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4a56      	ldr	r2, [pc, #344]	; (80047b8 <HAL_RCC_ClockConfig+0x220>)
 800465e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d024      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x11e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b80      	cmp	r3, #128	; 0x80
 8004672:	d020      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x11e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b90      	cmp	r3, #144	; 0x90
 800467a:	d01c      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x11e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2ba0      	cmp	r3, #160	; 0xa0
 8004682:	d018      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x11e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2bb0      	cmp	r3, #176	; 0xb0
 800468a:	d014      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x11e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2bc0      	cmp	r3, #192	; 0xc0
 8004692:	d010      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x11e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2bd0      	cmp	r3, #208	; 0xd0
 800469a:	d00c      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x11e>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2be0      	cmp	r3, #224	; 0xe0
 80046a2:	d008      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x11e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2bf0      	cmp	r3, #240	; 0xf0
 80046aa:	d004      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x11e>
 80046ac:	f240 2175 	movw	r1, #629	; 0x275
 80046b0:	483f      	ldr	r0, [pc, #252]	; (80047b0 <HAL_RCC_ClockConfig+0x218>)
 80046b2:	f006 fa4f 	bl	800ab54 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b6:	4b40      	ldr	r3, [pc, #256]	; (80047b8 <HAL_RCC_ClockConfig+0x220>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	493d      	ldr	r1, [pc, #244]	; (80047b8 <HAL_RCC_ClockConfig+0x220>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d059      	beq.n	8004788 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d010      	beq.n	80046fe <HAL_RCC_ClockConfig+0x166>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d00c      	beq.n	80046fe <HAL_RCC_ClockConfig+0x166>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d008      	beq.n	80046fe <HAL_RCC_ClockConfig+0x166>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d004      	beq.n	80046fe <HAL_RCC_ClockConfig+0x166>
 80046f4:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80046f8:	482d      	ldr	r0, [pc, #180]	; (80047b0 <HAL_RCC_ClockConfig+0x218>)
 80046fa:	f006 fa2b 	bl	800ab54 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d107      	bne.n	8004716 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004706:	4b2c      	ldr	r3, [pc, #176]	; (80047b8 <HAL_RCC_ClockConfig+0x220>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d119      	bne.n	8004746 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e0bf      	b.n	8004896 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d003      	beq.n	8004726 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004722:	2b03      	cmp	r3, #3
 8004724:	d107      	bne.n	8004736 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004726:	4b24      	ldr	r3, [pc, #144]	; (80047b8 <HAL_RCC_ClockConfig+0x220>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e0af      	b.n	8004896 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004736:	4b20      	ldr	r3, [pc, #128]	; (80047b8 <HAL_RCC_ClockConfig+0x220>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e0a7      	b.n	8004896 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004746:	4b1c      	ldr	r3, [pc, #112]	; (80047b8 <HAL_RCC_ClockConfig+0x220>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f023 0203 	bic.w	r2, r3, #3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	4919      	ldr	r1, [pc, #100]	; (80047b8 <HAL_RCC_ClockConfig+0x220>)
 8004754:	4313      	orrs	r3, r2
 8004756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004758:	f7fc fc14 	bl	8000f84 <HAL_GetTick>
 800475c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475e:	e00a      	b.n	8004776 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004760:	f7fc fc10 	bl	8000f84 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f241 3288 	movw	r2, #5000	; 0x1388
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e08f      	b.n	8004896 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004776:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <HAL_RCC_ClockConfig+0x220>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 020c 	and.w	r2, r3, #12
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	429a      	cmp	r2, r3
 8004786:	d1eb      	bne.n	8004760 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004788:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <HAL_RCC_ClockConfig+0x21c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d212      	bcs.n	80047bc <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <HAL_RCC_ClockConfig+0x21c>)
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <HAL_RCC_ClockConfig+0x21c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d007      	beq.n	80047bc <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e072      	b.n	8004896 <HAL_RCC_ClockConfig+0x2fe>
 80047b0:	0800d5e0 	.word	0x0800d5e0
 80047b4:	40023c00 	.word	0x40023c00
 80047b8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d025      	beq.n	8004814 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d018      	beq.n	8004802 <HAL_RCC_ClockConfig+0x26a>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d8:	d013      	beq.n	8004802 <HAL_RCC_ClockConfig+0x26a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047e2:	d00e      	beq.n	8004802 <HAL_RCC_ClockConfig+0x26a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80047ec:	d009      	beq.n	8004802 <HAL_RCC_ClockConfig+0x26a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80047f6:	d004      	beq.n	8004802 <HAL_RCC_ClockConfig+0x26a>
 80047f8:	f240 21ba 	movw	r1, #698	; 0x2ba
 80047fc:	4828      	ldr	r0, [pc, #160]	; (80048a0 <HAL_RCC_ClockConfig+0x308>)
 80047fe:	f006 f9a9 	bl	800ab54 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004802:	4b28      	ldr	r3, [pc, #160]	; (80048a4 <HAL_RCC_ClockConfig+0x30c>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	4925      	ldr	r1, [pc, #148]	; (80048a4 <HAL_RCC_ClockConfig+0x30c>)
 8004810:	4313      	orrs	r3, r2
 8004812:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	d026      	beq.n	800486e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d018      	beq.n	800485a <HAL_RCC_ClockConfig+0x2c2>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004830:	d013      	beq.n	800485a <HAL_RCC_ClockConfig+0x2c2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800483a:	d00e      	beq.n	800485a <HAL_RCC_ClockConfig+0x2c2>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004844:	d009      	beq.n	800485a <HAL_RCC_ClockConfig+0x2c2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800484e:	d004      	beq.n	800485a <HAL_RCC_ClockConfig+0x2c2>
 8004850:	f240 21c1 	movw	r1, #705	; 0x2c1
 8004854:	4812      	ldr	r0, [pc, #72]	; (80048a0 <HAL_RCC_ClockConfig+0x308>)
 8004856:	f006 f97d 	bl	800ab54 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800485a:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <HAL_RCC_ClockConfig+0x30c>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	490e      	ldr	r1, [pc, #56]	; (80048a4 <HAL_RCC_ClockConfig+0x30c>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800486e:	f000 f821 	bl	80048b4 <HAL_RCC_GetSysClockFreq>
 8004872:	4601      	mov	r1, r0
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <HAL_RCC_ClockConfig+0x30c>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	091b      	lsrs	r3, r3, #4
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	4a0a      	ldr	r2, [pc, #40]	; (80048a8 <HAL_RCC_ClockConfig+0x310>)
 8004880:	5cd3      	ldrb	r3, [r2, r3]
 8004882:	fa21 f303 	lsr.w	r3, r1, r3
 8004886:	4a09      	ldr	r2, [pc, #36]	; (80048ac <HAL_RCC_ClockConfig+0x314>)
 8004888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800488a:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <HAL_RCC_ClockConfig+0x318>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7fc fb34 	bl	8000efc <HAL_InitTick>

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	0800d5e0 	.word	0x0800d5e0
 80048a4:	40023800 	.word	0x40023800
 80048a8:	0800dc40 	.word	0x0800dc40
 80048ac:	20000088 	.word	0x20000088
 80048b0:	20000080 	.word	0x20000080

080048b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	607b      	str	r3, [r7, #4]
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	2300      	movs	r3, #0
 80048c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ca:	4b63      	ldr	r3, [pc, #396]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d007      	beq.n	80048e6 <HAL_RCC_GetSysClockFreq+0x32>
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d008      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x38>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f040 80b4 	bne.w	8004a48 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048e0:	4b5e      	ldr	r3, [pc, #376]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048e2:	60bb      	str	r3, [r7, #8]
       break;
 80048e4:	e0b3      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048e6:	4b5e      	ldr	r3, [pc, #376]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80048e8:	60bb      	str	r3, [r7, #8]
      break;
 80048ea:	e0b0      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048ec:	4b5a      	ldr	r3, [pc, #360]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048f6:	4b58      	ldr	r3, [pc, #352]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d04a      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004902:	4b55      	ldr	r3, [pc, #340]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	099b      	lsrs	r3, r3, #6
 8004908:	f04f 0400 	mov.w	r4, #0
 800490c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	ea03 0501 	and.w	r5, r3, r1
 8004918:	ea04 0602 	and.w	r6, r4, r2
 800491c:	4629      	mov	r1, r5
 800491e:	4632      	mov	r2, r6
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	f04f 0400 	mov.w	r4, #0
 8004928:	0154      	lsls	r4, r2, #5
 800492a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800492e:	014b      	lsls	r3, r1, #5
 8004930:	4619      	mov	r1, r3
 8004932:	4622      	mov	r2, r4
 8004934:	1b49      	subs	r1, r1, r5
 8004936:	eb62 0206 	sbc.w	r2, r2, r6
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	f04f 0400 	mov.w	r4, #0
 8004942:	0194      	lsls	r4, r2, #6
 8004944:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004948:	018b      	lsls	r3, r1, #6
 800494a:	1a5b      	subs	r3, r3, r1
 800494c:	eb64 0402 	sbc.w	r4, r4, r2
 8004950:	f04f 0100 	mov.w	r1, #0
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	00e2      	lsls	r2, r4, #3
 800495a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800495e:	00d9      	lsls	r1, r3, #3
 8004960:	460b      	mov	r3, r1
 8004962:	4614      	mov	r4, r2
 8004964:	195b      	adds	r3, r3, r5
 8004966:	eb44 0406 	adc.w	r4, r4, r6
 800496a:	f04f 0100 	mov.w	r1, #0
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	0262      	lsls	r2, r4, #9
 8004974:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004978:	0259      	lsls	r1, r3, #9
 800497a:	460b      	mov	r3, r1
 800497c:	4614      	mov	r4, r2
 800497e:	4618      	mov	r0, r3
 8004980:	4621      	mov	r1, r4
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f04f 0400 	mov.w	r4, #0
 8004988:	461a      	mov	r2, r3
 800498a:	4623      	mov	r3, r4
 800498c:	f7fc f914 	bl	8000bb8 <__aeabi_uldivmod>
 8004990:	4603      	mov	r3, r0
 8004992:	460c      	mov	r4, r1
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	e049      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004998:	4b2f      	ldr	r3, [pc, #188]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	099b      	lsrs	r3, r3, #6
 800499e:	f04f 0400 	mov.w	r4, #0
 80049a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	ea03 0501 	and.w	r5, r3, r1
 80049ae:	ea04 0602 	and.w	r6, r4, r2
 80049b2:	4629      	mov	r1, r5
 80049b4:	4632      	mov	r2, r6
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	f04f 0400 	mov.w	r4, #0
 80049be:	0154      	lsls	r4, r2, #5
 80049c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049c4:	014b      	lsls	r3, r1, #5
 80049c6:	4619      	mov	r1, r3
 80049c8:	4622      	mov	r2, r4
 80049ca:	1b49      	subs	r1, r1, r5
 80049cc:	eb62 0206 	sbc.w	r2, r2, r6
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	f04f 0400 	mov.w	r4, #0
 80049d8:	0194      	lsls	r4, r2, #6
 80049da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049de:	018b      	lsls	r3, r1, #6
 80049e0:	1a5b      	subs	r3, r3, r1
 80049e2:	eb64 0402 	sbc.w	r4, r4, r2
 80049e6:	f04f 0100 	mov.w	r1, #0
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	00e2      	lsls	r2, r4, #3
 80049f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049f4:	00d9      	lsls	r1, r3, #3
 80049f6:	460b      	mov	r3, r1
 80049f8:	4614      	mov	r4, r2
 80049fa:	195b      	adds	r3, r3, r5
 80049fc:	eb44 0406 	adc.w	r4, r4, r6
 8004a00:	f04f 0100 	mov.w	r1, #0
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	02a2      	lsls	r2, r4, #10
 8004a0a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a0e:	0299      	lsls	r1, r3, #10
 8004a10:	460b      	mov	r3, r1
 8004a12:	4614      	mov	r4, r2
 8004a14:	4618      	mov	r0, r3
 8004a16:	4621      	mov	r1, r4
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f04f 0400 	mov.w	r4, #0
 8004a1e:	461a      	mov	r2, r3
 8004a20:	4623      	mov	r3, r4
 8004a22:	f7fc f8c9 	bl	8000bb8 <__aeabi_uldivmod>
 8004a26:	4603      	mov	r3, r0
 8004a28:	460c      	mov	r4, r1
 8004a2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	3301      	adds	r3, #1
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	60bb      	str	r3, [r7, #8]
      break;
 8004a46:	e002      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a4a:	60bb      	str	r3, [r7, #8]
      break;
 8004a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	00f42400 	.word	0x00f42400
 8004a60:	007a1200 	.word	0x007a1200

08004a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a68:	4b03      	ldr	r3, [pc, #12]	; (8004a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	20000088 	.word	0x20000088

08004a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a80:	f7ff fff0 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 8004a84:	4601      	mov	r1, r0
 8004a86:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	0a9b      	lsrs	r3, r3, #10
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	4a03      	ldr	r2, [pc, #12]	; (8004aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a92:	5cd3      	ldrb	r3, [r2, r3]
 8004a94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	0800dc50 	.word	0x0800dc50

08004aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004aa8:	f7ff ffdc 	bl	8004a64 <HAL_RCC_GetHCLKFreq>
 8004aac:	4601      	mov	r1, r0
 8004aae:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	0b5b      	lsrs	r3, r3, #13
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	4a03      	ldr	r2, [pc, #12]	; (8004ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aba:	5cd3      	ldrb	r3, [r2, r3]
 8004abc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	0800dc50 	.word	0x0800dc50

08004acc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b0f      	cmp	r3, #15
 8004aea:	d904      	bls.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004aec:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8004af0:	489d      	ldr	r0, [pc, #628]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004af2:	f006 f82f 	bl	800ab54 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d105      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d060      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d903      	bls.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	2b07      	cmp	r3, #7
 8004b1c:	d904      	bls.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004b1e:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8004b22:	4891      	ldr	r0, [pc, #580]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004b24:	f006 f816 	bl	800ab54 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	2bbf      	cmp	r3, #191	; 0xbf
 8004b2e:	d904      	bls.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004b38:	d904      	bls.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004b3a:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8004b3e:	488a      	ldr	r0, [pc, #552]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004b40:	f006 f808 	bl	800ab54 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d903      	bls.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b3f      	cmp	r3, #63	; 0x3f
 8004b52:	d904      	bls.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004b54:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8004b58:	4883      	ldr	r0, [pc, #524]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004b5a:	f005 fffb 	bl	800ab54 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b5e:	4b83      	ldr	r3, [pc, #524]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b64:	f7fc fa0e 	bl	8000f84 <HAL_GetTick>
 8004b68:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b6c:	f7fc fa0a 	bl	8000f84 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e1ae      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b7e:	4b7c      	ldr	r3, [pc, #496]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	019b      	lsls	r3, r3, #6
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	071b      	lsls	r3, r3, #28
 8004b9c:	4974      	ldr	r1, [pc, #464]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ba4:	4b71      	ldr	r3, [pc, #452]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004baa:	f7fc f9eb 	bl	8000f84 <HAL_GetTick>
 8004bae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bb2:	f7fc f9e7 	bl	8000f84 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e18b      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bc4:	4b6a      	ldr	r3, [pc, #424]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8174 	beq.w	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be6:	f000 80a6 	beq.w	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf2:	f000 80a0 	beq.w	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	4a5e      	ldr	r2, [pc, #376]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	f000 809a 	beq.w	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	4a5c      	ldr	r2, [pc, #368]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	f000 8094 	beq.w	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	4a5a      	ldr	r2, [pc, #360]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	f000 808e 	beq.w	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	4a58      	ldr	r2, [pc, #352]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	f000 8088 	beq.w	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	4a56      	ldr	r2, [pc, #344]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	f000 8082 	beq.w	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	4a54      	ldr	r2, [pc, #336]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d07c      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	4a52      	ldr	r2, [pc, #328]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d077      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	4a51      	ldr	r2, [pc, #324]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d072      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	4a4f      	ldr	r2, [pc, #316]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d06d      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	4a4e      	ldr	r2, [pc, #312]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d068      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	4a4c      	ldr	r2, [pc, #304]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d063      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	4a4b      	ldr	r2, [pc, #300]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d05e      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	4a49      	ldr	r2, [pc, #292]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d059      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	4a48      	ldr	r2, [pc, #288]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d054      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	4a46      	ldr	r2, [pc, #280]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d04f      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	4a45      	ldr	r2, [pc, #276]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d04a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	4a43      	ldr	r2, [pc, #268]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d045      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	4a42      	ldr	r2, [pc, #264]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d040      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	4a40      	ldr	r2, [pc, #256]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d03b      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	4a3f      	ldr	r2, [pc, #252]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d036      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	4a3d      	ldr	r2, [pc, #244]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d031      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	4a3c      	ldr	r2, [pc, #240]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d02c      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	4a3a      	ldr	r2, [pc, #232]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d027      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	4a39      	ldr	r2, [pc, #228]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d022      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	4a37      	ldr	r2, [pc, #220]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01d      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	4a36      	ldr	r2, [pc, #216]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d018      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	4a34      	ldr	r2, [pc, #208]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	4a33      	ldr	r2, [pc, #204]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00e      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	4a31      	ldr	r2, [pc, #196]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	4a30      	ldr	r2, [pc, #192]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d2c:	f640 2112 	movw	r1, #2578	; 0xa12
 8004d30:	480d      	ldr	r0, [pc, #52]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d32:	f005 ff0f 	bl	800ab54 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	4a0c      	ldr	r2, [pc, #48]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d44:	6413      	str	r3, [r2, #64]	; 0x40
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d52:	4b26      	ldr	r3, [pc, #152]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a25      	ldr	r2, [pc, #148]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d5e:	f7fc f911 	bl	8000f84 <HAL_GetTick>
 8004d62:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d64:	e04d      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004d66:	bf00      	nop
 8004d68:	0800d618 	.word	0x0800d618
 8004d6c:	42470068 	.word	0x42470068
 8004d70:	40023800 	.word	0x40023800
 8004d74:	00020300 	.word	0x00020300
 8004d78:	00030300 	.word	0x00030300
 8004d7c:	00040300 	.word	0x00040300
 8004d80:	00050300 	.word	0x00050300
 8004d84:	00060300 	.word	0x00060300
 8004d88:	00070300 	.word	0x00070300
 8004d8c:	00080300 	.word	0x00080300
 8004d90:	00090300 	.word	0x00090300
 8004d94:	000a0300 	.word	0x000a0300
 8004d98:	000b0300 	.word	0x000b0300
 8004d9c:	000c0300 	.word	0x000c0300
 8004da0:	000d0300 	.word	0x000d0300
 8004da4:	000e0300 	.word	0x000e0300
 8004da8:	000f0300 	.word	0x000f0300
 8004dac:	00100300 	.word	0x00100300
 8004db0:	00110300 	.word	0x00110300
 8004db4:	00120300 	.word	0x00120300
 8004db8:	00130300 	.word	0x00130300
 8004dbc:	00140300 	.word	0x00140300
 8004dc0:	00150300 	.word	0x00150300
 8004dc4:	00160300 	.word	0x00160300
 8004dc8:	00170300 	.word	0x00170300
 8004dcc:	00180300 	.word	0x00180300
 8004dd0:	00190300 	.word	0x00190300
 8004dd4:	001a0300 	.word	0x001a0300
 8004dd8:	001b0300 	.word	0x001b0300
 8004ddc:	001c0300 	.word	0x001c0300
 8004de0:	001d0300 	.word	0x001d0300
 8004de4:	001e0300 	.word	0x001e0300
 8004de8:	001f0300 	.word	0x001f0300
 8004dec:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004df0:	f7fc f8c8 	bl	8000f84 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e06c      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e02:	4b38      	ldr	r3, [pc, #224]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e0e:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e16:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d02f      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d028      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e2c:	4b2e      	ldr	r3, [pc, #184]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e34:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e36:	4b2d      	ldr	r3, [pc, #180]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e3c:	4b2b      	ldr	r3, [pc, #172]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e42:	4a29      	ldr	r2, [pc, #164]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e48:	4b27      	ldr	r3, [pc, #156]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d114      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e54:	f7fc f896 	bl	8000f84 <HAL_GetTick>
 8004e58:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5a:	e00a      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e5c:	f7fc f892 	bl	8000f84 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e034      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e72:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0ee      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e8a:	d10d      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004e8c:	4b16      	ldr	r3, [pc, #88]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea0:	4911      	ldr	r1, [pc, #68]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	608b      	str	r3, [r1, #8]
 8004ea6:	e005      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004ea8:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	4a0e      	ldr	r2, [pc, #56]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004eae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004eb2:	6093      	str	r3, [r2, #8]
 8004eb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004eb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec0:	4909      	ldr	r1, [pc, #36]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	7d1a      	ldrb	r2, [r3, #20]
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004ed8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40007000 	.word	0x40007000
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	42470e40 	.word	0x42470e40
 8004ef0:	424711e0 	.word	0x424711e0

08004ef4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e0d6      	b.n	80050b4 <HAL_RTC_Init+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	d007      	beq.n	8004f1e <HAL_RTC_Init+0x2a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_RTC_Init+0x2a>
 8004f16:	21ff      	movs	r1, #255	; 0xff
 8004f18:	4868      	ldr	r0, [pc, #416]	; (80050bc <HAL_RTC_Init+0x1c8>)
 8004f1a:	f005 fe1b 	bl	800ab54 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	2b7f      	cmp	r3, #127	; 0x7f
 8004f24:	d904      	bls.n	8004f30 <HAL_RTC_Init+0x3c>
 8004f26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f2a:	4864      	ldr	r0, [pc, #400]	; (80050bc <HAL_RTC_Init+0x1c8>)
 8004f2c:	f005 fe12 	bl	800ab54 <assert_failed>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f38:	d304      	bcc.n	8004f44 <HAL_RTC_Init+0x50>
 8004f3a:	f240 1101 	movw	r1, #257	; 0x101
 8004f3e:	485f      	ldr	r0, [pc, #380]	; (80050bc <HAL_RTC_Init+0x1c8>)
 8004f40:	f005 fe08 	bl	800ab54 <assert_failed>
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d013      	beq.n	8004f74 <HAL_RTC_Init+0x80>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f54:	d00e      	beq.n	8004f74 <HAL_RTC_Init+0x80>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f5e:	d009      	beq.n	8004f74 <HAL_RTC_Init+0x80>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f68:	d004      	beq.n	8004f74 <HAL_RTC_Init+0x80>
 8004f6a:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004f6e:	4853      	ldr	r0, [pc, #332]	; (80050bc <HAL_RTC_Init+0x1c8>)
 8004f70:	f005 fdf0 	bl	800ab54 <assert_failed>
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d009      	beq.n	8004f90 <HAL_RTC_Init+0x9c>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f84:	d004      	beq.n	8004f90 <HAL_RTC_Init+0x9c>
 8004f86:	f240 1103 	movw	r1, #259	; 0x103
 8004f8a:	484c      	ldr	r0, [pc, #304]	; (80050bc <HAL_RTC_Init+0x1c8>)
 8004f8c:	f005 fde2 	bl	800ab54 <assert_failed>
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d009      	beq.n	8004fac <HAL_RTC_Init+0xb8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fa0:	d004      	beq.n	8004fac <HAL_RTC_Init+0xb8>
 8004fa2:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004fa6:	4845      	ldr	r0, [pc, #276]	; (80050bc <HAL_RTC_Init+0x1c8>)
 8004fa8:	f005 fdd4 	bl	800ab54 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	7f5b      	ldrb	r3, [r3, #29]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d105      	bne.n	8004fc2 <HAL_RTC_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f005 fe7f 	bl	800acc0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	22ca      	movs	r2, #202	; 0xca
 8004fce:	625a      	str	r2, [r3, #36]	; 0x24
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2253      	movs	r2, #83	; 0x53
 8004fd6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 ff11 	bl	8005e00 <RTC_EnterInitMode>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <HAL_RTC_Init+0x102>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	22ff      	movs	r2, #255	; 0xff
 8004fea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2204      	movs	r2, #4
 8004ff0:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e05e      	b.n	80050b4 <HAL_RTC_Init+0x1c0>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005008:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6899      	ldr	r1, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	68d2      	ldr	r2, [r2, #12]
 8005030:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6919      	ldr	r1, [r3, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	041a      	lsls	r2, r3, #16
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005054:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10e      	bne.n	8005082 <HAL_RTC_Init+0x18e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fea3 	bl	8005db0 <HAL_RTC_WaitForSynchro>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <HAL_RTC_Init+0x18e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	22ff      	movs	r2, #255	; 0xff
 8005076:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2204      	movs	r2, #4
 800507c:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e018      	b.n	80050b4 <HAL_RTC_Init+0x1c0>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005090:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699a      	ldr	r2, [r3, #24]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	22ff      	movs	r2, #255	; 0xff
 80050aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80050b2:	2300      	movs	r3, #0
  }
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	0800d654 	.word	0x0800d654

080050c0 <HAL_RTC_DeInit>:
  *                the configuration information for RTC.
  * @note   This function doesn't reset the RTC Backup Data registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	22ca      	movs	r2, #202	; 0xca
 80050d8:	625a      	str	r2, [r3, #36]	; 0x24
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2253      	movs	r2, #83	; 0x53
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fe8c 	bl	8005e00 <RTC_EnterInitMode>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <HAL_RTC_DeInit+0x40>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	22ff      	movs	r2, #255	; 0xff
 80050f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2204      	movs	r2, #4
 80050fa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e084      	b.n	800520a <HAL_RTC_DeInit+0x14a>
  }
  else
  {
    /* Reset TR, DR and CR registers */
    hrtc->Instance->TR = 0x00000000U;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
    hrtc->Instance->DR = 0x00002101U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f242 1201 	movw	r2, #8449	; 0x2101
 8005110:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    hrtc->Instance->CR &= 0x00000007U;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f002 0207 	and.w	r2, r2, #7
 8005120:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005122:	f7fb ff2f 	bl	8000f84 <HAL_GetTick>
 8005126:	60f8      	str	r0, [r7, #12]

    /* Wait till WUTWF flag is set and if Time out is reached exit */
    while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 8005128:	e010      	b.n	800514c <HAL_RTC_DeInit+0x8c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800512a:	f7fb ff2b 	bl	8000f84 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005138:	d908      	bls.n	800514c <HAL_RTC_DeInit+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	22ff      	movs	r2, #255	; 0xff
 8005140:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2203      	movs	r2, #3
 8005146:	775a      	strb	r2, [r3, #29]

        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e05e      	b.n	800520a <HAL_RTC_DeInit+0x14a>
    while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0e7      	beq.n	800512a <HAL_RTC_DeInit+0x6a>
      }
    }

    /* Reset all RTC CR register bits */
    hrtc->Instance->CR &= 0x00000000U;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2200      	movs	r2, #0
 8005166:	609a      	str	r2, [r3, #8]
    hrtc->Instance->WUTR = 0x0000FFFFU;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005170:	615a      	str	r2, [r3, #20]
    hrtc->Instance->PRER = 0x007F00FFU;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a27      	ldr	r2, [pc, #156]	; (8005214 <HAL_RTC_DeInit+0x154>)
 8005178:	611a      	str	r2, [r3, #16]
    hrtc->Instance->CALIBR = 0x00000000U;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2200      	movs	r2, #0
 8005180:	619a      	str	r2, [r3, #24]
    hrtc->Instance->ALRMAR = 0x00000000U;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2200      	movs	r2, #0
 8005188:	61da      	str	r2, [r3, #28]
    hrtc->Instance->ALRMBR = 0x00000000U;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2200      	movs	r2, #0
 8005190:	621a      	str	r2, [r3, #32]
    hrtc->Instance->SHIFTR = 0x00000000U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2200      	movs	r2, #0
 8005198:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Instance->CALR = 0x00000000U;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	63da      	str	r2, [r3, #60]	; 0x3c
    hrtc->Instance->ALRMASSR = 0x00000000U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2200      	movs	r2, #0
 80051a8:	645a      	str	r2, [r3, #68]	; 0x44
    hrtc->Instance->ALRMBSSR = 0x00000000U;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2200      	movs	r2, #0
 80051b0:	649a      	str	r2, [r3, #72]	; 0x48

    /* Reset ISR register and exit initialization mode */
    hrtc->Instance->ISR = 0x00000000U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2200      	movs	r2, #0
 80051b8:	60da      	str	r2, [r3, #12]

    /* Reset Tamper and alternate functions configuration register */
    hrtc->Instance->TAFCR = 0x00000000U;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2200      	movs	r2, #0
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10e      	bne.n	80051ee <HAL_RTC_DeInit+0x12e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fded 	bl	8005db0 <HAL_RTC_WaitForSynchro>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d008      	beq.n	80051ee <HAL_RTC_DeInit+0x12e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	22ff      	movs	r2, #255	; 0xff
 80051e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2204      	movs	r2, #4
 80051e8:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e00d      	b.n	800520a <HAL_RTC_DeInit+0x14a>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	22ff      	movs	r2, #255	; 0xff
 80051f4:	625a      	str	r2, [r3, #36]	; 0x24
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  hrtc->MspDeInitCallback(hrtc);

#else
  /* De-Initialize RTC MSP */
  HAL_RTC_MspDeInit(hrtc);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f005 fd7e 	bl	800acf8 <HAL_RTC_MspDeInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  hrtc->State = HAL_RTC_STATE_RESET;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	775a      	strb	r2, [r3, #29]

  /* Release Lock */
  __HAL_UNLOCK(hrtc);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	007f00ff 	.word	0x007f00ff

08005218 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005218:	b590      	push	{r4, r7, lr}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <HAL_RTC_SetTime+0x26>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d004      	beq.n	800523e <HAL_RTC_SetTime+0x26>
 8005234:	f240 21da 	movw	r1, #730	; 0x2da
 8005238:	48a4      	ldr	r0, [pc, #656]	; (80054cc <HAL_RTC_SetTime+0x2b4>)
 800523a:	f005 fc8b 	bl	800ab54 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005246:	d00d      	beq.n	8005264 <HAL_RTC_SetTime+0x4c>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005250:	d008      	beq.n	8005264 <HAL_RTC_SetTime+0x4c>
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d004      	beq.n	8005264 <HAL_RTC_SetTime+0x4c>
 800525a:	f240 21db 	movw	r1, #731	; 0x2db
 800525e:	489b      	ldr	r0, [pc, #620]	; (80054cc <HAL_RTC_SetTime+0x2b4>)
 8005260:	f005 fc78 	bl	800ab54 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d009      	beq.n	8005280 <HAL_RTC_SetTime+0x68>
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005274:	d004      	beq.n	8005280 <HAL_RTC_SetTime+0x68>
 8005276:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 800527a:	4894      	ldr	r0, [pc, #592]	; (80054cc <HAL_RTC_SetTime+0x2b4>)
 800527c:	f005 fc6a 	bl	800ab54 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	7f1b      	ldrb	r3, [r3, #28]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_RTC_SetTime+0x74>
 8005288:	2302      	movs	r3, #2
 800528a:	e12c      	b.n	80054e6 <HAL_RTC_SetTime+0x2ce>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2202      	movs	r2, #2
 8005296:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d15c      	bne.n	8005358 <HAL_RTC_SetTime+0x140>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01a      	beq.n	80052e2 <HAL_RTC_SetTime+0xca>
    {
      assert_param(IS_RTC_HOUR12(sTime->Hours));
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_RTC_SetTime+0xa4>
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b0c      	cmp	r3, #12
 80052ba:	d904      	bls.n	80052c6 <HAL_RTC_SetTime+0xae>
 80052bc:	f240 21e7 	movw	r1, #743	; 0x2e7
 80052c0:	4882      	ldr	r0, [pc, #520]	; (80054cc <HAL_RTC_SetTime+0x2b4>)
 80052c2:	f005 fc47 	bl	800ab54 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	78db      	ldrb	r3, [r3, #3]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d015      	beq.n	80052fa <HAL_RTC_SetTime+0xe2>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	78db      	ldrb	r3, [r3, #3]
 80052d2:	2b40      	cmp	r3, #64	; 0x40
 80052d4:	d011      	beq.n	80052fa <HAL_RTC_SetTime+0xe2>
 80052d6:	f44f 713a 	mov.w	r1, #744	; 0x2e8
 80052da:	487c      	ldr	r0, [pc, #496]	; (80054cc <HAL_RTC_SetTime+0x2b4>)
 80052dc:	f005 fc3a 	bl	800ab54 <assert_failed>
 80052e0:	e00b      	b.n	80052fa <HAL_RTC_SetTime+0xe2>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2200      	movs	r2, #0
 80052e6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b17      	cmp	r3, #23
 80052ee:	d904      	bls.n	80052fa <HAL_RTC_SetTime+0xe2>
 80052f0:	f240 21ed 	movw	r1, #749	; 0x2ed
 80052f4:	4875      	ldr	r0, [pc, #468]	; (80054cc <HAL_RTC_SetTime+0x2b4>)
 80052f6:	f005 fc2d 	bl	800ab54 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	785b      	ldrb	r3, [r3, #1]
 80052fe:	2b3b      	cmp	r3, #59	; 0x3b
 8005300:	d904      	bls.n	800530c <HAL_RTC_SetTime+0xf4>
 8005302:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005306:	4871      	ldr	r0, [pc, #452]	; (80054cc <HAL_RTC_SetTime+0x2b4>)
 8005308:	f005 fc24 	bl	800ab54 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	789b      	ldrb	r3, [r3, #2]
 8005310:	2b3b      	cmp	r3, #59	; 0x3b
 8005312:	d904      	bls.n	800531e <HAL_RTC_SetTime+0x106>
 8005314:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8005318:	486c      	ldr	r0, [pc, #432]	; (80054cc <HAL_RTC_SetTime+0x2b4>)
 800531a:	f005 fc1b 	bl	800ab54 <assert_failed>

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fd98 	bl	8005e58 <RTC_ByteToBcd2>
 8005328:	4603      	mov	r3, r0
 800532a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	785b      	ldrb	r3, [r3, #1]
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fd91 	bl	8005e58 <RTC_ByteToBcd2>
 8005336:	4603      	mov	r3, r0
 8005338:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800533a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	789b      	ldrb	r3, [r3, #2]
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fd89 	bl	8005e58 <RTC_ByteToBcd2>
 8005346:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005348:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	78db      	ldrb	r3, [r3, #3]
 8005350:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e062      	b.n	800541e <HAL_RTC_SetTime+0x206>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d022      	beq.n	80053ac <HAL_RTC_SetTime+0x194>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fd92 	bl	8005e94 <RTC_Bcd2ToByte>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_RTC_SetTime+0x16e>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fd8a 	bl	8005e94 <RTC_Bcd2ToByte>
 8005380:	4603      	mov	r3, r0
 8005382:	2b0c      	cmp	r3, #12
 8005384:	d904      	bls.n	8005390 <HAL_RTC_SetTime+0x178>
 8005386:	f240 21fb 	movw	r1, #763	; 0x2fb
 800538a:	4850      	ldr	r0, [pc, #320]	; (80054cc <HAL_RTC_SetTime+0x2b4>)
 800538c:	f005 fbe2 	bl	800ab54 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	78db      	ldrb	r3, [r3, #3]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d019      	beq.n	80053cc <HAL_RTC_SetTime+0x1b4>
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	78db      	ldrb	r3, [r3, #3]
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	d015      	beq.n	80053cc <HAL_RTC_SetTime+0x1b4>
 80053a0:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 80053a4:	4849      	ldr	r0, [pc, #292]	; (80054cc <HAL_RTC_SetTime+0x2b4>)
 80053a6:	f005 fbd5 	bl	800ab54 <assert_failed>
 80053aa:	e00f      	b.n	80053cc <HAL_RTC_SetTime+0x1b4>
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2200      	movs	r2, #0
 80053b0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fd6c 	bl	8005e94 <RTC_Bcd2ToByte>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b17      	cmp	r3, #23
 80053c0:	d904      	bls.n	80053cc <HAL_RTC_SetTime+0x1b4>
 80053c2:	f240 3101 	movw	r1, #769	; 0x301
 80053c6:	4841      	ldr	r0, [pc, #260]	; (80054cc <HAL_RTC_SetTime+0x2b4>)
 80053c8:	f005 fbc4 	bl	800ab54 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	785b      	ldrb	r3, [r3, #1]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 fd5f 	bl	8005e94 <RTC_Bcd2ToByte>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b3b      	cmp	r3, #59	; 0x3b
 80053da:	d904      	bls.n	80053e6 <HAL_RTC_SetTime+0x1ce>
 80053dc:	f240 3103 	movw	r1, #771	; 0x303
 80053e0:	483a      	ldr	r0, [pc, #232]	; (80054cc <HAL_RTC_SetTime+0x2b4>)
 80053e2:	f005 fbb7 	bl	800ab54 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	789b      	ldrb	r3, [r3, #2]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fd52 	bl	8005e94 <RTC_Bcd2ToByte>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b3b      	cmp	r3, #59	; 0x3b
 80053f4:	d904      	bls.n	8005400 <HAL_RTC_SetTime+0x1e8>
 80053f6:	f44f 7141 	mov.w	r1, #772	; 0x304
 80053fa:	4834      	ldr	r0, [pc, #208]	; (80054cc <HAL_RTC_SetTime+0x2b4>)
 80053fc:	f005 fbaa 	bl	800ab54 <assert_failed>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	785b      	ldrb	r3, [r3, #1]
 800540a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800540c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005412:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	78db      	ldrb	r3, [r3, #3]
 8005418:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	22ca      	movs	r2, #202	; 0xca
 8005424:	625a      	str	r2, [r3, #36]	; 0x24
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2253      	movs	r2, #83	; 0x53
 800542c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 fce6 	bl	8005e00 <RTC_EnterInitMode>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00b      	beq.n	8005452 <HAL_RTC_SetTime+0x23a>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	22ff      	movs	r2, #255	; 0xff
 8005440:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2204      	movs	r2, #4
 8005446:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e049      	b.n	80054e6 <HAL_RTC_SetTime+0x2ce>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800545c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005460:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005470:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6899      	ldr	r1, [r3, #8]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	431a      	orrs	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005498:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d113      	bne.n	80054d0 <HAL_RTC_SetTime+0x2b8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fc81 	bl	8005db0 <HAL_RTC_WaitForSynchro>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00d      	beq.n	80054d0 <HAL_RTC_SetTime+0x2b8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	22ff      	movs	r2, #255	; 0xff
 80054ba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2204      	movs	r2, #4
 80054c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e00c      	b.n	80054e6 <HAL_RTC_SetTime+0x2ce>
 80054cc:	0800d654 	.word	0x0800d654
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	22ff      	movs	r2, #255	; 0xff
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2201      	movs	r2, #1
 80054dc:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80054e4:	2300      	movs	r3, #0
  }
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd90      	pop	{r4, r7, pc}
 80054ee:	bf00      	nop

080054f0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80054f0:	b590      	push	{r4, r7, lr}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <HAL_RTC_SetDate+0x26>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d004      	beq.n	8005516 <HAL_RTC_SetDate+0x26>
 800550c:	f240 318a 	movw	r1, #906	; 0x38a
 8005510:	488e      	ldr	r0, [pc, #568]	; (800574c <HAL_RTC_SetDate+0x25c>)
 8005512:	f005 fb1f 	bl	800ab54 <assert_failed>

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	7f1b      	ldrb	r3, [r3, #28]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_RTC_SetDate+0x32>
 800551e:	2302      	movs	r3, #2
 8005520:	e10f      	b.n	8005742 <HAL_RTC_SetDate+0x252>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2202      	movs	r2, #2
 800552c:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10e      	bne.n	8005552 <HAL_RTC_SetDate+0x62>
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	f003 0310 	and.w	r3, r3, #16
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <HAL_RTC_SetDate+0x62>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	785b      	ldrb	r3, [r3, #1]
 8005544:	f023 0310 	bic.w	r3, r3, #16
 8005548:	b2db      	uxtb	r3, r3
 800554a:	330a      	adds	r3, #10
 800554c:	b2da      	uxtb	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d01c      	beq.n	8005594 <HAL_RTC_SetDate+0xa4>
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b02      	cmp	r3, #2
 8005560:	d018      	beq.n	8005594 <HAL_RTC_SetDate+0xa4>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b03      	cmp	r3, #3
 8005568:	d014      	beq.n	8005594 <HAL_RTC_SetDate+0xa4>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b04      	cmp	r3, #4
 8005570:	d010      	beq.n	8005594 <HAL_RTC_SetDate+0xa4>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b05      	cmp	r3, #5
 8005578:	d00c      	beq.n	8005594 <HAL_RTC_SetDate+0xa4>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b06      	cmp	r3, #6
 8005580:	d008      	beq.n	8005594 <HAL_RTC_SetDate+0xa4>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b07      	cmp	r3, #7
 8005588:	d004      	beq.n	8005594 <HAL_RTC_SetDate+0xa4>
 800558a:	f240 3196 	movw	r1, #918	; 0x396
 800558e:	486f      	ldr	r0, [pc, #444]	; (800574c <HAL_RTC_SetDate+0x25c>)
 8005590:	f005 fae0 	bl	800ab54 <assert_failed>

  if(Format == RTC_FORMAT_BIN)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d13f      	bne.n	800561a <HAL_RTC_SetDate+0x12a>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	78db      	ldrb	r3, [r3, #3]
 800559e:	2b63      	cmp	r3, #99	; 0x63
 80055a0:	d904      	bls.n	80055ac <HAL_RTC_SetDate+0xbc>
 80055a2:	f240 319a 	movw	r1, #922	; 0x39a
 80055a6:	4869      	ldr	r0, [pc, #420]	; (800574c <HAL_RTC_SetDate+0x25c>)
 80055a8:	f005 fad4 	bl	800ab54 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	785b      	ldrb	r3, [r3, #1]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_RTC_SetDate+0xcc>
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	785b      	ldrb	r3, [r3, #1]
 80055b8:	2b0c      	cmp	r3, #12
 80055ba:	d904      	bls.n	80055c6 <HAL_RTC_SetDate+0xd6>
 80055bc:	f240 319b 	movw	r1, #923	; 0x39b
 80055c0:	4862      	ldr	r0, [pc, #392]	; (800574c <HAL_RTC_SetDate+0x25c>)
 80055c2:	f005 fac7 	bl	800ab54 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	789b      	ldrb	r3, [r3, #2]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_RTC_SetDate+0xe6>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	789b      	ldrb	r3, [r3, #2]
 80055d2:	2b1f      	cmp	r3, #31
 80055d4:	d904      	bls.n	80055e0 <HAL_RTC_SetDate+0xf0>
 80055d6:	f44f 7167 	mov.w	r1, #924	; 0x39c
 80055da:	485c      	ldr	r0, [pc, #368]	; (800574c <HAL_RTC_SetDate+0x25c>)
 80055dc:	f005 faba 	bl	800ab54 <assert_failed>

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	78db      	ldrb	r3, [r3, #3]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fc37 	bl	8005e58 <RTC_ByteToBcd2>
 80055ea:	4603      	mov	r3, r0
 80055ec:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	785b      	ldrb	r3, [r3, #1]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fc30 	bl	8005e58 <RTC_ByteToBcd2>
 80055f8:	4603      	mov	r3, r0
 80055fa:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80055fc:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	789b      	ldrb	r3, [r3, #2]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fc28 	bl	8005e58 <RTC_ByteToBcd2>
 8005608:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800560a:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	e045      	b.n	80056a6 <HAL_RTC_SetDate+0x1b6>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	78db      	ldrb	r3, [r3, #3]
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fc38 	bl	8005e94 <RTC_Bcd2ToByte>
 8005624:	4603      	mov	r3, r0
 8005626:	2b63      	cmp	r3, #99	; 0x63
 8005628:	d904      	bls.n	8005634 <HAL_RTC_SetDate+0x144>
 800562a:	f240 31a5 	movw	r1, #933	; 0x3a5
 800562e:	4847      	ldr	r0, [pc, #284]	; (800574c <HAL_RTC_SetDate+0x25c>)
 8005630:	f005 fa90 	bl	800ab54 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	785b      	ldrb	r3, [r3, #1]
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fc2b 	bl	8005e94 <RTC_Bcd2ToByte>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d007      	beq.n	8005654 <HAL_RTC_SetDate+0x164>
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fc23 	bl	8005e94 <RTC_Bcd2ToByte>
 800564e:	4603      	mov	r3, r0
 8005650:	2b0c      	cmp	r3, #12
 8005652:	d904      	bls.n	800565e <HAL_RTC_SetDate+0x16e>
 8005654:	f240 31a6 	movw	r1, #934	; 0x3a6
 8005658:	483c      	ldr	r0, [pc, #240]	; (800574c <HAL_RTC_SetDate+0x25c>)
 800565a:	f005 fa7b 	bl	800ab54 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	789b      	ldrb	r3, [r3, #2]
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fc16 	bl	8005e94 <RTC_Bcd2ToByte>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d007      	beq.n	800567e <HAL_RTC_SetDate+0x18e>
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	789b      	ldrb	r3, [r3, #2]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fc0e 	bl	8005e94 <RTC_Bcd2ToByte>
 8005678:	4603      	mov	r3, r0
 800567a:	2b1f      	cmp	r3, #31
 800567c:	d904      	bls.n	8005688 <HAL_RTC_SetDate+0x198>
 800567e:	f240 31a7 	movw	r1, #935	; 0x3a7
 8005682:	4832      	ldr	r0, [pc, #200]	; (800574c <HAL_RTC_SetDate+0x25c>)
 8005684:	f005 fa66 	bl	800ab54 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	78db      	ldrb	r3, [r3, #3]
 800568c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	785b      	ldrb	r3, [r3, #1]
 8005692:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005694:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800569a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	22ca      	movs	r2, #202	; 0xca
 80056ac:	625a      	str	r2, [r3, #36]	; 0x24
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2253      	movs	r2, #83	; 0x53
 80056b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 fba2 	bl	8005e00 <RTC_EnterInitMode>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00b      	beq.n	80056da <HAL_RTC_SetDate+0x1ea>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	22ff      	movs	r2, #255	; 0xff
 80056c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2204      	movs	r2, #4
 80056ce:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e033      	b.n	8005742 <HAL_RTC_SetDate+0x252>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80056e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68da      	ldr	r2, [r3, #12]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056f8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d111      	bne.n	800572c <HAL_RTC_SetDate+0x23c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 fb51 	bl	8005db0 <HAL_RTC_WaitForSynchro>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00b      	beq.n	800572c <HAL_RTC_SetDate+0x23c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	22ff      	movs	r2, #255	; 0xff
 800571a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2204      	movs	r2, #4
 8005720:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e00a      	b.n	8005742 <HAL_RTC_SetDate+0x252>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	22ff      	movs	r2, #255	; 0xff
 8005732:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005740:	2300      	movs	r3, #0
  }
}
 8005742:	4618      	mov	r0, r3
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	bd90      	pop	{r4, r7, pc}
 800574a:	bf00      	nop
 800574c:	0800d654 	.word	0x0800d654

08005750 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005750:	b590      	push	{r4, r7, lr}
 8005752:	b089      	sub	sp, #36	; 0x24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	61fb      	str	r3, [r7, #28]
 8005760:	2300      	movs	r3, #0
 8005762:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8005764:	4baa      	ldr	r3, [pc, #680]	; (8005a10 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4aaa      	ldr	r2, [pc, #680]	; (8005a14 <HAL_RTC_SetAlarm_IT+0x2c4>)
 800576a:	fba2 2303 	umull	r2, r3, r2, r3
 800576e:	0adb      	lsrs	r3, r3, #11
 8005770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005774:	fb02 f303 	mul.w	r3, r2, r3
 8005778:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d007      	beq.n	8005790 <HAL_RTC_SetAlarm_IT+0x40>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d004      	beq.n	8005790 <HAL_RTC_SetAlarm_IT+0x40>
 8005786:	f240 41e7 	movw	r1, #1255	; 0x4e7
 800578a:	48a3      	ldr	r0, [pc, #652]	; (8005a18 <HAL_RTC_SetAlarm_IT+0x2c8>)
 800578c:	f005 f9e2 	bl	800ab54 <assert_failed>
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005798:	d009      	beq.n	80057ae <HAL_RTC_SetAlarm_IT+0x5e>
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a2:	d004      	beq.n	80057ae <HAL_RTC_SetAlarm_IT+0x5e>
 80057a4:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
 80057a8:	489b      	ldr	r0, [pc, #620]	; (8005a18 <HAL_RTC_SetAlarm_IT+0x2c8>)
 80057aa:	f005 f9d3 	bl	800ab54 <assert_failed>
  assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d004      	beq.n	80057c4 <HAL_RTC_SetAlarm_IT+0x74>
 80057ba:	f240 41e9 	movw	r1, #1257	; 0x4e9
 80057be:	4896      	ldr	r0, [pc, #600]	; (8005a18 <HAL_RTC_SetAlarm_IT+0x2c8>)
 80057c0:	f005 f9c8 	bl	800ab54 <assert_failed>
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <HAL_RTC_SetAlarm_IT+0x90>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d4:	d004      	beq.n	80057e0 <HAL_RTC_SetAlarm_IT+0x90>
 80057d6:	f240 41ea 	movw	r1, #1258	; 0x4ea
 80057da:	488f      	ldr	r0, [pc, #572]	; (8005a18 <HAL_RTC_SetAlarm_IT+0x2c8>)
 80057dc:	f005 f9ba 	bl	800ab54 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e8:	d304      	bcc.n	80057f4 <HAL_RTC_SetAlarm_IT+0xa4>
 80057ea:	f240 41eb 	movw	r1, #1259	; 0x4eb
 80057ee:	488a      	ldr	r0, [pc, #552]	; (8005a18 <HAL_RTC_SetAlarm_IT+0x2c8>)
 80057f0:	f005 f9b0 	bl	800ab54 <assert_failed>
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d04f      	beq.n	800589c <HAL_RTC_SetAlarm_IT+0x14c>
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005804:	d04a      	beq.n	800589c <HAL_RTC_SetAlarm_IT+0x14c>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800580e:	d045      	beq.n	800589c <HAL_RTC_SetAlarm_IT+0x14c>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005818:	d040      	beq.n	800589c <HAL_RTC_SetAlarm_IT+0x14c>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005822:	d03b      	beq.n	800589c <HAL_RTC_SetAlarm_IT+0x14c>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800582c:	d036      	beq.n	800589c <HAL_RTC_SetAlarm_IT+0x14c>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005836:	d031      	beq.n	800589c <HAL_RTC_SetAlarm_IT+0x14c>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8005840:	d02c      	beq.n	800589c <HAL_RTC_SetAlarm_IT+0x14c>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800584a:	d027      	beq.n	800589c <HAL_RTC_SetAlarm_IT+0x14c>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8005854:	d022      	beq.n	800589c <HAL_RTC_SetAlarm_IT+0x14c>
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800585e:	d01d      	beq.n	800589c <HAL_RTC_SetAlarm_IT+0x14c>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8005868:	d018      	beq.n	800589c <HAL_RTC_SetAlarm_IT+0x14c>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005872:	d013      	beq.n	800589c <HAL_RTC_SetAlarm_IT+0x14c>
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 800587c:	d00e      	beq.n	800589c <HAL_RTC_SetAlarm_IT+0x14c>
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005886:	d009      	beq.n	800589c <HAL_RTC_SetAlarm_IT+0x14c>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005890:	d004      	beq.n	800589c <HAL_RTC_SetAlarm_IT+0x14c>
 8005892:	f240 41ec 	movw	r1, #1260	; 0x4ec
 8005896:	4860      	ldr	r0, [pc, #384]	; (8005a18 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005898:	f005 f95c 	bl	800ab54 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	7f1b      	ldrb	r3, [r3, #28]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_RTC_SetAlarm_IT+0x158>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e237      	b.n	8005d18 <HAL_RTC_SetAlarm_IT+0x5c8>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2201      	movs	r2, #1
 80058ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2202      	movs	r2, #2
 80058b2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f040 80b0 	bne.w	8005a1c <HAL_RTC_SetAlarm_IT+0x2cc>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d01a      	beq.n	8005900 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_RTC_SetAlarm_IT+0x18a>
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b0c      	cmp	r3, #12
 80058d8:	d904      	bls.n	80058e4 <HAL_RTC_SetAlarm_IT+0x194>
 80058da:	f240 41f7 	movw	r1, #1271	; 0x4f7
 80058de:	484e      	ldr	r0, [pc, #312]	; (8005a18 <HAL_RTC_SetAlarm_IT+0x2c8>)
 80058e0:	f005 f938 	bl	800ab54 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	78db      	ldrb	r3, [r3, #3]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d015      	beq.n	8005918 <HAL_RTC_SetAlarm_IT+0x1c8>
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	78db      	ldrb	r3, [r3, #3]
 80058f0:	2b40      	cmp	r3, #64	; 0x40
 80058f2:	d011      	beq.n	8005918 <HAL_RTC_SetAlarm_IT+0x1c8>
 80058f4:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 80058f8:	4847      	ldr	r0, [pc, #284]	; (8005a18 <HAL_RTC_SetAlarm_IT+0x2c8>)
 80058fa:	f005 f92b 	bl	800ab54 <assert_failed>
 80058fe:	e00b      	b.n	8005918 <HAL_RTC_SetAlarm_IT+0x1c8>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2200      	movs	r2, #0
 8005904:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b17      	cmp	r3, #23
 800590c:	d904      	bls.n	8005918 <HAL_RTC_SetAlarm_IT+0x1c8>
 800590e:	f240 41fd 	movw	r1, #1277	; 0x4fd
 8005912:	4841      	ldr	r0, [pc, #260]	; (8005a18 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005914:	f005 f91e 	bl	800ab54 <assert_failed>
    }
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	2b3b      	cmp	r3, #59	; 0x3b
 800591e:	d904      	bls.n	800592a <HAL_RTC_SetAlarm_IT+0x1da>
 8005920:	f240 41ff 	movw	r1, #1279	; 0x4ff
 8005924:	483c      	ldr	r0, [pc, #240]	; (8005a18 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005926:	f005 f915 	bl	800ab54 <assert_failed>
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	789b      	ldrb	r3, [r3, #2]
 800592e:	2b3b      	cmp	r3, #59	; 0x3b
 8005930:	d904      	bls.n	800593c <HAL_RTC_SetAlarm_IT+0x1ec>
 8005932:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8005936:	4838      	ldr	r0, [pc, #224]	; (8005a18 <HAL_RTC_SetAlarm_IT+0x2c8>)
 8005938:	f005 f90c 	bl	800ab54 <assert_failed>

    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10f      	bne.n	8005964 <HAL_RTC_SetAlarm_IT+0x214>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f893 3020 	ldrb.w	r3, [r3, #32]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <HAL_RTC_SetAlarm_IT+0x208>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005954:	2b1f      	cmp	r3, #31
 8005956:	d92d      	bls.n	80059b4 <HAL_RTC_SetAlarm_IT+0x264>
 8005958:	f240 5104 	movw	r1, #1284	; 0x504
 800595c:	482e      	ldr	r0, [pc, #184]	; (8005a18 <HAL_RTC_SetAlarm_IT+0x2c8>)
 800595e:	f005 f8f9 	bl	800ab54 <assert_failed>
 8005962:	e027      	b.n	80059b4 <HAL_RTC_SetAlarm_IT+0x264>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d022      	beq.n	80059b4 <HAL_RTC_SetAlarm_IT+0x264>
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d01d      	beq.n	80059b4 <HAL_RTC_SetAlarm_IT+0x264>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800597e:	2b03      	cmp	r3, #3
 8005980:	d018      	beq.n	80059b4 <HAL_RTC_SetAlarm_IT+0x264>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005988:	2b04      	cmp	r3, #4
 800598a:	d013      	beq.n	80059b4 <HAL_RTC_SetAlarm_IT+0x264>
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005992:	2b05      	cmp	r3, #5
 8005994:	d00e      	beq.n	80059b4 <HAL_RTC_SetAlarm_IT+0x264>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800599c:	2b06      	cmp	r3, #6
 800599e:	d009      	beq.n	80059b4 <HAL_RTC_SetAlarm_IT+0x264>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059a6:	2b07      	cmp	r3, #7
 80059a8:	d004      	beq.n	80059b4 <HAL_RTC_SetAlarm_IT+0x264>
 80059aa:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 80059ae:	481a      	ldr	r0, [pc, #104]	; (8005a18 <HAL_RTC_SetAlarm_IT+0x2c8>)
 80059b0:	f005 f8d0 	bl	800ab54 <assert_failed>
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fa4d 	bl	8005e58 <RTC_ByteToBcd2>
 80059be:	4603      	mov	r3, r0
 80059c0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	785b      	ldrb	r3, [r3, #1]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fa46 	bl	8005e58 <RTC_ByteToBcd2>
 80059cc:	4603      	mov	r3, r0
 80059ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80059d0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	789b      	ldrb	r3, [r3, #2]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fa3e 	bl	8005e58 <RTC_ByteToBcd2>
 80059dc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80059de:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	78db      	ldrb	r3, [r3, #3]
 80059e6:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80059e8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fa30 	bl	8005e58 <RTC_ByteToBcd2>
 80059f8:	4603      	mov	r3, r0
 80059fa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80059fc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005a04:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	61fb      	str	r3, [r7, #28]
 8005a0e:	e0d3      	b.n	8005bb8 <HAL_RTC_SetAlarm_IT+0x468>
 8005a10:	20000088 	.word	0x20000088
 8005a14:	10624dd3 	.word	0x10624dd3
 8005a18:	0800d654 	.word	0x0800d654
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d022      	beq.n	8005a70 <HAL_RTC_SetAlarm_IT+0x320>
    {
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fa30 	bl	8005e94 <RTC_Bcd2ToByte>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <HAL_RTC_SetAlarm_IT+0x2fa>
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fa28 	bl	8005e94 <RTC_Bcd2ToByte>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b0c      	cmp	r3, #12
 8005a48:	d904      	bls.n	8005a54 <HAL_RTC_SetAlarm_IT+0x304>
 8005a4a:	f240 5116 	movw	r1, #1302	; 0x516
 8005a4e:	4896      	ldr	r0, [pc, #600]	; (8005ca8 <HAL_RTC_SetAlarm_IT+0x558>)
 8005a50:	f005 f880 	bl	800ab54 <assert_failed>
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	78db      	ldrb	r3, [r3, #3]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d019      	beq.n	8005a90 <HAL_RTC_SetAlarm_IT+0x340>
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	78db      	ldrb	r3, [r3, #3]
 8005a60:	2b40      	cmp	r3, #64	; 0x40
 8005a62:	d015      	beq.n	8005a90 <HAL_RTC_SetAlarm_IT+0x340>
 8005a64:	f240 5117 	movw	r1, #1303	; 0x517
 8005a68:	488f      	ldr	r0, [pc, #572]	; (8005ca8 <HAL_RTC_SetAlarm_IT+0x558>)
 8005a6a:	f005 f873 	bl	800ab54 <assert_failed>
 8005a6e:	e00f      	b.n	8005a90 <HAL_RTC_SetAlarm_IT+0x340>
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2200      	movs	r2, #0
 8005a74:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fa0a 	bl	8005e94 <RTC_Bcd2ToByte>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b17      	cmp	r3, #23
 8005a84:	d904      	bls.n	8005a90 <HAL_RTC_SetAlarm_IT+0x340>
 8005a86:	f240 511c 	movw	r1, #1308	; 0x51c
 8005a8a:	4887      	ldr	r0, [pc, #540]	; (8005ca8 <HAL_RTC_SetAlarm_IT+0x558>)
 8005a8c:	f005 f862 	bl	800ab54 <assert_failed>
    }

    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 f9fd 	bl	8005e94 <RTC_Bcd2ToByte>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b3b      	cmp	r3, #59	; 0x3b
 8005a9e:	d904      	bls.n	8005aaa <HAL_RTC_SetAlarm_IT+0x35a>
 8005aa0:	f240 511f 	movw	r1, #1311	; 0x51f
 8005aa4:	4880      	ldr	r0, [pc, #512]	; (8005ca8 <HAL_RTC_SetAlarm_IT+0x558>)
 8005aa6:	f005 f855 	bl	800ab54 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	789b      	ldrb	r3, [r3, #2]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 f9f0 	bl	8005e94 <RTC_Bcd2ToByte>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b3b      	cmp	r3, #59	; 0x3b
 8005ab8:	d904      	bls.n	8005ac4 <HAL_RTC_SetAlarm_IT+0x374>
 8005aba:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8005abe:	487a      	ldr	r0, [pc, #488]	; (8005ca8 <HAL_RTC_SetAlarm_IT+0x558>)
 8005ac0:	f005 f848 	bl	800ab54 <assert_failed>

    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d117      	bne.n	8005afc <HAL_RTC_SetAlarm_IT+0x3ac>
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 f9de 	bl	8005e94 <RTC_Bcd2ToByte>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d008      	beq.n	8005af0 <HAL_RTC_SetAlarm_IT+0x3a0>
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 f9d5 	bl	8005e94 <RTC_Bcd2ToByte>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b1f      	cmp	r3, #31
 8005aee:	d949      	bls.n	8005b84 <HAL_RTC_SetAlarm_IT+0x434>
 8005af0:	f240 5124 	movw	r1, #1316	; 0x524
 8005af4:	486c      	ldr	r0, [pc, #432]	; (8005ca8 <HAL_RTC_SetAlarm_IT+0x558>)
 8005af6:	f005 f82d 	bl	800ab54 <assert_failed>
 8005afa:	e043      	b.n	8005b84 <HAL_RTC_SetAlarm_IT+0x434>
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f9c6 	bl	8005e94 <RTC_Bcd2ToByte>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d03a      	beq.n	8005b84 <HAL_RTC_SetAlarm_IT+0x434>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 f9bd 	bl	8005e94 <RTC_Bcd2ToByte>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d031      	beq.n	8005b84 <HAL_RTC_SetAlarm_IT+0x434>
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 f9b4 	bl	8005e94 <RTC_Bcd2ToByte>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d028      	beq.n	8005b84 <HAL_RTC_SetAlarm_IT+0x434>
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 f9ab 	bl	8005e94 <RTC_Bcd2ToByte>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d01f      	beq.n	8005b84 <HAL_RTC_SetAlarm_IT+0x434>
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 f9a2 	bl	8005e94 <RTC_Bcd2ToByte>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b05      	cmp	r3, #5
 8005b54:	d016      	beq.n	8005b84 <HAL_RTC_SetAlarm_IT+0x434>
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 f999 	bl	8005e94 <RTC_Bcd2ToByte>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b06      	cmp	r3, #6
 8005b66:	d00d      	beq.n	8005b84 <HAL_RTC_SetAlarm_IT+0x434>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f990 	bl	8005e94 <RTC_Bcd2ToByte>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b07      	cmp	r3, #7
 8005b78:	d004      	beq.n	8005b84 <HAL_RTC_SetAlarm_IT+0x434>
 8005b7a:	f44f 61a5 	mov.w	r1, #1320	; 0x528
 8005b7e:	484a      	ldr	r0, [pc, #296]	; (8005ca8 <HAL_RTC_SetAlarm_IT+0x558>)
 8005b80:	f004 ffe8 	bl	800ab54 <assert_failed>
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b90:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b96:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	78db      	ldrb	r3, [r3, #3]
 8005b9c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005b9e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ba6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005ba8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005bae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	22ca      	movs	r2, #202	; 0xca
 8005bca:	625a      	str	r2, [r3, #36]	; 0x24
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2253      	movs	r2, #83	; 0x53
 8005bd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bdc:	d141      	bne.n	8005c62 <HAL_RTC_SetAlarm_IT+0x512>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bec:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005bfe:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	1e5a      	subs	r2, r3, #1
 8005c04:	617a      	str	r2, [r7, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10b      	bne.n	8005c22 <HAL_RTC_SetAlarm_IT+0x4d2>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	22ff      	movs	r2, #255	; 0xff
 8005c10:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2203      	movs	r2, #3
 8005c16:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e07a      	b.n	8005d18 <HAL_RTC_SetAlarm_IT+0x5c8>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0e7      	beq.n	8005c00 <HAL_RTC_SetAlarm_IT+0x4b0>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	69fa      	ldr	r2, [r7, #28]
 8005c36:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c4e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c5e:	609a      	str	r2, [r3, #8]
 8005c60:	e043      	b.n	8005cea <HAL_RTC_SetAlarm_IT+0x59a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c70:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005c82:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	1e5a      	subs	r2, r3, #1
 8005c88:	617a      	str	r2, [r7, #20]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10e      	bne.n	8005cac <HAL_RTC_SetAlarm_IT+0x55c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	22ff      	movs	r2, #255	; 0xff
 8005c94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2203      	movs	r2, #3
 8005c9a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e038      	b.n	8005d18 <HAL_RTC_SetAlarm_IT+0x5c8>
 8005ca6:	bf00      	nop
 8005ca8:	0800d654 	.word	0x0800d654
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0e4      	beq.n	8005c84 <HAL_RTC_SetAlarm_IT+0x534>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ce8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005cea:	4b0d      	ldr	r3, [pc, #52]	; (8005d20 <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a0c      	ldr	r2, [pc, #48]	; (8005d20 <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf4:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8005cf6:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <HAL_RTC_SetAlarm_IT+0x5d0>)
 8005cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d00:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	22ff      	movs	r2, #255	; 0xff
 8005d08:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3724      	adds	r7, #36	; 0x24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd90      	pop	{r4, r7, pc}
 8005d20:	40013c00 	.word	0x40013c00

08005d24 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d012      	beq.n	8005d60 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00b      	beq.n	8005d60 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f004 fe5d 	bl	800aa08 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005d5e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d012      	beq.n	8005d94 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00b      	beq.n	8005d94 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f8a7 	bl	8005ed0 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005d92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005d94:	4b05      	ldr	r3, [pc, #20]	; (8005dac <HAL_RTC_AlarmIRQHandler+0x88>)
 8005d96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d9a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	775a      	strb	r2, [r3, #29]
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	40013c00 	.word	0x40013c00

08005db0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005dca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dcc:	f7fb f8da 	bl	8000f84 <HAL_GetTick>
 8005dd0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005dd2:	e009      	b.n	8005de8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005dd4:	f7fb f8d6 	bl	8000f84 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005de2:	d901      	bls.n	8005de8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e007      	b.n	8005df8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0ee      	beq.n	8005dd4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d119      	bne.n	8005e4e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e22:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e24:	f7fb f8ae 	bl	8000f84 <HAL_GetTick>
 8005e28:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e2a:	e009      	b.n	8005e40 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e2c:	f7fb f8aa 	bl	8000f84 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e3a:	d901      	bls.n	8005e40 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e007      	b.n	8005e50 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0ee      	beq.n	8005e2c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005e66:	e005      	b.n	8005e74 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	3b0a      	subs	r3, #10
 8005e72:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	2b09      	cmp	r3, #9
 8005e78:	d8f6      	bhi.n	8005e68 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	b2db      	uxtb	r3, r3
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005ea2:	79fb      	ldrb	r3, [r7, #7]
 8005ea4:	091b      	lsrs	r3, r3, #4
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4613      	mov	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	4413      	add	r3, r2
 8005ec2:	b2db      	uxtb	r3, r3
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e083      	b.n	8005ffe <HAL_TIM_Base_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a43      	ldr	r2, [pc, #268]	; (8006008 <HAL_TIM_Base_Init+0x124>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d027      	beq.n	8005f50 <HAL_TIM_Base_Init+0x6c>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f08:	d022      	beq.n	8005f50 <HAL_TIM_Base_Init+0x6c>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a3f      	ldr	r2, [pc, #252]	; (800600c <HAL_TIM_Base_Init+0x128>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d01d      	beq.n	8005f50 <HAL_TIM_Base_Init+0x6c>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a3d      	ldr	r2, [pc, #244]	; (8006010 <HAL_TIM_Base_Init+0x12c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d018      	beq.n	8005f50 <HAL_TIM_Base_Init+0x6c>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a3c      	ldr	r2, [pc, #240]	; (8006014 <HAL_TIM_Base_Init+0x130>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d013      	beq.n	8005f50 <HAL_TIM_Base_Init+0x6c>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a3a      	ldr	r2, [pc, #232]	; (8006018 <HAL_TIM_Base_Init+0x134>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00e      	beq.n	8005f50 <HAL_TIM_Base_Init+0x6c>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a39      	ldr	r2, [pc, #228]	; (800601c <HAL_TIM_Base_Init+0x138>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d009      	beq.n	8005f50 <HAL_TIM_Base_Init+0x6c>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a37      	ldr	r2, [pc, #220]	; (8006020 <HAL_TIM_Base_Init+0x13c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d004      	beq.n	8005f50 <HAL_TIM_Base_Init+0x6c>
 8005f46:	f44f 7189 	mov.w	r1, #274	; 0x112
 8005f4a:	4836      	ldr	r0, [pc, #216]	; (8006024 <HAL_TIM_Base_Init+0x140>)
 8005f4c:	f004 fe02 	bl	800ab54 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d014      	beq.n	8005f82 <HAL_TIM_Base_Init+0x9e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2b10      	cmp	r3, #16
 8005f5e:	d010      	beq.n	8005f82 <HAL_TIM_Base_Init+0x9e>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d00c      	beq.n	8005f82 <HAL_TIM_Base_Init+0x9e>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b40      	cmp	r3, #64	; 0x40
 8005f6e:	d008      	beq.n	8005f82 <HAL_TIM_Base_Init+0x9e>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2b60      	cmp	r3, #96	; 0x60
 8005f76:	d004      	beq.n	8005f82 <HAL_TIM_Base_Init+0x9e>
 8005f78:	f240 1113 	movw	r1, #275	; 0x113
 8005f7c:	4829      	ldr	r0, [pc, #164]	; (8006024 <HAL_TIM_Base_Init+0x140>)
 8005f7e:	f004 fde9 	bl	800ab54 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00e      	beq.n	8005fa8 <HAL_TIM_Base_Init+0xc4>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f92:	d009      	beq.n	8005fa8 <HAL_TIM_Base_Init+0xc4>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f9c:	d004      	beq.n	8005fa8 <HAL_TIM_Base_Init+0xc4>
 8005f9e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005fa2:	4820      	ldr	r0, [pc, #128]	; (8006024 <HAL_TIM_Base_Init+0x140>)
 8005fa4:	f004 fdd6 	bl	800ab54 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d008      	beq.n	8005fc2 <HAL_TIM_Base_Init+0xde>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	2b80      	cmp	r3, #128	; 0x80
 8005fb6:	d004      	beq.n	8005fc2 <HAL_TIM_Base_Init+0xde>
 8005fb8:	f240 1115 	movw	r1, #277	; 0x115
 8005fbc:	4819      	ldr	r0, [pc, #100]	; (8006024 <HAL_TIM_Base_Init+0x140>)
 8005fbe:	f004 fdc9 	bl	800ab54 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d106      	bne.n	8005fdc <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f004 fea6 	bl	800ad28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4619      	mov	r1, r3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	f000 feec 	bl	8006dcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40010000 	.word	0x40010000
 800600c:	40000400 	.word	0x40000400
 8006010:	40000800 	.word	0x40000800
 8006014:	40000c00 	.word	0x40000c00
 8006018:	40014000 	.word	0x40014000
 800601c:	40014400 	.word	0x40014400
 8006020:	40014800 	.word	0x40014800
 8006024:	0800d68c 	.word	0x0800d68c

08006028 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e083      	b.n	8006142 <HAL_TIM_PWM_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a43      	ldr	r2, [pc, #268]	; (800614c <HAL_TIM_PWM_Init+0x124>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d027      	beq.n	8006094 <HAL_TIM_PWM_Init+0x6c>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604c:	d022      	beq.n	8006094 <HAL_TIM_PWM_Init+0x6c>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a3f      	ldr	r2, [pc, #252]	; (8006150 <HAL_TIM_PWM_Init+0x128>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d01d      	beq.n	8006094 <HAL_TIM_PWM_Init+0x6c>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a3d      	ldr	r2, [pc, #244]	; (8006154 <HAL_TIM_PWM_Init+0x12c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d018      	beq.n	8006094 <HAL_TIM_PWM_Init+0x6c>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a3c      	ldr	r2, [pc, #240]	; (8006158 <HAL_TIM_PWM_Init+0x130>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d013      	beq.n	8006094 <HAL_TIM_PWM_Init+0x6c>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a3a      	ldr	r2, [pc, #232]	; (800615c <HAL_TIM_PWM_Init+0x134>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00e      	beq.n	8006094 <HAL_TIM_PWM_Init+0x6c>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a39      	ldr	r2, [pc, #228]	; (8006160 <HAL_TIM_PWM_Init+0x138>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d009      	beq.n	8006094 <HAL_TIM_PWM_Init+0x6c>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a37      	ldr	r2, [pc, #220]	; (8006164 <HAL_TIM_PWM_Init+0x13c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d004      	beq.n	8006094 <HAL_TIM_PWM_Init+0x6c>
 800608a:	f240 419b 	movw	r1, #1179	; 0x49b
 800608e:	4836      	ldr	r0, [pc, #216]	; (8006168 <HAL_TIM_PWM_Init+0x140>)
 8006090:	f004 fd60 	bl	800ab54 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d014      	beq.n	80060c6 <HAL_TIM_PWM_Init+0x9e>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	2b10      	cmp	r3, #16
 80060a2:	d010      	beq.n	80060c6 <HAL_TIM_PWM_Init+0x9e>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d00c      	beq.n	80060c6 <HAL_TIM_PWM_Init+0x9e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	2b40      	cmp	r3, #64	; 0x40
 80060b2:	d008      	beq.n	80060c6 <HAL_TIM_PWM_Init+0x9e>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	2b60      	cmp	r3, #96	; 0x60
 80060ba:	d004      	beq.n	80060c6 <HAL_TIM_PWM_Init+0x9e>
 80060bc:	f240 419c 	movw	r1, #1180	; 0x49c
 80060c0:	4829      	ldr	r0, [pc, #164]	; (8006168 <HAL_TIM_PWM_Init+0x140>)
 80060c2:	f004 fd47 	bl	800ab54 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00e      	beq.n	80060ec <HAL_TIM_PWM_Init+0xc4>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060d6:	d009      	beq.n	80060ec <HAL_TIM_PWM_Init+0xc4>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060e0:	d004      	beq.n	80060ec <HAL_TIM_PWM_Init+0xc4>
 80060e2:	f240 419d 	movw	r1, #1181	; 0x49d
 80060e6:	4820      	ldr	r0, [pc, #128]	; (8006168 <HAL_TIM_PWM_Init+0x140>)
 80060e8:	f004 fd34 	bl	800ab54 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d008      	beq.n	8006106 <HAL_TIM_PWM_Init+0xde>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b80      	cmp	r3, #128	; 0x80
 80060fa:	d004      	beq.n	8006106 <HAL_TIM_PWM_Init+0xde>
 80060fc:	f240 419e 	movw	r1, #1182	; 0x49e
 8006100:	4819      	ldr	r0, [pc, #100]	; (8006168 <HAL_TIM_PWM_Init+0x140>)
 8006102:	f004 fd27 	bl	800ab54 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f826 	bl	800616c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3304      	adds	r3, #4
 8006130:	4619      	mov	r1, r3
 8006132:	4610      	mov	r0, r2
 8006134:	f000 fe4a 	bl	8006dcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	40010000 	.word	0x40010000
 8006150:	40000400 	.word	0x40000400
 8006154:	40000800 	.word	0x40000800
 8006158:	40000c00 	.word	0x40000c00
 800615c:	40014000 	.word	0x40014000
 8006160:	40014400 	.word	0x40014400
 8006164:	40014800 	.word	0x40014800
 8006168:	0800d68c 	.word	0x0800d68c

0800616c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a4e      	ldr	r2, [pc, #312]	; (80062c8 <HAL_TIM_PWM_Start+0x148>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d10b      	bne.n	80061ac <HAL_TIM_PWM_Start+0x2c>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d06c      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b04      	cmp	r3, #4
 800619e:	d069      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	d066      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b0c      	cmp	r3, #12
 80061aa:	d063      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b4:	d10b      	bne.n	80061ce <HAL_TIM_PWM_Start+0x4e>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d05b      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d058      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d055      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b0c      	cmp	r3, #12
 80061cc:	d052      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a3e      	ldr	r2, [pc, #248]	; (80062cc <HAL_TIM_PWM_Start+0x14c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d10b      	bne.n	80061f0 <HAL_TIM_PWM_Start+0x70>
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d04a      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d047      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2b08      	cmp	r3, #8
 80061e8:	d044      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b0c      	cmp	r3, #12
 80061ee:	d041      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a36      	ldr	r2, [pc, #216]	; (80062d0 <HAL_TIM_PWM_Start+0x150>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d10b      	bne.n	8006212 <HAL_TIM_PWM_Start+0x92>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d039      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2b04      	cmp	r3, #4
 8006204:	d036      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b08      	cmp	r3, #8
 800620a:	d033      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b0c      	cmp	r3, #12
 8006210:	d030      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a2f      	ldr	r2, [pc, #188]	; (80062d4 <HAL_TIM_PWM_Start+0x154>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d10b      	bne.n	8006234 <HAL_TIM_PWM_Start+0xb4>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d028      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b04      	cmp	r3, #4
 8006226:	d025      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b08      	cmp	r3, #8
 800622c:	d022      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b0c      	cmp	r3, #12
 8006232:	d01f      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a27      	ldr	r2, [pc, #156]	; (80062d8 <HAL_TIM_PWM_Start+0x158>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d105      	bne.n	800624a <HAL_TIM_PWM_Start+0xca>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d017      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b04      	cmp	r3, #4
 8006248:	d014      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a23      	ldr	r2, [pc, #140]	; (80062dc <HAL_TIM_PWM_Start+0x15c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d102      	bne.n	800625a <HAL_TIM_PWM_Start+0xda>
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00c      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a20      	ldr	r2, [pc, #128]	; (80062e0 <HAL_TIM_PWM_Start+0x160>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d102      	bne.n	800626a <HAL_TIM_PWM_Start+0xea>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d004      	beq.n	8006274 <HAL_TIM_PWM_Start+0xf4>
 800626a:	f240 5113 	movw	r1, #1299	; 0x513
 800626e:	481d      	ldr	r0, [pc, #116]	; (80062e4 <HAL_TIM_PWM_Start+0x164>)
 8006270:	f004 fc70 	bl	800ab54 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2201      	movs	r2, #1
 800627a:	6839      	ldr	r1, [r7, #0]
 800627c:	4618      	mov	r0, r3
 800627e:	f001 f8d5 	bl	800742c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a10      	ldr	r2, [pc, #64]	; (80062c8 <HAL_TIM_PWM_Start+0x148>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d107      	bne.n	800629c <HAL_TIM_PWM_Start+0x11c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800629a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b06      	cmp	r3, #6
 80062ac:	d007      	beq.n	80062be <HAL_TIM_PWM_Start+0x13e>
  {
    __HAL_TIM_ENABLE(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0201 	orr.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40010000 	.word	0x40010000
 80062cc:	40000400 	.word	0x40000400
 80062d0:	40000800 	.word	0x40000800
 80062d4:	40000c00 	.word	0x40000c00
 80062d8:	40014000 	.word	0x40014000
 80062dc:	40014400 	.word	0x40014400
 80062e0:	40014800 	.word	0x40014800
 80062e4:	0800d68c 	.word	0x0800d68c

080062e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a5c      	ldr	r2, [pc, #368]	; (8006468 <HAL_TIM_PWM_Stop+0x180>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d10b      	bne.n	8006314 <HAL_TIM_PWM_Stop+0x2c>
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d06c      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b04      	cmp	r3, #4
 8006306:	d069      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b08      	cmp	r3, #8
 800630c:	d066      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b0c      	cmp	r3, #12
 8006312:	d063      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631c:	d10b      	bne.n	8006336 <HAL_TIM_PWM_Stop+0x4e>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d05b      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b04      	cmp	r3, #4
 8006328:	d058      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b08      	cmp	r3, #8
 800632e:	d055      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b0c      	cmp	r3, #12
 8006334:	d052      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a4c      	ldr	r2, [pc, #304]	; (800646c <HAL_TIM_PWM_Stop+0x184>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d10b      	bne.n	8006358 <HAL_TIM_PWM_Stop+0x70>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d04a      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b04      	cmp	r3, #4
 800634a:	d047      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b08      	cmp	r3, #8
 8006350:	d044      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b0c      	cmp	r3, #12
 8006356:	d041      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a44      	ldr	r2, [pc, #272]	; (8006470 <HAL_TIM_PWM_Stop+0x188>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d10b      	bne.n	800637a <HAL_TIM_PWM_Stop+0x92>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d039      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2b04      	cmp	r3, #4
 800636c:	d036      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b08      	cmp	r3, #8
 8006372:	d033      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b0c      	cmp	r3, #12
 8006378:	d030      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a3d      	ldr	r2, [pc, #244]	; (8006474 <HAL_TIM_PWM_Stop+0x18c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d10b      	bne.n	800639c <HAL_TIM_PWM_Stop+0xb4>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d028      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b04      	cmp	r3, #4
 800638e:	d025      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2b08      	cmp	r3, #8
 8006394:	d022      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b0c      	cmp	r3, #12
 800639a:	d01f      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a35      	ldr	r2, [pc, #212]	; (8006478 <HAL_TIM_PWM_Stop+0x190>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d105      	bne.n	80063b2 <HAL_TIM_PWM_Stop+0xca>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d017      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d014      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a31      	ldr	r2, [pc, #196]	; (800647c <HAL_TIM_PWM_Stop+0x194>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d102      	bne.n	80063c2 <HAL_TIM_PWM_Stop+0xda>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00c      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a2e      	ldr	r2, [pc, #184]	; (8006480 <HAL_TIM_PWM_Stop+0x198>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d102      	bne.n	80063d2 <HAL_TIM_PWM_Stop+0xea>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d004      	beq.n	80063dc <HAL_TIM_PWM_Stop+0xf4>
 80063d2:	f240 5137 	movw	r1, #1335	; 0x537
 80063d6:	482b      	ldr	r0, [pc, #172]	; (8006484 <HAL_TIM_PWM_Stop+0x19c>)
 80063d8:	f004 fbbc 	bl	800ab54 <assert_failed>

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2200      	movs	r2, #0
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 f821 	bl	800742c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a1e      	ldr	r2, [pc, #120]	; (8006468 <HAL_TIM_PWM_Stop+0x180>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d117      	bne.n	8006424 <HAL_TIM_PWM_Stop+0x13c>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6a1a      	ldr	r2, [r3, #32]
 80063fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80063fe:	4013      	ands	r3, r2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10f      	bne.n	8006424 <HAL_TIM_PWM_Stop+0x13c>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6a1a      	ldr	r2, [r3, #32]
 800640a:	f240 4344 	movw	r3, #1092	; 0x444
 800640e:	4013      	ands	r3, r2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d107      	bne.n	8006424 <HAL_TIM_PWM_Stop+0x13c>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006422:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6a1a      	ldr	r2, [r3, #32]
 800642a:	f241 1311 	movw	r3, #4369	; 0x1111
 800642e:	4013      	ands	r3, r2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10f      	bne.n	8006454 <HAL_TIM_PWM_Stop+0x16c>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6a1a      	ldr	r2, [r3, #32]
 800643a:	f240 4344 	movw	r3, #1092	; 0x444
 800643e:	4013      	ands	r3, r2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d107      	bne.n	8006454 <HAL_TIM_PWM_Stop+0x16c>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0201 	bic.w	r2, r2, #1
 8006452:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	40010000 	.word	0x40010000
 800646c:	40000400 	.word	0x40000400
 8006470:	40000800 	.word	0x40000800
 8006474:	40000c00 	.word	0x40000c00
 8006478:	40014000 	.word	0x40014000
 800647c:	40014400 	.word	0x40014400
 8006480:	40014800 	.word	0x40014800
 8006484:	0800d68c 	.word	0x0800d68c

08006488 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d010      	beq.n	80064bc <HAL_TIM_PWM_ConfigChannel+0x34>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b04      	cmp	r3, #4
 800649e:	d00d      	beq.n	80064bc <HAL_TIM_PWM_ConfigChannel+0x34>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	d00a      	beq.n	80064bc <HAL_TIM_PWM_ConfigChannel+0x34>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b0c      	cmp	r3, #12
 80064aa:	d007      	beq.n	80064bc <HAL_TIM_PWM_ConfigChannel+0x34>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b3c      	cmp	r3, #60	; 0x3c
 80064b0:	d004      	beq.n	80064bc <HAL_TIM_PWM_ConfigChannel+0x34>
 80064b2:	f640 51ec 	movw	r1, #3564	; 0xdec
 80064b6:	4895      	ldr	r0, [pc, #596]	; (800670c <HAL_TIM_PWM_ConfigChannel+0x284>)
 80064b8:	f004 fb4c 	bl	800ab54 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b60      	cmp	r3, #96	; 0x60
 80064c2:	d008      	beq.n	80064d6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b70      	cmp	r3, #112	; 0x70
 80064ca:	d004      	beq.n	80064d6 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80064cc:	f640 51ed 	movw	r1, #3565	; 0xded
 80064d0:	488e      	ldr	r0, [pc, #568]	; (800670c <HAL_TIM_PWM_ConfigChannel+0x284>)
 80064d2:	f004 fb3f 	bl	800ab54 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d008      	beq.n	80064f0 <HAL_TIM_PWM_ConfigChannel+0x68>
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d004      	beq.n	80064f0 <HAL_TIM_PWM_ConfigChannel+0x68>
 80064e6:	f640 51ee 	movw	r1, #3566	; 0xdee
 80064ea:	4888      	ldr	r0, [pc, #544]	; (800670c <HAL_TIM_PWM_ConfigChannel+0x284>)
 80064ec:	f004 fb32 	bl	800ab54 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d008      	beq.n	800650a <HAL_TIM_PWM_ConfigChannel+0x82>
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d004      	beq.n	800650a <HAL_TIM_PWM_ConfigChannel+0x82>
 8006500:	f640 51ef 	movw	r1, #3567	; 0xdef
 8006504:	4881      	ldr	r0, [pc, #516]	; (800670c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006506:	f004 fb25 	bl	800ab54 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <HAL_TIM_PWM_ConfigChannel+0x90>
 8006514:	2302      	movs	r3, #2
 8006516:	e152      	b.n	80067be <HAL_TIM_PWM_ConfigChannel+0x336>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b0c      	cmp	r3, #12
 800652c:	f200 813d 	bhi.w	80067aa <HAL_TIM_PWM_ConfigChannel+0x322>
 8006530:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8006532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006536:	bf00      	nop
 8006538:	0800656d 	.word	0x0800656d
 800653c:	080067ab 	.word	0x080067ab
 8006540:	080067ab 	.word	0x080067ab
 8006544:	080067ab 	.word	0x080067ab
 8006548:	08006607 	.word	0x08006607
 800654c:	080067ab 	.word	0x080067ab
 8006550:	080067ab 	.word	0x080067ab
 8006554:	080067ab 	.word	0x080067ab
 8006558:	0800668f 	.word	0x0800668f
 800655c:	080067ab 	.word	0x080067ab
 8006560:	080067ab 	.word	0x080067ab
 8006564:	080067ab 	.word	0x080067ab
 8006568:	0800672d 	.word	0x0800672d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a67      	ldr	r2, [pc, #412]	; (8006710 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d027      	beq.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800657e:	d022      	beq.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a63      	ldr	r2, [pc, #396]	; (8006714 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d01d      	beq.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x13e>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a62      	ldr	r2, [pc, #392]	; (8006718 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d018      	beq.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x13e>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a60      	ldr	r2, [pc, #384]	; (800671c <HAL_TIM_PWM_ConfigChannel+0x294>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d013      	beq.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x13e>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a5f      	ldr	r2, [pc, #380]	; (8006720 <HAL_TIM_PWM_ConfigChannel+0x298>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d00e      	beq.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a5d      	ldr	r2, [pc, #372]	; (8006724 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d009      	beq.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a5c      	ldr	r2, [pc, #368]	; (8006728 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d004      	beq.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80065bc:	f640 51fb 	movw	r1, #3579	; 0xdfb
 80065c0:	4852      	ldr	r0, [pc, #328]	; (800670c <HAL_TIM_PWM_ConfigChannel+0x284>)
 80065c2:	f004 fac7 	bl	800ab54 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68b9      	ldr	r1, [r7, #8]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fc7d 	bl	8006ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	699a      	ldr	r2, [r3, #24]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0208 	orr.w	r2, r2, #8
 80065e0:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699a      	ldr	r2, [r3, #24]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0204 	bic.w	r2, r2, #4
 80065f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6999      	ldr	r1, [r3, #24]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	691a      	ldr	r2, [r3, #16]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	619a      	str	r2, [r3, #24]
      break;
 8006604:	e0d2      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a41      	ldr	r2, [pc, #260]	; (8006710 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d01d      	beq.n	800664c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006618:	d018      	beq.n	800664c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a3d      	ldr	r2, [pc, #244]	; (8006714 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d013      	beq.n	800664c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a3b      	ldr	r2, [pc, #236]	; (8006718 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00e      	beq.n	800664c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a3a      	ldr	r2, [pc, #232]	; (800671c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d009      	beq.n	800664c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a38      	ldr	r2, [pc, #224]	; (8006720 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d004      	beq.n	800664c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8006642:	f640 610c 	movw	r1, #3596	; 0xe0c
 8006646:	4831      	ldr	r0, [pc, #196]	; (800670c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006648:	f004 fa84 	bl	800ab54 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fcca 	bl	8006fec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699a      	ldr	r2, [r3, #24]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6999      	ldr	r1, [r3, #24]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	021a      	lsls	r2, r3, #8
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	619a      	str	r2, [r3, #24]
      break;
 800668c:	e08e      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a1f      	ldr	r2, [pc, #124]	; (8006710 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d018      	beq.n	80066ca <HAL_TIM_PWM_ConfigChannel+0x242>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a0:	d013      	beq.n	80066ca <HAL_TIM_PWM_ConfigChannel+0x242>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a1b      	ldr	r2, [pc, #108]	; (8006714 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00e      	beq.n	80066ca <HAL_TIM_PWM_ConfigChannel+0x242>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a19      	ldr	r2, [pc, #100]	; (8006718 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d009      	beq.n	80066ca <HAL_TIM_PWM_ConfigChannel+0x242>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a18      	ldr	r2, [pc, #96]	; (800671c <HAL_TIM_PWM_ConfigChannel+0x294>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d004      	beq.n	80066ca <HAL_TIM_PWM_ConfigChannel+0x242>
 80066c0:	f640 611d 	movw	r1, #3613	; 0xe1d
 80066c4:	4811      	ldr	r0, [pc, #68]	; (800670c <HAL_TIM_PWM_ConfigChannel+0x284>)
 80066c6:	f004 fa45 	bl	800ab54 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68b9      	ldr	r1, [r7, #8]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fd1f 	bl	8007114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69da      	ldr	r2, [r3, #28]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f042 0208 	orr.w	r2, r2, #8
 80066e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69da      	ldr	r2, [r3, #28]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0204 	bic.w	r2, r2, #4
 80066f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69d9      	ldr	r1, [r3, #28]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	691a      	ldr	r2, [r3, #16]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	61da      	str	r2, [r3, #28]
      break;
 8006708:	e050      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x324>
 800670a:	bf00      	nop
 800670c:	0800d68c 	.word	0x0800d68c
 8006710:	40010000 	.word	0x40010000
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800
 800671c:	40000c00 	.word	0x40000c00
 8006720:	40014000 	.word	0x40014000
 8006724:	40014400 	.word	0x40014400
 8006728:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a25      	ldr	r2, [pc, #148]	; (80067c8 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d018      	beq.n	8006768 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673e:	d013      	beq.n	8006768 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a21      	ldr	r2, [pc, #132]	; (80067cc <HAL_TIM_PWM_ConfigChannel+0x344>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00e      	beq.n	8006768 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a20      	ldr	r2, [pc, #128]	; (80067d0 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d009      	beq.n	8006768 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a1e      	ldr	r2, [pc, #120]	; (80067d4 <HAL_TIM_PWM_ConfigChannel+0x34c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d004      	beq.n	8006768 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 800675e:	f640 612e 	movw	r1, #3630	; 0xe2e
 8006762:	481d      	ldr	r0, [pc, #116]	; (80067d8 <HAL_TIM_PWM_ConfigChannel+0x350>)
 8006764:	f004 f9f6 	bl	800ab54 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fd64 	bl	800723c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69da      	ldr	r2, [r3, #28]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006782:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	69da      	ldr	r2, [r3, #28]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006792:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	69d9      	ldr	r1, [r3, #28]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	021a      	lsls	r2, r3, #8
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	61da      	str	r2, [r3, #28]
      break;
 80067a8:	e000      	b.n	80067ac <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      break;
 80067aa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40010000 	.word	0x40010000
 80067cc:	40000400 	.word	0x40000400
 80067d0:	40000800 	.word	0x40000800
 80067d4:	40000c00 	.word	0x40000c00
 80067d8:	0800d68c 	.word	0x0800d68c

080067dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_TIM_ConfigClockSource+0x18>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e2db      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x5d0>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680c:	d029      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x86>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006816:	d024      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x86>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d020      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x86>
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b10      	cmp	r3, #16
 8006826:	d01c      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x86>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b20      	cmp	r3, #32
 800682e:	d018      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x86>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b30      	cmp	r3, #48	; 0x30
 8006836:	d014      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x86>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b40      	cmp	r3, #64	; 0x40
 800683e:	d010      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x86>
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b50      	cmp	r3, #80	; 0x50
 8006846:	d00c      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x86>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b60      	cmp	r3, #96	; 0x60
 800684e:	d008      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x86>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b70      	cmp	r3, #112	; 0x70
 8006856:	d004      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x86>
 8006858:	f241 118b 	movw	r1, #4491	; 0x118b
 800685c:	4873      	ldr	r0, [pc, #460]	; (8006a2c <HAL_TIM_ConfigClockSource+0x250>)
 800685e:	f004 f979 	bl	800ab54 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006870:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006878:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	f000 8204 	beq.w	8006c94 <HAL_TIM_ConfigClockSource+0x4b8>
 800688c:	2b40      	cmp	r3, #64	; 0x40
 800688e:	d80f      	bhi.n	80068b0 <HAL_TIM_ConfigClockSource+0xd4>
 8006890:	2b10      	cmp	r3, #16
 8006892:	f000 8255 	beq.w	8006d40 <HAL_TIM_ConfigClockSource+0x564>
 8006896:	2b10      	cmp	r3, #16
 8006898:	d803      	bhi.n	80068a2 <HAL_TIM_ConfigClockSource+0xc6>
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 8250 	beq.w	8006d40 <HAL_TIM_ConfigClockSource+0x564>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80068a0:	e27b      	b.n	8006d9a <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	f000 824c 	beq.w	8006d40 <HAL_TIM_ConfigClockSource+0x564>
 80068a8:	2b30      	cmp	r3, #48	; 0x30
 80068aa:	f000 8249 	beq.w	8006d40 <HAL_TIM_ConfigClockSource+0x564>
      break;
 80068ae:	e274      	b.n	8006d9a <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 80068b0:	2b70      	cmp	r3, #112	; 0x70
 80068b2:	d046      	beq.n	8006942 <HAL_TIM_ConfigClockSource+0x166>
 80068b4:	2b70      	cmp	r3, #112	; 0x70
 80068b6:	d806      	bhi.n	80068c6 <HAL_TIM_ConfigClockSource+0xea>
 80068b8:	2b50      	cmp	r3, #80	; 0x50
 80068ba:	f000 8133 	beq.w	8006b24 <HAL_TIM_ConfigClockSource+0x348>
 80068be:	2b60      	cmp	r3, #96	; 0x60
 80068c0:	f000 8186 	beq.w	8006bd0 <HAL_TIM_ConfigClockSource+0x3f4>
      break;
 80068c4:	e269      	b.n	8006d9a <HAL_TIM_ConfigClockSource+0x5be>
  switch (sClockSourceConfig->ClockSource)
 80068c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ca:	d004      	beq.n	80068d6 <HAL_TIM_ConfigClockSource+0xfa>
 80068cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d0:	f000 80bc 	beq.w	8006a4c <HAL_TIM_ConfigClockSource+0x270>
      break;
 80068d4:	e261      	b.n	8006d9a <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a55      	ldr	r2, [pc, #340]	; (8006a30 <HAL_TIM_ConfigClockSource+0x254>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	f000 825b 	beq.w	8006d98 <HAL_TIM_ConfigClockSource+0x5bc>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ea:	f000 8255 	beq.w	8006d98 <HAL_TIM_ConfigClockSource+0x5bc>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a50      	ldr	r2, [pc, #320]	; (8006a34 <HAL_TIM_ConfigClockSource+0x258>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	f000 824f 	beq.w	8006d98 <HAL_TIM_ConfigClockSource+0x5bc>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a4e      	ldr	r2, [pc, #312]	; (8006a38 <HAL_TIM_ConfigClockSource+0x25c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	f000 8249 	beq.w	8006d98 <HAL_TIM_ConfigClockSource+0x5bc>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a4c      	ldr	r2, [pc, #304]	; (8006a3c <HAL_TIM_ConfigClockSource+0x260>)
 800690c:	4293      	cmp	r3, r2
 800690e:	f000 8243 	beq.w	8006d98 <HAL_TIM_ConfigClockSource+0x5bc>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a4a      	ldr	r2, [pc, #296]	; (8006a40 <HAL_TIM_ConfigClockSource+0x264>)
 8006918:	4293      	cmp	r3, r2
 800691a:	f000 823d 	beq.w	8006d98 <HAL_TIM_ConfigClockSource+0x5bc>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a48      	ldr	r2, [pc, #288]	; (8006a44 <HAL_TIM_ConfigClockSource+0x268>)
 8006924:	4293      	cmp	r3, r2
 8006926:	f000 8237 	beq.w	8006d98 <HAL_TIM_ConfigClockSource+0x5bc>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a46      	ldr	r2, [pc, #280]	; (8006a48 <HAL_TIM_ConfigClockSource+0x26c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	f000 8231 	beq.w	8006d98 <HAL_TIM_ConfigClockSource+0x5bc>
 8006936:	f241 1197 	movw	r1, #4503	; 0x1197
 800693a:	483c      	ldr	r0, [pc, #240]	; (8006a2c <HAL_TIM_ConfigClockSource+0x250>)
 800693c:	f004 f90a 	bl	800ab54 <assert_failed>
      break;
 8006940:	e22a      	b.n	8006d98 <HAL_TIM_ConfigClockSource+0x5bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a3a      	ldr	r2, [pc, #232]	; (8006a30 <HAL_TIM_ConfigClockSource+0x254>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d01d      	beq.n	8006988 <HAL_TIM_ConfigClockSource+0x1ac>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006954:	d018      	beq.n	8006988 <HAL_TIM_ConfigClockSource+0x1ac>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a36      	ldr	r2, [pc, #216]	; (8006a34 <HAL_TIM_ConfigClockSource+0x258>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d013      	beq.n	8006988 <HAL_TIM_ConfigClockSource+0x1ac>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a34      	ldr	r2, [pc, #208]	; (8006a38 <HAL_TIM_ConfigClockSource+0x25c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00e      	beq.n	8006988 <HAL_TIM_ConfigClockSource+0x1ac>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a33      	ldr	r2, [pc, #204]	; (8006a3c <HAL_TIM_ConfigClockSource+0x260>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d009      	beq.n	8006988 <HAL_TIM_ConfigClockSource+0x1ac>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a31      	ldr	r2, [pc, #196]	; (8006a40 <HAL_TIM_ConfigClockSource+0x264>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d004      	beq.n	8006988 <HAL_TIM_ConfigClockSource+0x1ac>
 800697e:	f241 119e 	movw	r1, #4510	; 0x119e
 8006982:	482a      	ldr	r0, [pc, #168]	; (8006a2c <HAL_TIM_ConfigClockSource+0x250>)
 8006984:	f004 f8e6 	bl	800ab54 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d013      	beq.n	80069b8 <HAL_TIM_ConfigClockSource+0x1dc>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006998:	d00e      	beq.n	80069b8 <HAL_TIM_ConfigClockSource+0x1dc>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069a2:	d009      	beq.n	80069b8 <HAL_TIM_ConfigClockSource+0x1dc>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069ac:	d004      	beq.n	80069b8 <HAL_TIM_ConfigClockSource+0x1dc>
 80069ae:	f241 11a1 	movw	r1, #4513	; 0x11a1
 80069b2:	481e      	ldr	r0, [pc, #120]	; (8006a2c <HAL_TIM_ConfigClockSource+0x250>)
 80069b4:	f004 f8ce 	bl	800ab54 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c0:	d014      	beq.n	80069ec <HAL_TIM_ConfigClockSource+0x210>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d010      	beq.n	80069ec <HAL_TIM_ConfigClockSource+0x210>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00c      	beq.n	80069ec <HAL_TIM_ConfigClockSource+0x210>
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d008      	beq.n	80069ec <HAL_TIM_ConfigClockSource+0x210>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2b0a      	cmp	r3, #10
 80069e0:	d004      	beq.n	80069ec <HAL_TIM_ConfigClockSource+0x210>
 80069e2:	f241 11a2 	movw	r1, #4514	; 0x11a2
 80069e6:	4811      	ldr	r0, [pc, #68]	; (8006a2c <HAL_TIM_ConfigClockSource+0x250>)
 80069e8:	f004 f8b4 	bl	800ab54 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	2b0f      	cmp	r3, #15
 80069f2:	d904      	bls.n	80069fe <HAL_TIM_ConfigClockSource+0x222>
 80069f4:	f241 11a3 	movw	r1, #4515	; 0x11a3
 80069f8:	480c      	ldr	r0, [pc, #48]	; (8006a2c <HAL_TIM_ConfigClockSource+0x250>)
 80069fa:	f004 f8ab 	bl	800ab54 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6818      	ldr	r0, [r3, #0]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	6899      	ldr	r1, [r3, #8]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f000 fced 	bl	80073ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	609a      	str	r2, [r3, #8]
      break;
 8006a2a:	e1b6      	b.n	8006d9a <HAL_TIM_ConfigClockSource+0x5be>
 8006a2c:	0800d68c 	.word	0x0800d68c
 8006a30:	40010000 	.word	0x40010000
 8006a34:	40000400 	.word	0x40000400
 8006a38:	40000800 	.word	0x40000800
 8006a3c:	40000c00 	.word	0x40000c00
 8006a40:	40014000 	.word	0x40014000
 8006a44:	40014400 	.word	0x40014400
 8006a48:	40014800 	.word	0x40014800
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a8a      	ldr	r2, [pc, #552]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4a0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d018      	beq.n	8006a88 <HAL_TIM_ConfigClockSource+0x2ac>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5e:	d013      	beq.n	8006a88 <HAL_TIM_ConfigClockSource+0x2ac>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a86      	ldr	r2, [pc, #536]	; (8006c80 <HAL_TIM_ConfigClockSource+0x4a4>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00e      	beq.n	8006a88 <HAL_TIM_ConfigClockSource+0x2ac>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a85      	ldr	r2, [pc, #532]	; (8006c84 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d009      	beq.n	8006a88 <HAL_TIM_ConfigClockSource+0x2ac>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a83      	ldr	r2, [pc, #524]	; (8006c88 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d004      	beq.n	8006a88 <HAL_TIM_ConfigClockSource+0x2ac>
 8006a7e:	f241 11b6 	movw	r1, #4534	; 0x11b6
 8006a82:	4882      	ldr	r0, [pc, #520]	; (8006c8c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006a84:	f004 f866 	bl	800ab54 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d013      	beq.n	8006ab8 <HAL_TIM_ConfigClockSource+0x2dc>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a98:	d00e      	beq.n	8006ab8 <HAL_TIM_ConfigClockSource+0x2dc>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aa2:	d009      	beq.n	8006ab8 <HAL_TIM_ConfigClockSource+0x2dc>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006aac:	d004      	beq.n	8006ab8 <HAL_TIM_ConfigClockSource+0x2dc>
 8006aae:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8006ab2:	4876      	ldr	r0, [pc, #472]	; (8006c8c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006ab4:	f004 f84e 	bl	800ab54 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ac0:	d014      	beq.n	8006aec <HAL_TIM_ConfigClockSource+0x310>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d010      	beq.n	8006aec <HAL_TIM_ConfigClockSource+0x310>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00c      	beq.n	8006aec <HAL_TIM_ConfigClockSource+0x310>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d008      	beq.n	8006aec <HAL_TIM_ConfigClockSource+0x310>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	2b0a      	cmp	r3, #10
 8006ae0:	d004      	beq.n	8006aec <HAL_TIM_ConfigClockSource+0x310>
 8006ae2:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8006ae6:	4869      	ldr	r0, [pc, #420]	; (8006c8c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006ae8:	f004 f834 	bl	800ab54 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b0f      	cmp	r3, #15
 8006af2:	d904      	bls.n	8006afe <HAL_TIM_ConfigClockSource+0x322>
 8006af4:	f241 11bb 	movw	r1, #4539	; 0x11bb
 8006af8:	4864      	ldr	r0, [pc, #400]	; (8006c8c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006afa:	f004 f82b 	bl	800ab54 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	6899      	ldr	r1, [r3, #8]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f000 fc6d 	bl	80073ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b20:	609a      	str	r2, [r3, #8]
      break;
 8006b22:	e13a      	b.n	8006d9a <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a54      	ldr	r2, [pc, #336]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4a0>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d01d      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0x38e>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b36:	d018      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0x38e>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a50      	ldr	r2, [pc, #320]	; (8006c80 <HAL_TIM_ConfigClockSource+0x4a4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d013      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0x38e>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a4f      	ldr	r2, [pc, #316]	; (8006c84 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00e      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0x38e>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a4d      	ldr	r2, [pc, #308]	; (8006c88 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d009      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0x38e>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a4d      	ldr	r2, [pc, #308]	; (8006c90 <HAL_TIM_ConfigClockSource+0x4b4>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d004      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0x38e>
 8006b60:	f241 11ca 	movw	r1, #4554	; 0x11ca
 8006b64:	4849      	ldr	r0, [pc, #292]	; (8006c8c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006b66:	f003 fff5 	bl	800ab54 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b72:	d014      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x3c2>
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d010      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x3c2>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00c      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x3c2>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d008      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x3c2>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b0a      	cmp	r3, #10
 8006b92:	d004      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x3c2>
 8006b94:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8006b98:	483c      	ldr	r0, [pc, #240]	; (8006c8c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006b9a:	f003 ffdb 	bl	800ab54 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	2b0f      	cmp	r3, #15
 8006ba4:	d904      	bls.n	8006bb0 <HAL_TIM_ConfigClockSource+0x3d4>
 8006ba6:	f241 11ce 	movw	r1, #4558	; 0x11ce
 8006baa:	4838      	ldr	r0, [pc, #224]	; (8006c8c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006bac:	f003 ffd2 	bl	800ab54 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	6859      	ldr	r1, [r3, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	f000 fb9b 	bl	80072f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2150      	movs	r1, #80	; 0x50
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fbf4 	bl	80073b6 <TIM_ITRx_SetConfig>
      break;
 8006bce:	e0e4      	b.n	8006d9a <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a29      	ldr	r2, [pc, #164]	; (8006c7c <HAL_TIM_ConfigClockSource+0x4a0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d01d      	beq.n	8006c16 <HAL_TIM_ConfigClockSource+0x43a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be2:	d018      	beq.n	8006c16 <HAL_TIM_ConfigClockSource+0x43a>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a25      	ldr	r2, [pc, #148]	; (8006c80 <HAL_TIM_ConfigClockSource+0x4a4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d013      	beq.n	8006c16 <HAL_TIM_ConfigClockSource+0x43a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a24      	ldr	r2, [pc, #144]	; (8006c84 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00e      	beq.n	8006c16 <HAL_TIM_ConfigClockSource+0x43a>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a22      	ldr	r2, [pc, #136]	; (8006c88 <HAL_TIM_ConfigClockSource+0x4ac>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d009      	beq.n	8006c16 <HAL_TIM_ConfigClockSource+0x43a>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a22      	ldr	r2, [pc, #136]	; (8006c90 <HAL_TIM_ConfigClockSource+0x4b4>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d004      	beq.n	8006c16 <HAL_TIM_ConfigClockSource+0x43a>
 8006c0c:	f241 11da 	movw	r1, #4570	; 0x11da
 8006c10:	481e      	ldr	r0, [pc, #120]	; (8006c8c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006c12:	f003 ff9f 	bl	800ab54 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c1e:	d014      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x46e>
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d010      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x46e>
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00c      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x46e>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d008      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x46e>
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2b0a      	cmp	r3, #10
 8006c3e:	d004      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0x46e>
 8006c40:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8006c44:	4811      	ldr	r0, [pc, #68]	; (8006c8c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006c46:	f003 ff85 	bl	800ab54 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	2b0f      	cmp	r3, #15
 8006c50:	d904      	bls.n	8006c5c <HAL_TIM_ConfigClockSource+0x480>
 8006c52:	f241 11de 	movw	r1, #4574	; 0x11de
 8006c56:	480d      	ldr	r0, [pc, #52]	; (8006c8c <HAL_TIM_ConfigClockSource+0x4b0>)
 8006c58:	f003 ff7c 	bl	800ab54 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	6859      	ldr	r1, [r3, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	f000 fb74 	bl	8007356 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2160      	movs	r1, #96	; 0x60
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fb9e 	bl	80073b6 <TIM_ITRx_SetConfig>
      break;
 8006c7a:	e08e      	b.n	8006d9a <HAL_TIM_ConfigClockSource+0x5be>
 8006c7c:	40010000 	.word	0x40010000
 8006c80:	40000400 	.word	0x40000400
 8006c84:	40000800 	.word	0x40000800
 8006c88:	40000c00 	.word	0x40000c00
 8006c8c:	0800d68c 	.word	0x0800d68c
 8006c90:	40014000 	.word	0x40014000
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a46      	ldr	r2, [pc, #280]	; (8006db4 <HAL_TIM_ConfigClockSource+0x5d8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d01d      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x4fe>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca6:	d018      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x4fe>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a42      	ldr	r2, [pc, #264]	; (8006db8 <HAL_TIM_ConfigClockSource+0x5dc>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d013      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x4fe>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a41      	ldr	r2, [pc, #260]	; (8006dbc <HAL_TIM_ConfigClockSource+0x5e0>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00e      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x4fe>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a3f      	ldr	r2, [pc, #252]	; (8006dc0 <HAL_TIM_ConfigClockSource+0x5e4>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d009      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x4fe>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a3e      	ldr	r2, [pc, #248]	; (8006dc4 <HAL_TIM_ConfigClockSource+0x5e8>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d004      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x4fe>
 8006cd0:	f241 11ea 	movw	r1, #4586	; 0x11ea
 8006cd4:	483c      	ldr	r0, [pc, #240]	; (8006dc8 <HAL_TIM_ConfigClockSource+0x5ec>)
 8006cd6:	f003 ff3d 	bl	800ab54 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce2:	d014      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0x532>
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d010      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0x532>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00c      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0x532>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d008      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0x532>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	2b0a      	cmp	r3, #10
 8006d02:	d004      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0x532>
 8006d04:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8006d08:	482f      	ldr	r0, [pc, #188]	; (8006dc8 <HAL_TIM_ConfigClockSource+0x5ec>)
 8006d0a:	f003 ff23 	bl	800ab54 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	2b0f      	cmp	r3, #15
 8006d14:	d904      	bls.n	8006d20 <HAL_TIM_ConfigClockSource+0x544>
 8006d16:	f241 11ee 	movw	r1, #4590	; 0x11ee
 8006d1a:	482b      	ldr	r0, [pc, #172]	; (8006dc8 <HAL_TIM_ConfigClockSource+0x5ec>)
 8006d1c:	f003 ff1a 	bl	800ab54 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	6859      	ldr	r1, [r3, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f000 fae3 	bl	80072f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2140      	movs	r1, #64	; 0x40
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 fb3c 	bl	80073b6 <TIM_ITRx_SetConfig>
      break;
 8006d3e:	e02c      	b.n	8006d9a <HAL_TIM_ConfigClockSource+0x5be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a1b      	ldr	r2, [pc, #108]	; (8006db4 <HAL_TIM_ConfigClockSource+0x5d8>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d01d      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x5aa>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d52:	d018      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x5aa>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <HAL_TIM_ConfigClockSource+0x5dc>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d013      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x5aa>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a16      	ldr	r2, [pc, #88]	; (8006dbc <HAL_TIM_ConfigClockSource+0x5e0>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00e      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x5aa>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a14      	ldr	r2, [pc, #80]	; (8006dc0 <HAL_TIM_ConfigClockSource+0x5e4>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d009      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x5aa>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a13      	ldr	r2, [pc, #76]	; (8006dc4 <HAL_TIM_ConfigClockSource+0x5e8>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d004      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0x5aa>
 8006d7c:	f241 11fd 	movw	r1, #4605	; 0x11fd
 8006d80:	4811      	ldr	r0, [pc, #68]	; (8006dc8 <HAL_TIM_ConfigClockSource+0x5ec>)
 8006d82:	f003 fee7 	bl	800ab54 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4610      	mov	r0, r2
 8006d92:	f000 fb10 	bl	80073b6 <TIM_ITRx_SetConfig>
      break;
 8006d96:	e000      	b.n	8006d9a <HAL_TIM_ConfigClockSource+0x5be>
      break;
 8006d98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	40010000 	.word	0x40010000
 8006db8:	40000400 	.word	0x40000400
 8006dbc:	40000800 	.word	0x40000800
 8006dc0:	40000c00 	.word	0x40000c00
 8006dc4:	40014000 	.word	0x40014000
 8006dc8:	0800d68c 	.word	0x0800d68c

08006dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a34      	ldr	r2, [pc, #208]	; (8006eb0 <TIM_Base_SetConfig+0xe4>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d00f      	beq.n	8006e04 <TIM_Base_SetConfig+0x38>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dea:	d00b      	beq.n	8006e04 <TIM_Base_SetConfig+0x38>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a31      	ldr	r2, [pc, #196]	; (8006eb4 <TIM_Base_SetConfig+0xe8>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d007      	beq.n	8006e04 <TIM_Base_SetConfig+0x38>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a30      	ldr	r2, [pc, #192]	; (8006eb8 <TIM_Base_SetConfig+0xec>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_Base_SetConfig+0x38>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a2f      	ldr	r2, [pc, #188]	; (8006ebc <TIM_Base_SetConfig+0xf0>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d108      	bne.n	8006e16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a25      	ldr	r2, [pc, #148]	; (8006eb0 <TIM_Base_SetConfig+0xe4>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d01b      	beq.n	8006e56 <TIM_Base_SetConfig+0x8a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e24:	d017      	beq.n	8006e56 <TIM_Base_SetConfig+0x8a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a22      	ldr	r2, [pc, #136]	; (8006eb4 <TIM_Base_SetConfig+0xe8>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d013      	beq.n	8006e56 <TIM_Base_SetConfig+0x8a>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a21      	ldr	r2, [pc, #132]	; (8006eb8 <TIM_Base_SetConfig+0xec>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00f      	beq.n	8006e56 <TIM_Base_SetConfig+0x8a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a20      	ldr	r2, [pc, #128]	; (8006ebc <TIM_Base_SetConfig+0xf0>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d00b      	beq.n	8006e56 <TIM_Base_SetConfig+0x8a>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a1f      	ldr	r2, [pc, #124]	; (8006ec0 <TIM_Base_SetConfig+0xf4>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d007      	beq.n	8006e56 <TIM_Base_SetConfig+0x8a>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a1e      	ldr	r2, [pc, #120]	; (8006ec4 <TIM_Base_SetConfig+0xf8>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d003      	beq.n	8006e56 <TIM_Base_SetConfig+0x8a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a1d      	ldr	r2, [pc, #116]	; (8006ec8 <TIM_Base_SetConfig+0xfc>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d108      	bne.n	8006e68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a08      	ldr	r2, [pc, #32]	; (8006eb0 <TIM_Base_SetConfig+0xe4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d103      	bne.n	8006e9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	615a      	str	r2, [r3, #20]
}
 8006ea2:	bf00      	nop
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	40010000 	.word	0x40010000
 8006eb4:	40000400 	.word	0x40000400
 8006eb8:	40000800 	.word	0x40000800
 8006ebc:	40000c00 	.word	0x40000c00
 8006ec0:	40014000 	.word	0x40014000
 8006ec4:	40014400 	.word	0x40014400
 8006ec8:	40014800 	.word	0x40014800

08006ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	f023 0201 	bic.w	r2, r3, #1
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f023 0303 	bic.w	r3, r3, #3
 8006f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f023 0302 	bic.w	r3, r3, #2
 8006f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a30      	ldr	r2, [pc, #192]	; (8006fe4 <TIM_OC1_SetConfig+0x118>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d119      	bne.n	8006f5c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d008      	beq.n	8006f42 <TIM_OC1_SetConfig+0x76>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d004      	beq.n	8006f42 <TIM_OC1_SetConfig+0x76>
 8006f38:	f241 7102 	movw	r1, #5890	; 0x1702
 8006f3c:	482a      	ldr	r0, [pc, #168]	; (8006fe8 <TIM_OC1_SetConfig+0x11c>)
 8006f3e:	f003 fe09 	bl	800ab54 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f023 0308 	bic.w	r3, r3, #8
 8006f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f023 0304 	bic.w	r3, r3, #4
 8006f5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a21      	ldr	r2, [pc, #132]	; (8006fe4 <TIM_OC1_SetConfig+0x118>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d12d      	bne.n	8006fc0 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f6c:	d008      	beq.n	8006f80 <TIM_OC1_SetConfig+0xb4>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d004      	beq.n	8006f80 <TIM_OC1_SetConfig+0xb4>
 8006f76:	f241 710f 	movw	r1, #5903	; 0x170f
 8006f7a:	481b      	ldr	r0, [pc, #108]	; (8006fe8 <TIM_OC1_SetConfig+0x11c>)
 8006f7c:	f003 fdea 	bl	800ab54 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f88:	d008      	beq.n	8006f9c <TIM_OC1_SetConfig+0xd0>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d004      	beq.n	8006f9c <TIM_OC1_SetConfig+0xd0>
 8006f92:	f241 7110 	movw	r1, #5904	; 0x1710
 8006f96:	4814      	ldr	r0, [pc, #80]	; (8006fe8 <TIM_OC1_SetConfig+0x11c>)
 8006f98:	f003 fddc 	bl	800ab54 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006faa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	621a      	str	r2, [r3, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	40010000 	.word	0x40010000
 8006fe8:	0800d68c 	.word	0x0800d68c

08006fec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	f023 0210 	bic.w	r2, r3, #16
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	021b      	lsls	r3, r3, #8
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f023 0320 	bic.w	r3, r3, #32
 8007036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	011b      	lsls	r3, r3, #4
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a31      	ldr	r2, [pc, #196]	; (800710c <TIM_OC2_SetConfig+0x120>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d11a      	bne.n	8007082 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d008      	beq.n	8007066 <TIM_OC2_SetConfig+0x7a>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	2b08      	cmp	r3, #8
 800705a:	d004      	beq.n	8007066 <TIM_OC2_SetConfig+0x7a>
 800705c:	f241 714d 	movw	r1, #5965	; 0x174d
 8007060:	482b      	ldr	r0, [pc, #172]	; (8007110 <TIM_OC2_SetConfig+0x124>)
 8007062:	f003 fd77 	bl	800ab54 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800706c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	4313      	orrs	r3, r2
 8007078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007080:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a21      	ldr	r2, [pc, #132]	; (800710c <TIM_OC2_SetConfig+0x120>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d12f      	bne.n	80070ea <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007092:	d008      	beq.n	80070a6 <TIM_OC2_SetConfig+0xba>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d004      	beq.n	80070a6 <TIM_OC2_SetConfig+0xba>
 800709c:	f241 715b 	movw	r1, #5979	; 0x175b
 80070a0:	481b      	ldr	r0, [pc, #108]	; (8007110 <TIM_OC2_SetConfig+0x124>)
 80070a2:	f003 fd57 	bl	800ab54 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ae:	d008      	beq.n	80070c2 <TIM_OC2_SetConfig+0xd6>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d004      	beq.n	80070c2 <TIM_OC2_SetConfig+0xd6>
 80070b8:	f241 715c 	movw	r1, #5980	; 0x175c
 80070bc:	4814      	ldr	r0, [pc, #80]	; (8007110 <TIM_OC2_SetConfig+0x124>)
 80070be:	f003 fd49 	bl	800ab54 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	4313      	orrs	r3, r2
 80070dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	621a      	str	r2, [r3, #32]
}
 8007104:	bf00      	nop
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40010000 	.word	0x40010000
 8007110:	0800d68c 	.word	0x0800d68c

08007114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0303 	bic.w	r3, r3, #3
 800714a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800715c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	021b      	lsls	r3, r3, #8
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	4313      	orrs	r3, r2
 8007168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a31      	ldr	r2, [pc, #196]	; (8007234 <TIM_OC3_SetConfig+0x120>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d11a      	bne.n	80071a8 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d008      	beq.n	800718c <TIM_OC3_SetConfig+0x78>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	2b08      	cmp	r3, #8
 8007180:	d004      	beq.n	800718c <TIM_OC3_SetConfig+0x78>
 8007182:	f241 7198 	movw	r1, #6040	; 0x1798
 8007186:	482c      	ldr	r0, [pc, #176]	; (8007238 <TIM_OC3_SetConfig+0x124>)
 8007188:	f003 fce4 	bl	800ab54 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	021b      	lsls	r3, r3, #8
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	4313      	orrs	r3, r2
 800719e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a22      	ldr	r2, [pc, #136]	; (8007234 <TIM_OC3_SetConfig+0x120>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d12f      	bne.n	8007210 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b8:	d008      	beq.n	80071cc <TIM_OC3_SetConfig+0xb8>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d004      	beq.n	80071cc <TIM_OC3_SetConfig+0xb8>
 80071c2:	f241 71a5 	movw	r1, #6053	; 0x17a5
 80071c6:	481c      	ldr	r0, [pc, #112]	; (8007238 <TIM_OC3_SetConfig+0x124>)
 80071c8:	f003 fcc4 	bl	800ab54 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071d4:	d008      	beq.n	80071e8 <TIM_OC3_SetConfig+0xd4>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d004      	beq.n	80071e8 <TIM_OC3_SetConfig+0xd4>
 80071de:	f241 71a6 	movw	r1, #6054	; 0x17a6
 80071e2:	4815      	ldr	r0, [pc, #84]	; (8007238 <TIM_OC3_SetConfig+0x124>)
 80071e4:	f003 fcb6 	bl	800ab54 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	011b      	lsls	r3, r3, #4
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	4313      	orrs	r3, r2
 8007202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	011b      	lsls	r3, r3, #4
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	621a      	str	r2, [r3, #32]
}
 800722a:	bf00      	nop
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	40010000 	.word	0x40010000
 8007238:	0800d68c 	.word	0x0800d68c

0800723c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800726a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	021b      	lsls	r3, r3, #8
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	4313      	orrs	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	031b      	lsls	r3, r3, #12
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	4313      	orrs	r3, r2
 8007292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a16      	ldr	r2, [pc, #88]	; (80072f0 <TIM_OC4_SetConfig+0xb4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d117      	bne.n	80072cc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072a4:	d008      	beq.n	80072b8 <TIM_OC4_SetConfig+0x7c>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d004      	beq.n	80072b8 <TIM_OC4_SetConfig+0x7c>
 80072ae:	f241 71e4 	movw	r1, #6116	; 0x17e4
 80072b2:	4810      	ldr	r0, [pc, #64]	; (80072f4 <TIM_OC4_SetConfig+0xb8>)
 80072b4:	f003 fc4e 	bl	800ab54 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	019b      	lsls	r3, r3, #6
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	621a      	str	r2, [r3, #32]
}
 80072e6:	bf00      	nop
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	40010000 	.word	0x40010000
 80072f4:	0800d68c 	.word	0x0800d68c

080072f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b087      	sub	sp, #28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	f023 0201 	bic.w	r2, r3, #1
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	4313      	orrs	r3, r2
 800732c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f023 030a 	bic.w	r3, r3, #10
 8007334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4313      	orrs	r3, r2
 800733c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	621a      	str	r2, [r3, #32]
}
 800734a:	bf00      	nop
 800734c:	371c      	adds	r7, #28
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007356:	b480      	push	{r7}
 8007358:	b087      	sub	sp, #28
 800735a:	af00      	add	r7, sp, #0
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	f023 0210 	bic.w	r2, r3, #16
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007380:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	031b      	lsls	r3, r3, #12
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007392:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	011b      	lsls	r3, r3, #4
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	4313      	orrs	r3, r2
 800739c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	621a      	str	r2, [r3, #32]
}
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b085      	sub	sp, #20
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f043 0307 	orr.w	r3, r3, #7
 80073d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	609a      	str	r2, [r3, #8]
}
 80073e0:	bf00      	nop
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007406:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	021a      	lsls	r2, r3, #8
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	431a      	orrs	r2, r3
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	4313      	orrs	r3, r2
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	609a      	str	r2, [r3, #8]
}
 8007420:	bf00      	nop
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4a2a      	ldr	r2, [pc, #168]	; (80074e4 <TIM_CCxChannelCmd+0xb8>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d020      	beq.n	8007482 <TIM_CCxChannelCmd+0x56>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007446:	d01c      	beq.n	8007482 <TIM_CCxChannelCmd+0x56>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4a27      	ldr	r2, [pc, #156]	; (80074e8 <TIM_CCxChannelCmd+0xbc>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d018      	beq.n	8007482 <TIM_CCxChannelCmd+0x56>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4a26      	ldr	r2, [pc, #152]	; (80074ec <TIM_CCxChannelCmd+0xc0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d014      	beq.n	8007482 <TIM_CCxChannelCmd+0x56>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4a25      	ldr	r2, [pc, #148]	; (80074f0 <TIM_CCxChannelCmd+0xc4>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d010      	beq.n	8007482 <TIM_CCxChannelCmd+0x56>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4a24      	ldr	r2, [pc, #144]	; (80074f4 <TIM_CCxChannelCmd+0xc8>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d00c      	beq.n	8007482 <TIM_CCxChannelCmd+0x56>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4a23      	ldr	r2, [pc, #140]	; (80074f8 <TIM_CCxChannelCmd+0xcc>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d008      	beq.n	8007482 <TIM_CCxChannelCmd+0x56>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4a22      	ldr	r2, [pc, #136]	; (80074fc <TIM_CCxChannelCmd+0xd0>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d004      	beq.n	8007482 <TIM_CCxChannelCmd+0x56>
 8007478:	f641 11cc 	movw	r1, #6604	; 0x19cc
 800747c:	4820      	ldr	r0, [pc, #128]	; (8007500 <TIM_CCxChannelCmd+0xd4>)
 800747e:	f003 fb69 	bl	800ab54 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d010      	beq.n	80074aa <TIM_CCxChannelCmd+0x7e>
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2b04      	cmp	r3, #4
 800748c:	d00d      	beq.n	80074aa <TIM_CCxChannelCmd+0x7e>
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b08      	cmp	r3, #8
 8007492:	d00a      	beq.n	80074aa <TIM_CCxChannelCmd+0x7e>
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b0c      	cmp	r3, #12
 8007498:	d007      	beq.n	80074aa <TIM_CCxChannelCmd+0x7e>
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b3c      	cmp	r3, #60	; 0x3c
 800749e:	d004      	beq.n	80074aa <TIM_CCxChannelCmd+0x7e>
 80074a0:	f641 11cd 	movw	r1, #6605	; 0x19cd
 80074a4:	4816      	ldr	r0, [pc, #88]	; (8007500 <TIM_CCxChannelCmd+0xd4>)
 80074a6:	f003 fb55 	bl	800ab54 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	f003 031f 	and.w	r3, r3, #31
 80074b0:	2201      	movs	r2, #1
 80074b2:	fa02 f303 	lsl.w	r3, r2, r3
 80074b6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6a1a      	ldr	r2, [r3, #32]
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	43db      	mvns	r3, r3
 80074c0:	401a      	ands	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a1a      	ldr	r2, [r3, #32]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	f003 031f 	and.w	r3, r3, #31
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	fa01 f303 	lsl.w	r3, r1, r3
 80074d6:	431a      	orrs	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	621a      	str	r2, [r3, #32]
}
 80074dc:	bf00      	nop
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	40010000 	.word	0x40010000
 80074e8:	40000400 	.word	0x40000400
 80074ec:	40000800 	.word	0x40000800
 80074f0:	40000c00 	.word	0x40000c00
 80074f4:	40014000 	.word	0x40014000
 80074f8:	40014400 	.word	0x40014400
 80074fc:	40014800 	.word	0x40014800
 8007500:	0800d68c 	.word	0x0800d68c

08007504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a55      	ldr	r2, [pc, #340]	; (8007668 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d018      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007520:	d013      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a51      	ldr	r2, [pc, #324]	; (800766c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d00e      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a4f      	ldr	r2, [pc, #316]	; (8007670 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d009      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a4e      	ldr	r2, [pc, #312]	; (8007674 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d004      	beq.n	800754a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007540:	f240 6164 	movw	r1, #1636	; 0x664
 8007544:	484c      	ldr	r0, [pc, #304]	; (8007678 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007546:	f003 fb05 	bl	800ab54 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d020      	beq.n	8007594 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b10      	cmp	r3, #16
 8007558:	d01c      	beq.n	8007594 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b20      	cmp	r3, #32
 8007560:	d018      	beq.n	8007594 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b30      	cmp	r3, #48	; 0x30
 8007568:	d014      	beq.n	8007594 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b40      	cmp	r3, #64	; 0x40
 8007570:	d010      	beq.n	8007594 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b50      	cmp	r3, #80	; 0x50
 8007578:	d00c      	beq.n	8007594 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b60      	cmp	r3, #96	; 0x60
 8007580:	d008      	beq.n	8007594 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b70      	cmp	r3, #112	; 0x70
 8007588:	d004      	beq.n	8007594 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800758a:	f240 6165 	movw	r1, #1637	; 0x665
 800758e:	483a      	ldr	r0, [pc, #232]	; (8007678 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007590:	f003 fae0 	bl	800ab54 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	2b80      	cmp	r3, #128	; 0x80
 800759a:	d008      	beq.n	80075ae <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d004      	beq.n	80075ae <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80075a4:	f240 6166 	movw	r1, #1638	; 0x666
 80075a8:	4833      	ldr	r0, [pc, #204]	; (8007678 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80075aa:	f003 fad3 	bl	800ab54 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d101      	bne.n	80075bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80075b8:	2302      	movs	r3, #2
 80075ba:	e050      	b.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a1b      	ldr	r2, [pc, #108]	; (8007668 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d018      	beq.n	8007632 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007608:	d013      	beq.n	8007632 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a17      	ldr	r2, [pc, #92]	; (800766c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00e      	beq.n	8007632 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a15      	ldr	r2, [pc, #84]	; (8007670 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d009      	beq.n	8007632 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a14      	ldr	r2, [pc, #80]	; (8007674 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d004      	beq.n	8007632 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a13      	ldr	r2, [pc, #76]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d10c      	bne.n	800764c <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	4313      	orrs	r3, r2
 8007642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	40010000 	.word	0x40010000
 800766c:	40000400 	.word	0x40000400
 8007670:	40000800 	.word	0x40000800
 8007674:	40000c00 	.word	0x40000c00
 8007678:	0800d6c4 	.word	0x0800d6c4
 800767c:	40014000 	.word	0x40014000

08007680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e0a0      	b.n	80077d4 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d02c      	beq.n	80076f4 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a4f      	ldr	r2, [pc, #316]	; (80077dc <HAL_UART_Init+0x15c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d00e      	beq.n	80076c2 <HAL_UART_Init+0x42>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a4d      	ldr	r2, [pc, #308]	; (80077e0 <HAL_UART_Init+0x160>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d009      	beq.n	80076c2 <HAL_UART_Init+0x42>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a4c      	ldr	r2, [pc, #304]	; (80077e4 <HAL_UART_Init+0x164>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d004      	beq.n	80076c2 <HAL_UART_Init+0x42>
 80076b8:	f240 114b 	movw	r1, #331	; 0x14b
 80076bc:	484a      	ldr	r0, [pc, #296]	; (80077e8 <HAL_UART_Init+0x168>)
 80076be:	f003 fa49 	bl	800ab54 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d028      	beq.n	800771c <HAL_UART_Init+0x9c>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076d2:	d023      	beq.n	800771c <HAL_UART_Init+0x9c>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076dc:	d01e      	beq.n	800771c <HAL_UART_Init+0x9c>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076e6:	d019      	beq.n	800771c <HAL_UART_Init+0x9c>
 80076e8:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80076ec:	483e      	ldr	r0, [pc, #248]	; (80077e8 <HAL_UART_Init+0x168>)
 80076ee:	f003 fa31 	bl	800ab54 <assert_failed>
 80076f2:	e013      	b.n	800771c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a38      	ldr	r2, [pc, #224]	; (80077dc <HAL_UART_Init+0x15c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d00e      	beq.n	800771c <HAL_UART_Init+0x9c>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a37      	ldr	r2, [pc, #220]	; (80077e0 <HAL_UART_Init+0x160>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d009      	beq.n	800771c <HAL_UART_Init+0x9c>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a35      	ldr	r2, [pc, #212]	; (80077e4 <HAL_UART_Init+0x164>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d004      	beq.n	800771c <HAL_UART_Init+0x9c>
 8007712:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8007716:	4834      	ldr	r0, [pc, #208]	; (80077e8 <HAL_UART_Init+0x168>)
 8007718:	f003 fa1c 	bl	800ab54 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d009      	beq.n	8007738 <HAL_UART_Init+0xb8>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772c:	d004      	beq.n	8007738 <HAL_UART_Init+0xb8>
 800772e:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8007732:	482d      	ldr	r0, [pc, #180]	; (80077e8 <HAL_UART_Init+0x168>)
 8007734:	f003 fa0e 	bl	800ab54 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	69db      	ldr	r3, [r3, #28]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d009      	beq.n	8007754 <HAL_UART_Init+0xd4>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007748:	d004      	beq.n	8007754 <HAL_UART_Init+0xd4>
 800774a:	f240 1153 	movw	r1, #339	; 0x153
 800774e:	4826      	ldr	r0, [pc, #152]	; (80077e8 <HAL_UART_Init+0x168>)
 8007750:	f003 fa00 	bl	800ab54 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d106      	bne.n	800776e <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f003 fb39 	bl	800ade0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2224      	movs	r2, #36	; 0x24
 8007772:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68da      	ldr	r2, [r3, #12]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007784:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fc34 	bl	8007ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	691a      	ldr	r2, [r3, #16]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800779a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	695a      	ldr	r2, [r3, #20]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	40011000 	.word	0x40011000
 80077e0:	40004400 	.word	0x40004400
 80077e4:	40011400 	.word	0x40011400
 80077e8:	0800d700 	.word	0x0800d700

080077ec <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	4613      	mov	r3, r2
 80077f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b20      	cmp	r3, #32
 8007804:	d153      	bne.n	80078ae <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <HAL_UART_Transmit_DMA+0x26>
 800780c:	88fb      	ldrh	r3, [r7, #6]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e04c      	b.n	80078b0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800781c:	2b01      	cmp	r3, #1
 800781e:	d101      	bne.n	8007824 <HAL_UART_Transmit_DMA+0x38>
 8007820:	2302      	movs	r3, #2
 8007822:	e045      	b.n	80078b0 <HAL_UART_Transmit_DMA+0xc4>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	88fa      	ldrh	r2, [r7, #6]
 8007836:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	88fa      	ldrh	r2, [r7, #6]
 800783c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2221      	movs	r2, #33	; 0x21
 8007848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	4a19      	ldr	r2, [pc, #100]	; (80078b8 <HAL_UART_Transmit_DMA+0xcc>)
 8007852:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007858:	4a18      	ldr	r2, [pc, #96]	; (80078bc <HAL_UART_Transmit_DMA+0xd0>)
 800785a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007860:	4a17      	ldr	r2, [pc, #92]	; (80078c0 <HAL_UART_Transmit_DMA+0xd4>)
 8007862:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007868:	2200      	movs	r2, #0
 800786a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800786c:	f107 0308 	add.w	r3, r7, #8
 8007870:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	6819      	ldr	r1, [r3, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3304      	adds	r3, #4
 8007880:	461a      	mov	r2, r3
 8007882:	88fb      	ldrh	r3, [r7, #6]
 8007884:	f7f9 ff7e 	bl	8001784 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007890:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	695a      	ldr	r2, [r3, #20]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078a8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	e000      	b.n	80078b0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80078ae:	2302      	movs	r3, #2
  }
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	08007c01 	.word	0x08007c01
 80078bc:	08007c53 	.word	0x08007c53
 80078c0:	08007cf3 	.word	0x08007cf3

080078c4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	4613      	mov	r3, r2
 80078d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b20      	cmp	r3, #32
 80078dc:	d166      	bne.n	80079ac <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <HAL_UART_Receive_DMA+0x26>
 80078e4:	88fb      	ldrh	r3, [r7, #6]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e05f      	b.n	80079ae <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d101      	bne.n	80078fc <HAL_UART_Receive_DMA+0x38>
 80078f8:	2302      	movs	r3, #2
 80078fa:	e058      	b.n	80079ae <HAL_UART_Receive_DMA+0xea>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	88fa      	ldrh	r2, [r7, #6]
 800790e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2222      	movs	r2, #34	; 0x22
 800791a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007922:	4a25      	ldr	r2, [pc, #148]	; (80079b8 <HAL_UART_Receive_DMA+0xf4>)
 8007924:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792a:	4a24      	ldr	r2, [pc, #144]	; (80079bc <HAL_UART_Receive_DMA+0xf8>)
 800792c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007932:	4a23      	ldr	r2, [pc, #140]	; (80079c0 <HAL_UART_Receive_DMA+0xfc>)
 8007934:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800793a:	2200      	movs	r2, #0
 800793c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800793e:	f107 0308 	add.w	r3, r7, #8
 8007942:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3304      	adds	r3, #4
 800794e:	4619      	mov	r1, r3
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	88fb      	ldrh	r3, [r7, #6]
 8007956:	f7f9 ff15 	bl	8001784 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800795a:	2300      	movs	r3, #0
 800795c:	613b      	str	r3, [r7, #16]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	613b      	str	r3, [r7, #16]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	613b      	str	r3, [r7, #16]
 800796e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007986:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	695a      	ldr	r2, [r3, #20]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	695a      	ldr	r2, [r3, #20]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079a6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	e000      	b.n	80079ae <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80079ac:	2302      	movs	r3, #2
  }
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	08007c6f 	.word	0x08007c6f
 80079bc:	08007cd7 	.word	0x08007cd7
 80079c0:	08007cf3 	.word	0x08007cf3

080079c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f003 030f 	and.w	r3, r3, #15
 80079f2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10d      	bne.n	8007a16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	f003 0320 	and.w	r3, r3, #32
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d008      	beq.n	8007a16 <HAL_UART_IRQHandler+0x52>
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fa6f 	bl	8007ef2 <UART_Receive_IT>
      return;
 8007a14:	e0d1      	b.n	8007bba <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 80b0 	beq.w	8007b7e <HAL_UART_IRQHandler+0x1ba>
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d105      	bne.n	8007a34 <HAL_UART_IRQHandler+0x70>
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 80a5 	beq.w	8007b7e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00a      	beq.n	8007a54 <HAL_UART_IRQHandler+0x90>
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d005      	beq.n	8007a54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4c:	f043 0201 	orr.w	r2, r3, #1
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	f003 0304 	and.w	r3, r3, #4
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <HAL_UART_IRQHandler+0xb0>
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d005      	beq.n	8007a74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6c:	f043 0202 	orr.w	r2, r3, #2
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <HAL_UART_IRQHandler+0xd0>
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d005      	beq.n	8007a94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8c:	f043 0204 	orr.w	r2, r3, #4
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	f003 0308 	and.w	r3, r3, #8
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00f      	beq.n	8007abe <HAL_UART_IRQHandler+0xfa>
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	f003 0320 	and.w	r3, r3, #32
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d104      	bne.n	8007ab2 <HAL_UART_IRQHandler+0xee>
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d005      	beq.n	8007abe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab6:	f043 0208 	orr.w	r2, r3, #8
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d078      	beq.n	8007bb8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d007      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x11c>
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	f003 0320 	and.w	r3, r3, #32
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fa09 	bl	8007ef2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aea:	2b40      	cmp	r3, #64	; 0x40
 8007aec:	bf0c      	ite	eq
 8007aee:	2301      	moveq	r3, #1
 8007af0:	2300      	movne	r3, #0
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afa:	f003 0308 	and.w	r3, r3, #8
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d102      	bne.n	8007b08 <HAL_UART_IRQHandler+0x144>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d031      	beq.n	8007b6c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f952 	bl	8007db2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b18:	2b40      	cmp	r3, #64	; 0x40
 8007b1a:	d123      	bne.n	8007b64 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	695a      	ldr	r2, [r3, #20]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b2a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d013      	beq.n	8007b5c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b38:	4a21      	ldr	r2, [pc, #132]	; (8007bc0 <HAL_UART_IRQHandler+0x1fc>)
 8007b3a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7f9 fe85 	bl	8001850 <HAL_DMA_Abort_IT>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d016      	beq.n	8007b7a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b56:	4610      	mov	r0, r2
 8007b58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b5a:	e00e      	b.n	8007b7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f845 	bl	8007bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b62:	e00a      	b.n	8007b7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f841 	bl	8007bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b6a:	e006      	b.n	8007b7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f83d 	bl	8007bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007b78:	e01e      	b.n	8007bb8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b7a:	bf00      	nop
    return;
 8007b7c:	e01c      	b.n	8007bb8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d008      	beq.n	8007b9a <HAL_UART_IRQHandler+0x1d6>
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f93f 	bl	8007e16 <UART_Transmit_IT>
    return;
 8007b98:	e00f      	b.n	8007bba <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <HAL_UART_IRQHandler+0x1f6>
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f987 	bl	8007ec2 <UART_EndTransmit_IT>
    return;
 8007bb4:	bf00      	nop
 8007bb6:	e000      	b.n	8007bba <HAL_UART_IRQHandler+0x1f6>
    return;
 8007bb8:	bf00      	nop
  }
}
 8007bba:	3720      	adds	r7, #32
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	08007def 	.word	0x08007def

08007bc4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d113      	bne.n	8007c44 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	695a      	ldr	r2, [r3, #20]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c30:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c40:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c42:	e002      	b.n	8007c4a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f002 fe71 	bl	800a92c <HAL_UART_TxCpltCallback>
}
 8007c4a:	bf00      	nop
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f7ff ffaf 	bl	8007bc4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c66:	bf00      	nop
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d11e      	bne.n	8007cc8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68da      	ldr	r2, [r3, #12]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c9e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695a      	ldr	r2, [r3, #20]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f022 0201 	bic.w	r2, r2, #1
 8007cae:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	695a      	ldr	r2, [r3, #20]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cbe:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f002 fe3f 	bl	800a94c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cce:	bf00      	nop
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b084      	sub	sp, #16
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f7ff ff77 	bl	8007bd8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cea:	bf00      	nop
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d02:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d0e:	2b80      	cmp	r3, #128	; 0x80
 8007d10:	bf0c      	ite	eq
 8007d12:	2301      	moveq	r3, #1
 8007d14:	2300      	movne	r3, #0
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b21      	cmp	r3, #33	; 0x21
 8007d24:	d108      	bne.n	8007d38 <UART_DMAError+0x46>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d005      	beq.n	8007d38 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007d32:	68b8      	ldr	r0, [r7, #8]
 8007d34:	f000 f827 	bl	8007d86 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	bf0c      	ite	eq
 8007d46:	2301      	moveq	r3, #1
 8007d48:	2300      	movne	r3, #0
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b22      	cmp	r3, #34	; 0x22
 8007d58:	d108      	bne.n	8007d6c <UART_DMAError+0x7a>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d005      	beq.n	8007d6c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2200      	movs	r2, #0
 8007d64:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007d66:	68b8      	ldr	r0, [r7, #8]
 8007d68:	f000 f823 	bl	8007db2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d70:	f043 0210 	orr.w	r2, r3, #16
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d78:	68b8      	ldr	r0, [r7, #8]
 8007d7a:	f7ff ff37 	bl	8007bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d7e:	bf00      	nop
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007d9c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2220      	movs	r2, #32
 8007da2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68da      	ldr	r2, [r3, #12]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007dc8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	695a      	ldr	r2, [r3, #20]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 0201 	bic.w	r2, r2, #1
 8007dd8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007de2:	bf00      	nop
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f7ff feef 	bl	8007bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e0e:	bf00      	nop
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b21      	cmp	r3, #33	; 0x21
 8007e28:	d144      	bne.n	8007eb4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e32:	d11a      	bne.n	8007e6a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e48:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d105      	bne.n	8007e5e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	1c9a      	adds	r2, r3, #2
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	621a      	str	r2, [r3, #32]
 8007e5c:	e00e      	b.n	8007e7c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	621a      	str	r2, [r3, #32]
 8007e68:	e008      	b.n	8007e7c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	1c59      	adds	r1, r3, #1
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6211      	str	r1, [r2, #32]
 8007e74:	781a      	ldrb	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	3b01      	subs	r3, #1
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	4619      	mov	r1, r3
 8007e8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10f      	bne.n	8007eb0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68da      	ldr	r2, [r3, #12]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68da      	ldr	r2, [r3, #12]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	e000      	b.n	8007eb6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007eb4:	2302      	movs	r3, #2
  }
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b082      	sub	sp, #8
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68da      	ldr	r2, [r3, #12]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ed8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f002 fd22 	bl	800a92c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b22      	cmp	r3, #34	; 0x22
 8007f04:	d171      	bne.n	8007fea <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f0e:	d123      	bne.n	8007f58 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f14:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10e      	bne.n	8007f3c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f34:	1c9a      	adds	r2, r3, #2
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	629a      	str	r2, [r3, #40]	; 0x28
 8007f3a:	e029      	b.n	8007f90 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f50:	1c5a      	adds	r2, r3, #1
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	629a      	str	r2, [r3, #40]	; 0x28
 8007f56:	e01b      	b.n	8007f90 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6858      	ldr	r0, [r3, #4]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6a:	1c59      	adds	r1, r3, #1
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	6291      	str	r1, [r2, #40]	; 0x28
 8007f70:	b2c2      	uxtb	r2, r0
 8007f72:	701a      	strb	r2, [r3, #0]
 8007f74:	e00c      	b.n	8007f90 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f82:	1c58      	adds	r0, r3, #1
 8007f84:	6879      	ldr	r1, [r7, #4]
 8007f86:	6288      	str	r0, [r1, #40]	; 0x28
 8007f88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007f8c:	b2d2      	uxtb	r2, r2
 8007f8e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	3b01      	subs	r3, #1
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d120      	bne.n	8007fe6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68da      	ldr	r2, [r3, #12]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0220 	bic.w	r2, r2, #32
 8007fb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68da      	ldr	r2, [r3, #12]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	695a      	ldr	r2, [r3, #20]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 0201 	bic.w	r2, r2, #1
 8007fd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f002 fcb5 	bl	800a94c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e002      	b.n	8007fec <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e000      	b.n	8007fec <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007fea:	2302      	movs	r3, #2
  }
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff8:	b085      	sub	sp, #20
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	4a9a      	ldr	r2, [pc, #616]	; (800826c <UART_SetConfig+0x278>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d904      	bls.n	8008012 <UART_SetConfig+0x1e>
 8008008:	f640 31fb 	movw	r1, #3067	; 0xbfb
 800800c:	4898      	ldr	r0, [pc, #608]	; (8008270 <UART_SetConfig+0x27c>)
 800800e:	f002 fda1 	bl	800ab54 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d009      	beq.n	800802e <UART_SetConfig+0x3a>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008022:	d004      	beq.n	800802e <UART_SetConfig+0x3a>
 8008024:	f640 31fc 	movw	r1, #3068	; 0xbfc
 8008028:	4891      	ldr	r0, [pc, #580]	; (8008270 <UART_SetConfig+0x27c>)
 800802a:	f002 fd93 	bl	800ab54 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00e      	beq.n	8008054 <UART_SetConfig+0x60>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800803e:	d009      	beq.n	8008054 <UART_SetConfig+0x60>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008048:	d004      	beq.n	8008054 <UART_SetConfig+0x60>
 800804a:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800804e:	4888      	ldr	r0, [pc, #544]	; (8008270 <UART_SetConfig+0x27c>)
 8008050:	f002 fd80 	bl	800ab54 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	695a      	ldr	r2, [r3, #20]
 8008058:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800805c:	4013      	ands	r3, r2
 800805e:	2b00      	cmp	r3, #0
 8008060:	d103      	bne.n	800806a <UART_SetConfig+0x76>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d104      	bne.n	8008074 <UART_SetConfig+0x80>
 800806a:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800806e:	4880      	ldr	r0, [pc, #512]	; (8008270 <UART_SetConfig+0x27c>)
 8008070:	f002 fd70 	bl	800ab54 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68da      	ldr	r2, [r3, #12]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689a      	ldr	r2, [r3, #8]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	431a      	orrs	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	431a      	orrs	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	4313      	orrs	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80080ac:	f023 030c 	bic.w	r3, r3, #12
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	6812      	ldr	r2, [r2, #0]
 80080b4:	68f9      	ldr	r1, [r7, #12]
 80080b6:	430b      	orrs	r3, r1
 80080b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	699a      	ldr	r2, [r3, #24]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d8:	f040 818f 	bne.w	80083fa <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a64      	ldr	r2, [pc, #400]	; (8008274 <UART_SetConfig+0x280>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d005      	beq.n	80080f2 <UART_SetConfig+0xfe>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a63      	ldr	r2, [pc, #396]	; (8008278 <UART_SetConfig+0x284>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	f040 80c7 	bne.w	8008280 <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080f2:	f7fc fcd7 	bl	8004aa4 <HAL_RCC_GetPCLK2Freq>
 80080f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	461d      	mov	r5, r3
 80080fc:	f04f 0600 	mov.w	r6, #0
 8008100:	46a8      	mov	r8, r5
 8008102:	46b1      	mov	r9, r6
 8008104:	eb18 0308 	adds.w	r3, r8, r8
 8008108:	eb49 0409 	adc.w	r4, r9, r9
 800810c:	4698      	mov	r8, r3
 800810e:	46a1      	mov	r9, r4
 8008110:	eb18 0805 	adds.w	r8, r8, r5
 8008114:	eb49 0906 	adc.w	r9, r9, r6
 8008118:	f04f 0100 	mov.w	r1, #0
 800811c:	f04f 0200 	mov.w	r2, #0
 8008120:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008124:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008128:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800812c:	4688      	mov	r8, r1
 800812e:	4691      	mov	r9, r2
 8008130:	eb18 0005 	adds.w	r0, r8, r5
 8008134:	eb49 0106 	adc.w	r1, r9, r6
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	461d      	mov	r5, r3
 800813e:	f04f 0600 	mov.w	r6, #0
 8008142:	196b      	adds	r3, r5, r5
 8008144:	eb46 0406 	adc.w	r4, r6, r6
 8008148:	461a      	mov	r2, r3
 800814a:	4623      	mov	r3, r4
 800814c:	f7f8 fd34 	bl	8000bb8 <__aeabi_uldivmod>
 8008150:	4603      	mov	r3, r0
 8008152:	460c      	mov	r4, r1
 8008154:	461a      	mov	r2, r3
 8008156:	4b49      	ldr	r3, [pc, #292]	; (800827c <UART_SetConfig+0x288>)
 8008158:	fba3 2302 	umull	r2, r3, r3, r2
 800815c:	095b      	lsrs	r3, r3, #5
 800815e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	461d      	mov	r5, r3
 8008166:	f04f 0600 	mov.w	r6, #0
 800816a:	46a9      	mov	r9, r5
 800816c:	46b2      	mov	sl, r6
 800816e:	eb19 0309 	adds.w	r3, r9, r9
 8008172:	eb4a 040a 	adc.w	r4, sl, sl
 8008176:	4699      	mov	r9, r3
 8008178:	46a2      	mov	sl, r4
 800817a:	eb19 0905 	adds.w	r9, r9, r5
 800817e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008182:	f04f 0100 	mov.w	r1, #0
 8008186:	f04f 0200 	mov.w	r2, #0
 800818a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800818e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008192:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008196:	4689      	mov	r9, r1
 8008198:	4692      	mov	sl, r2
 800819a:	eb19 0005 	adds.w	r0, r9, r5
 800819e:	eb4a 0106 	adc.w	r1, sl, r6
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	461d      	mov	r5, r3
 80081a8:	f04f 0600 	mov.w	r6, #0
 80081ac:	196b      	adds	r3, r5, r5
 80081ae:	eb46 0406 	adc.w	r4, r6, r6
 80081b2:	461a      	mov	r2, r3
 80081b4:	4623      	mov	r3, r4
 80081b6:	f7f8 fcff 	bl	8000bb8 <__aeabi_uldivmod>
 80081ba:	4603      	mov	r3, r0
 80081bc:	460c      	mov	r4, r1
 80081be:	461a      	mov	r2, r3
 80081c0:	4b2e      	ldr	r3, [pc, #184]	; (800827c <UART_SetConfig+0x288>)
 80081c2:	fba3 1302 	umull	r1, r3, r3, r2
 80081c6:	095b      	lsrs	r3, r3, #5
 80081c8:	2164      	movs	r1, #100	; 0x64
 80081ca:	fb01 f303 	mul.w	r3, r1, r3
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	00db      	lsls	r3, r3, #3
 80081d2:	3332      	adds	r3, #50	; 0x32
 80081d4:	4a29      	ldr	r2, [pc, #164]	; (800827c <UART_SetConfig+0x288>)
 80081d6:	fba2 2303 	umull	r2, r3, r2, r3
 80081da:	095b      	lsrs	r3, r3, #5
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081e2:	4498      	add	r8, r3
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	461d      	mov	r5, r3
 80081e8:	f04f 0600 	mov.w	r6, #0
 80081ec:	46a9      	mov	r9, r5
 80081ee:	46b2      	mov	sl, r6
 80081f0:	eb19 0309 	adds.w	r3, r9, r9
 80081f4:	eb4a 040a 	adc.w	r4, sl, sl
 80081f8:	4699      	mov	r9, r3
 80081fa:	46a2      	mov	sl, r4
 80081fc:	eb19 0905 	adds.w	r9, r9, r5
 8008200:	eb4a 0a06 	adc.w	sl, sl, r6
 8008204:	f04f 0100 	mov.w	r1, #0
 8008208:	f04f 0200 	mov.w	r2, #0
 800820c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008210:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008214:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008218:	4689      	mov	r9, r1
 800821a:	4692      	mov	sl, r2
 800821c:	eb19 0005 	adds.w	r0, r9, r5
 8008220:	eb4a 0106 	adc.w	r1, sl, r6
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	461d      	mov	r5, r3
 800822a:	f04f 0600 	mov.w	r6, #0
 800822e:	196b      	adds	r3, r5, r5
 8008230:	eb46 0406 	adc.w	r4, r6, r6
 8008234:	461a      	mov	r2, r3
 8008236:	4623      	mov	r3, r4
 8008238:	f7f8 fcbe 	bl	8000bb8 <__aeabi_uldivmod>
 800823c:	4603      	mov	r3, r0
 800823e:	460c      	mov	r4, r1
 8008240:	461a      	mov	r2, r3
 8008242:	4b0e      	ldr	r3, [pc, #56]	; (800827c <UART_SetConfig+0x288>)
 8008244:	fba3 1302 	umull	r1, r3, r3, r2
 8008248:	095b      	lsrs	r3, r3, #5
 800824a:	2164      	movs	r1, #100	; 0x64
 800824c:	fb01 f303 	mul.w	r3, r1, r3
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	3332      	adds	r3, #50	; 0x32
 8008256:	4a09      	ldr	r2, [pc, #36]	; (800827c <UART_SetConfig+0x288>)
 8008258:	fba2 2303 	umull	r2, r3, r2, r3
 800825c:	095b      	lsrs	r3, r3, #5
 800825e:	f003 0207 	and.w	r2, r3, #7
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4442      	add	r2, r8
 8008268:	609a      	str	r2, [r3, #8]
 800826a:	e27a      	b.n	8008762 <UART_SetConfig+0x76e>
 800826c:	00a037a0 	.word	0x00a037a0
 8008270:	0800d700 	.word	0x0800d700
 8008274:	40011000 	.word	0x40011000
 8008278:	40011400 	.word	0x40011400
 800827c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008280:	f7fc fbfc 	bl	8004a7c <HAL_RCC_GetPCLK1Freq>
 8008284:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	461d      	mov	r5, r3
 800828a:	f04f 0600 	mov.w	r6, #0
 800828e:	46a8      	mov	r8, r5
 8008290:	46b1      	mov	r9, r6
 8008292:	eb18 0308 	adds.w	r3, r8, r8
 8008296:	eb49 0409 	adc.w	r4, r9, r9
 800829a:	4698      	mov	r8, r3
 800829c:	46a1      	mov	r9, r4
 800829e:	eb18 0805 	adds.w	r8, r8, r5
 80082a2:	eb49 0906 	adc.w	r9, r9, r6
 80082a6:	f04f 0100 	mov.w	r1, #0
 80082aa:	f04f 0200 	mov.w	r2, #0
 80082ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80082b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80082b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80082ba:	4688      	mov	r8, r1
 80082bc:	4691      	mov	r9, r2
 80082be:	eb18 0005 	adds.w	r0, r8, r5
 80082c2:	eb49 0106 	adc.w	r1, r9, r6
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	461d      	mov	r5, r3
 80082cc:	f04f 0600 	mov.w	r6, #0
 80082d0:	196b      	adds	r3, r5, r5
 80082d2:	eb46 0406 	adc.w	r4, r6, r6
 80082d6:	461a      	mov	r2, r3
 80082d8:	4623      	mov	r3, r4
 80082da:	f7f8 fc6d 	bl	8000bb8 <__aeabi_uldivmod>
 80082de:	4603      	mov	r3, r0
 80082e0:	460c      	mov	r4, r1
 80082e2:	461a      	mov	r2, r3
 80082e4:	4bb3      	ldr	r3, [pc, #716]	; (80085b4 <UART_SetConfig+0x5c0>)
 80082e6:	fba3 2302 	umull	r2, r3, r3, r2
 80082ea:	095b      	lsrs	r3, r3, #5
 80082ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	461d      	mov	r5, r3
 80082f4:	f04f 0600 	mov.w	r6, #0
 80082f8:	46a9      	mov	r9, r5
 80082fa:	46b2      	mov	sl, r6
 80082fc:	eb19 0309 	adds.w	r3, r9, r9
 8008300:	eb4a 040a 	adc.w	r4, sl, sl
 8008304:	4699      	mov	r9, r3
 8008306:	46a2      	mov	sl, r4
 8008308:	eb19 0905 	adds.w	r9, r9, r5
 800830c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008310:	f04f 0100 	mov.w	r1, #0
 8008314:	f04f 0200 	mov.w	r2, #0
 8008318:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800831c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008320:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008324:	4689      	mov	r9, r1
 8008326:	4692      	mov	sl, r2
 8008328:	eb19 0005 	adds.w	r0, r9, r5
 800832c:	eb4a 0106 	adc.w	r1, sl, r6
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	461d      	mov	r5, r3
 8008336:	f04f 0600 	mov.w	r6, #0
 800833a:	196b      	adds	r3, r5, r5
 800833c:	eb46 0406 	adc.w	r4, r6, r6
 8008340:	461a      	mov	r2, r3
 8008342:	4623      	mov	r3, r4
 8008344:	f7f8 fc38 	bl	8000bb8 <__aeabi_uldivmod>
 8008348:	4603      	mov	r3, r0
 800834a:	460c      	mov	r4, r1
 800834c:	461a      	mov	r2, r3
 800834e:	4b99      	ldr	r3, [pc, #612]	; (80085b4 <UART_SetConfig+0x5c0>)
 8008350:	fba3 1302 	umull	r1, r3, r3, r2
 8008354:	095b      	lsrs	r3, r3, #5
 8008356:	2164      	movs	r1, #100	; 0x64
 8008358:	fb01 f303 	mul.w	r3, r1, r3
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	00db      	lsls	r3, r3, #3
 8008360:	3332      	adds	r3, #50	; 0x32
 8008362:	4a94      	ldr	r2, [pc, #592]	; (80085b4 <UART_SetConfig+0x5c0>)
 8008364:	fba2 2303 	umull	r2, r3, r2, r3
 8008368:	095b      	lsrs	r3, r3, #5
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008370:	4498      	add	r8, r3
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	461d      	mov	r5, r3
 8008376:	f04f 0600 	mov.w	r6, #0
 800837a:	46a9      	mov	r9, r5
 800837c:	46b2      	mov	sl, r6
 800837e:	eb19 0309 	adds.w	r3, r9, r9
 8008382:	eb4a 040a 	adc.w	r4, sl, sl
 8008386:	4699      	mov	r9, r3
 8008388:	46a2      	mov	sl, r4
 800838a:	eb19 0905 	adds.w	r9, r9, r5
 800838e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008392:	f04f 0100 	mov.w	r1, #0
 8008396:	f04f 0200 	mov.w	r2, #0
 800839a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800839e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083a6:	4689      	mov	r9, r1
 80083a8:	4692      	mov	sl, r2
 80083aa:	eb19 0005 	adds.w	r0, r9, r5
 80083ae:	eb4a 0106 	adc.w	r1, sl, r6
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	461d      	mov	r5, r3
 80083b8:	f04f 0600 	mov.w	r6, #0
 80083bc:	196b      	adds	r3, r5, r5
 80083be:	eb46 0406 	adc.w	r4, r6, r6
 80083c2:	461a      	mov	r2, r3
 80083c4:	4623      	mov	r3, r4
 80083c6:	f7f8 fbf7 	bl	8000bb8 <__aeabi_uldivmod>
 80083ca:	4603      	mov	r3, r0
 80083cc:	460c      	mov	r4, r1
 80083ce:	461a      	mov	r2, r3
 80083d0:	4b78      	ldr	r3, [pc, #480]	; (80085b4 <UART_SetConfig+0x5c0>)
 80083d2:	fba3 1302 	umull	r1, r3, r3, r2
 80083d6:	095b      	lsrs	r3, r3, #5
 80083d8:	2164      	movs	r1, #100	; 0x64
 80083da:	fb01 f303 	mul.w	r3, r1, r3
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	00db      	lsls	r3, r3, #3
 80083e2:	3332      	adds	r3, #50	; 0x32
 80083e4:	4a73      	ldr	r2, [pc, #460]	; (80085b4 <UART_SetConfig+0x5c0>)
 80083e6:	fba2 2303 	umull	r2, r3, r2, r3
 80083ea:	095b      	lsrs	r3, r3, #5
 80083ec:	f003 0207 	and.w	r2, r3, #7
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4442      	add	r2, r8
 80083f6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80083f8:	e1b3      	b.n	8008762 <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a6e      	ldr	r2, [pc, #440]	; (80085b8 <UART_SetConfig+0x5c4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d005      	beq.n	8008410 <UART_SetConfig+0x41c>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a6c      	ldr	r2, [pc, #432]	; (80085bc <UART_SetConfig+0x5c8>)
 800840a:	4293      	cmp	r3, r2
 800840c:	f040 80d8 	bne.w	80085c0 <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008410:	f7fc fb48 	bl	8004aa4 <HAL_RCC_GetPCLK2Freq>
 8008414:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	469a      	mov	sl, r3
 800841a:	f04f 0b00 	mov.w	fp, #0
 800841e:	46d0      	mov	r8, sl
 8008420:	46d9      	mov	r9, fp
 8008422:	eb18 0308 	adds.w	r3, r8, r8
 8008426:	eb49 0409 	adc.w	r4, r9, r9
 800842a:	4698      	mov	r8, r3
 800842c:	46a1      	mov	r9, r4
 800842e:	eb18 080a 	adds.w	r8, r8, sl
 8008432:	eb49 090b 	adc.w	r9, r9, fp
 8008436:	f04f 0100 	mov.w	r1, #0
 800843a:	f04f 0200 	mov.w	r2, #0
 800843e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008442:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008446:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800844a:	4688      	mov	r8, r1
 800844c:	4691      	mov	r9, r2
 800844e:	eb1a 0508 	adds.w	r5, sl, r8
 8008452:	eb4b 0609 	adc.w	r6, fp, r9
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	4619      	mov	r1, r3
 800845c:	f04f 0200 	mov.w	r2, #0
 8008460:	f04f 0300 	mov.w	r3, #0
 8008464:	f04f 0400 	mov.w	r4, #0
 8008468:	0094      	lsls	r4, r2, #2
 800846a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800846e:	008b      	lsls	r3, r1, #2
 8008470:	461a      	mov	r2, r3
 8008472:	4623      	mov	r3, r4
 8008474:	4628      	mov	r0, r5
 8008476:	4631      	mov	r1, r6
 8008478:	f7f8 fb9e 	bl	8000bb8 <__aeabi_uldivmod>
 800847c:	4603      	mov	r3, r0
 800847e:	460c      	mov	r4, r1
 8008480:	461a      	mov	r2, r3
 8008482:	4b4c      	ldr	r3, [pc, #304]	; (80085b4 <UART_SetConfig+0x5c0>)
 8008484:	fba3 2302 	umull	r2, r3, r3, r2
 8008488:	095b      	lsrs	r3, r3, #5
 800848a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	469b      	mov	fp, r3
 8008492:	f04f 0c00 	mov.w	ip, #0
 8008496:	46d9      	mov	r9, fp
 8008498:	46e2      	mov	sl, ip
 800849a:	eb19 0309 	adds.w	r3, r9, r9
 800849e:	eb4a 040a 	adc.w	r4, sl, sl
 80084a2:	4699      	mov	r9, r3
 80084a4:	46a2      	mov	sl, r4
 80084a6:	eb19 090b 	adds.w	r9, r9, fp
 80084aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80084ae:	f04f 0100 	mov.w	r1, #0
 80084b2:	f04f 0200 	mov.w	r2, #0
 80084b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084c2:	4689      	mov	r9, r1
 80084c4:	4692      	mov	sl, r2
 80084c6:	eb1b 0509 	adds.w	r5, fp, r9
 80084ca:	eb4c 060a 	adc.w	r6, ip, sl
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	4619      	mov	r1, r3
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	f04f 0300 	mov.w	r3, #0
 80084dc:	f04f 0400 	mov.w	r4, #0
 80084e0:	0094      	lsls	r4, r2, #2
 80084e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80084e6:	008b      	lsls	r3, r1, #2
 80084e8:	461a      	mov	r2, r3
 80084ea:	4623      	mov	r3, r4
 80084ec:	4628      	mov	r0, r5
 80084ee:	4631      	mov	r1, r6
 80084f0:	f7f8 fb62 	bl	8000bb8 <__aeabi_uldivmod>
 80084f4:	4603      	mov	r3, r0
 80084f6:	460c      	mov	r4, r1
 80084f8:	461a      	mov	r2, r3
 80084fa:	4b2e      	ldr	r3, [pc, #184]	; (80085b4 <UART_SetConfig+0x5c0>)
 80084fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008500:	095b      	lsrs	r3, r3, #5
 8008502:	2164      	movs	r1, #100	; 0x64
 8008504:	fb01 f303 	mul.w	r3, r1, r3
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	011b      	lsls	r3, r3, #4
 800850c:	3332      	adds	r3, #50	; 0x32
 800850e:	4a29      	ldr	r2, [pc, #164]	; (80085b4 <UART_SetConfig+0x5c0>)
 8008510:	fba2 2303 	umull	r2, r3, r2, r3
 8008514:	095b      	lsrs	r3, r3, #5
 8008516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800851a:	4498      	add	r8, r3
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	469b      	mov	fp, r3
 8008520:	f04f 0c00 	mov.w	ip, #0
 8008524:	46d9      	mov	r9, fp
 8008526:	46e2      	mov	sl, ip
 8008528:	eb19 0309 	adds.w	r3, r9, r9
 800852c:	eb4a 040a 	adc.w	r4, sl, sl
 8008530:	4699      	mov	r9, r3
 8008532:	46a2      	mov	sl, r4
 8008534:	eb19 090b 	adds.w	r9, r9, fp
 8008538:	eb4a 0a0c 	adc.w	sl, sl, ip
 800853c:	f04f 0100 	mov.w	r1, #0
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008548:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800854c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008550:	4689      	mov	r9, r1
 8008552:	4692      	mov	sl, r2
 8008554:	eb1b 0509 	adds.w	r5, fp, r9
 8008558:	eb4c 060a 	adc.w	r6, ip, sl
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	4619      	mov	r1, r3
 8008562:	f04f 0200 	mov.w	r2, #0
 8008566:	f04f 0300 	mov.w	r3, #0
 800856a:	f04f 0400 	mov.w	r4, #0
 800856e:	0094      	lsls	r4, r2, #2
 8008570:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008574:	008b      	lsls	r3, r1, #2
 8008576:	461a      	mov	r2, r3
 8008578:	4623      	mov	r3, r4
 800857a:	4628      	mov	r0, r5
 800857c:	4631      	mov	r1, r6
 800857e:	f7f8 fb1b 	bl	8000bb8 <__aeabi_uldivmod>
 8008582:	4603      	mov	r3, r0
 8008584:	460c      	mov	r4, r1
 8008586:	461a      	mov	r2, r3
 8008588:	4b0a      	ldr	r3, [pc, #40]	; (80085b4 <UART_SetConfig+0x5c0>)
 800858a:	fba3 1302 	umull	r1, r3, r3, r2
 800858e:	095b      	lsrs	r3, r3, #5
 8008590:	2164      	movs	r1, #100	; 0x64
 8008592:	fb01 f303 	mul.w	r3, r1, r3
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	011b      	lsls	r3, r3, #4
 800859a:	3332      	adds	r3, #50	; 0x32
 800859c:	4a05      	ldr	r2, [pc, #20]	; (80085b4 <UART_SetConfig+0x5c0>)
 800859e:	fba2 2303 	umull	r2, r3, r2, r3
 80085a2:	095b      	lsrs	r3, r3, #5
 80085a4:	f003 020f 	and.w	r2, r3, #15
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4442      	add	r2, r8
 80085ae:	609a      	str	r2, [r3, #8]
 80085b0:	e0d7      	b.n	8008762 <UART_SetConfig+0x76e>
 80085b2:	bf00      	nop
 80085b4:	51eb851f 	.word	0x51eb851f
 80085b8:	40011000 	.word	0x40011000
 80085bc:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 80085c0:	f7fc fa5c 	bl	8004a7c <HAL_RCC_GetPCLK1Freq>
 80085c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	469a      	mov	sl, r3
 80085ca:	f04f 0b00 	mov.w	fp, #0
 80085ce:	46d0      	mov	r8, sl
 80085d0:	46d9      	mov	r9, fp
 80085d2:	eb18 0308 	adds.w	r3, r8, r8
 80085d6:	eb49 0409 	adc.w	r4, r9, r9
 80085da:	4698      	mov	r8, r3
 80085dc:	46a1      	mov	r9, r4
 80085de:	eb18 080a 	adds.w	r8, r8, sl
 80085e2:	eb49 090b 	adc.w	r9, r9, fp
 80085e6:	f04f 0100 	mov.w	r1, #0
 80085ea:	f04f 0200 	mov.w	r2, #0
 80085ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80085f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80085f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80085fa:	4688      	mov	r8, r1
 80085fc:	4691      	mov	r9, r2
 80085fe:	eb1a 0508 	adds.w	r5, sl, r8
 8008602:	eb4b 0609 	adc.w	r6, fp, r9
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	4619      	mov	r1, r3
 800860c:	f04f 0200 	mov.w	r2, #0
 8008610:	f04f 0300 	mov.w	r3, #0
 8008614:	f04f 0400 	mov.w	r4, #0
 8008618:	0094      	lsls	r4, r2, #2
 800861a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800861e:	008b      	lsls	r3, r1, #2
 8008620:	461a      	mov	r2, r3
 8008622:	4623      	mov	r3, r4
 8008624:	4628      	mov	r0, r5
 8008626:	4631      	mov	r1, r6
 8008628:	f7f8 fac6 	bl	8000bb8 <__aeabi_uldivmod>
 800862c:	4603      	mov	r3, r0
 800862e:	460c      	mov	r4, r1
 8008630:	461a      	mov	r2, r3
 8008632:	4b4e      	ldr	r3, [pc, #312]	; (800876c <UART_SetConfig+0x778>)
 8008634:	fba3 2302 	umull	r2, r3, r3, r2
 8008638:	095b      	lsrs	r3, r3, #5
 800863a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	469b      	mov	fp, r3
 8008642:	f04f 0c00 	mov.w	ip, #0
 8008646:	46d9      	mov	r9, fp
 8008648:	46e2      	mov	sl, ip
 800864a:	eb19 0309 	adds.w	r3, r9, r9
 800864e:	eb4a 040a 	adc.w	r4, sl, sl
 8008652:	4699      	mov	r9, r3
 8008654:	46a2      	mov	sl, r4
 8008656:	eb19 090b 	adds.w	r9, r9, fp
 800865a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800865e:	f04f 0100 	mov.w	r1, #0
 8008662:	f04f 0200 	mov.w	r2, #0
 8008666:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800866a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800866e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008672:	4689      	mov	r9, r1
 8008674:	4692      	mov	sl, r2
 8008676:	eb1b 0509 	adds.w	r5, fp, r9
 800867a:	eb4c 060a 	adc.w	r6, ip, sl
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	4619      	mov	r1, r3
 8008684:	f04f 0200 	mov.w	r2, #0
 8008688:	f04f 0300 	mov.w	r3, #0
 800868c:	f04f 0400 	mov.w	r4, #0
 8008690:	0094      	lsls	r4, r2, #2
 8008692:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008696:	008b      	lsls	r3, r1, #2
 8008698:	461a      	mov	r2, r3
 800869a:	4623      	mov	r3, r4
 800869c:	4628      	mov	r0, r5
 800869e:	4631      	mov	r1, r6
 80086a0:	f7f8 fa8a 	bl	8000bb8 <__aeabi_uldivmod>
 80086a4:	4603      	mov	r3, r0
 80086a6:	460c      	mov	r4, r1
 80086a8:	461a      	mov	r2, r3
 80086aa:	4b30      	ldr	r3, [pc, #192]	; (800876c <UART_SetConfig+0x778>)
 80086ac:	fba3 1302 	umull	r1, r3, r3, r2
 80086b0:	095b      	lsrs	r3, r3, #5
 80086b2:	2164      	movs	r1, #100	; 0x64
 80086b4:	fb01 f303 	mul.w	r3, r1, r3
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	011b      	lsls	r3, r3, #4
 80086bc:	3332      	adds	r3, #50	; 0x32
 80086be:	4a2b      	ldr	r2, [pc, #172]	; (800876c <UART_SetConfig+0x778>)
 80086c0:	fba2 2303 	umull	r2, r3, r2, r3
 80086c4:	095b      	lsrs	r3, r3, #5
 80086c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086ca:	4498      	add	r8, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	469b      	mov	fp, r3
 80086d0:	f04f 0c00 	mov.w	ip, #0
 80086d4:	46d9      	mov	r9, fp
 80086d6:	46e2      	mov	sl, ip
 80086d8:	eb19 0309 	adds.w	r3, r9, r9
 80086dc:	eb4a 040a 	adc.w	r4, sl, sl
 80086e0:	4699      	mov	r9, r3
 80086e2:	46a2      	mov	sl, r4
 80086e4:	eb19 090b 	adds.w	r9, r9, fp
 80086e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80086ec:	f04f 0100 	mov.w	r1, #0
 80086f0:	f04f 0200 	mov.w	r2, #0
 80086f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008700:	4689      	mov	r9, r1
 8008702:	4692      	mov	sl, r2
 8008704:	eb1b 0509 	adds.w	r5, fp, r9
 8008708:	eb4c 060a 	adc.w	r6, ip, sl
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	4619      	mov	r1, r3
 8008712:	f04f 0200 	mov.w	r2, #0
 8008716:	f04f 0300 	mov.w	r3, #0
 800871a:	f04f 0400 	mov.w	r4, #0
 800871e:	0094      	lsls	r4, r2, #2
 8008720:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008724:	008b      	lsls	r3, r1, #2
 8008726:	461a      	mov	r2, r3
 8008728:	4623      	mov	r3, r4
 800872a:	4628      	mov	r0, r5
 800872c:	4631      	mov	r1, r6
 800872e:	f7f8 fa43 	bl	8000bb8 <__aeabi_uldivmod>
 8008732:	4603      	mov	r3, r0
 8008734:	460c      	mov	r4, r1
 8008736:	461a      	mov	r2, r3
 8008738:	4b0c      	ldr	r3, [pc, #48]	; (800876c <UART_SetConfig+0x778>)
 800873a:	fba3 1302 	umull	r1, r3, r3, r2
 800873e:	095b      	lsrs	r3, r3, #5
 8008740:	2164      	movs	r1, #100	; 0x64
 8008742:	fb01 f303 	mul.w	r3, r1, r3
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	011b      	lsls	r3, r3, #4
 800874a:	3332      	adds	r3, #50	; 0x32
 800874c:	4a07      	ldr	r2, [pc, #28]	; (800876c <UART_SetConfig+0x778>)
 800874e:	fba2 2303 	umull	r2, r3, r2, r3
 8008752:	095b      	lsrs	r3, r3, #5
 8008754:	f003 020f 	and.w	r2, r3, #15
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4442      	add	r2, r8
 800875e:	609a      	str	r2, [r3, #8]
}
 8008760:	e7ff      	b.n	8008762 <UART_SetConfig+0x76e>
 8008762:	bf00      	nop
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800876c:	51eb851f 	.word	0x51eb851f

08008770 <BufferInit>:
#include "Buffer.h"
#include "main.h"


void BufferInit(uint8_t* rxBuffer)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	e007      	b.n	800878e <BufferInit+0x1e>
		rxBuffer[i] = 0;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	4413      	add	r3, r2
 8008784:	2200      	movs	r2, #0
 8008786:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++){
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	3301      	adds	r3, #1
 800878c:	60fb      	str	r3, [r7, #12]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b63      	cmp	r3, #99	; 0x63
 8008792:	ddf4      	ble.n	800877e <BufferInit+0xe>
	}
}
 8008794:	bf00      	nop
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <ping_callBack>:
 extern stmdev_ctx_t dev_ctx;



void ping_callBack(char* token)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
	uart_print(token);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f002 f993 	bl	800aad4 <uart_print>
}
 80087ae:	bf00      	nop
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <get_version_callback>:

void get_version_callback(char* token)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
	uart_print(VERSION);
 80087c0:	4803      	ldr	r0, [pc, #12]	; (80087d0 <get_version_callback+0x18>)
 80087c2:	f002 f987 	bl	800aad4 <uart_print>
}
 80087c6:	bf00      	nop
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	0800d834 	.word	0x0800d834

080087d4 <pwm_start_callback>:

void pwm_start_callback(char* token)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80087dc:	2100      	movs	r1, #0
 80087de:	4803      	ldr	r0, [pc, #12]	; (80087ec <pwm_start_callback+0x18>)
 80087e0:	f7fd fcce 	bl	8006180 <HAL_TIM_PWM_Start>
}
 80087e4:	bf00      	nop
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	20000700 	.word	0x20000700

080087f0 <pwm_stop_callback>:

void pwm_stop_callback(char* token)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80087f8:	2100      	movs	r1, #0
 80087fa:	4803      	ldr	r0, [pc, #12]	; (8008808 <pwm_stop_callback+0x18>)
 80087fc:	f7fd fd74 	bl	80062e8 <HAL_TIM_PWM_Stop>
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	20000700 	.word	0x20000700

0800880c <pwm_dc_callback>:

void pwm_dc_callback(char* token)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
	token = strtok(NULL, " ");
 8008814:	490f      	ldr	r1, [pc, #60]	; (8008854 <pwm_dc_callback+0x48>)
 8008816:	2000      	movs	r0, #0
 8008818:	f003 f946 	bl	800baa8 <strtok>
 800881c:	6078      	str	r0, [r7, #4]
	if(strlen(token) <= 0)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d012      	beq.n	800884c <pwm_dc_callback+0x40>
	{
		return;
	}
	int32_t dc = atoi(token);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f002 fc57 	bl	800b0da <atoi>
 800882c:	60f8      	str	r0, [r7, #12]
	if (dc > 100) dc = 100;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2b64      	cmp	r3, #100	; 0x64
 8008832:	dd01      	ble.n	8008838 <pwm_dc_callback+0x2c>
 8008834:	2364      	movs	r3, #100	; 0x64
 8008836:	60fb      	str	r3, [r7, #12]
	if (dc < 0)   dc = 0;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	da01      	bge.n	8008842 <pwm_dc_callback+0x36>
 800883e:	2300      	movs	r3, #0
 8008840:	60fb      	str	r3, [r7, #12]
	htim3.Instance->CCR1 = dc;
 8008842:	4b05      	ldr	r3, [pc, #20]	; (8008858 <pwm_dc_callback+0x4c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	635a      	str	r2, [r3, #52]	; 0x34
 800884a:	e000      	b.n	800884e <pwm_dc_callback+0x42>
		return;
 800884c:	bf00      	nop
}
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	0800d83c 	.word	0x0800d83c
 8008858:	20000700 	.word	0x20000700

0800885c <crc_whole_flash_calc_callback>:

void crc_whole_flash_calc_callback(char* token)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b088      	sub	sp, #32
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	char temp [9];
	uint32_t crcFlashResult;
	uint32_t flashSize = 0x20000;
 8008864:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008868:	61fb      	str	r3, [r7, #28]
	uint32_t *p_flash_start_address = (uint32_t *) FLASH_START_ADDRESS;
 800886a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800886e:	61bb      	str	r3, [r7, #24]

	crcFlashResult = HAL_CRC_Calculate(&hcrc, p_flash_start_address, flashSize);
 8008870:	69fa      	ldr	r2, [r7, #28]
 8008872:	69b9      	ldr	r1, [r7, #24]
 8008874:	4809      	ldr	r0, [pc, #36]	; (800889c <crc_whole_flash_calc_callback+0x40>)
 8008876:	f7f8 fd35 	bl	80012e4 <HAL_CRC_Calculate>
 800887a:	6178      	str	r0, [r7, #20]

	sprintf(temp, "%x\n", (unsigned int)crcFlashResult);
 800887c:	f107 0308 	add.w	r3, r7, #8
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	4907      	ldr	r1, [pc, #28]	; (80088a0 <crc_whole_flash_calc_callback+0x44>)
 8008884:	4618      	mov	r0, r3
 8008886:	f003 f8c7 	bl	800ba18 <siprintf>
	uart_print(temp);
 800888a:	f107 0308 	add.w	r3, r7, #8
 800888e:	4618      	mov	r0, r3
 8008890:	f002 f920 	bl	800aad4 <uart_print>
}
 8008894:	bf00      	nop
 8008896:	3720      	adds	r7, #32
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	200006f8 	.word	0x200006f8
 80088a0:	0800d840 	.word	0x0800d840

080088a4 <iwdg_test_callback>:

void iwdg_test_callback(char* token)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
	uart_print(OK);
 80088ac:	4801      	ldr	r0, [pc, #4]	; (80088b4 <iwdg_test_callback+0x10>)
 80088ae:	f002 f911 	bl	800aad4 <uart_print>
	while(1);
 80088b2:	e7fe      	b.n	80088b2 <iwdg_test_callback+0xe>
 80088b4:	0800d844 	.word	0x0800d844

080088b8 <flash_lock_callback>:
}

void flash_lock_callback(char* token)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08a      	sub	sp, #40	; 0x28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
	 *It does not prevent one part of code to read another part, or even rewrite.
	 *PCROP allows you to use debugger to debug your code,
	 *but protects reading and rewriting the "secret" part.*/

	FLASH_OBProgramInitTypeDef obConfig;
	HAL_FLASHEx_OBGetConfig(&obConfig);
 80088c0:	f107 030c 	add.w	r3, r7, #12
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7f9 fd55 	bl	8002374 <HAL_FLASHEx_OBGetConfig>

	if (obConfig.RDPLevel == OB_RDP_LEVEL_0) {
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	2baa      	cmp	r3, #170	; 0xaa
 80088ce:	d130      	bne.n	8008932 <flash_lock_callback+0x7a>
		obConfig.RDPLevel = OB_RDP_LEVEL_1;
 80088d0:	2355      	movs	r3, #85	; 0x55
 80088d2:	61fb      	str	r3, [r7, #28]
		obConfig.OptionType = OPTIONBYTE_RDP;
 80088d4:	2302      	movs	r3, #2
 80088d6:	60fb      	str	r3, [r7, #12]

		if (HAL_FLASH_Unlock() != HAL_OK)
 80088d8:	f7f9 faaa 	bl	8001e30 <HAL_FLASH_Unlock>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <flash_lock_callback+0x2e>
		{
			Error_Handler();
 80088e2:	f002 f92f 	bl	800ab44 <Error_Handler>
		}
		if (HAL_FLASH_OB_Unlock() != HAL_OK)
 80088e6:	f7f9 fad5 	bl	8001e94 <HAL_FLASH_OB_Unlock>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <flash_lock_callback+0x3c>
		{
			Error_Handler();
 80088f0:	f002 f928 	bl	800ab44 <Error_Handler>
		}
		if (HAL_FLASHEx_OBProgram(&obConfig) != HAL_OK)
 80088f4:	f107 030c 	add.w	r3, r7, #12
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7f9 fcb5 	bl	8002268 <HAL_FLASHEx_OBProgram>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <flash_lock_callback+0x50>
		{
			Error_Handler();
 8008904:	f002 f91e 	bl	800ab44 <Error_Handler>
		}
		if (HAL_FLASH_OB_Launch() != HAL_OK)
 8008908:	f7f9 faf0 	bl	8001eec <HAL_FLASH_OB_Launch>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <flash_lock_callback+0x5e>
		{
			Error_Handler();
 8008912:	f002 f917 	bl	800ab44 <Error_Handler>
		}
		if (HAL_FLASH_OB_Lock() != HAL_OK)
 8008916:	f7f9 fad9 	bl	8001ecc <HAL_FLASH_OB_Lock>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <flash_lock_callback+0x6c>
		{
			Error_Handler();
 8008920:	f002 f910 	bl	800ab44 <Error_Handler>
		}
		if (HAL_FLASH_Lock() != HAL_OK)
 8008924:	f7f9 faa6 	bl	8001e74 <HAL_FLASH_Lock>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <flash_lock_callback+0x7a>
		{
			Error_Handler();
 800892e:	f002 f909 	bl	800ab44 <Error_Handler>
		MY_FLASH_SetSectorAddrs(7, sector_7_addr);
		uint32_t myTestWrite[1] = {0xDEADBEEF}; 		//0xFFFFFFFF, 0xDEADBEEF
		MY_FLASH_WriteN(131072-4, myTestWrite2, 1, DATA_TYPE_32);
		*/
	}
}
 8008932:	bf00      	nop
 8008934:	3728      	adds	r7, #40	; 0x28
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
	...

0800893c <set_SN_callback>:

void set_SN_callback(char* token)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
	/*if (WRP_sector_disable() != HAL_OK)
	{
		Error_Handler();
	}*/
	uint32_t sector_7_addr = 0x08060000;		//Sector 7 address
 8008944:	4b09      	ldr	r3, [pc, #36]	; (800896c <set_SN_callback+0x30>)
 8008946:	60fb      	str	r3, [r7, #12]
	MY_FLASH_SetSectorAddrs(7, sector_7_addr);
 8008948:	68f9      	ldr	r1, [r7, #12]
 800894a:	2007      	movs	r0, #7
 800894c:	f000 f944 	bl	8008bd8 <MY_FLASH_SetSectorAddrs>
	uint32_t myTestWrite[1] = {0xDEADBEEF}; //0xFFFFFFFF, 0xDEADBEEF
 8008950:	4b07      	ldr	r3, [pc, #28]	; (8008970 <set_SN_callback+0x34>)
 8008952:	60bb      	str	r3, [r7, #8]
	MY_FLASH_WriteN(0, myTestWrite, 1, DATA_TYPE_32);
 8008954:	f107 0108 	add.w	r1, r7, #8
 8008958:	2302      	movs	r3, #2
 800895a:	2201      	movs	r2, #1
 800895c:	2000      	movs	r0, #0
 800895e:	f000 f951 	bl	8008c04 <MY_FLASH_WriteN>

	/*if (WRP_sector_enable() != HAL_OK)
	{
		Error_Handler();
	}*/
}
 8008962:	bf00      	nop
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	08060000 	.word	0x08060000
 8008970:	deadbeef 	.word	0xdeadbeef

08008974 <get_SN_callback>:

void get_SN_callback(char* token)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
	char temp [9];
	uint32_t sector_7_addr = 0x08060000;		//Sector 7 address
 800897c:	4b0e      	ldr	r3, [pc, #56]	; (80089b8 <get_SN_callback+0x44>)
 800897e:	61fb      	str	r3, [r7, #28]
	MY_FLASH_SetSectorAddrs(7, sector_7_addr);
 8008980:	69f9      	ldr	r1, [r7, #28]
 8008982:	2007      	movs	r0, #7
 8008984:	f000 f928 	bl	8008bd8 <MY_FLASH_SetSectorAddrs>
	uint32_t myTestRead[1];
	MY_FLASH_ReadN(0, myTestRead, 1, DATA_TYPE_32);
 8008988:	f107 010c 	add.w	r1, r7, #12
 800898c:	2302      	movs	r3, #2
 800898e:	2201      	movs	r2, #1
 8008990:	2000      	movs	r0, #0
 8008992:	f000 f9a9 	bl	8008ce8 <MY_FLASH_ReadN>

	sprintf(temp, "%x\n", (unsigned int)myTestRead[0]);
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	f107 0310 	add.w	r3, r7, #16
 800899c:	4907      	ldr	r1, [pc, #28]	; (80089bc <get_SN_callback+0x48>)
 800899e:	4618      	mov	r0, r3
 80089a0:	f003 f83a 	bl	800ba18 <siprintf>
	uart_print(temp);
 80089a4:	f107 0310 	add.w	r3, r7, #16
 80089a8:	4618      	mov	r0, r3
 80089aa:	f002 f893 	bl	800aad4 <uart_print>
}
 80089ae:	bf00      	nop
 80089b0:	3720      	adds	r7, #32
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	08060000 	.word	0x08060000
 80089bc:	0800d840 	.word	0x0800d840

080089c0 <start_tick_callback>:

void start_tick_callback(char* token)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
	MX_RTC_Init();
 80089c8:	f001 fdf2 	bl	800a5b0 <MX_RTC_Init>
}
 80089cc:	bf00      	nop
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <stop_tick_callback>:

void stop_tick_callback(char* token)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
	if (HAL_RTC_DeInit(&hrtc) != HAL_OK)
 80089dc:	4805      	ldr	r0, [pc, #20]	; (80089f4 <stop_tick_callback+0x20>)
 80089de:	f7fc fb6f 	bl	80050c0 <HAL_RTC_DeInit>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <stop_tick_callback+0x18>
	{
		Error_Handler();
 80089e8:	f002 f8ac 	bl	800ab44 <Error_Handler>
	}
}
 80089ec:	bf00      	nop
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	2000086c 	.word	0x2000086c

080089f8 <assert_0_callback>:

void assert_0_callback(char* token)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	assert_param(0);
 8008a00:	21b3      	movs	r1, #179	; 0xb3
 8008a02:	4803      	ldr	r0, [pc, #12]	; (8008a10 <assert_0_callback+0x18>)
 8008a04:	f002 f8a6 	bl	800ab54 <assert_failed>
}
 8008a08:	bf00      	nop
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	0800d848 	.word	0x0800d848

08008a14 <clear_assert_flag_callback>:

void clear_assert_flag_callback(char* token)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
	s_assert_struct.flag = ASSERT_FLAG_OFF;
 8008a1c:	4b04      	ldr	r3, [pc, #16]	; (8008a30 <clear_assert_flag_callback+0x1c>)
 8008a1e:	2255      	movs	r2, #85	; 0x55
 8008a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	20000000 	.word	0x20000000

08008a34 <lsm6dsl_per_sample_enable_callback>:

void lsm6dsl_per_sample_enable_callback(char* token)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
	LSM6DSL_Per_Sample_Init();
 8008a3c:	f000 fa3a 	bl	8008eb4 <LSM6DSL_Per_Sample_Init>
}
 8008a40:	bf00      	nop
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <lsm6dsl_fifo_enable_callback>:

void lsm6dsl_fifo_enable_callback(char* token)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
	LSM6DSL_FIFO_Init();
 8008a50:	f000 fa6c 	bl	8008f2c <LSM6DSL_FIFO_Init>
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <lsm6dsl_disable_callback>:

void lsm6dsl_disable_callback(char* token)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
	LSM6DSL_Per_Sample_Disable();
 8008a64:	f000 fa48 	bl	8008ef8 <LSM6DSL_Per_Sample_Disable>
	LSM6DSL_FIFO_Disable();
 8008a68:	f000 fab6 	bl	8008fd8 <LSM6DSL_FIFO_Disable>
}
 8008a6c:	bf00      	nop
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <reset_cause_get>:

#include "Debug.h"

reset_cause_t reset_cause_get(void)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8008a7a:	4b26      	ldr	r3, [pc, #152]	; (8008b14 <reset_cause_get+0xa0>)
 8008a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	da02      	bge.n	8008a88 <reset_cause_get+0x14>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 8008a82:	2301      	movs	r3, #1
 8008a84:	71fb      	strb	r3, [r7, #7]
 8008a86:	e037      	b.n	8008af8 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8008a88:	4b22      	ldr	r3, [pc, #136]	; (8008b14 <reset_cause_get+0xa0>)
 8008a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <reset_cause_get+0x26>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8008a94:	2302      	movs	r3, #2
 8008a96:	71fb      	strb	r3, [r7, #7]
 8008a98:	e02e      	b.n	8008af8 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8008a9a:	4b1e      	ldr	r3, [pc, #120]	; (8008b14 <reset_cause_get+0xa0>)
 8008a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <reset_cause_get+0x38>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	71fb      	strb	r3, [r7, #7]
 8008aaa:	e025      	b.n	8008af8 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8008aac:	4b19      	ldr	r3, [pc, #100]	; (8008b14 <reset_cause_get+0xa0>)
 8008aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <reset_cause_get+0x4a>
    {
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 8008ab8:	2304      	movs	r3, #4
 8008aba:	71fb      	strb	r3, [r7, #7]
 8008abc:	e01c      	b.n	8008af8 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8008abe:	4b15      	ldr	r3, [pc, #84]	; (8008b14 <reset_cause_get+0xa0>)
 8008ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <reset_cause_get+0x5c>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8008aca:	2305      	movs	r3, #5
 8008acc:	71fb      	strb	r3, [r7, #7]
 8008ace:	e013      	b.n	8008af8 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8008ad0:	4b10      	ldr	r3, [pc, #64]	; (8008b14 <reset_cause_get+0xa0>)
 8008ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ad4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d002      	beq.n	8008ae2 <reset_cause_get+0x6e>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8008adc:	2306      	movs	r3, #6
 8008ade:	71fb      	strb	r3, [r7, #7]
 8008ae0:	e00a      	b.n	8008af8 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8008ae2:	4b0c      	ldr	r3, [pc, #48]	; (8008b14 <reset_cause_get+0xa0>)
 8008ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d002      	beq.n	8008af4 <reset_cause_get+0x80>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 8008aee:	2307      	movs	r3, #7
 8008af0:	71fb      	strb	r3, [r7, #7]
 8008af2:	e001      	b.n	8008af8 <reset_cause_get+0x84>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 8008af4:	2300      	movs	r3, #0
 8008af6:	71fb      	strb	r3, [r7, #7]
    }

    __HAL_RCC_CLEAR_RESET_FLAGS();
 8008af8:	4b06      	ldr	r3, [pc, #24]	; (8008b14 <reset_cause_get+0xa0>)
 8008afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008afc:	4a05      	ldr	r2, [pc, #20]	; (8008b14 <reset_cause_get+0xa0>)
 8008afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b02:	6753      	str	r3, [r2, #116]	; 0x74

    return reset_cause;
 8008b04:	79fb      	ldrb	r3, [r7, #7]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	40023800 	.word	0x40023800

08008b18 <reset_cause_get_name>:


const char * reset_cause_get_name(reset_cause_t reset_cause)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	4603      	mov	r3, r0
 8008b20:	71fb      	strb	r3, [r7, #7]
    const char * reset_cause_name = "TBD";
 8008b22:	4b1c      	ldr	r3, [pc, #112]	; (8008b94 <reset_cause_get_name+0x7c>)
 8008b24:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 8008b26:	79fb      	ldrb	r3, [r7, #7]
 8008b28:	2b07      	cmp	r3, #7
 8008b2a:	d82b      	bhi.n	8008b84 <reset_cause_get_name+0x6c>
 8008b2c:	a201      	add	r2, pc, #4	; (adr r2, 8008b34 <reset_cause_get_name+0x1c>)
 8008b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b32:	bf00      	nop
 8008b34:	08008b55 	.word	0x08008b55
 8008b38:	08008b5b 	.word	0x08008b5b
 8008b3c:	08008b61 	.word	0x08008b61
 8008b40:	08008b67 	.word	0x08008b67
 8008b44:	08008b6d 	.word	0x08008b6d
 8008b48:	08008b73 	.word	0x08008b73
 8008b4c:	08008b79 	.word	0x08008b79
 8008b50:	08008b7f 	.word	0x08008b7f
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 8008b54:	4b10      	ldr	r3, [pc, #64]	; (8008b98 <reset_cause_get_name+0x80>)
 8008b56:	60fb      	str	r3, [r7, #12]
            break;
 8008b58:	e014      	b.n	8008b84 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 8008b5a:	4b10      	ldr	r3, [pc, #64]	; (8008b9c <reset_cause_get_name+0x84>)
 8008b5c:	60fb      	str	r3, [r7, #12]
            break;
 8008b5e:	e011      	b.n	8008b84 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8008b60:	4b0f      	ldr	r3, [pc, #60]	; (8008ba0 <reset_cause_get_name+0x88>)
 8008b62:	60fb      	str	r3, [r7, #12]
            break;
 8008b64:	e00e      	b.n	8008b84 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 8008b66:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <reset_cause_get_name+0x8c>)
 8008b68:	60fb      	str	r3, [r7, #12]
            break;
 8008b6a:	e00b      	b.n	8008b84 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 8008b6c:	4b0e      	ldr	r3, [pc, #56]	; (8008ba8 <reset_cause_get_name+0x90>)
 8008b6e:	60fb      	str	r3, [r7, #12]
            break;
 8008b70:	e008      	b.n	8008b84 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8008b72:	4b0e      	ldr	r3, [pc, #56]	; (8008bac <reset_cause_get_name+0x94>)
 8008b74:	60fb      	str	r3, [r7, #12]
            break;
 8008b76:	e005      	b.n	8008b84 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8008b78:	4b0d      	ldr	r3, [pc, #52]	; (8008bb0 <reset_cause_get_name+0x98>)
 8008b7a:	60fb      	str	r3, [r7, #12]
            break;
 8008b7c:	e002      	b.n	8008b84 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 8008b7e:	4b0d      	ldr	r3, [pc, #52]	; (8008bb4 <reset_cause_get_name+0x9c>)
 8008b80:	60fb      	str	r3, [r7, #12]
            break;
 8008b82:	bf00      	nop
    }

    return reset_cause_name;
 8008b84:	68fb      	ldr	r3, [r7, #12]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	0800d85c 	.word	0x0800d85c
 8008b98:	0800d860 	.word	0x0800d860
 8008b9c:	0800d868 	.word	0x0800d868
 8008ba0:	0800d878 	.word	0x0800d878
 8008ba4:	0800d890 	.word	0x0800d890
 8008ba8:	0800d8ac 	.word	0x0800d8ac
 8008bac:	0800d8bc 	.word	0x0800d8bc
 8008bb0:	0800d8ec 	.word	0x0800d8ec
 8008bb4:	0800d908 	.word	0x0800d908

08008bb8 <MY_FLASH_EraseSector>:
static uint8_t MY_SectorNum;

//functions definitions
//1. Erase Sector
static void MY_FLASH_EraseSector(void)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8008bbc:	f7f9 f938 	bl	8001e30 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(MY_SectorNum, FLASH_VOLTAGE_RANGE_3);
 8008bc0:	4b04      	ldr	r3, [pc, #16]	; (8008bd4 <MY_FLASH_EraseSector+0x1c>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2102      	movs	r1, #2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7f9 fbf8 	bl	80023bc <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8008bcc:	f7f9 f952 	bl	8001e74 <HAL_FLASH_Lock>
}
 8008bd0:	bf00      	nop
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	2000027c 	.word	0x2000027c

08008bd8 <MY_FLASH_SetSectorAddrs>:

//2. Set Sector Adress
void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	4603      	mov	r3, r0
 8008be0:	6039      	str	r1, [r7, #0]
 8008be2:	71fb      	strb	r3, [r7, #7]
	MY_SectorNum = sector;
 8008be4:	4a05      	ldr	r2, [pc, #20]	; (8008bfc <MY_FLASH_SetSectorAddrs+0x24>)
 8008be6:	79fb      	ldrb	r3, [r7, #7]
 8008be8:	7013      	strb	r3, [r2, #0]
	MY_SectorAddrs = addrs;
 8008bea:	4a05      	ldr	r2, [pc, #20]	; (8008c00 <MY_FLASH_SetSectorAddrs+0x28>)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	6013      	str	r3, [r2, #0]
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	2000027c 	.word	0x2000027c
 8008c00:	20000278 	.word	0x20000278

08008c04 <MY_FLASH_WriteN>:

//3. Write Flash
void MY_FLASH_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8008c04:	b590      	push	{r4, r7, lr}
 8008c06:	b089      	sub	sp, #36	; 0x24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 8008c12:	4b34      	ldr	r3, [pc, #208]	; (8008ce4 <MY_FLASH_WriteN+0xe0>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	4413      	add	r3, r2
 8008c1a:	61fb      	str	r3, [r7, #28]

	//Erase sector before write
	MY_FLASH_EraseSector();
 8008c1c:	f7ff ffcc 	bl	8008bb8 <MY_FLASH_EraseSector>

	//Unlock Flash
	HAL_FLASH_Unlock();
 8008c20:	f7f9 f906 	bl	8001e30 <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 8008c24:	78fb      	ldrb	r3, [r7, #3]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d01e      	beq.n	8008c68 <MY_FLASH_WriteN+0x64>
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d038      	beq.n	8008ca0 <MY_FLASH_WriteN+0x9c>
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d151      	bne.n	8008cd6 <MY_FLASH_WriteN+0xd2>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 8008c32:	2300      	movs	r3, #0
 8008c34:	61bb      	str	r3, [r7, #24]
 8008c36:	e012      	b.n	8008c5e <MY_FLASH_WriteN+0x5a>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	f04f 0400 	mov.w	r4, #0
 8008c46:	461a      	mov	r2, r3
 8008c48:	4623      	mov	r3, r4
 8008c4a:	69f9      	ldr	r1, [r7, #28]
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	f7f9 f889 	bl	8001d64 <HAL_FLASH_Program>
					flashAddress++;
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	3301      	adds	r3, #1
 8008c56:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	61bb      	str	r3, [r7, #24]
 8008c5e:	69ba      	ldr	r2, [r7, #24]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d3e8      	bcc.n	8008c38 <MY_FLASH_WriteN+0x34>
				}
			break;
 8008c66:	e036      	b.n	8008cd6 <MY_FLASH_WriteN+0xd2>

		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 8008c68:	2300      	movs	r3, #0
 8008c6a:	617b      	str	r3, [r7, #20]
 8008c6c:	e013      	b.n	8008c96 <MY_FLASH_WriteN+0x92>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	4413      	add	r3, r2
 8008c76:	881b      	ldrh	r3, [r3, #0]
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	f04f 0400 	mov.w	r4, #0
 8008c7e:	461a      	mov	r2, r3
 8008c80:	4623      	mov	r3, r4
 8008c82:	69f9      	ldr	r1, [r7, #28]
 8008c84:	2001      	movs	r0, #1
 8008c86:	f7f9 f86d 	bl	8001d64 <HAL_FLASH_Program>
					flashAddress+=2;
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	3302      	adds	r3, #2
 8008c8e:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	3301      	adds	r3, #1
 8008c94:	617b      	str	r3, [r7, #20]
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d3e7      	bcc.n	8008c6e <MY_FLASH_WriteN+0x6a>
				}
			break;
 8008c9e:	e01a      	b.n	8008cd6 <MY_FLASH_WriteN+0xd2>

		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	613b      	str	r3, [r7, #16]
 8008ca4:	e012      	b.n	8008ccc <MY_FLASH_WriteN+0xc8>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	4413      	add	r3, r2
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f04f 0400 	mov.w	r4, #0
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	4623      	mov	r3, r4
 8008cb8:	69f9      	ldr	r1, [r7, #28]
 8008cba:	2002      	movs	r0, #2
 8008cbc:	f7f9 f852 	bl	8001d64 <HAL_FLASH_Program>
					flashAddress+=4;
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	613b      	str	r3, [r7, #16]
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d3e8      	bcc.n	8008ca6 <MY_FLASH_WriteN+0xa2>
				}
			break;
 8008cd4:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 8008cd6:	f7f9 f8cd 	bl	8001e74 <HAL_FLASH_Lock>
}
 8008cda:	bf00      	nop
 8008cdc:	3724      	adds	r7, #36	; 0x24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd90      	pop	{r4, r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20000278 	.word	0x20000278

08008ce8 <MY_FLASH_ReadN>:
//4. Read Flash
void MY_FLASH_ReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b089      	sub	sp, #36	; 0x24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 8008cf6:	4b28      	ldr	r3, [pc, #160]	; (8008d98 <MY_FLASH_ReadN+0xb0>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	61fb      	str	r3, [r7, #28]

	switch(dataType)
 8008d00:	78fb      	ldrb	r3, [r7, #3]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d018      	beq.n	8008d38 <MY_FLASH_ReadN+0x50>
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d02b      	beq.n	8008d62 <MY_FLASH_ReadN+0x7a>
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d000      	beq.n	8008d10 <MY_FLASH_ReadN+0x28>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 8008d0e:	e03d      	b.n	8008d8c <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 8008d10:	2300      	movs	r3, #0
 8008d12:	61bb      	str	r3, [r7, #24]
 8008d14:	e00b      	b.n	8008d2e <MY_FLASH_ReadN+0x46>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 8008d16:	69fa      	ldr	r2, [r7, #28]
 8008d18:	68b9      	ldr	r1, [r7, #8]
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	440b      	add	r3, r1
 8008d1e:	7812      	ldrb	r2, [r2, #0]
 8008d20:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	3301      	adds	r3, #1
 8008d26:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	61bb      	str	r3, [r7, #24]
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d3ef      	bcc.n	8008d16 <MY_FLASH_ReadN+0x2e>
			break;
 8008d36:	e029      	b.n	8008d8c <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 8008d38:	2300      	movs	r3, #0
 8008d3a:	617b      	str	r3, [r7, #20]
 8008d3c:	e00c      	b.n	8008d58 <MY_FLASH_ReadN+0x70>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 8008d3e:	69fa      	ldr	r2, [r7, #28]
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	68b9      	ldr	r1, [r7, #8]
 8008d46:	440b      	add	r3, r1
 8008d48:	8812      	ldrh	r2, [r2, #0]
 8008d4a:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	3302      	adds	r3, #2
 8008d50:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	3301      	adds	r3, #1
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	697a      	ldr	r2, [r7, #20]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d3ee      	bcc.n	8008d3e <MY_FLASH_ReadN+0x56>
			break;
 8008d60:	e014      	b.n	8008d8c <MY_FLASH_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 8008d62:	2300      	movs	r3, #0
 8008d64:	613b      	str	r3, [r7, #16]
 8008d66:	e00c      	b.n	8008d82 <MY_FLASH_ReadN+0x9a>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 8008d68:	69fa      	ldr	r2, [r7, #28]
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	440b      	add	r3, r1
 8008d72:	6812      	ldr	r2, [r2, #0]
 8008d74:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	3304      	adds	r3, #4
 8008d7a:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	613b      	str	r3, [r7, #16]
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d3ee      	bcc.n	8008d68 <MY_FLASH_ReadN+0x80>
			break;
 8008d8a:	bf00      	nop
}
 8008d8c:	bf00      	nop
 8008d8e:	3724      	adds	r7, #36	; 0x24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	20000278 	.word	0x20000278

08008d9c <LSM6DSL_Write>:

stmdev_ctx_t dev_ctx;
char data[100];

int32_t LSM6DSL_Write(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b088      	sub	sp, #32
 8008da0:	af04      	add	r7, sp, #16
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	607a      	str	r2, [r7, #4]
 8008da6:	461a      	mov	r2, r3
 8008da8:	460b      	mov	r3, r1
 8008daa:	72fb      	strb	r3, [r7, #11]
 8008dac:	4613      	mov	r3, r2
 8008dae:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_H, Reg, I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
 8008db0:	7afb      	ldrb	r3, [r7, #11]
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008db8:	9302      	str	r3, [sp, #8]
 8008dba:	893b      	ldrh	r3, [r7, #8]
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	21d7      	movs	r1, #215	; 0xd7
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f7fa f9b6 	bl	8003138 <HAL_I2C_Mem_Write>
    return 0;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <LSM6DSL_Read>:

int32_t LSM6DSL_Read(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b088      	sub	sp, #32
 8008dda:	af04      	add	r7, sp, #16
 8008ddc:	60f8      	str	r0, [r7, #12]
 8008dde:	607a      	str	r2, [r7, #4]
 8008de0:	461a      	mov	r2, r3
 8008de2:	460b      	mov	r3, r1
 8008de4:	72fb      	strb	r3, [r7, #11]
 8008de6:	4613      	mov	r3, r2
 8008de8:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_H, Reg, I2C_MEMADD_SIZE_8BIT, Bufp, len, 1000);
 8008dea:	7afb      	ldrb	r3, [r7, #11]
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008df2:	9302      	str	r3, [sp, #8]
 8008df4:	893b      	ldrh	r3, [r7, #8]
 8008df6:	9301      	str	r3, [sp, #4]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	21d7      	movs	r1, #215	; 0xd7
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f7fa fa9f 	bl	8003344 <HAL_I2C_Mem_Read>
	return 0;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <LSM6DSL_Init>:

void LSM6DSL_Init (void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
	/* Initialize mems driver interface */
	dev_ctx.write_reg = LSM6DSL_Write;
 8008e14:	4b21      	ldr	r3, [pc, #132]	; (8008e9c <LSM6DSL_Init+0x8c>)
 8008e16:	4a22      	ldr	r2, [pc, #136]	; (8008ea0 <LSM6DSL_Init+0x90>)
 8008e18:	601a      	str	r2, [r3, #0]
	dev_ctx.read_reg = LSM6DSL_Read;
 8008e1a:	4b20      	ldr	r3, [pc, #128]	; (8008e9c <LSM6DSL_Init+0x8c>)
 8008e1c:	4a21      	ldr	r2, [pc, #132]	; (8008ea4 <LSM6DSL_Init+0x94>)
 8008e1e:	605a      	str	r2, [r3, #4]
	dev_ctx.handle = &hi2c1;
 8008e20:	4b1e      	ldr	r3, [pc, #120]	; (8008e9c <LSM6DSL_Init+0x8c>)
 8008e22:	4a21      	ldr	r2, [pc, #132]	; (8008ea8 <LSM6DSL_Init+0x98>)
 8008e24:	609a      	str	r2, [r3, #8]

	/* Check device ID */
	whoamI = 0;
 8008e26:	4b21      	ldr	r3, [pc, #132]	; (8008eac <LSM6DSL_Init+0x9c>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	701a      	strb	r2, [r3, #0]
	lsm6dsl_device_id_get(&dev_ctx, &whoamI);
 8008e2c:	491f      	ldr	r1, [pc, #124]	; (8008eac <LSM6DSL_Init+0x9c>)
 8008e2e:	481b      	ldr	r0, [pc, #108]	; (8008e9c <LSM6DSL_Init+0x8c>)
 8008e30:	f000 fc7a 	bl	8009728 <lsm6dsl_device_id_get>
	if ( whoamI != LSM6DSL_ID )
 8008e34:	4b1d      	ldr	r3, [pc, #116]	; (8008eac <LSM6DSL_Init+0x9c>)
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	2b6a      	cmp	r3, #106	; 0x6a
 8008e3a:	d000      	beq.n	8008e3e <LSM6DSL_Init+0x2e>
	{
		while(1); /* device not found */
 8008e3c:	e7fe      	b.n	8008e3c <LSM6DSL_Init+0x2c>
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8008e3e:	2101      	movs	r1, #1
 8008e40:	4816      	ldr	r0, [pc, #88]	; (8008e9c <LSM6DSL_Init+0x8c>)
 8008e42:	f000 fc82 	bl	800974a <lsm6dsl_reset_set>
	do {
	lsm6dsl_reset_get(&dev_ctx, &rst);
 8008e46:	491a      	ldr	r1, [pc, #104]	; (8008eb0 <LSM6DSL_Init+0xa0>)
 8008e48:	4814      	ldr	r0, [pc, #80]	; (8008e9c <LSM6DSL_Init+0x8c>)
 8008e4a:	f000 fca4 	bl	8009796 <lsm6dsl_reset_get>
	} while (rst);
 8008e4e:	4b18      	ldr	r3, [pc, #96]	; (8008eb0 <LSM6DSL_Init+0xa0>)
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1f7      	bne.n	8008e46 <LSM6DSL_Init+0x36>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8008e56:	2101      	movs	r1, #1
 8008e58:	4810      	ldr	r0, [pc, #64]	; (8008e9c <LSM6DSL_Init+0x8c>)
 8008e5a:	f000 fc05 	bl	8009668 <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx, LSM6DSL_XL_ODR_12Hz5);
 8008e5e:	2101      	movs	r1, #1
 8008e60:	480e      	ldr	r0, [pc, #56]	; (8008e9c <LSM6DSL_Init+0x8c>)
 8008e62:	f000 fb8f 	bl	8009584 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx, LSM6DSL_GY_ODR_12Hz5);
 8008e66:	2101      	movs	r1, #1
 8008e68:	480c      	ldr	r0, [pc, #48]	; (8008e9c <LSM6DSL_Init+0x8c>)
 8008e6a:	f000 fbd7 	bl	800961c <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx, LSM6DSL_8g);
 8008e6e:	2103      	movs	r1, #3
 8008e70:	480a      	ldr	r0, [pc, #40]	; (8008e9c <LSM6DSL_Init+0x8c>)
 8008e72:	f000 fb61 	bl	8009538 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx, LSM6DSL_500dps);
 8008e76:	2102      	movs	r1, #2
 8008e78:	4808      	ldr	r0, [pc, #32]	; (8008e9c <LSM6DSL_Init+0x8c>)
 8008e7a:	f000 fba9 	bl	80095d0 <lsm6dsl_gy_full_scale_set>

	/* Accelerometer - analog filter */
	lsm6dsl_xl_filter_analog_set(&dev_ctx, LSM6DSL_XL_ANA_BW_400Hz);
 8008e7e:	2101      	movs	r1, #1
 8008e80:	4806      	ldr	r0, [pc, #24]	; (8008e9c <LSM6DSL_Init+0x8c>)
 8008e82:	f000 fca1 	bl	80097c8 <lsm6dsl_xl_filter_analog_set>

	/* Accelerometer - LPF1 + LPF2 path */
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 8008e86:	2111      	movs	r1, #17
 8008e88:	4804      	ldr	r0, [pc, #16]	; (8008e9c <LSM6DSL_Init+0x8c>)
 8008e8a:	f000 fcc3 	bl	8009814 <lsm6dsl_xl_lp2_bandwidth_set>

	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx, LSM6DSL_HP_260mHz_LP1_STRONG);
 8008e8e:	21a8      	movs	r1, #168	; 0xa8
 8008e90:	4802      	ldr	r0, [pc, #8]	; (8008e9c <LSM6DSL_Init+0x8c>)
 8008e92:	f000 fcf6 	bl	8009882 <lsm6dsl_gy_band_pass_set>
}
 8008e96:	bf00      	nop
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	200005c8 	.word	0x200005c8
 8008ea0:	08008d9d 	.word	0x08008d9d
 8008ea4:	08008dd7 	.word	0x08008dd7
 8008ea8:	20000698 	.word	0x20000698
 8008eac:	2000058c 	.word	0x2000058c
 8008eb0:	200005a8 	.word	0x200005a8

08008eb4 <LSM6DSL_Per_Sample_Init>:

void LSM6DSL_Per_Sample_Init(void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
	//LSM6DSL_ACC_Set_INT1_DRDY
	//LSM6DSL_GYRO_Set_INT1_DRDY

	lsm6dsl_pin_polarity_set(&dev_ctx, LSM6DSL_ACTIVE_LOW);
 8008eba:	2101      	movs	r1, #1
 8008ebc:	480d      	ldr	r0, [pc, #52]	; (8008ef4 <LSM6DSL_Per_Sample_Init+0x40>)
 8008ebe:	f000 ff87 	bl	8009dd0 <lsm6dsl_pin_polarity_set>

	lsm6dsl_data_ready_mode_set(&dev_ctx, LSM6DSL_DRDY_PULSED);
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	480b      	ldr	r0, [pc, #44]	; (8008ef4 <LSM6DSL_Per_Sample_Init+0x40>)
 8008ec6:	f000 fc09 	bl	80096dc <lsm6dsl_data_ready_mode_set>

	lsm6dsl_int1_route_t reg;

	lsm6dsl_pin_int1_route_get(&dev_ctx, &reg);
 8008eca:	1d3b      	adds	r3, r7, #4
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4809      	ldr	r0, [pc, #36]	; (8008ef4 <LSM6DSL_Per_Sample_Init+0x40>)
 8008ed0:	f000 fea8 	bl	8009c24 <lsm6dsl_pin_int1_route_get>

	reg.int1_drdy_xl = PROPERTY_ENABLE;
 8008ed4:	793b      	ldrb	r3, [r7, #4]
 8008ed6:	f043 0301 	orr.w	r3, r3, #1
 8008eda:	713b      	strb	r3, [r7, #4]
	reg.int1_drdy_g = PROPERTY_ENABLE;
 8008edc:	793b      	ldrb	r3, [r7, #4]
 8008ede:	f043 0302 	orr.w	r3, r3, #2
 8008ee2:	713b      	strb	r3, [r7, #4]

	lsm6dsl_pin_int1_route_set(&dev_ctx, reg);
 8008ee4:	6879      	ldr	r1, [r7, #4]
 8008ee6:	4803      	ldr	r0, [pc, #12]	; (8008ef4 <LSM6DSL_Per_Sample_Init+0x40>)
 8008ee8:	f000 fd39 	bl	800995e <lsm6dsl_pin_int1_route_set>
}
 8008eec:	bf00      	nop
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	200005c8 	.word	0x200005c8

08008ef8 <LSM6DSL_Per_Sample_Disable>:
	  //HAL_UART_Transmit( &huart2, s_uart_buffer._p_tx_buffer, strlen( (char*)s_uart_buffer._p_tx_buffer ), 1000 );
	}
}

void LSM6DSL_Per_Sample_Disable (void)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
	lsm6dsl_int1_route_t reg;

	lsm6dsl_pin_int1_route_get(&dev_ctx, &reg);
 8008efe:	1d3b      	adds	r3, r7, #4
 8008f00:	4619      	mov	r1, r3
 8008f02:	4809      	ldr	r0, [pc, #36]	; (8008f28 <LSM6DSL_Per_Sample_Disable+0x30>)
 8008f04:	f000 fe8e 	bl	8009c24 <lsm6dsl_pin_int1_route_get>

	reg.int1_drdy_xl = PROPERTY_DISABLE;
 8008f08:	793b      	ldrb	r3, [r7, #4]
 8008f0a:	f36f 0300 	bfc	r3, #0, #1
 8008f0e:	713b      	strb	r3, [r7, #4]
	reg.int1_drdy_g = PROPERTY_DISABLE;
 8008f10:	793b      	ldrb	r3, [r7, #4]
 8008f12:	f36f 0341 	bfc	r3, #1, #1
 8008f16:	713b      	strb	r3, [r7, #4]

	lsm6dsl_pin_int1_route_set(&dev_ctx, reg);
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	4803      	ldr	r0, [pc, #12]	; (8008f28 <LSM6DSL_Per_Sample_Disable+0x30>)
 8008f1c:	f000 fd1f 	bl	800995e <lsm6dsl_pin_int1_route_set>
}
 8008f20:	bf00      	nop
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	200005c8 	.word	0x200005c8

08008f2c <LSM6DSL_FIFO_Init>:

void LSM6DSL_FIFO_Init(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
	lsm6dsl_pin_polarity_set(&dev_ctx, LSM6DSL_ACTIVE_LOW);
 8008f32:	2101      	movs	r1, #1
 8008f34:	4824      	ldr	r0, [pc, #144]	; (8008fc8 <LSM6DSL_FIFO_Init+0x9c>)
 8008f36:	f000 ff4b 	bl	8009dd0 <lsm6dsl_pin_polarity_set>

	/* Set acc&gyro FIFO decimation */
	lsm6dsl_dec_fifo_xl_t valXl;
	lsm6dsl_dec_fifo_gyro_t valGy;

	lsm6dsl_fifo_xl_batch_get(&dev_ctx, &valXl);
 8008f3a:	f107 030f 	add.w	r3, r7, #15
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4821      	ldr	r0, [pc, #132]	; (8008fc8 <LSM6DSL_FIFO_Init+0x9c>)
 8008f42:	f001 f81b 	bl	8009f7c <lsm6dsl_fifo_xl_batch_get>
	valXl = LSM6DSL_FIFO_XL_NO_DEC;
 8008f46:	2301      	movs	r3, #1
 8008f48:	73fb      	strb	r3, [r7, #15]
	lsm6dsl_fifo_xl_batch_set(&dev_ctx, valXl);
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	481e      	ldr	r0, [pc, #120]	; (8008fc8 <LSM6DSL_FIFO_Init+0x9c>)
 8008f50:	f000 ffee 	bl	8009f30 <lsm6dsl_fifo_xl_batch_set>

	lsm6dsl_fifo_gy_batch_get(&dev_ctx, &valGy);
 8008f54:	f107 030e 	add.w	r3, r7, #14
 8008f58:	4619      	mov	r1, r3
 8008f5a:	481b      	ldr	r0, [pc, #108]	; (8008fc8 <LSM6DSL_FIFO_Init+0x9c>)
 8008f5c:	f001 f884 	bl	800a068 <lsm6dsl_fifo_gy_batch_get>
	valGy = LSM6DSL_FIFO_GY_NO_DEC;
 8008f60:	2301      	movs	r3, #1
 8008f62:	73bb      	strb	r3, [r7, #14]
	lsm6dsl_fifo_gy_batch_set(&dev_ctx, valGy);
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	4619      	mov	r1, r3
 8008f68:	4817      	ldr	r0, [pc, #92]	; (8008fc8 <LSM6DSL_FIFO_Init+0x9c>)
 8008f6a:	f001 f857 	bl	800a01c <lsm6dsl_fifo_gy_batch_set>

	/* Set FIFO ODR value */
	lsm6dsl_odr_fifo_t valOdr;
	lsm6dsl_fifo_data_rate_get(&dev_ctx, &valOdr);
 8008f6e:	f107 030d 	add.w	r3, r7, #13
 8008f72:	4619      	mov	r1, r3
 8008f74:	4814      	ldr	r0, [pc, #80]	; (8008fc8 <LSM6DSL_FIFO_Init+0x9c>)
 8008f76:	f001 f955 	bl	800a224 <lsm6dsl_fifo_data_rate_get>
	valOdr = LSM6DSL_FIFO_12Hz5;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	737b      	strb	r3, [r7, #13]
	lsm6dsl_fifo_data_rate_set(&dev_ctx, valOdr);
 8008f7e:	7b7b      	ldrb	r3, [r7, #13]
 8008f80:	4619      	mov	r1, r3
 8008f82:	4811      	ldr	r0, [pc, #68]	; (8008fc8 <LSM6DSL_FIFO_Init+0x9c>)
 8008f84:	f001 f928 	bl	800a1d8 <lsm6dsl_fifo_data_rate_set>

	/* Set FIFO_FTH on INT1 */
	lsm6dsl_int1_route_t reg;
	lsm6dsl_pin_int1_route_get(&dev_ctx, &reg);
 8008f88:	f107 0308 	add.w	r3, r7, #8
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	480e      	ldr	r0, [pc, #56]	; (8008fc8 <LSM6DSL_FIFO_Init+0x9c>)
 8008f90:	f000 fe48 	bl	8009c24 <lsm6dsl_pin_int1_route_get>
	//reg.int1_full_flag = PROPERTY_ENABLE;
	reg.int1_fth = PROPERTY_ENABLE;
 8008f94:	7a3b      	ldrb	r3, [r7, #8]
 8008f96:	f043 0308 	orr.w	r3, r3, #8
 8008f9a:	723b      	strb	r3, [r7, #8]
	lsm6dsl_pin_int1_route_set(&dev_ctx, reg);
 8008f9c:	68b9      	ldr	r1, [r7, #8]
 8008f9e:	480a      	ldr	r0, [pc, #40]	; (8008fc8 <LSM6DSL_FIFO_Init+0x9c>)
 8008fa0:	f000 fcdd 	bl	800995e <lsm6dsl_pin_int1_route_set>

	/* Set FIFO watermark */
	uint16_t valWtm;
	lsm6dsl_fifo_watermark_get(&dev_ctx, &valWtm);
 8008fa4:	1dbb      	adds	r3, r7, #6
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	4807      	ldr	r0, [pc, #28]	; (8008fc8 <LSM6DSL_FIFO_Init+0x9c>)
 8008faa:	f000 ff6d 	bl	8009e88 <lsm6dsl_fifo_watermark_get>
	valWtm = ACC_AND_GYRO_FIFO_WATERMARK;
 8008fae:	233c      	movs	r3, #60	; 0x3c
 8008fb0:	80fb      	strh	r3, [r7, #6]
	lsm6dsl_fifo_watermark_set(&dev_ctx, valWtm);
 8008fb2:	88fb      	ldrh	r3, [r7, #6]
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4804      	ldr	r0, [pc, #16]	; (8008fc8 <LSM6DSL_FIFO_Init+0x9c>)
 8008fb8:	f000 ff30 	bl	8009e1c <lsm6dsl_fifo_watermark_set>
	/*uint8_t valStopOnWtm;
	lsm6dsl_fifo_stop_on_wtm_get(&dev_ctx, &valStopOnWtm);
	valStopOnWtm = PROPERTY_ENABLE;
	lsm6dsl_fifo_stop_on_wtm_set(&dev_ctx, valStopOnWtm);*/

	LSM6DSL_FIFO_Set_FIFO_Mode();
 8008fbc:	f000 fa1a 	bl	80093f4 <LSM6DSL_FIFO_Set_FIFO_Mode>
}
 8008fc0:	bf00      	nop
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	200005c8 	.word	0x200005c8

08008fcc <LSM6DSL_FIFO_Process>:

void LSM6DSL_FIFO_Process(void)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	af00      	add	r7, sp, #0
	LSM6DSL_FIFO_Read_All_Data();
 8008fd0:	f000 f80a 	bl	8008fe8 <LSM6DSL_FIFO_Read_All_Data>
}
 8008fd4:	bf00      	nop
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <LSM6DSL_FIFO_Disable>:

void LSM6DSL_FIFO_Disable(void)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	af00      	add	r7, sp, #0
	LSM6DSL_FIFO_Interrupt_Disable();
 8008fdc:	f000 fa36 	bl	800944c <LSM6DSL_FIFO_Interrupt_Disable>
	LSM6DSL_FIFO_Set_Bypass_Mode();
 8008fe0:	f000 fa1e 	bl	8009420 <LSM6DSL_FIFO_Set_Bypass_Mode>
}
 8008fe4:	bf00      	nop
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <LSM6DSL_FIFO_Read_All_Data>:

void LSM6DSL_FIFO_Read_All_Data(void)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
	uint16_t unread_fifo_samples = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	807b      	strh	r3, [r7, #2]

	for(int i = 0; i < 3; i++)
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60fb      	str	r3, [r7, #12]
 8008ff6:	e010      	b.n	800901a <LSM6DSL_FIFO_Read_All_Data+0x32>
	{
		acceleration_g_Sum[i] = 0;
 8008ff8:	4a38      	ldr	r2, [pc, #224]	; (80090dc <LSM6DSL_FIFO_Read_All_Data+0xf4>)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	f04f 0200 	mov.w	r2, #0
 8009004:	601a      	str	r2, [r3, #0]
		angular_rate_dps_Sum[i] = 0;
 8009006:	4a36      	ldr	r2, [pc, #216]	; (80090e0 <LSM6DSL_FIFO_Read_All_Data+0xf8>)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4413      	add	r3, r2
 800900e:	f04f 0200 	mov.w	r2, #0
 8009012:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3301      	adds	r3, #1
 8009018:	60fb      	str	r3, [r7, #12]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2b02      	cmp	r3, #2
 800901e:	ddeb      	ble.n	8008ff8 <LSM6DSL_FIFO_Read_All_Data+0x10>
	}

	/* Get num of unread FIFO samples before reading data */
	lsm6dsl_fifo_data_level_get(&dev_ctx, &unread_fifo_samples);
 8009020:	1cbb      	adds	r3, r7, #2
 8009022:	4619      	mov	r1, r3
 8009024:	482f      	ldr	r0, [pc, #188]	; (80090e4 <LSM6DSL_FIFO_Read_All_Data+0xfc>)
 8009026:	f000 ff59 	bl	8009edc <lsm6dsl_fifo_data_level_get>

	sprintf(data, "Number of unread FIFO samples (GYRO+ACC): %d\n", unread_fifo_samples / ACC_SINGLE_FIFO_SAMPLE);
 800902a:	887b      	ldrh	r3, [r7, #2]
 800902c:	4a2e      	ldr	r2, [pc, #184]	; (80090e8 <LSM6DSL_FIFO_Read_All_Data+0x100>)
 800902e:	fba2 2303 	umull	r2, r3, r2, r3
 8009032:	085b      	lsrs	r3, r3, #1
 8009034:	b29b      	uxth	r3, r3
 8009036:	461a      	mov	r2, r3
 8009038:	492c      	ldr	r1, [pc, #176]	; (80090ec <LSM6DSL_FIFO_Read_All_Data+0x104>)
 800903a:	482d      	ldr	r0, [pc, #180]	; (80090f0 <LSM6DSL_FIFO_Read_All_Data+0x108>)
 800903c:	f002 fcec 	bl	800ba18 <siprintf>
	uart_print(data);
 8009040:	482b      	ldr	r0, [pc, #172]	; (80090f0 <LSM6DSL_FIFO_Read_All_Data+0x108>)
 8009042:	f001 fd47 	bl	800aad4 <uart_print>

	while (unread_fifo_samples > 0)
 8009046:	e041      	b.n	80090cc <LSM6DSL_FIFO_Read_All_Data+0xe4>
	{
		if ((unread_fifo_samples/ACC_AND_GYRO_SINGLE_FIFO_SAMPLE) >= SAMPLES_TO_READ) 		// reading 10 GYRO & ACC samples each
 8009048:	887b      	ldrh	r3, [r7, #2]
 800904a:	2b3b      	cmp	r3, #59	; 0x3b
 800904c:	d91a      	bls.n	8009084 <LSM6DSL_FIFO_Read_All_Data+0x9c>
		{
			lsm6dsl_fifo_raw_data_get(&dev_ctx, data_raw_acc_gy_Buf->u8bit, ACC_GYRO_BUF_BYTES_SIZE);
 800904e:	2278      	movs	r2, #120	; 0x78
 8009050:	4928      	ldr	r1, [pc, #160]	; (80090f4 <LSM6DSL_FIFO_Read_All_Data+0x10c>)
 8009052:	4824      	ldr	r0, [pc, #144]	; (80090e4 <LSM6DSL_FIFO_Read_All_Data+0xfc>)
 8009054:	f000 fb2e 	bl	80096b4 <lsm6dsl_fifo_raw_data_get>
			for (int i = 0; i < ACC_AND_GYRO_FIFO_WATERMARK; i = i + ACC_AND_GYRO_SINGLE_FIFO_SAMPLE)
 8009058:	2300      	movs	r3, #0
 800905a:	60bb      	str	r3, [r7, #8]
 800905c:	e007      	b.n	800906e <LSM6DSL_FIFO_Read_All_Data+0x86>
			{
				LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE(i);
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	b29b      	uxth	r3, r3
 8009062:	4618      	mov	r0, r3
 8009064:	f000 f848 	bl	80090f8 <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE>
			for (int i = 0; i < ACC_AND_GYRO_FIFO_WATERMARK; i = i + ACC_AND_GYRO_SINGLE_FIFO_SAMPLE)
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	3306      	adds	r3, #6
 800906c:	60bb      	str	r3, [r7, #8]
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2b3b      	cmp	r3, #59	; 0x3b
 8009072:	ddf4      	ble.n	800905e <LSM6DSL_FIFO_Read_All_Data+0x76>
			}
			LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print(SAMPLES_TO_READ);
 8009074:	200a      	movs	r0, #10
 8009076:	f000 f8b5 	bl	80091e4 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print>
			unread_fifo_samples -= ACC_AND_GYRO_FIFO_WATERMARK;
 800907a:	887b      	ldrh	r3, [r7, #2]
 800907c:	3b3c      	subs	r3, #60	; 0x3c
 800907e:	b29b      	uxth	r3, r3
 8009080:	807b      	strh	r3, [r7, #2]
 8009082:	e023      	b.n	80090cc <LSM6DSL_FIFO_Read_All_Data+0xe4>
		}
		else 																				//reading less than 10 GYRO & ACC samples each
		{ 	//should be an if condition to ensure that unread_fifo_samples is grater than 6
			lsm6dsl_fifo_raw_data_get(&dev_ctx, data_raw_acc_gy_Buf->u8bit, unread_fifo_samples * FIFO_SAMPLE_TO_BYTE_RATIO);
 8009084:	887b      	ldrh	r3, [r7, #2]
 8009086:	b2db      	uxtb	r3, r3
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	b2db      	uxtb	r3, r3
 800908c:	461a      	mov	r2, r3
 800908e:	4919      	ldr	r1, [pc, #100]	; (80090f4 <LSM6DSL_FIFO_Read_All_Data+0x10c>)
 8009090:	4814      	ldr	r0, [pc, #80]	; (80090e4 <LSM6DSL_FIFO_Read_All_Data+0xfc>)
 8009092:	f000 fb0f 	bl	80096b4 <lsm6dsl_fifo_raw_data_get>
			for (int i = 0; i < unread_fifo_samples; i = i + ACC_AND_GYRO_SINGLE_FIFO_SAMPLE)
 8009096:	2300      	movs	r3, #0
 8009098:	607b      	str	r3, [r7, #4]
 800909a:	e007      	b.n	80090ac <LSM6DSL_FIFO_Read_All_Data+0xc4>
			{
				LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE(i);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	b29b      	uxth	r3, r3
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 f829 	bl	80090f8 <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE>
			for (int i = 0; i < unread_fifo_samples; i = i + ACC_AND_GYRO_SINGLE_FIFO_SAMPLE)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	3306      	adds	r3, #6
 80090aa:	607b      	str	r3, [r7, #4]
 80090ac:	887b      	ldrh	r3, [r7, #2]
 80090ae:	461a      	mov	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4293      	cmp	r3, r2
 80090b4:	dbf2      	blt.n	800909c <LSM6DSL_FIFO_Read_All_Data+0xb4>
			}
			LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print(unread_fifo_samples/ACC_AND_GYRO_SINGLE_FIFO_SAMPLE);
 80090b6:	887b      	ldrh	r3, [r7, #2]
 80090b8:	4a0b      	ldr	r2, [pc, #44]	; (80090e8 <LSM6DSL_FIFO_Read_All_Data+0x100>)
 80090ba:	fba2 2303 	umull	r2, r3, r2, r3
 80090be:	089b      	lsrs	r3, r3, #2
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 f88e 	bl	80091e4 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print>
			unread_fifo_samples = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	807b      	strh	r3, [r7, #2]
	while (unread_fifo_samples > 0)
 80090cc:	887b      	ldrh	r3, [r7, #2]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1ba      	bne.n	8009048 <LSM6DSL_FIFO_Read_All_Data+0x60>
		}
	}
}
 80090d2:	bf00      	nop
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	20000590 	.word	0x20000590
 80090e0:	20000580 	.word	0x20000580
 80090e4:	200005c8 	.word	0x200005c8
 80090e8:	aaaaaaab 	.word	0xaaaaaaab
 80090ec:	0800d970 	.word	0x0800d970
 80090f0:	200005d4 	.word	0x200005d4
 80090f4:	200002b0 	.word	0x200002b0

080090f8 <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE>:
void LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE(uint16_t SampleIndex)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	80fb      	strh	r3, [r7, #6]
	angular_rate_dps_Sum[0] += data_raw_acc_gy_Buf->i16bit[SampleIndex];
 8009102:	4b35      	ldr	r3, [pc, #212]	; (80091d8 <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe0>)
 8009104:	ed93 7a00 	vldr	s14, [r3]
 8009108:	88fb      	ldrh	r3, [r7, #6]
 800910a:	4a34      	ldr	r2, [pc, #208]	; (80091dc <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe4>)
 800910c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009110:	ee07 3a90 	vmov	s15, r3
 8009114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800911c:	4b2e      	ldr	r3, [pc, #184]	; (80091d8 <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe0>)
 800911e:	edc3 7a00 	vstr	s15, [r3]
	angular_rate_dps_Sum[1] += data_raw_acc_gy_Buf->i16bit[SampleIndex + 1];
 8009122:	4b2d      	ldr	r3, [pc, #180]	; (80091d8 <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe0>)
 8009124:	ed93 7a01 	vldr	s14, [r3, #4]
 8009128:	88fb      	ldrh	r3, [r7, #6]
 800912a:	3301      	adds	r3, #1
 800912c:	4a2b      	ldr	r2, [pc, #172]	; (80091dc <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe4>)
 800912e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009132:	ee07 3a90 	vmov	s15, r3
 8009136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800913a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800913e:	4b26      	ldr	r3, [pc, #152]	; (80091d8 <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe0>)
 8009140:	edc3 7a01 	vstr	s15, [r3, #4]
	angular_rate_dps_Sum[2] += data_raw_acc_gy_Buf->i16bit[SampleIndex + 2];
 8009144:	4b24      	ldr	r3, [pc, #144]	; (80091d8 <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe0>)
 8009146:	ed93 7a02 	vldr	s14, [r3, #8]
 800914a:	88fb      	ldrh	r3, [r7, #6]
 800914c:	3302      	adds	r3, #2
 800914e:	4a23      	ldr	r2, [pc, #140]	; (80091dc <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe4>)
 8009150:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009154:	ee07 3a90 	vmov	s15, r3
 8009158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800915c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009160:	4b1d      	ldr	r3, [pc, #116]	; (80091d8 <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe0>)
 8009162:	edc3 7a02 	vstr	s15, [r3, #8]

	acceleration_g_Sum[0] += data_raw_acc_gy_Buf->i16bit[SampleIndex + 3];
 8009166:	4b1e      	ldr	r3, [pc, #120]	; (80091e0 <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe8>)
 8009168:	ed93 7a00 	vldr	s14, [r3]
 800916c:	88fb      	ldrh	r3, [r7, #6]
 800916e:	3303      	adds	r3, #3
 8009170:	4a1a      	ldr	r2, [pc, #104]	; (80091dc <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe4>)
 8009172:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009176:	ee07 3a90 	vmov	s15, r3
 800917a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800917e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009182:	4b17      	ldr	r3, [pc, #92]	; (80091e0 <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe8>)
 8009184:	edc3 7a00 	vstr	s15, [r3]
	acceleration_g_Sum[1] += data_raw_acc_gy_Buf->i16bit[SampleIndex + 4];
 8009188:	4b15      	ldr	r3, [pc, #84]	; (80091e0 <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe8>)
 800918a:	ed93 7a01 	vldr	s14, [r3, #4]
 800918e:	88fb      	ldrh	r3, [r7, #6]
 8009190:	3304      	adds	r3, #4
 8009192:	4a12      	ldr	r2, [pc, #72]	; (80091dc <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe4>)
 8009194:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009198:	ee07 3a90 	vmov	s15, r3
 800919c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091a4:	4b0e      	ldr	r3, [pc, #56]	; (80091e0 <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe8>)
 80091a6:	edc3 7a01 	vstr	s15, [r3, #4]
	acceleration_g_Sum[2] += data_raw_acc_gy_Buf->i16bit[SampleIndex + 5];
 80091aa:	4b0d      	ldr	r3, [pc, #52]	; (80091e0 <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe8>)
 80091ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80091b0:	88fb      	ldrh	r3, [r7, #6]
 80091b2:	3305      	adds	r3, #5
 80091b4:	4a09      	ldr	r2, [pc, #36]	; (80091dc <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe4>)
 80091b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80091ba:	ee07 3a90 	vmov	s15, r3
 80091be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091c6:	4b06      	ldr	r3, [pc, #24]	; (80091e0 <LSM6DSL_FIFO_Acc_And_Gyro_Read_Single_SAMPLE+0xe8>)
 80091c8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	20000580 	.word	0x20000580
 80091dc:	200002b0 	.word	0x200002b0
 80091e0:	20000590 	.word	0x20000590

080091e4 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print>:

void LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print(uint16_t divider)
{
 80091e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80091e8:	b086      	sub	sp, #24
 80091ea:	af04      	add	r7, sp, #16
 80091ec:	4603      	mov	r3, r0
 80091ee:	80fb      	strh	r3, [r7, #6]
	sprintf(data, "%d samples average:\n", divider);
 80091f0:	88fb      	ldrh	r3, [r7, #6]
 80091f2:	461a      	mov	r2, r3
 80091f4:	4978      	ldr	r1, [pc, #480]	; (80093d8 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x1f4>)
 80091f6:	4879      	ldr	r0, [pc, #484]	; (80093dc <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x1f8>)
 80091f8:	f002 fc0e 	bl	800ba18 <siprintf>
	uart_print(data);
 80091fc:	4877      	ldr	r0, [pc, #476]	; (80093dc <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x1f8>)
 80091fe:	f001 fc69 	bl	800aad4 <uart_print>

	acceleration_g_Sum[0] = lsm6dsl_from_fs8g_to_mg( acceleration_g_Sum[0] / divider )/1000;
 8009202:	4b77      	ldr	r3, [pc, #476]	; (80093e0 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x1fc>)
 8009204:	edd3 6a00 	vldr	s13, [r3]
 8009208:	88fb      	ldrh	r3, [r7, #6]
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800921a:	ee17 3a90 	vmov	r3, s15
 800921e:	b21b      	sxth	r3, r3
 8009220:	4618      	mov	r0, r3
 8009222:	f000 f959 	bl	80094d8 <lsm6dsl_from_fs8g_to_mg>
 8009226:	eef0 6a40 	vmov.f32	s13, s0
 800922a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80093e4 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x200>
 800922e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009232:	4b6b      	ldr	r3, [pc, #428]	; (80093e0 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x1fc>)
 8009234:	edc3 7a00 	vstr	s15, [r3]
	acceleration_g_Sum[1] = lsm6dsl_from_fs8g_to_mg( acceleration_g_Sum[1] / divider )/1000;
 8009238:	4b69      	ldr	r3, [pc, #420]	; (80093e0 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x1fc>)
 800923a:	edd3 6a01 	vldr	s13, [r3, #4]
 800923e:	88fb      	ldrh	r3, [r7, #6]
 8009240:	ee07 3a90 	vmov	s15, r3
 8009244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800924c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009250:	ee17 3a90 	vmov	r3, s15
 8009254:	b21b      	sxth	r3, r3
 8009256:	4618      	mov	r0, r3
 8009258:	f000 f93e 	bl	80094d8 <lsm6dsl_from_fs8g_to_mg>
 800925c:	eef0 6a40 	vmov.f32	s13, s0
 8009260:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80093e4 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x200>
 8009264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009268:	4b5d      	ldr	r3, [pc, #372]	; (80093e0 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x1fc>)
 800926a:	edc3 7a01 	vstr	s15, [r3, #4]
	acceleration_g_Sum[2] = lsm6dsl_from_fs8g_to_mg( acceleration_g_Sum[2] / divider )/1000;
 800926e:	4b5c      	ldr	r3, [pc, #368]	; (80093e0 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x1fc>)
 8009270:	edd3 6a02 	vldr	s13, [r3, #8]
 8009274:	88fb      	ldrh	r3, [r7, #6]
 8009276:	ee07 3a90 	vmov	s15, r3
 800927a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800927e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009282:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009286:	ee17 3a90 	vmov	r3, s15
 800928a:	b21b      	sxth	r3, r3
 800928c:	4618      	mov	r0, r3
 800928e:	f000 f923 	bl	80094d8 <lsm6dsl_from_fs8g_to_mg>
 8009292:	eef0 6a40 	vmov.f32	s13, s0
 8009296:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80093e4 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x200>
 800929a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800929e:	4b50      	ldr	r3, [pc, #320]	; (80093e0 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x1fc>)
 80092a0:	edc3 7a02 	vstr	s15, [r3, #8]

	sprintf(data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
			acceleration_g_Sum[0], acceleration_g_Sum[1], acceleration_g_Sum[2]);
 80092a4:	4b4e      	ldr	r3, [pc, #312]	; (80093e0 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x1fc>)
 80092a6:	681b      	ldr	r3, [r3, #0]
	sprintf(data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7f7 f955 	bl	8000558 <__aeabi_f2d>
 80092ae:	4680      	mov	r8, r0
 80092b0:	4689      	mov	r9, r1
			acceleration_g_Sum[0], acceleration_g_Sum[1], acceleration_g_Sum[2]);
 80092b2:	4b4b      	ldr	r3, [pc, #300]	; (80093e0 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x1fc>)
 80092b4:	685b      	ldr	r3, [r3, #4]
	sprintf(data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7f7 f94e 	bl	8000558 <__aeabi_f2d>
 80092bc:	4604      	mov	r4, r0
 80092be:	460d      	mov	r5, r1
			acceleration_g_Sum[0], acceleration_g_Sum[1], acceleration_g_Sum[2]);
 80092c0:	4b47      	ldr	r3, [pc, #284]	; (80093e0 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x1fc>)
 80092c2:	689b      	ldr	r3, [r3, #8]
	sprintf(data, "Acceleration [g]:  %4.2f\t%4.2f\t%4.2f\n",
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7f7 f947 	bl	8000558 <__aeabi_f2d>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092d2:	e9cd 4500 	strd	r4, r5, [sp]
 80092d6:	4642      	mov	r2, r8
 80092d8:	464b      	mov	r3, r9
 80092da:	4943      	ldr	r1, [pc, #268]	; (80093e8 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x204>)
 80092dc:	483f      	ldr	r0, [pc, #252]	; (80093dc <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x1f8>)
 80092de:	f002 fb9b 	bl	800ba18 <siprintf>

	uart_print(data);
 80092e2:	483e      	ldr	r0, [pc, #248]	; (80093dc <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x1f8>)
 80092e4:	f001 fbf6 	bl	800aad4 <uart_print>

	angular_rate_dps_Sum[0] = lsm6dsl_from_fs500dps_to_mdps( angular_rate_dps_Sum[0] / divider )/1000;
 80092e8:	4b40      	ldr	r3, [pc, #256]	; (80093ec <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x208>)
 80092ea:	edd3 6a00 	vldr	s13, [r3]
 80092ee:	88fb      	ldrh	r3, [r7, #6]
 80092f0:	ee07 3a90 	vmov	s15, r3
 80092f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009300:	ee17 3a90 	vmov	r3, s15
 8009304:	b21b      	sxth	r3, r3
 8009306:	4618      	mov	r0, r3
 8009308:	f000 f8fe 	bl	8009508 <lsm6dsl_from_fs500dps_to_mdps>
 800930c:	eef0 6a40 	vmov.f32	s13, s0
 8009310:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80093e4 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x200>
 8009314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009318:	4b34      	ldr	r3, [pc, #208]	; (80093ec <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x208>)
 800931a:	edc3 7a00 	vstr	s15, [r3]
	angular_rate_dps_Sum[1] = lsm6dsl_from_fs500dps_to_mdps( angular_rate_dps_Sum[1] / divider )/1000;
 800931e:	4b33      	ldr	r3, [pc, #204]	; (80093ec <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x208>)
 8009320:	edd3 6a01 	vldr	s13, [r3, #4]
 8009324:	88fb      	ldrh	r3, [r7, #6]
 8009326:	ee07 3a90 	vmov	s15, r3
 800932a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800932e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009336:	ee17 3a90 	vmov	r3, s15
 800933a:	b21b      	sxth	r3, r3
 800933c:	4618      	mov	r0, r3
 800933e:	f000 f8e3 	bl	8009508 <lsm6dsl_from_fs500dps_to_mdps>
 8009342:	eef0 6a40 	vmov.f32	s13, s0
 8009346:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80093e4 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x200>
 800934a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800934e:	4b27      	ldr	r3, [pc, #156]	; (80093ec <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x208>)
 8009350:	edc3 7a01 	vstr	s15, [r3, #4]
	angular_rate_dps_Sum[2] = lsm6dsl_from_fs500dps_to_mdps( angular_rate_dps_Sum[2] / divider )/1000;
 8009354:	4b25      	ldr	r3, [pc, #148]	; (80093ec <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x208>)
 8009356:	edd3 6a02 	vldr	s13, [r3, #8]
 800935a:	88fb      	ldrh	r3, [r7, #6]
 800935c:	ee07 3a90 	vmov	s15, r3
 8009360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800936c:	ee17 3a90 	vmov	r3, s15
 8009370:	b21b      	sxth	r3, r3
 8009372:	4618      	mov	r0, r3
 8009374:	f000 f8c8 	bl	8009508 <lsm6dsl_from_fs500dps_to_mdps>
 8009378:	eef0 6a40 	vmov.f32	s13, s0
 800937c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80093e4 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x200>
 8009380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009384:	4b19      	ldr	r3, [pc, #100]	; (80093ec <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x208>)
 8009386:	edc3 7a02 	vstr	s15, [r3, #8]

	sprintf(data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
				angular_rate_dps_Sum[0], angular_rate_dps_Sum[1], angular_rate_dps_Sum[2]);
 800938a:	4b18      	ldr	r3, [pc, #96]	; (80093ec <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x208>)
 800938c:	681b      	ldr	r3, [r3, #0]
	sprintf(data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
 800938e:	4618      	mov	r0, r3
 8009390:	f7f7 f8e2 	bl	8000558 <__aeabi_f2d>
 8009394:	4680      	mov	r8, r0
 8009396:	4689      	mov	r9, r1
				angular_rate_dps_Sum[0], angular_rate_dps_Sum[1], angular_rate_dps_Sum[2]);
 8009398:	4b14      	ldr	r3, [pc, #80]	; (80093ec <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x208>)
 800939a:	685b      	ldr	r3, [r3, #4]
	sprintf(data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
 800939c:	4618      	mov	r0, r3
 800939e:	f7f7 f8db 	bl	8000558 <__aeabi_f2d>
 80093a2:	4604      	mov	r4, r0
 80093a4:	460d      	mov	r5, r1
				angular_rate_dps_Sum[0], angular_rate_dps_Sum[1], angular_rate_dps_Sum[2]);
 80093a6:	4b11      	ldr	r3, [pc, #68]	; (80093ec <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x208>)
 80093a8:	689b      	ldr	r3, [r3, #8]
	sprintf(data, "Angular rate [dps]:%4.2f\t%4.2f\t%4.2f\n\n",
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7f7 f8d4 	bl	8000558 <__aeabi_f2d>
 80093b0:	4602      	mov	r2, r0
 80093b2:	460b      	mov	r3, r1
 80093b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093b8:	e9cd 4500 	strd	r4, r5, [sp]
 80093bc:	4642      	mov	r2, r8
 80093be:	464b      	mov	r3, r9
 80093c0:	490b      	ldr	r1, [pc, #44]	; (80093f0 <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x20c>)
 80093c2:	4806      	ldr	r0, [pc, #24]	; (80093dc <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x1f8>)
 80093c4:	f002 fb28 	bl	800ba18 <siprintf>

	uart_print(data);
 80093c8:	4804      	ldr	r0, [pc, #16]	; (80093dc <LSM6DSL_FIFO_Calc_Acc_Gyro_Avg_And_Print+0x1f8>)
 80093ca:	f001 fb83 	bl	800aad4 <uart_print>
}
 80093ce:	bf00      	nop
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80093d8:	0800d9a0 	.word	0x0800d9a0
 80093dc:	200005d4 	.word	0x200005d4
 80093e0:	20000590 	.word	0x20000590
 80093e4:	447a0000 	.word	0x447a0000
 80093e8:	0800d9b8 	.word	0x0800d9b8
 80093ec:	20000580 	.word	0x20000580
 80093f0:	0800d9e0 	.word	0x0800d9e0

080093f4 <LSM6DSL_FIFO_Set_FIFO_Mode>:

void LSM6DSL_FIFO_Set_FIFO_Mode(void)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
	/* Set FIFO mode to FIFO */
	lsm6dsl_fifo_mode_t fifo_mode_t;
	lsm6dsl_fifo_mode_get(&dev_ctx, &fifo_mode_t);
 80093fa:	1dfb      	adds	r3, r7, #7
 80093fc:	4619      	mov	r1, r3
 80093fe:	4807      	ldr	r0, [pc, #28]	; (800941c <LSM6DSL_FIFO_Set_FIFO_Mode+0x28>)
 8009400:	f000 fea8 	bl	800a154 <lsm6dsl_fifo_mode_get>
	fifo_mode_t = LSM6DSL_FIFO_MODE;
 8009404:	2301      	movs	r3, #1
 8009406:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_fifo_mode_set(&dev_ctx, fifo_mode_t);
 8009408:	79fb      	ldrb	r3, [r7, #7]
 800940a:	4619      	mov	r1, r3
 800940c:	4803      	ldr	r0, [pc, #12]	; (800941c <LSM6DSL_FIFO_Set_FIFO_Mode+0x28>)
 800940e:	f000 fe7b 	bl	800a108 <lsm6dsl_fifo_mode_set>

	//lsm6dsl_fifo_mode_set(&dev_ctx, LSM6DSL_FIFO_MODE);
}
 8009412:	bf00      	nop
 8009414:	3708      	adds	r7, #8
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	200005c8 	.word	0x200005c8

08009420 <LSM6DSL_FIFO_Set_Bypass_Mode>:

void LSM6DSL_FIFO_Set_Bypass_Mode(void)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
	/* Set FIFO mode to BYPASS */
	lsm6dsl_fifo_mode_t fifo_mode_t;
	lsm6dsl_fifo_mode_get(&dev_ctx, &fifo_mode_t);
 8009426:	1dfb      	adds	r3, r7, #7
 8009428:	4619      	mov	r1, r3
 800942a:	4807      	ldr	r0, [pc, #28]	; (8009448 <LSM6DSL_FIFO_Set_Bypass_Mode+0x28>)
 800942c:	f000 fe92 	bl	800a154 <lsm6dsl_fifo_mode_get>
	fifo_mode_t = LSM6DSL_BYPASS_MODE;
 8009430:	2300      	movs	r3, #0
 8009432:	71fb      	strb	r3, [r7, #7]
	lsm6dsl_fifo_mode_set(&dev_ctx, fifo_mode_t);
 8009434:	79fb      	ldrb	r3, [r7, #7]
 8009436:	4619      	mov	r1, r3
 8009438:	4803      	ldr	r0, [pc, #12]	; (8009448 <LSM6DSL_FIFO_Set_Bypass_Mode+0x28>)
 800943a:	f000 fe65 	bl	800a108 <lsm6dsl_fifo_mode_set>

	//lsm6dsl_fifo_mode_set(&dev_ctx, LSM6DSL_BYPASS_MODE);
}
 800943e:	bf00      	nop
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	200005c8 	.word	0x200005c8

0800944c <LSM6DSL_FIFO_Interrupt_Disable>:

void LSM6DSL_FIFO_Interrupt_Disable(void)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
	/* Set FIFO_FTH on INT1 */
	lsm6dsl_int1_route_t reg;
	lsm6dsl_pin_int1_route_get(&dev_ctx, &reg);
 8009452:	1d3b      	adds	r3, r7, #4
 8009454:	4619      	mov	r1, r3
 8009456:	4807      	ldr	r0, [pc, #28]	; (8009474 <LSM6DSL_FIFO_Interrupt_Disable+0x28>)
 8009458:	f000 fbe4 	bl	8009c24 <lsm6dsl_pin_int1_route_get>
	reg.int1_fth = PROPERTY_DISABLE;
 800945c:	793b      	ldrb	r3, [r7, #4]
 800945e:	f36f 03c3 	bfc	r3, #3, #1
 8009462:	713b      	strb	r3, [r7, #4]
	lsm6dsl_pin_int1_route_set(&dev_ctx, reg);
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	4803      	ldr	r0, [pc, #12]	; (8009474 <LSM6DSL_FIFO_Interrupt_Disable+0x28>)
 8009468:	f000 fa79 	bl	800995e <lsm6dsl_pin_int1_route_set>
}
 800946c:	bf00      	nop
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	200005c8 	.word	0x200005c8

08009478 <lsm6dsl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8009478:	b590      	push	{r4, r7, lr}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	607a      	str	r2, [r7, #4]
 8009482:	461a      	mov	r2, r3
 8009484:	460b      	mov	r3, r1
 8009486:	72fb      	strb	r3, [r7, #11]
 8009488:	4613      	mov	r3, r2
 800948a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	685c      	ldr	r4, [r3, #4]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6898      	ldr	r0, [r3, #8]
 8009494:	893b      	ldrh	r3, [r7, #8]
 8009496:	7af9      	ldrb	r1, [r7, #11]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	47a0      	blx	r4
 800949c:	6178      	str	r0, [r7, #20]
  return ret;
 800949e:	697b      	ldr	r3, [r7, #20]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	371c      	adds	r7, #28
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd90      	pop	{r4, r7, pc}

080094a8 <lsm6dsl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80094a8:	b590      	push	{r4, r7, lr}
 80094aa:	b087      	sub	sp, #28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	607a      	str	r2, [r7, #4]
 80094b2:	461a      	mov	r2, r3
 80094b4:	460b      	mov	r3, r1
 80094b6:	72fb      	strb	r3, [r7, #11]
 80094b8:	4613      	mov	r3, r2
 80094ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681c      	ldr	r4, [r3, #0]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6898      	ldr	r0, [r3, #8]
 80094c4:	893b      	ldrh	r3, [r7, #8]
 80094c6:	7af9      	ldrb	r1, [r7, #11]
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	47a0      	blx	r4
 80094cc:	6178      	str	r0, [r7, #20]
  return ret;
 80094ce:	697b      	ldr	r3, [r7, #20]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	371c      	adds	r7, #28
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd90      	pop	{r4, r7, pc}

080094d8 <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	4603      	mov	r3, r0
 80094e0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 80094e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80094e6:	ee07 3a90 	vmov	s15, r3
 80094ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094ee:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009504 <lsm6dsl_from_fs8g_to_mg+0x2c>
 80094f2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80094f6:	eeb0 0a67 	vmov.f32	s0, s15
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	3e79db23 	.word	0x3e79db23

08009508 <lsm6dsl_from_fs500dps_to_mdps>:
{
  return ((float_t)lsb * 8.750f);
}

float_t lsm6dsl_from_fs500dps_to_mdps(int16_t lsb)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 17.50f);
 8009512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009516:	ee07 3a90 	vmov	s15, r3
 800951a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800951e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8009534 <lsm6dsl_from_fs500dps_to_mdps+0x2c>
 8009522:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8009526:	eeb0 0a67 	vmov.f32	s0, s15
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	418c0000 	.word	0x418c0000

08009538 <lsm6dsl_xl_full_scale_set>:
  * @param  val    Change the values of fs_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_xl_t val)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8009544:	f107 0208 	add.w	r2, r7, #8
 8009548:	2301      	movs	r3, #1
 800954a:	2110      	movs	r1, #16
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7ff ff93 	bl	8009478 <lsm6dsl_read_reg>
 8009552:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10f      	bne.n	800957a <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	f003 0303 	and.w	r3, r3, #3
 8009560:	b2da      	uxtb	r2, r3
 8009562:	7a3b      	ldrb	r3, [r7, #8]
 8009564:	f362 0383 	bfi	r3, r2, #2, #2
 8009568:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800956a:	f107 0208 	add.w	r2, r7, #8
 800956e:	2301      	movs	r3, #1
 8009570:	2110      	movs	r1, #16
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7ff ff98 	bl	80094a8 <lsm6dsl_write_reg>
 8009578:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800957a:	68fb      	ldr	r3, [r7, #12]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <lsm6dsl_xl_data_rate_set>:
  * @param  val    Change the values of odr_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_xl_t val)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8009590:	f107 0208 	add.w	r2, r7, #8
 8009594:	2301      	movs	r3, #1
 8009596:	2110      	movs	r1, #16
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7ff ff6d 	bl	8009478 <lsm6dsl_read_reg>
 800959e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10f      	bne.n	80095c6 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 80095a6:	78fb      	ldrb	r3, [r7, #3]
 80095a8:	f003 030f 	and.w	r3, r3, #15
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	7a3b      	ldrb	r3, [r7, #8]
 80095b0:	f362 1307 	bfi	r3, r2, #4, #4
 80095b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80095b6:	f107 0208 	add.w	r2, r7, #8
 80095ba:	2301      	movs	r3, #1
 80095bc:	2110      	movs	r1, #16
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7ff ff72 	bl	80094a8 <lsm6dsl_write_reg>
 80095c4:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80095c6:	68fb      	ldr	r3, [r7, #12]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <lsm6dsl_gy_full_scale_set>:
  * @param  val    Change the values of fs_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dsl_fs_g_t val)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80095dc:	f107 0208 	add.w	r2, r7, #8
 80095e0:	2301      	movs	r3, #1
 80095e2:	2111      	movs	r1, #17
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f7ff ff47 	bl	8009478 <lsm6dsl_read_reg>
 80095ea:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10f      	bne.n	8009612 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 80095f2:	78fb      	ldrb	r3, [r7, #3]
 80095f4:	f003 0307 	and.w	r3, r3, #7
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	7a3b      	ldrb	r3, [r7, #8]
 80095fc:	f362 0343 	bfi	r3, r2, #1, #3
 8009600:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8009602:	f107 0208 	add.w	r2, r7, #8
 8009606:	2301      	movs	r3, #1
 8009608:	2111      	movs	r1, #17
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7ff ff4c 	bl	80094a8 <lsm6dsl_write_reg>
 8009610:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8009612:	68fb      	ldr	r3, [r7, #12]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <lsm6dsl_gy_data_rate_set>:
  * @param  val    Change the values of odr_g in reg CTRL2_G
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_g_t val)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	460b      	mov	r3, r1
 8009626:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8009628:	f107 0208 	add.w	r2, r7, #8
 800962c:	2301      	movs	r3, #1
 800962e:	2111      	movs	r1, #17
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7ff ff21 	bl	8009478 <lsm6dsl_read_reg>
 8009636:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10f      	bne.n	800965e <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 800963e:	78fb      	ldrb	r3, [r7, #3]
 8009640:	f003 030f 	and.w	r3, r3, #15
 8009644:	b2da      	uxtb	r2, r3
 8009646:	7a3b      	ldrb	r3, [r7, #8]
 8009648:	f362 1307 	bfi	r3, r2, #4, #4
 800964c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 800964e:	f107 0208 	add.w	r2, r7, #8
 8009652:	2301      	movs	r3, #1
 8009654:	2111      	movs	r1, #17
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7ff ff26 	bl	80094a8 <lsm6dsl_write_reg>
 800965c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800965e:	68fb      	ldr	r3, [r7, #12]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8009674:	f107 0208 	add.w	r2, r7, #8
 8009678:	2301      	movs	r3, #1
 800967a:	2112      	movs	r1, #18
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7ff fefb 	bl	8009478 <lsm6dsl_read_reg>
 8009682:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10f      	bne.n	80096aa <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 800968a:	78fb      	ldrb	r3, [r7, #3]
 800968c:	f003 0301 	and.w	r3, r3, #1
 8009690:	b2da      	uxtb	r2, r3
 8009692:	7a3b      	ldrb	r3, [r7, #8]
 8009694:	f362 1386 	bfi	r3, r2, #6, #1
 8009698:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800969a:	f107 0208 	add.w	r2, r7, #8
 800969e:	2301      	movs	r3, #1
 80096a0:	2112      	movs	r1, #18
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7ff ff00 	bl	80094a8 <lsm6dsl_write_reg>
 80096a8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80096aa:	68fb      	ldr	r3, [r7, #12]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <lsm6dsl_fifo_raw_data_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_raw_data_get(stmdev_ctx_t *ctx, uint8_t *buffer,
                                  uint8_t len)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b086      	sub	sp, #24
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	4613      	mov	r3, r2
 80096c0:	71fb      	strb	r3, [r7, #7]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_DATA_OUT_L, buffer, len);
 80096c2:	79fb      	ldrb	r3, [r7, #7]
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	213e      	movs	r1, #62	; 0x3e
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f7ff fed4 	bl	8009478 <lsm6dsl_read_reg>
 80096d0:	6178      	str	r0, [r7, #20]
  return ret;
 80096d2:	697b      	ldr	r3, [r7, #20]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3718      	adds	r7, #24
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <lsm6dsl_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_data_ready_mode_set(stmdev_ctx_t *ctx,
                                    lsm6dsl_drdy_pulsed_g_t val)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_drdy_pulse_cfg_g_t drdy_pulse_cfg_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
 80096e8:	f107 0208 	add.w	r2, r7, #8
 80096ec:	2301      	movs	r3, #1
 80096ee:	210b      	movs	r1, #11
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7ff fec1 	bl	8009478 <lsm6dsl_read_reg>
 80096f6:	60f8      	str	r0, [r7, #12]
                         (uint8_t*)&drdy_pulse_cfg_g, 1);
  if(ret == 0){
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10f      	bne.n	800971e <lsm6dsl_data_ready_mode_set+0x42>
    drdy_pulse_cfg_g.drdy_pulsed = (uint8_t) val;
 80096fe:	78fb      	ldrb	r3, [r7, #3]
 8009700:	f003 0301 	and.w	r3, r3, #1
 8009704:	b2da      	uxtb	r2, r3
 8009706:	7a3b      	ldrb	r3, [r7, #8]
 8009708:	f362 13c7 	bfi	r3, r2, #7, #1
 800970c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
 800970e:	f107 0208 	add.w	r2, r7, #8
 8009712:	2301      	movs	r3, #1
 8009714:	210b      	movs	r1, #11
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7ff fec6 	bl	80094a8 <lsm6dsl_write_reg>
 800971c:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&drdy_pulse_cfg_g, 1);
  }
  return ret;
 800971e:	68fb      	ldr	r3, [r7, #12]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8009732:	2301      	movs	r3, #1
 8009734:	683a      	ldr	r2, [r7, #0]
 8009736:	210f      	movs	r1, #15
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7ff fe9d 	bl	8009478 <lsm6dsl_read_reg>
 800973e:	60f8      	str	r0, [r7, #12]
  return ret;
 8009740:	68fb      	ldr	r3, [r7, #12]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b084      	sub	sp, #16
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	460b      	mov	r3, r1
 8009754:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8009756:	f107 0208 	add.w	r2, r7, #8
 800975a:	2301      	movs	r3, #1
 800975c:	2112      	movs	r1, #18
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7ff fe8a 	bl	8009478 <lsm6dsl_read_reg>
 8009764:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10f      	bne.n	800978c <lsm6dsl_reset_set+0x42>
    ctrl3_c.sw_reset = val;
 800976c:	78fb      	ldrb	r3, [r7, #3]
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	b2da      	uxtb	r2, r3
 8009774:	7a3b      	ldrb	r3, [r7, #8]
 8009776:	f362 0300 	bfi	r3, r2, #0, #1
 800977a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 800977c:	f107 0208 	add.w	r2, r7, #8
 8009780:	2301      	movs	r3, #1
 8009782:	2112      	movs	r1, #18
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7ff fe8f 	bl	80094a8 <lsm6dsl_write_reg>
 800978a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800978c:	68fb      	ldr	r3, [r7, #12]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b084      	sub	sp, #16
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 80097a0:	f107 0208 	add.w	r2, r7, #8
 80097a4:	2301      	movs	r3, #1
 80097a6:	2112      	movs	r1, #18
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7ff fe65 	bl	8009478 <lsm6dsl_read_reg>
 80097ae:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80097b0:	7a3b      	ldrb	r3, [r7, #8]
 80097b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	461a      	mov	r2, r3
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	701a      	strb	r2, [r3, #0]

  return ret;
 80097be:	68fb      	ldr	r3, [r7, #12]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <lsm6dsl_xl_filter_analog_set>:
  * @param  val    Change the values of bw0_xl in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_filter_analog_set(stmdev_ctx_t *ctx, lsm6dsl_bw0_xl_t val)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80097d4:	f107 0208 	add.w	r2, r7, #8
 80097d8:	2301      	movs	r3, #1
 80097da:	2110      	movs	r1, #16
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f7ff fe4b 	bl	8009478 <lsm6dsl_read_reg>
 80097e2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10f      	bne.n	800980a <lsm6dsl_xl_filter_analog_set+0x42>
    ctrl1_xl.bw0_xl = (uint8_t) val;
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	f003 0301 	and.w	r3, r3, #1
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	7a3b      	ldrb	r3, [r7, #8]
 80097f4:	f362 0300 	bfi	r3, r2, #0, #1
 80097f8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80097fa:	f107 0208 	add.w	r2, r7, #8
 80097fe:	2301      	movs	r3, #1
 8009800:	2110      	movs	r1, #16
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7ff fe50 	bl	80094a8 <lsm6dsl_write_reg>
 8009808:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800980a:	68fb      	ldr	r3, [r7, #12]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8009820:	f107 0208 	add.w	r2, r7, #8
 8009824:	2301      	movs	r3, #1
 8009826:	2117      	movs	r1, #23
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff fe25 	bl	8009478 <lsm6dsl_read_reg>
 800982e:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d120      	bne.n	8009878 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
    ctrl8_xl.input_composite = ( (uint8_t) val & 0x10U ) >> 4;
 8009836:	78fb      	ldrb	r3, [r7, #3]
 8009838:	091b      	lsrs	r3, r3, #4
 800983a:	f003 0301 	and.w	r3, r3, #1
 800983e:	b2da      	uxtb	r2, r3
 8009840:	7a3b      	ldrb	r3, [r7, #8]
 8009842:	f362 03c3 	bfi	r3, r2, #3, #1
 8009846:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	f003 0303 	and.w	r3, r3, #3
 800984e:	b2da      	uxtb	r2, r3
 8009850:	7a3b      	ldrb	r3, [r7, #8]
 8009852:	f362 1346 	bfi	r3, r2, #5, #2
 8009856:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8009858:	7a3b      	ldrb	r3, [r7, #8]
 800985a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800985e:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8009860:	7a3b      	ldrb	r3, [r7, #8]
 8009862:	f36f 0382 	bfc	r3, #2, #1
 8009866:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
 8009868:	f107 0208 	add.w	r2, r7, #8
 800986c:	2301      	movs	r3, #1
 800986e:	2117      	movs	r1, #23
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff fe19 	bl	80094a8 <lsm6dsl_write_reg>
 8009876:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8009878:	68fb      	ldr	r3, [r7, #12]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <lsm6dsl_gy_band_pass_set>:
  * @param  val    gyroscope filtering chain configuration.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx, lsm6dsl_lpf1_sel_g_t val)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b086      	sub	sp, #24
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	460b      	mov	r3, r1
 800988c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 800988e:	f107 0208 	add.w	r2, r7, #8
 8009892:	2301      	movs	r3, #1
 8009894:	2116      	movs	r1, #22
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7ff fdee 	bl	8009478 <lsm6dsl_read_reg>
 800989c:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d157      	bne.n	8009954 <lsm6dsl_gy_band_pass_set+0xd2>
    ctrl7_g.hpm_g  =  ( (uint8_t)val & 0x30U ) >> 4;
 80098a4:	78fb      	ldrb	r3, [r7, #3]
 80098a6:	091b      	lsrs	r3, r3, #4
 80098a8:	f003 0303 	and.w	r3, r3, #3
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	7a3b      	ldrb	r3, [r7, #8]
 80098b0:	f362 1305 	bfi	r3, r2, #4, #2
 80098b4:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ( (uint8_t)val & 0x80U ) >> 7;
 80098b6:	78fb      	ldrb	r3, [r7, #3]
 80098b8:	09db      	lsrs	r3, r3, #7
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	7a3b      	ldrb	r3, [r7, #8]
 80098c4:	f362 1386 	bfi	r3, r2, #6, #1
 80098c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
 80098ca:	f107 0208 	add.w	r2, r7, #8
 80098ce:	2301      	movs	r3, #1
 80098d0:	2116      	movs	r1, #22
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7ff fde8 	bl	80094a8 <lsm6dsl_write_reg>
 80098d8:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d139      	bne.n	8009954 <lsm6dsl_gy_band_pass_set+0xd2>
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 80098e0:	f107 020c 	add.w	r2, r7, #12
 80098e4:	2301      	movs	r3, #1
 80098e6:	2115      	movs	r1, #21
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7ff fdc5 	bl	8009478 <lsm6dsl_read_reg>
 80098ee:	6178      	str	r0, [r7, #20]
      if(ret == 0){
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d12e      	bne.n	8009954 <lsm6dsl_gy_band_pass_set+0xd2>
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 80098f6:	78fb      	ldrb	r3, [r7, #3]
 80098f8:	f003 0303 	and.w	r3, r3, #3
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	7b3b      	ldrb	r3, [r7, #12]
 8009900:	f362 0301 	bfi	r3, r2, #0, #2
 8009904:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
 8009906:	f107 020c 	add.w	r2, r7, #12
 800990a:	2301      	movs	r3, #1
 800990c:	2115      	movs	r1, #21
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f7ff fdca 	bl	80094a8 <lsm6dsl_write_reg>
 8009914:	6178      	str	r0, [r7, #20]
        if(ret == 0){
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d11b      	bne.n	8009954 <lsm6dsl_gy_band_pass_set+0xd2>
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 800991c:	f107 0210 	add.w	r2, r7, #16
 8009920:	2301      	movs	r3, #1
 8009922:	2113      	movs	r1, #19
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7ff fda7 	bl	8009478 <lsm6dsl_read_reg>
 800992a:	6178      	str	r0, [r7, #20]
                                 (uint8_t*)&ctrl4_c, 1);
          if(ret == 0){
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d110      	bne.n	8009954 <lsm6dsl_gy_band_pass_set+0xd2>
            ctrl4_c.lpf1_sel_g = ( (uint8_t)val & 0x08U ) >> 3;
 8009932:	78fb      	ldrb	r3, [r7, #3]
 8009934:	08db      	lsrs	r3, r3, #3
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	b2da      	uxtb	r2, r3
 800993c:	7c3b      	ldrb	r3, [r7, #16]
 800993e:	f362 0341 	bfi	r3, r2, #1, #1
 8009942:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 8009944:	f107 0210 	add.w	r2, r7, #16
 8009948:	2301      	movs	r3, #1
 800994a:	2113      	movs	r1, #19
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff fdab 	bl	80094a8 <lsm6dsl_write_reg>
 8009952:	6178      	str	r0, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8009954:	697b      	ldr	r3, [r7, #20]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b08a      	sub	sp, #40	; 0x28
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8009968:	f107 021c 	add.w	r2, r7, #28
 800996c:	2301      	movs	r3, #1
 800996e:	210d      	movs	r1, #13
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7ff fd81 	bl	8009478 <lsm6dsl_read_reg>
 8009976:	6278      	str	r0, [r7, #36]	; 0x24
  if(ret == 0){
 8009978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997a:	2b00      	cmp	r3, #0
 800997c:	d147      	bne.n	8009a0e <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 800997e:	783b      	ldrb	r3, [r7, #0]
 8009980:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009984:	b2da      	uxtb	r2, r3
 8009986:	7f3b      	ldrb	r3, [r7, #28]
 8009988:	f362 0300 	bfi	r3, r2, #0, #1
 800998c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 800998e:	783b      	ldrb	r3, [r7, #0]
 8009990:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009994:	b2da      	uxtb	r2, r3
 8009996:	7f3b      	ldrb	r3, [r7, #28]
 8009998:	f362 0341 	bfi	r3, r2, #1, #1
 800999c:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 800999e:	783b      	ldrb	r3, [r7, #0]
 80099a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	7f3b      	ldrb	r3, [r7, #28]
 80099a8:	f362 0382 	bfi	r3, r2, #2, #1
 80099ac:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 80099ae:	783b      	ldrb	r3, [r7, #0]
 80099b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	7f3b      	ldrb	r3, [r7, #28]
 80099b8:	f362 03c3 	bfi	r3, r2, #3, #1
 80099bc:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 80099be:	783b      	ldrb	r3, [r7, #0]
 80099c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80099c4:	b2da      	uxtb	r2, r3
 80099c6:	7f3b      	ldrb	r3, [r7, #28]
 80099c8:	f362 1304 	bfi	r3, r2, #4, #1
 80099cc:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 80099ce:	783b      	ldrb	r3, [r7, #0]
 80099d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	7f3b      	ldrb	r3, [r7, #28]
 80099d8:	f362 1345 	bfi	r3, r2, #5, #1
 80099dc:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 80099de:	783b      	ldrb	r3, [r7, #0]
 80099e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80099e4:	b2da      	uxtb	r2, r3
 80099e6:	7f3b      	ldrb	r3, [r7, #28]
 80099e8:	f362 1386 	bfi	r3, r2, #6, #1
 80099ec:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 80099ee:	783b      	ldrb	r3, [r7, #0]
 80099f0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	7f3b      	ldrb	r3, [r7, #28]
 80099f8:	f362 13c7 	bfi	r3, r2, #7, #1
 80099fc:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 80099fe:	f107 021c 	add.w	r2, r7, #28
 8009a02:	2301      	movs	r3, #1
 8009a04:	210d      	movs	r1, #13
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7ff fd4e 	bl	80094a8 <lsm6dsl_write_reg>
 8009a0c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d107      	bne.n	8009a24 <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8009a14:	f107 0218 	add.w	r2, r7, #24
 8009a18:	2301      	movs	r3, #1
 8009a1a:	215e      	movs	r1, #94	; 0x5e
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7ff fd2b 	bl	8009478 <lsm6dsl_read_reg>
 8009a22:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8009a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d107      	bne.n	8009a3a <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
 8009a2a:	f107 0214 	add.w	r2, r7, #20
 8009a2e:	2301      	movs	r3, #1
 8009a30:	215f      	movs	r1, #95	; 0x5f
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff fd20 	bl	8009478 <lsm6dsl_read_reg>
 8009a38:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d147      	bne.n	8009ad0 <lsm6dsl_pin_int1_route_set+0x172>
        md1_cfg.int1_timer           = val.int1_timer;
 8009a40:	787b      	ldrb	r3, [r7, #1]
 8009a42:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	7e3b      	ldrb	r3, [r7, #24]
 8009a4a:	f362 0300 	bfi	r3, r2, #0, #1
 8009a4e:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_tilt            = val.int1_tilt;
 8009a50:	787b      	ldrb	r3, [r7, #1]
 8009a52:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009a56:	b2da      	uxtb	r2, r3
 8009a58:	7e3b      	ldrb	r3, [r7, #24]
 8009a5a:	f362 0341 	bfi	r3, r2, #1, #1
 8009a5e:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_6d              = val.int1_6d;
 8009a60:	787b      	ldrb	r3, [r7, #1]
 8009a62:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009a66:	b2da      	uxtb	r2, r3
 8009a68:	7e3b      	ldrb	r3, [r7, #24]
 8009a6a:	f362 0382 	bfi	r3, r2, #2, #1
 8009a6e:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_double_tap      = val.int1_double_tap;
 8009a70:	787b      	ldrb	r3, [r7, #1]
 8009a72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009a76:	b2da      	uxtb	r2, r3
 8009a78:	7e3b      	ldrb	r3, [r7, #24]
 8009a7a:	f362 03c3 	bfi	r3, r2, #3, #1
 8009a7e:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_ff              = val.int1_ff;
 8009a80:	787b      	ldrb	r3, [r7, #1]
 8009a82:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	7e3b      	ldrb	r3, [r7, #24]
 8009a8a:	f362 1304 	bfi	r3, r2, #4, #1
 8009a8e:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_wu              = val.int1_wu;
 8009a90:	787b      	ldrb	r3, [r7, #1]
 8009a92:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	7e3b      	ldrb	r3, [r7, #24]
 8009a9a:	f362 1345 	bfi	r3, r2, #5, #1
 8009a9e:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_single_tap      = val.int1_single_tap;
 8009aa0:	787b      	ldrb	r3, [r7, #1]
 8009aa2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	7e3b      	ldrb	r3, [r7, #24]
 8009aaa:	f362 1386 	bfi	r3, r2, #6, #1
 8009aae:	763b      	strb	r3, [r7, #24]
        md1_cfg.int1_inact_state     = val.int1_inact_state;
 8009ab0:	787b      	ldrb	r3, [r7, #1]
 8009ab2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	7e3b      	ldrb	r3, [r7, #24]
 8009aba:	f362 13c7 	bfi	r3, r2, #7, #1
 8009abe:	763b      	strb	r3, [r7, #24]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8009ac0:	f107 0218 	add.w	r2, r7, #24
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	215e      	movs	r1, #94	; 0x5e
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7ff fced 	bl	80094a8 <lsm6dsl_write_reg>
 8009ace:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8009ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d107      	bne.n	8009ae6 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8009ad6:	f107 0210 	add.w	r2, r7, #16
 8009ada:	2301      	movs	r3, #1
 8009adc:	2113      	movs	r1, #19
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7ff fcca 	bl	8009478 <lsm6dsl_read_reg>
 8009ae4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10f      	bne.n	8009b0c <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8009aec:	78bb      	ldrb	r3, [r7, #2]
 8009aee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	7c3b      	ldrb	r3, [r7, #16]
 8009af6:	f362 1304 	bfi	r3, r2, #4, #1
 8009afa:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8009afc:	f107 0210 	add.w	r2, r7, #16
 8009b00:	2301      	movs	r3, #1
 8009b02:	2113      	movs	r1, #19
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f7ff fccf 	bl	80094a8 <lsm6dsl_write_reg>
 8009b0a:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if(ret == 0){
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d107      	bne.n	8009b22 <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8009b12:	f107 0220 	add.w	r2, r7, #32
 8009b16:	2301      	movs	r3, #1
 8009b18:	211a      	movs	r1, #26
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff fcac 	bl	8009478 <lsm6dsl_read_reg>
 8009b20:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 8009b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d111      	bne.n	8009b4c <lsm6dsl_pin_int1_route_set+0x1ee>
     master_config.drdy_on_int1   = val.den_drdy_int1;
 8009b28:	78bb      	ldrb	r3, [r7, #2]
 8009b2a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b34:	f362 13c7 	bfi	r3, r2, #7, #1
 8009b38:	f887 3020 	strb.w	r3, [r7, #32]
     ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8009b3c:	f107 0220 	add.w	r2, r7, #32
 8009b40:	2301      	movs	r3, #1
 8009b42:	211a      	movs	r1, #26
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7ff fcaf 	bl	80094a8 <lsm6dsl_write_reg>
 8009b4a:	6278      	str	r0, [r7, #36]	; 0x24
                             (uint8_t*)&master_config, 1);
  }
  if(ret == 0){
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d158      	bne.n	8009c04 <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8009b52:	f107 020c 	add.w	r2, r7, #12
 8009b56:	2301      	movs	r3, #1
 8009b58:	2158      	movs	r1, #88	; 0x58
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7ff fc8c 	bl	8009478 <lsm6dsl_read_reg>
 8009b60:	6278      	str	r0, [r7, #36]	; 0x24
    if ((val.int1_6d != 0x00U) ||
 8009b62:	787b      	ldrb	r3, [r7, #1]
 8009b64:	f003 0304 	and.w	r3, r3, #4
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d141      	bne.n	8009bf2 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8009b6e:	787b      	ldrb	r3, [r7, #1]
 8009b70:	f003 0310 	and.w	r3, r3, #16
 8009b74:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d13b      	bne.n	8009bf2 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8009b7a:	787b      	ldrb	r3, [r7, #1]
 8009b7c:	f003 0320 	and.w	r3, r3, #32
 8009b80:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d135      	bne.n	8009bf2 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8009b86:	787b      	ldrb	r3, [r7, #1]
 8009b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b8c:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d12f      	bne.n	8009bf2 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8009b92:	787b      	ldrb	r3, [r7, #1]
 8009b94:	f003 0308 	and.w	r3, r3, #8
 8009b98:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d129      	bne.n	8009bf2 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U)||
 8009b9e:	787b      	ldrb	r3, [r7, #1]
 8009ba0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ba4:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d123      	bne.n	8009bf2 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8009baa:	7d3b      	ldrb	r3, [r7, #20]
 8009bac:	f003 0304 	and.w	r3, r3, #4
 8009bb0:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U)||
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d11d      	bne.n	8009bf2 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8009bb6:	7d3b      	ldrb	r3, [r7, #20]
 8009bb8:	f003 0310 	and.w	r3, r3, #16
 8009bbc:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d117      	bne.n	8009bf2 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8009bc2:	7d3b      	ldrb	r3, [r7, #20]
 8009bc4:	f003 0320 	and.w	r3, r3, #32
 8009bc8:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d111      	bne.n	8009bf2 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8009bce:	7d3b      	ldrb	r3, [r7, #20]
 8009bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd4:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d10b      	bne.n	8009bf2 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8009bda:	7d3b      	ldrb	r3, [r7, #20]
 8009bdc:	f003 0308 	and.w	r3, r3, #8
 8009be0:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d105      	bne.n	8009bf2 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state!= 0x00U) ){
 8009be6:	7d3b      	ldrb	r3, [r7, #20]
 8009be8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009bec:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d004      	beq.n	8009bfc <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8009bf2:	7b3b      	ldrb	r3, [r7, #12]
 8009bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf8:	733b      	strb	r3, [r7, #12]
 8009bfa:	e003      	b.n	8009c04 <lsm6dsl_pin_int1_route_set+0x2a6>
    }
    else{
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8009bfc:	7b3b      	ldrb	r3, [r7, #12]
 8009bfe:	f36f 13c7 	bfc	r3, #7, #1
 8009c02:	733b      	strb	r3, [r7, #12]
    }
  }
  if(ret == 0){    
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d107      	bne.n	8009c1a <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
 8009c0a:	f107 020c 	add.w	r2, r7, #12
 8009c0e:	2301      	movs	r3, #1
 8009c10:	2158      	movs	r1, #88	; 0x58
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7ff fc48 	bl	80094a8 <lsm6dsl_write_reg>
 8009c18:	6278      	str	r0, [r7, #36]	; 0x24
  }
  return ret;
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3728      	adds	r7, #40	; 0x28
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b088      	sub	sp, #32
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;

  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
 8009c2e:	f107 0214 	add.w	r2, r7, #20
 8009c32:	2301      	movs	r3, #1
 8009c34:	210d      	movs	r1, #13
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7ff fc1e 	bl	8009478 <lsm6dsl_read_reg>
 8009c3c:	61f8      	str	r0, [r7, #28]
  if(ret == 0){
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f040 80c0 	bne.w	8009dc6 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8009c46:	7d3b      	ldrb	r3, [r7, #20]
 8009c48:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009c4c:	b2d9      	uxtb	r1, r3
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	7813      	ldrb	r3, [r2, #0]
 8009c52:	f361 0300 	bfi	r3, r1, #0, #1
 8009c56:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8009c58:	7d3b      	ldrb	r3, [r7, #20]
 8009c5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009c5e:	b2d9      	uxtb	r1, r3
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	7813      	ldrb	r3, [r2, #0]
 8009c64:	f361 0341 	bfi	r3, r1, #1, #1
 8009c68:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8009c6a:	7d3b      	ldrb	r3, [r7, #20]
 8009c6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009c70:	b2d9      	uxtb	r1, r3
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	7813      	ldrb	r3, [r2, #0]
 8009c76:	f361 0382 	bfi	r3, r1, #2, #1
 8009c7a:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8009c7c:	7d3b      	ldrb	r3, [r7, #20]
 8009c7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009c82:	b2d9      	uxtb	r1, r3
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	7813      	ldrb	r3, [r2, #0]
 8009c88:	f361 03c3 	bfi	r3, r1, #3, #1
 8009c8c:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 8009c8e:	7d3b      	ldrb	r3, [r7, #20]
 8009c90:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009c94:	b2d9      	uxtb	r1, r3
 8009c96:	683a      	ldr	r2, [r7, #0]
 8009c98:	7813      	ldrb	r3, [r2, #0]
 8009c9a:	f361 1304 	bfi	r3, r1, #4, #1
 8009c9e:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 8009ca0:	7d3b      	ldrb	r3, [r7, #20]
 8009ca2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009ca6:	b2d9      	uxtb	r1, r3
 8009ca8:	683a      	ldr	r2, [r7, #0]
 8009caa:	7813      	ldrb	r3, [r2, #0]
 8009cac:	f361 1345 	bfi	r3, r1, #5, #1
 8009cb0:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 8009cb2:	7d3b      	ldrb	r3, [r7, #20]
 8009cb4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009cb8:	b2d9      	uxtb	r1, r3
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	7813      	ldrb	r3, [r2, #0]
 8009cbe:	f361 1386 	bfi	r3, r1, #6, #1
 8009cc2:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8009cc4:	7d3b      	ldrb	r3, [r7, #20]
 8009cc6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009cca:	b2d9      	uxtb	r1, r3
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	7813      	ldrb	r3, [r2, #0]
 8009cd0:	f361 13c7 	bfi	r3, r1, #7, #1
 8009cd4:	7013      	strb	r3, [r2, #0]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
 8009cd6:	f107 0210 	add.w	r2, r7, #16
 8009cda:	2301      	movs	r3, #1
 8009cdc:	215e      	movs	r1, #94	; 0x5e
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7ff fbca 	bl	8009478 <lsm6dsl_read_reg>
 8009ce4:	61f8      	str	r0, [r7, #28]
    if(ret == 0){
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d16c      	bne.n	8009dc6 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_timer       = md1_cfg.int1_timer;
 8009cec:	7c3b      	ldrb	r3, [r7, #16]
 8009cee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009cf2:	b2d9      	uxtb	r1, r3
 8009cf4:	683a      	ldr	r2, [r7, #0]
 8009cf6:	7853      	ldrb	r3, [r2, #1]
 8009cf8:	f361 0300 	bfi	r3, r1, #0, #1
 8009cfc:	7053      	strb	r3, [r2, #1]
    val->int1_tilt        = md1_cfg.int1_tilt;
 8009cfe:	7c3b      	ldrb	r3, [r7, #16]
 8009d00:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009d04:	b2d9      	uxtb	r1, r3
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	7853      	ldrb	r3, [r2, #1]
 8009d0a:	f361 0341 	bfi	r3, r1, #1, #1
 8009d0e:	7053      	strb	r3, [r2, #1]
    val->int1_6d          = md1_cfg.int1_6d;
 8009d10:	7c3b      	ldrb	r3, [r7, #16]
 8009d12:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009d16:	b2d9      	uxtb	r1, r3
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	7853      	ldrb	r3, [r2, #1]
 8009d1c:	f361 0382 	bfi	r3, r1, #2, #1
 8009d20:	7053      	strb	r3, [r2, #1]
    val->int1_double_tap  = md1_cfg.int1_double_tap;
 8009d22:	7c3b      	ldrb	r3, [r7, #16]
 8009d24:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009d28:	b2d9      	uxtb	r1, r3
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	7853      	ldrb	r3, [r2, #1]
 8009d2e:	f361 03c3 	bfi	r3, r1, #3, #1
 8009d32:	7053      	strb	r3, [r2, #1]
    val->int1_ff          = md1_cfg.int1_ff;
 8009d34:	7c3b      	ldrb	r3, [r7, #16]
 8009d36:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009d3a:	b2d9      	uxtb	r1, r3
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	7853      	ldrb	r3, [r2, #1]
 8009d40:	f361 1304 	bfi	r3, r1, #4, #1
 8009d44:	7053      	strb	r3, [r2, #1]
    val->int1_wu          = md1_cfg.int1_wu;
 8009d46:	7c3b      	ldrb	r3, [r7, #16]
 8009d48:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009d4c:	b2d9      	uxtb	r1, r3
 8009d4e:	683a      	ldr	r2, [r7, #0]
 8009d50:	7853      	ldrb	r3, [r2, #1]
 8009d52:	f361 1345 	bfi	r3, r1, #5, #1
 8009d56:	7053      	strb	r3, [r2, #1]
    val->int1_single_tap  = md1_cfg.int1_single_tap;
 8009d58:	7c3b      	ldrb	r3, [r7, #16]
 8009d5a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009d5e:	b2d9      	uxtb	r1, r3
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	7853      	ldrb	r3, [r2, #1]
 8009d64:	f361 1386 	bfi	r3, r1, #6, #1
 8009d68:	7053      	strb	r3, [r2, #1]
    val->int1_inact_state = md1_cfg.int1_inact_state;
 8009d6a:	7c3b      	ldrb	r3, [r7, #16]
 8009d6c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009d70:	b2d9      	uxtb	r1, r3
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	7853      	ldrb	r3, [r2, #1]
 8009d76:	f361 13c7 	bfi	r3, r1, #7, #1
 8009d7a:	7053      	strb	r3, [r2, #1]

    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
 8009d7c:	f107 020c 	add.w	r2, r7, #12
 8009d80:	2301      	movs	r3, #1
 8009d82:	2113      	movs	r1, #19
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7ff fb77 	bl	8009478 <lsm6dsl_read_reg>
 8009d8a:	61f8      	str	r0, [r7, #28]
      if(ret == 0){
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d119      	bne.n	8009dc6 <lsm6dsl_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 8009d92:	7b3b      	ldrb	r3, [r7, #12]
 8009d94:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009d98:	b2d9      	uxtb	r1, r3
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	7893      	ldrb	r3, [r2, #2]
 8009d9e:	f361 0300 	bfi	r3, r1, #0, #1
 8009da2:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8009da4:	f107 0218 	add.w	r2, r7, #24
 8009da8:	2301      	movs	r3, #1
 8009daa:	211a      	movs	r1, #26
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f7ff fb63 	bl	8009478 <lsm6dsl_read_reg>
 8009db2:	61f8      	str	r0, [r7, #28]
                               (uint8_t*)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8009db4:	7e3b      	ldrb	r3, [r7, #24]
 8009db6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009dba:	b2d9      	uxtb	r1, r3
 8009dbc:	683a      	ldr	r2, [r7, #0]
 8009dbe:	7893      	ldrb	r3, [r2, #2]
 8009dc0:	f361 0300 	bfi	r3, r1, #0, #1
 8009dc4:	7093      	strb	r3, [r2, #2]
      }
    }
  }
  return ret;
 8009dc6:	69fb      	ldr	r3, [r7, #28]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3720      	adds	r7, #32
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <lsm6dsl_pin_polarity_set>:
  * @param  val    Change the values of h_lactive in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_polarity_set(stmdev_ctx_t *ctx, lsm6dsl_h_lactive_t val)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8009ddc:	f107 0208 	add.w	r2, r7, #8
 8009de0:	2301      	movs	r3, #1
 8009de2:	2112      	movs	r1, #18
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7ff fb47 	bl	8009478 <lsm6dsl_read_reg>
 8009dea:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10f      	bne.n	8009e12 <lsm6dsl_pin_polarity_set+0x42>
    ctrl3_c.h_lactive = (uint8_t) val;
 8009df2:	78fb      	ldrb	r3, [r7, #3]
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	b2da      	uxtb	r2, r3
 8009dfa:	7a3b      	ldrb	r3, [r7, #8]
 8009dfc:	f362 1345 	bfi	r3, r2, #5, #1
 8009e00:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8009e02:	f107 0208 	add.w	r2, r7, #8
 8009e06:	2301      	movs	r3, #1
 8009e08:	2112      	movs	r1, #18
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7ff fb4c 	bl	80094a8 <lsm6dsl_write_reg>
 8009e10:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8009e12:	68fb      	ldr	r3, [r7, #12]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <lsm6dsl_fifo_watermark_set>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	807b      	strh	r3, [r7, #2]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
 8009e28:	f107 020c 	add.w	r2, r7, #12
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	2107      	movs	r1, #7
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7ff fb21 	bl	8009478 <lsm6dsl_read_reg>
 8009e36:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d11f      	bne.n	8009e7e <lsm6dsl_fifo_watermark_set+0x62>
    fifo_ctrl1.fth = (uint8_t) (0x00FFU & val);
 8009e3e:	887b      	ldrh	r3, [r7, #2]
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	743b      	strb	r3, [r7, #16]
    fifo_ctrl2.fth = (uint8_t) (( 0x0700U & val ) >> 8);
 8009e44:	887b      	ldrh	r3, [r7, #2]
 8009e46:	0a1b      	lsrs	r3, r3, #8
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	f003 0307 	and.w	r3, r3, #7
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	7b3b      	ldrb	r3, [r7, #12]
 8009e52:	f362 0302 	bfi	r3, r2, #0, #3
 8009e56:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL1, (uint8_t*)&fifo_ctrl1, 1);
 8009e58:	f107 0210 	add.w	r2, r7, #16
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	2106      	movs	r1, #6
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7ff fb21 	bl	80094a8 <lsm6dsl_write_reg>
 8009e66:	6178      	str	r0, [r7, #20]
    if(ret == 0){
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d107      	bne.n	8009e7e <lsm6dsl_fifo_watermark_set+0x62>
      ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL2,
 8009e6e:	f107 020c 	add.w	r2, r7, #12
 8009e72:	2301      	movs	r3, #1
 8009e74:	2107      	movs	r1, #7
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7ff fb16 	bl	80094a8 <lsm6dsl_write_reg>
 8009e7c:	6178      	str	r0, [r7, #20]
                              (uint8_t*)&fifo_ctrl2, 1);
    }
  }
  return ret;
 8009e7e:	697b      	ldr	r3, [r7, #20]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <lsm6dsl_fifo_watermark_get>:
  * @param  val    Change the values of fth in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_watermark_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
  lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL1, (uint8_t*)&fifo_ctrl1, 1);
 8009e92:	f107 0210 	add.w	r2, r7, #16
 8009e96:	2301      	movs	r3, #1
 8009e98:	2106      	movs	r1, #6
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7ff faec 	bl	8009478 <lsm6dsl_read_reg>
 8009ea0:	6178      	str	r0, [r7, #20]
  if(ret == 0){
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d107      	bne.n	8009eb8 <lsm6dsl_fifo_watermark_get+0x30>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
 8009ea8:	f107 020c 	add.w	r2, r7, #12
 8009eac:	2301      	movs	r3, #1
 8009eae:	2107      	movs	r1, #7
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f7ff fae1 	bl	8009478 <lsm6dsl_read_reg>
 8009eb6:	6178      	str	r0, [r7, #20]
  }
  *val = ((uint16_t)fifo_ctrl2.fth << 8) + (uint16_t)fifo_ctrl1.fth;
 8009eb8:	7b3b      	ldrb	r3, [r7, #12]
 8009eba:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	021b      	lsls	r3, r3, #8
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	7c3b      	ldrb	r3, [r7, #16]
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	4413      	add	r3, r2
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	801a      	strh	r2, [r3, #0]

  return ret;
 8009ed2:	697b      	ldr	r3, [r7, #20]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3718      	adds	r7, #24
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <lsm6dsl_fifo_data_level_get>:
  *                BDU bit.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_level_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b086      	sub	sp, #24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_status1_t fifo_status1;
  lsm6dsl_fifo_status2_t fifo_status2;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS1,
 8009ee6:	f107 0210 	add.w	r2, r7, #16
 8009eea:	2301      	movs	r3, #1
 8009eec:	213a      	movs	r1, #58	; 0x3a
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7ff fac2 	bl	8009478 <lsm6dsl_read_reg>
 8009ef4:	6178      	str	r0, [r7, #20]
                         (uint8_t*)&fifo_status1, 1);
  if(ret == 0){
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d114      	bne.n	8009f26 <lsm6dsl_fifo_data_level_get+0x4a>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS2,
 8009efc:	f107 020c 	add.w	r2, r7, #12
 8009f00:	2301      	movs	r3, #1
 8009f02:	213b      	movs	r1, #59	; 0x3b
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f7ff fab7 	bl	8009478 <lsm6dsl_read_reg>
 8009f0a:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&fifo_status2, 1);
    *val = ( (uint16_t) fifo_status2.diff_fifo << 8) +
 8009f0c:	7b3b      	ldrb	r3, [r7, #12]
 8009f0e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	021b      	lsls	r3, r3, #8
 8009f18:	b29a      	uxth	r2, r3
             (uint16_t) fifo_status1.diff_fifo;
 8009f1a:	7c3b      	ldrb	r3, [r7, #16]
 8009f1c:	b29b      	uxth	r3, r3
    *val = ( (uint16_t) fifo_status2.diff_fifo << 8) +
 8009f1e:	4413      	add	r3, r2
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8009f26:	697b      	ldr	r3, [r7, #20]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3718      	adds	r7, #24
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <lsm6dsl_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t val)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 8009f3c:	f107 0208 	add.w	r2, r7, #8
 8009f40:	2301      	movs	r3, #1
 8009f42:	2108      	movs	r1, #8
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7ff fa97 	bl	8009478 <lsm6dsl_read_reg>
 8009f4a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10f      	bne.n	8009f72 <lsm6dsl_fifo_xl_batch_set+0x42>
    fifo_ctrl3.dec_fifo_xl = (uint8_t)val;
 8009f52:	78fb      	ldrb	r3, [r7, #3]
 8009f54:	f003 0307 	and.w	r3, r3, #7
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	7a3b      	ldrb	r3, [r7, #8]
 8009f5c:	f362 0302 	bfi	r3, r2, #0, #3
 8009f60:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
 8009f62:	f107 0208 	add.w	r2, r7, #8
 8009f66:	2301      	movs	r3, #1
 8009f68:	2108      	movs	r1, #8
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7ff fa9c 	bl	80094a8 <lsm6dsl_write_reg>
 8009f70:	60f8      	str	r0, [r7, #12]
                            (uint8_t*)&fifo_ctrl3, 1);
  }
  return ret;
 8009f72:	68fb      	ldr	r3, [r7, #12]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <lsm6dsl_fifo_xl_batch_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_xl_batch_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_xl_t *val)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 8009f86:	f107 0208 	add.w	r2, r7, #8
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	2108      	movs	r1, #8
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7ff fa72 	bl	8009478 <lsm6dsl_read_reg>
 8009f94:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl3.dec_fifo_xl) {
 8009f96:	7a3b      	ldrb	r3, [r7, #8]
 8009f98:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	2b07      	cmp	r3, #7
 8009fa0:	d832      	bhi.n	800a008 <lsm6dsl_fifo_xl_batch_get+0x8c>
 8009fa2:	a201      	add	r2, pc, #4	; (adr r2, 8009fa8 <lsm6dsl_fifo_xl_batch_get+0x2c>)
 8009fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa8:	08009fc9 	.word	0x08009fc9
 8009fac:	08009fd1 	.word	0x08009fd1
 8009fb0:	08009fd9 	.word	0x08009fd9
 8009fb4:	08009fe1 	.word	0x08009fe1
 8009fb8:	08009fe9 	.word	0x08009fe9
 8009fbc:	08009ff1 	.word	0x08009ff1
 8009fc0:	08009ff9 	.word	0x08009ff9
 8009fc4:	0800a001 	.word	0x0800a001
    case LSM6DSL_FIFO_XL_DISABLE:
      *val = LSM6DSL_FIFO_XL_DISABLE;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	701a      	strb	r2, [r3, #0]
      break;
 8009fce:	e01f      	b.n	800a010 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_NO_DEC:
      *val = LSM6DSL_FIFO_XL_NO_DEC;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	701a      	strb	r2, [r3, #0]
      break;
 8009fd6:	e01b      	b.n	800a010 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_2:
      *val = LSM6DSL_FIFO_XL_DEC_2;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	701a      	strb	r2, [r3, #0]
      break;
 8009fde:	e017      	b.n	800a010 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_3:
      *val = LSM6DSL_FIFO_XL_DEC_3;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	2203      	movs	r2, #3
 8009fe4:	701a      	strb	r2, [r3, #0]
      break;
 8009fe6:	e013      	b.n	800a010 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_4:
      *val = LSM6DSL_FIFO_XL_DEC_4;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	2204      	movs	r2, #4
 8009fec:	701a      	strb	r2, [r3, #0]
      break;
 8009fee:	e00f      	b.n	800a010 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_8:
      *val = LSM6DSL_FIFO_XL_DEC_8;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	2205      	movs	r2, #5
 8009ff4:	701a      	strb	r2, [r3, #0]
      break;
 8009ff6:	e00b      	b.n	800a010 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_16:
      *val = LSM6DSL_FIFO_XL_DEC_16;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	2206      	movs	r2, #6
 8009ffc:	701a      	strb	r2, [r3, #0]
      break;
 8009ffe:	e007      	b.n	800a010 <lsm6dsl_fifo_xl_batch_get+0x94>
    case LSM6DSL_FIFO_XL_DEC_32:
      *val = LSM6DSL_FIFO_XL_DEC_32;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2207      	movs	r2, #7
 800a004:	701a      	strb	r2, [r3, #0]
      break;
 800a006:	e003      	b.n	800a010 <lsm6dsl_fifo_xl_batch_get+0x94>
    default:
      *val = LSM6DSL_FIFO_XL_DEC_ND;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	2208      	movs	r2, #8
 800a00c:	701a      	strb	r2, [r3, #0]
      break;
 800a00e:	bf00      	nop
  }

  return ret;
 800a010:	68fb      	ldr	r3, [r7, #12]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop

0800a01c <lsm6dsl_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t val)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	460b      	mov	r3, r1
 800a026:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800a028:	f107 0208 	add.w	r2, r7, #8
 800a02c:	2301      	movs	r3, #1
 800a02e:	2108      	movs	r1, #8
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f7ff fa21 	bl	8009478 <lsm6dsl_read_reg>
 800a036:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10f      	bne.n	800a05e <lsm6dsl_fifo_gy_batch_set+0x42>
    fifo_ctrl3.dec_fifo_gyro = (uint8_t)val;
 800a03e:	78fb      	ldrb	r3, [r7, #3]
 800a040:	f003 0307 	and.w	r3, r3, #7
 800a044:	b2da      	uxtb	r2, r3
 800a046:	7a3b      	ldrb	r3, [r7, #8]
 800a048:	f362 03c5 	bfi	r3, r2, #3, #3
 800a04c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800a04e:	f107 0208 	add.w	r2, r7, #8
 800a052:	2301      	movs	r3, #1
 800a054:	2108      	movs	r1, #8
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7ff fa26 	bl	80094a8 <lsm6dsl_write_reg>
 800a05c:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800a05e:	68fb      	ldr	r3, [r7, #12]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <lsm6dsl_fifo_gy_batch_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_gy_batch_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_dec_fifo_gyro_t *val)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
 800a072:	f107 0208 	add.w	r2, r7, #8
 800a076:	2301      	movs	r3, #1
 800a078:	2108      	movs	r1, #8
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7ff f9fc 	bl	8009478 <lsm6dsl_read_reg>
 800a080:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl3.dec_fifo_gyro) {
 800a082:	7a3b      	ldrb	r3, [r7, #8]
 800a084:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b07      	cmp	r3, #7
 800a08c:	d832      	bhi.n	800a0f4 <lsm6dsl_fifo_gy_batch_get+0x8c>
 800a08e:	a201      	add	r2, pc, #4	; (adr r2, 800a094 <lsm6dsl_fifo_gy_batch_get+0x2c>)
 800a090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a094:	0800a0b5 	.word	0x0800a0b5
 800a098:	0800a0bd 	.word	0x0800a0bd
 800a09c:	0800a0c5 	.word	0x0800a0c5
 800a0a0:	0800a0cd 	.word	0x0800a0cd
 800a0a4:	0800a0d5 	.word	0x0800a0d5
 800a0a8:	0800a0dd 	.word	0x0800a0dd
 800a0ac:	0800a0e5 	.word	0x0800a0e5
 800a0b0:	0800a0ed 	.word	0x0800a0ed
    case LSM6DSL_FIFO_GY_DISABLE:
      *val = LSM6DSL_FIFO_GY_DISABLE;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	701a      	strb	r2, [r3, #0]
      break;
 800a0ba:	e01f      	b.n	800a0fc <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_NO_DEC:
      *val = LSM6DSL_FIFO_GY_NO_DEC;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	701a      	strb	r2, [r3, #0]
      break;
 800a0c2:	e01b      	b.n	800a0fc <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_2:
      *val = LSM6DSL_FIFO_GY_DEC_2;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	701a      	strb	r2, [r3, #0]
      break;
 800a0ca:	e017      	b.n	800a0fc <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_3:
      *val = LSM6DSL_FIFO_GY_DEC_3;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	2203      	movs	r2, #3
 800a0d0:	701a      	strb	r2, [r3, #0]
      break;
 800a0d2:	e013      	b.n	800a0fc <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_4:
      *val = LSM6DSL_FIFO_GY_DEC_4;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	2204      	movs	r2, #4
 800a0d8:	701a      	strb	r2, [r3, #0]
      break;
 800a0da:	e00f      	b.n	800a0fc <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_8:
      *val = LSM6DSL_FIFO_GY_DEC_8;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2205      	movs	r2, #5
 800a0e0:	701a      	strb	r2, [r3, #0]
      break;
 800a0e2:	e00b      	b.n	800a0fc <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_16:
      *val = LSM6DSL_FIFO_GY_DEC_16;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	2206      	movs	r2, #6
 800a0e8:	701a      	strb	r2, [r3, #0]
      break;
 800a0ea:	e007      	b.n	800a0fc <lsm6dsl_fifo_gy_batch_get+0x94>
    case LSM6DSL_FIFO_GY_DEC_32:
      *val = LSM6DSL_FIFO_GY_DEC_32;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	2207      	movs	r2, #7
 800a0f0:	701a      	strb	r2, [r3, #0]
      break;
 800a0f2:	e003      	b.n	800a0fc <lsm6dsl_fifo_gy_batch_get+0x94>
    default:
      *val = LSM6DSL_FIFO_GY_DEC_ND;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	2208      	movs	r2, #8
 800a0f8:	701a      	strb	r2, [r3, #0]
      break;
 800a0fa:	bf00      	nop
  }

  return ret;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop

0800a108 <lsm6dsl_fifo_mode_set>:
  * @param  val    Change the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800a114:	f107 0208 	add.w	r2, r7, #8
 800a118:	2301      	movs	r3, #1
 800a11a:	210a      	movs	r1, #10
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7ff f9ab 	bl	8009478 <lsm6dsl_read_reg>
 800a122:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10f      	bne.n	800a14a <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 800a12a:	78fb      	ldrb	r3, [r7, #3]
 800a12c:	f003 0307 	and.w	r3, r3, #7
 800a130:	b2da      	uxtb	r2, r3
 800a132:	7a3b      	ldrb	r3, [r7, #8]
 800a134:	f362 0302 	bfi	r3, r2, #0, #3
 800a138:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800a13a:	f107 0208 	add.w	r2, r7, #8
 800a13e:	2301      	movs	r3, #1
 800a140:	210a      	movs	r1, #10
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7ff f9b0 	bl	80094a8 <lsm6dsl_write_reg>
 800a148:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800a14a:	68fb      	ldr	r3, [r7, #12]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <lsm6dsl_fifo_mode_get>:
  * @param  val    Get the values of fifo_mode in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_get(stmdev_ctx_t *ctx, lsm6dsl_fifo_mode_t *val)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800a15e:	f107 0208 	add.w	r2, r7, #8
 800a162:	2301      	movs	r3, #1
 800a164:	210a      	movs	r1, #10
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7ff f986 	bl	8009478 <lsm6dsl_read_reg>
 800a16c:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl5.fifo_mode) {
 800a16e:	7a3b      	ldrb	r3, [r7, #8]
 800a170:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b06      	cmp	r3, #6
 800a178:	d824      	bhi.n	800a1c4 <lsm6dsl_fifo_mode_get+0x70>
 800a17a:	a201      	add	r2, pc, #4	; (adr r2, 800a180 <lsm6dsl_fifo_mode_get+0x2c>)
 800a17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a180:	0800a19d 	.word	0x0800a19d
 800a184:	0800a1a5 	.word	0x0800a1a5
 800a188:	0800a1c5 	.word	0x0800a1c5
 800a18c:	0800a1ad 	.word	0x0800a1ad
 800a190:	0800a1b5 	.word	0x0800a1b5
 800a194:	0800a1c5 	.word	0x0800a1c5
 800a198:	0800a1bd 	.word	0x0800a1bd
    case LSM6DSL_BYPASS_MODE:
      *val = LSM6DSL_BYPASS_MODE;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	701a      	strb	r2, [r3, #0]
      break;
 800a1a2:	e013      	b.n	800a1cc <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_FIFO_MODE:
      *val = LSM6DSL_FIFO_MODE;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	701a      	strb	r2, [r3, #0]
      break;
 800a1aa:	e00f      	b.n	800a1cc <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_STREAM_TO_FIFO_MODE:
      *val = LSM6DSL_STREAM_TO_FIFO_MODE;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	2203      	movs	r2, #3
 800a1b0:	701a      	strb	r2, [r3, #0]
      break;
 800a1b2:	e00b      	b.n	800a1cc <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_BYPASS_TO_STREAM_MODE:
      *val = LSM6DSL_BYPASS_TO_STREAM_MODE;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	2204      	movs	r2, #4
 800a1b8:	701a      	strb	r2, [r3, #0]
      break;
 800a1ba:	e007      	b.n	800a1cc <lsm6dsl_fifo_mode_get+0x78>
    case LSM6DSL_STREAM_MODE:
      *val = LSM6DSL_STREAM_MODE;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	2206      	movs	r2, #6
 800a1c0:	701a      	strb	r2, [r3, #0]
      break;
 800a1c2:	e003      	b.n	800a1cc <lsm6dsl_fifo_mode_get+0x78>
    default:
      *val = LSM6DSL_FIFO_MODE_ND;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	2208      	movs	r2, #8
 800a1c8:	701a      	strb	r2, [r3, #0]
      break;
 800a1ca:	bf00      	nop
  }

  return ret;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop

0800a1d8 <lsm6dsl_fifo_data_rate_set>:
  * @param  val    Change the values of odr_fifo in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_set(stmdev_ctx_t *ctx, lsm6dsl_odr_fifo_t val)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800a1e4:	f107 0208 	add.w	r2, r7, #8
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	210a      	movs	r1, #10
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7ff f943 	bl	8009478 <lsm6dsl_read_reg>
 800a1f2:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10f      	bne.n	800a21a <lsm6dsl_fifo_data_rate_set+0x42>
    fifo_ctrl5.odr_fifo = (uint8_t)val;
 800a1fa:	78fb      	ldrb	r3, [r7, #3]
 800a1fc:	f003 030f 	and.w	r3, r3, #15
 800a200:	b2da      	uxtb	r2, r3
 800a202:	7a3b      	ldrb	r3, [r7, #8]
 800a204:	f362 03c6 	bfi	r3, r2, #3, #4
 800a208:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800a20a:	f107 0208 	add.w	r2, r7, #8
 800a20e:	2301      	movs	r3, #1
 800a210:	210a      	movs	r1, #10
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7ff f948 	bl	80094a8 <lsm6dsl_write_reg>
 800a218:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800a21a:	68fb      	ldr	r3, [r7, #12]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <lsm6dsl_fifo_data_rate_get>:
  * @param  val    Get the values of odr_fifo in reg FIFO_CTRL5
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_data_rate_get(stmdev_ctx_t *ctx, lsm6dsl_odr_fifo_t *val)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
 800a22e:	f107 0208 	add.w	r2, r7, #8
 800a232:	2301      	movs	r3, #1
 800a234:	210a      	movs	r1, #10
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f7ff f91e 	bl	8009478 <lsm6dsl_read_reg>
 800a23c:	60f8      	str	r0, [r7, #12]
  switch (fifo_ctrl5.odr_fifo) {
 800a23e:	7a3b      	ldrb	r3, [r7, #8]
 800a240:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b0a      	cmp	r3, #10
 800a248:	d844      	bhi.n	800a2d4 <lsm6dsl_fifo_data_rate_get+0xb0>
 800a24a:	a201      	add	r2, pc, #4	; (adr r2, 800a250 <lsm6dsl_fifo_data_rate_get+0x2c>)
 800a24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a250:	0800a27d 	.word	0x0800a27d
 800a254:	0800a285 	.word	0x0800a285
 800a258:	0800a28d 	.word	0x0800a28d
 800a25c:	0800a295 	.word	0x0800a295
 800a260:	0800a29d 	.word	0x0800a29d
 800a264:	0800a2a5 	.word	0x0800a2a5
 800a268:	0800a2ad 	.word	0x0800a2ad
 800a26c:	0800a2b5 	.word	0x0800a2b5
 800a270:	0800a2bd 	.word	0x0800a2bd
 800a274:	0800a2c5 	.word	0x0800a2c5
 800a278:	0800a2cd 	.word	0x0800a2cd
    case LSM6DSL_FIFO_DISABLE:
      *val = LSM6DSL_FIFO_DISABLE;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	2200      	movs	r2, #0
 800a280:	701a      	strb	r2, [r3, #0]
      break;
 800a282:	e02b      	b.n	800a2dc <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_12Hz5:
      *val = LSM6DSL_FIFO_12Hz5;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	2201      	movs	r2, #1
 800a288:	701a      	strb	r2, [r3, #0]
      break;
 800a28a:	e027      	b.n	800a2dc <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_26Hz:
      *val = LSM6DSL_FIFO_26Hz;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2202      	movs	r2, #2
 800a290:	701a      	strb	r2, [r3, #0]
      break;
 800a292:	e023      	b.n	800a2dc <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_52Hz:
      *val = LSM6DSL_FIFO_52Hz;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	2203      	movs	r2, #3
 800a298:	701a      	strb	r2, [r3, #0]
      break;
 800a29a:	e01f      	b.n	800a2dc <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_104Hz:
      *val = LSM6DSL_FIFO_104Hz;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2204      	movs	r2, #4
 800a2a0:	701a      	strb	r2, [r3, #0]
      break;
 800a2a2:	e01b      	b.n	800a2dc <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_208Hz:
      *val = LSM6DSL_FIFO_208Hz;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	2205      	movs	r2, #5
 800a2a8:	701a      	strb	r2, [r3, #0]
      break;
 800a2aa:	e017      	b.n	800a2dc <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_416Hz:
      *val = LSM6DSL_FIFO_416Hz;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	2206      	movs	r2, #6
 800a2b0:	701a      	strb	r2, [r3, #0]
      break;
 800a2b2:	e013      	b.n	800a2dc <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_833Hz:
      *val = LSM6DSL_FIFO_833Hz;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2207      	movs	r2, #7
 800a2b8:	701a      	strb	r2, [r3, #0]
      break;
 800a2ba:	e00f      	b.n	800a2dc <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_1k66Hz:
      *val = LSM6DSL_FIFO_1k66Hz;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	2208      	movs	r2, #8
 800a2c0:	701a      	strb	r2, [r3, #0]
      break;
 800a2c2:	e00b      	b.n	800a2dc <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_3k33Hz:
      *val = LSM6DSL_FIFO_3k33Hz;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	2209      	movs	r2, #9
 800a2c8:	701a      	strb	r2, [r3, #0]
      break;
 800a2ca:	e007      	b.n	800a2dc <lsm6dsl_fifo_data_rate_get+0xb8>
    case LSM6DSL_FIFO_6k66Hz:
      *val = LSM6DSL_FIFO_6k66Hz;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	220a      	movs	r2, #10
 800a2d0:	701a      	strb	r2, [r3, #0]
      break;
 800a2d2:	e003      	b.n	800a2dc <lsm6dsl_fifo_data_rate_get+0xb8>
    default:
      *val = LSM6DSL_FIFO_RATE_ND;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	220b      	movs	r2, #11
 800a2d8:	701a      	strb	r2, [r3, #0]
      break;
 800a2da:	bf00      	nop
  }

  return ret;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop

0800a2e8 <__NVIC_SystemReset>:
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a2ec:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a2f0:	4b05      	ldr	r3, [pc, #20]	; (800a308 <__NVIC_SystemReset+0x20>)
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a2f8:	4903      	ldr	r1, [pc, #12]	; (800a308 <__NVIC_SystemReset+0x20>)
 800a2fa:	4b04      	ldr	r3, [pc, #16]	; (800a30c <__NVIC_SystemReset+0x24>)
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	60cb      	str	r3, [r1, #12]
 800a300:	f3bf 8f4f 	dsb	sy
    __NOP();
 800a304:	bf00      	nop
 800a306:	e7fd      	b.n	800a304 <__NVIC_SystemReset+0x1c>
 800a308:	e000ed00 	.word	0xe000ed00
 800a30c:	05fa0004 	.word	0x05fa0004

0800a310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b0b4      	sub	sp, #208	; 0xd0
 800a314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	reset_cause_t reset_cause = reset_cause_get();
 800a316:	f7fe fbad 	bl	8008a74 <reset_cause_get>
 800a31a:	4603      	mov	r3, r0
 800a31c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a320:	f7f6 fdca 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a324:	f000 f862 	bl	800a3ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a328:	f000 fa98 	bl	800a85c <MX_GPIO_Init>
  MX_DMA_Init();
 800a32c:	f000 fa6e 	bl	800a80c <MX_DMA_Init>
  MX_CRC_Init();
 800a330:	f000 f8e2 	bl	800a4f8 <MX_CRC_Init>
  MX_USART2_UART_Init();
 800a334:	f000 fa40 	bl	800a7b8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800a338:	f000 f9c8 	bl	800a6cc <MX_TIM3_Init>
  MX_I2C1_Init();
 800a33c:	f000 f8f0 	bl	800a520 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
#ifdef IWDG_ENABLE
  MX_IWDG_Init();
 800a340:	f000 f91c 	bl	800a57c <MX_IWDG_Init>
#endif

#ifdef UART_RX_DMA
  HAL_UART_Receive_DMA(&huart2, &s_uart_buffer._rx_single_char, 1);
 800a344:	2201      	movs	r2, #1
 800a346:	4920      	ldr	r1, [pc, #128]	; (800a3c8 <main+0xb8>)
 800a348:	4820      	ldr	r0, [pc, #128]	; (800a3cc <main+0xbc>)
 800a34a:	f7fd fabb 	bl	80078c4 <HAL_UART_Receive_DMA>
#else
  HAL_UART_Receive_IT(&huart2, &s_uart_buffer._rx_single_char, 1);
#endif

  if (s_assert_struct.flag == ASSERT_FLAG_ON)
 800a34e:	4b20      	ldr	r3, [pc, #128]	; (800a3d0 <main+0xc0>)
 800a350:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a354:	2baa      	cmp	r3, #170	; 0xaa
 800a356:	d10a      	bne.n	800a36e <main+0x5e>
  {
	  char temp [100];
	  sprintf(temp, "Problem found! Path: %s\tLine: %u\n", s_assert_struct._file, (unsigned int)s_assert_struct._line);
 800a358:	4b1d      	ldr	r3, [pc, #116]	; (800a3d0 <main+0xc0>)
 800a35a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a35c:	1d38      	adds	r0, r7, #4
 800a35e:	4a1c      	ldr	r2, [pc, #112]	; (800a3d0 <main+0xc0>)
 800a360:	491c      	ldr	r1, [pc, #112]	; (800a3d4 <main+0xc4>)
 800a362:	f001 fb59 	bl	800ba18 <siprintf>
	  uart_print(temp);
 800a366:	1d3b      	adds	r3, r7, #4
 800a368:	4618      	mov	r0, r3
 800a36a:	f000 fbb3 	bl	800aad4 <uart_print>
  }


  LSM6DSL_Init();
 800a36e:	f7fe fd4f 	bl	8008e10 <LSM6DSL_Init>

  char temp [100];
  sprintf(temp, "The system reset cause is \%s\"\n", reset_cause_get_name(reset_cause));
 800a372:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe fbce 	bl	8008b18 <reset_cause_get_name>
 800a37c:	4602      	mov	r2, r0
 800a37e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a382:	4915      	ldr	r1, [pc, #84]	; (800a3d8 <main+0xc8>)
 800a384:	4618      	mov	r0, r3
 800a386:	f001 fb47 	bl	800ba18 <siprintf>
  uart_print(temp);
 800a38a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 fba0 	bl	800aad4 <uart_print>

  uart_print(HELLO_WORLD);
 800a394:	4811      	ldr	r0, [pc, #68]	; (800a3dc <main+0xcc>)
 800a396:	f000 fb9d 	bl	800aad4 <uart_print>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef IWDG_ENABLE
	  kickDog();
 800a39a:	f000 fbc9 	bl	800ab30 <kickDog>
#endif

	  if (s_uart_buffer._rx_ready_command)
 800a39e:	4b10      	ldr	r3, [pc, #64]	; (800a3e0 <main+0xd0>)
 800a3a0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d001      	beq.n	800a3ac <main+0x9c>
	  {
		  uart_rx_ready_command_handler();
 800a3a8:	f000 fb3c 	bl	800aa24 <uart_rx_ready_command_handler>
	  }
	  if (int1_occurred)
 800a3ac:	4b0d      	ldr	r3, [pc, #52]	; (800a3e4 <main+0xd4>)
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d0f2      	beq.n	800a39a <main+0x8a>
	  {
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800a3b4:	2120      	movs	r1, #32
 800a3b6:	480c      	ldr	r0, [pc, #48]	; (800a3e8 <main+0xd8>)
 800a3b8:	f7f8 fcbe 	bl	8002d38 <HAL_GPIO_TogglePin>
		  LSM6DSL_FIFO_Process();
 800a3bc:	f7fe fe06 	bl	8008fcc <LSM6DSL_FIFO_Process>
		  //LSM6DSL_Per_Sample_Process();
		  int1_occurred = false;
 800a3c0:	4b08      	ldr	r3, [pc, #32]	; (800a3e4 <main+0xd4>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	701a      	strb	r2, [r3, #0]
	  kickDog();
 800a3c6:	e7e8      	b.n	800a39a <main+0x8a>
 800a3c8:	20000805 	.word	0x20000805
 800a3cc:	2000088c 	.word	0x2000088c
 800a3d0:	20000000 	.word	0x20000000
 800a3d4:	0800db00 	.word	0x0800db00
 800a3d8:	0800db24 	.word	0x0800db24
 800a3dc:	0800db44 	.word	0x0800db44
 800a3e0:	200007a0 	.word	0x200007a0
 800a3e4:	200005a9 	.word	0x200005a9
 800a3e8:	40020000 	.word	0x40020000

0800a3ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b09a      	sub	sp, #104	; 0x68
 800a3f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a3f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a3f6:	2230      	movs	r2, #48	; 0x30
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f000 fea7 	bl	800b14e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a404:	2200      	movs	r2, #0
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	605a      	str	r2, [r3, #4]
 800a40a:	609a      	str	r2, [r3, #8]
 800a40c:	60da      	str	r2, [r3, #12]
 800a40e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a410:	f107 030c 	add.w	r3, r7, #12
 800a414:	2200      	movs	r2, #0
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	605a      	str	r2, [r3, #4]
 800a41a:	609a      	str	r2, [r3, #8]
 800a41c:	60da      	str	r2, [r3, #12]
 800a41e:	611a      	str	r2, [r3, #16]
 800a420:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a422:	2300      	movs	r3, #0
 800a424:	60bb      	str	r3, [r7, #8]
 800a426:	4b32      	ldr	r3, [pc, #200]	; (800a4f0 <SystemClock_Config+0x104>)
 800a428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42a:	4a31      	ldr	r2, [pc, #196]	; (800a4f0 <SystemClock_Config+0x104>)
 800a42c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a430:	6413      	str	r3, [r2, #64]	; 0x40
 800a432:	4b2f      	ldr	r3, [pc, #188]	; (800a4f0 <SystemClock_Config+0x104>)
 800a434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a43a:	60bb      	str	r3, [r7, #8]
 800a43c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a43e:	2300      	movs	r3, #0
 800a440:	607b      	str	r3, [r7, #4]
 800a442:	4b2c      	ldr	r3, [pc, #176]	; (800a4f4 <SystemClock_Config+0x108>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a2b      	ldr	r2, [pc, #172]	; (800a4f4 <SystemClock_Config+0x108>)
 800a448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	4b29      	ldr	r3, [pc, #164]	; (800a4f4 <SystemClock_Config+0x108>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a456:	607b      	str	r3, [r7, #4]
 800a458:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800a45a:	230e      	movs	r3, #14
 800a45c:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a45e:	2301      	movs	r3, #1
 800a460:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a462:	2301      	movs	r3, #1
 800a464:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a466:	2310      	movs	r3, #16
 800a468:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800a46a:	2301      	movs	r3, #1
 800a46c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a46e:	2302      	movs	r3, #2
 800a470:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a472:	2300      	movs	r3, #0
 800a474:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 16;
 800a476:	2310      	movs	r3, #16
 800a478:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 800a47a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800a47e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800a480:	2304      	movs	r3, #4
 800a482:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a484:	2304      	movs	r3, #4
 800a486:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a488:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7f9 fd63 	bl	8003f58 <HAL_RCC_OscConfig>
 800a492:	4603      	mov	r3, r0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800a498:	f000 fb54 	bl	800ab44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a49c:	230f      	movs	r3, #15
 800a49e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a4a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a4b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4b6:	2102      	movs	r1, #2
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fa f86d 	bl	8004598 <HAL_RCC_ClockConfig>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800a4c4:	f000 fb3e 	bl	800ab44 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a4cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4d0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a4d2:	f107 030c 	add.w	r3, r7, #12
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fa faf8 	bl	8004acc <HAL_RCCEx_PeriphCLKConfig>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d001      	beq.n	800a4e6 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800a4e2:	f000 fb2f 	bl	800ab44 <Error_Handler>
  }
}
 800a4e6:	bf00      	nop
 800a4e8:	3768      	adds	r7, #104	; 0x68
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	40023800 	.word	0x40023800
 800a4f4:	40007000 	.word	0x40007000

0800a4f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800a4fc:	4b06      	ldr	r3, [pc, #24]	; (800a518 <MX_CRC_Init+0x20>)
 800a4fe:	4a07      	ldr	r2, [pc, #28]	; (800a51c <MX_CRC_Init+0x24>)
 800a500:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a502:	4805      	ldr	r0, [pc, #20]	; (800a518 <MX_CRC_Init+0x20>)
 800a504:	f7f6 fec4 	bl	8001290 <HAL_CRC_Init>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800a50e:	f000 fb19 	bl	800ab44 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800a512:	bf00      	nop
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	200006f8 	.word	0x200006f8
 800a51c:	40023000 	.word	0x40023000

0800a520 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a524:	4b12      	ldr	r3, [pc, #72]	; (800a570 <MX_I2C1_Init+0x50>)
 800a526:	4a13      	ldr	r2, [pc, #76]	; (800a574 <MX_I2C1_Init+0x54>)
 800a528:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800a52a:	4b11      	ldr	r3, [pc, #68]	; (800a570 <MX_I2C1_Init+0x50>)
 800a52c:	4a12      	ldr	r2, [pc, #72]	; (800a578 <MX_I2C1_Init+0x58>)
 800a52e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a530:	4b0f      	ldr	r3, [pc, #60]	; (800a570 <MX_I2C1_Init+0x50>)
 800a532:	2200      	movs	r2, #0
 800a534:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a536:	4b0e      	ldr	r3, [pc, #56]	; (800a570 <MX_I2C1_Init+0x50>)
 800a538:	2200      	movs	r2, #0
 800a53a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a53c:	4b0c      	ldr	r3, [pc, #48]	; (800a570 <MX_I2C1_Init+0x50>)
 800a53e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a542:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a544:	4b0a      	ldr	r3, [pc, #40]	; (800a570 <MX_I2C1_Init+0x50>)
 800a546:	2200      	movs	r2, #0
 800a548:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a54a:	4b09      	ldr	r3, [pc, #36]	; (800a570 <MX_I2C1_Init+0x50>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a550:	4b07      	ldr	r3, [pc, #28]	; (800a570 <MX_I2C1_Init+0x50>)
 800a552:	2200      	movs	r2, #0
 800a554:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a556:	4b06      	ldr	r3, [pc, #24]	; (800a570 <MX_I2C1_Init+0x50>)
 800a558:	2200      	movs	r2, #0
 800a55a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a55c:	4804      	ldr	r0, [pc, #16]	; (800a570 <MX_I2C1_Init+0x50>)
 800a55e:	f7f8 fc2b 	bl	8002db8 <HAL_I2C_Init>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a568:	f000 faec 	bl	800ab44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a56c:	bf00      	nop
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	20000698 	.word	0x20000698
 800a574:	40005400 	.word	0x40005400
 800a578:	000186a0 	.word	0x000186a0

0800a57c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800a580:	4b09      	ldr	r3, [pc, #36]	; (800a5a8 <MX_IWDG_Init+0x2c>)
 800a582:	4a0a      	ldr	r2, [pc, #40]	; (800a5ac <MX_IWDG_Init+0x30>)
 800a584:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800a586:	4b08      	ldr	r3, [pc, #32]	; (800a5a8 <MX_IWDG_Init+0x2c>)
 800a588:	2206      	movs	r2, #6
 800a58a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 625;
 800a58c:	4b06      	ldr	r3, [pc, #24]	; (800a5a8 <MX_IWDG_Init+0x2c>)
 800a58e:	f240 2271 	movw	r2, #625	; 0x271
 800a592:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800a594:	4804      	ldr	r0, [pc, #16]	; (800a5a8 <MX_IWDG_Init+0x2c>)
 800a596:	f7f9 fc5f 	bl	8003e58 <HAL_IWDG_Init>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800a5a0:	f000 fad0 	bl	800ab44 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800a5a4:	bf00      	nop
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	200006ec 	.word	0x200006ec
 800a5ac:	40003000 	.word	0x40003000

0800a5b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b090      	sub	sp, #64	; 0x40
 800a5b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a5b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	605a      	str	r2, [r3, #4]
 800a5c0:	609a      	str	r2, [r3, #8]
 800a5c2:	60da      	str	r2, [r3, #12]
 800a5c4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800a5ca:	463b      	mov	r3, r7
 800a5cc:	2228      	movs	r2, #40	; 0x28
 800a5ce:	2100      	movs	r1, #0
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f000 fdbc 	bl	800b14e <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800a5d6:	4b3b      	ldr	r3, [pc, #236]	; (800a6c4 <MX_RTC_Init+0x114>)
 800a5d8:	4a3b      	ldr	r2, [pc, #236]	; (800a6c8 <MX_RTC_Init+0x118>)
 800a5da:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a5dc:	4b39      	ldr	r3, [pc, #228]	; (800a6c4 <MX_RTC_Init+0x114>)
 800a5de:	2200      	movs	r2, #0
 800a5e0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a5e2:	4b38      	ldr	r3, [pc, #224]	; (800a6c4 <MX_RTC_Init+0x114>)
 800a5e4:	227f      	movs	r2, #127	; 0x7f
 800a5e6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a5e8:	4b36      	ldr	r3, [pc, #216]	; (800a6c4 <MX_RTC_Init+0x114>)
 800a5ea:	22ff      	movs	r2, #255	; 0xff
 800a5ec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a5ee:	4b35      	ldr	r3, [pc, #212]	; (800a6c4 <MX_RTC_Init+0x114>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a5f4:	4b33      	ldr	r3, [pc, #204]	; (800a6c4 <MX_RTC_Init+0x114>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a5fa:	4b32      	ldr	r3, [pc, #200]	; (800a6c4 <MX_RTC_Init+0x114>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a600:	4830      	ldr	r0, [pc, #192]	; (800a6c4 <MX_RTC_Init+0x114>)
 800a602:	f7fa fc77 	bl	8004ef4 <HAL_RTC_Init>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d001      	beq.n	800a610 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800a60c:	f000 fa9a 	bl	800ab44 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 800a610:	2300      	movs	r3, #0
 800a612:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 800a616:	2300      	movs	r3, #0
 800a618:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a622:	2300      	movs	r3, #0
 800a624:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a626:	2300      	movs	r3, #0
 800a628:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800a62a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a62e:	2200      	movs	r2, #0
 800a630:	4619      	mov	r1, r3
 800a632:	4824      	ldr	r0, [pc, #144]	; (800a6c4 <MX_RTC_Init+0x114>)
 800a634:	f7fa fdf0 	bl	8005218 <HAL_RTC_SetTime>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800a63e:	f000 fa81 	bl	800ab44 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800a642:	2301      	movs	r3, #1
 800a644:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800a648:	2301      	movs	r3, #1
 800a64a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 800a64e:	2301      	movs	r3, #1
 800a650:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 800a654:	2300      	movs	r3, #0
 800a656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800a65a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a65e:	2200      	movs	r2, #0
 800a660:	4619      	mov	r1, r3
 800a662:	4818      	ldr	r0, [pc, #96]	; (800a6c4 <MX_RTC_Init+0x114>)
 800a664:	f7fa ff44 	bl	80054f0 <HAL_RTC_SetDate>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800a66e:	f000 fa69 	bl	800ab44 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800a676:	2300      	movs	r3, #0
 800a678:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 1;
 800a67a:	2301      	movs	r3, #1
 800a67c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800a67e:	2300      	movs	r3, #0
 800a680:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a682:	2300      	movs	r3, #0
 800a684:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a686:	2300      	movs	r3, #0
 800a688:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 800a68a:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 800a68e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a690:	2300      	movs	r3, #0
 800a692:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800a694:	2300      	movs	r3, #0
 800a696:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800a698:	2301      	movs	r3, #1
 800a69a:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800a69e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800a6a4:	463b      	mov	r3, r7
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4806      	ldr	r0, [pc, #24]	; (800a6c4 <MX_RTC_Init+0x114>)
 800a6ac:	f7fb f850 	bl	8005750 <HAL_RTC_SetAlarm_IT>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800a6b6:	f000 fa45 	bl	800ab44 <Error_Handler>
		0x1FFU) != HAL_OK) {
    		Error_Handler();
      	}*/
  /* USER CODE END RTC_Init 2 */

}
 800a6ba:	bf00      	nop
 800a6bc:	3740      	adds	r7, #64	; 0x40
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	2000086c 	.word	0x2000086c
 800a6c8:	40002800 	.word	0x40002800

0800a6cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08e      	sub	sp, #56	; 0x38
 800a6d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a6d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	601a      	str	r2, [r3, #0]
 800a6da:	605a      	str	r2, [r3, #4]
 800a6dc:	609a      	str	r2, [r3, #8]
 800a6de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a6e0:	f107 0320 	add.w	r3, r7, #32
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	601a      	str	r2, [r3, #0]
 800a6e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a6ea:	1d3b      	adds	r3, r7, #4
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	601a      	str	r2, [r3, #0]
 800a6f0:	605a      	str	r2, [r3, #4]
 800a6f2:	609a      	str	r2, [r3, #8]
 800a6f4:	60da      	str	r2, [r3, #12]
 800a6f6:	611a      	str	r2, [r3, #16]
 800a6f8:	615a      	str	r2, [r3, #20]
 800a6fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a6fc:	4b2c      	ldr	r3, [pc, #176]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a6fe:	4a2d      	ldr	r2, [pc, #180]	; (800a7b4 <MX_TIM3_Init+0xe8>)
 800a700:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800a702:	4b2b      	ldr	r3, [pc, #172]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a704:	2253      	movs	r2, #83	; 0x53
 800a706:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a708:	4b29      	ldr	r3, [pc, #164]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800a70e:	4b28      	ldr	r3, [pc, #160]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a710:	2263      	movs	r2, #99	; 0x63
 800a712:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a714:	4b26      	ldr	r3, [pc, #152]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a716:	2200      	movs	r2, #0
 800a718:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a71a:	4b25      	ldr	r3, [pc, #148]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a720:	4823      	ldr	r0, [pc, #140]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a722:	f7fb fbdf 	bl	8005ee4 <HAL_TIM_Base_Init>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800a72c:	f000 fa0a 	bl	800ab44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a734:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a73a:	4619      	mov	r1, r3
 800a73c:	481c      	ldr	r0, [pc, #112]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a73e:	f7fc f84d 	bl	80067dc <HAL_TIM_ConfigClockSource>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d001      	beq.n	800a74c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800a748:	f000 f9fc 	bl	800ab44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800a74c:	4818      	ldr	r0, [pc, #96]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a74e:	f7fb fc6b 	bl	8006028 <HAL_TIM_PWM_Init>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800a758:	f000 f9f4 	bl	800ab44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a75c:	2300      	movs	r3, #0
 800a75e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a760:	2300      	movs	r3, #0
 800a762:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a764:	f107 0320 	add.w	r3, r7, #32
 800a768:	4619      	mov	r1, r3
 800a76a:	4811      	ldr	r0, [pc, #68]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a76c:	f7fc feca 	bl	8007504 <HAL_TIMEx_MasterConfigSynchronization>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d001      	beq.n	800a77a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800a776:	f000 f9e5 	bl	800ab44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a77a:	2360      	movs	r3, #96	; 0x60
 800a77c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a782:	2300      	movs	r3, #0
 800a784:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a786:	2300      	movs	r3, #0
 800a788:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a78a:	1d3b      	adds	r3, r7, #4
 800a78c:	2200      	movs	r2, #0
 800a78e:	4619      	mov	r1, r3
 800a790:	4807      	ldr	r0, [pc, #28]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a792:	f7fb fe79 	bl	8006488 <HAL_TIM_PWM_ConfigChannel>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800a79c:	f000 f9d2 	bl	800ab44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800a7a0:	4803      	ldr	r0, [pc, #12]	; (800a7b0 <MX_TIM3_Init+0xe4>)
 800a7a2:	f000 fae3 	bl	800ad6c <HAL_TIM_MspPostInit>

}
 800a7a6:	bf00      	nop
 800a7a8:	3738      	adds	r7, #56	; 0x38
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20000700 	.word	0x20000700
 800a7b4:	40000400 	.word	0x40000400

0800a7b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a7bc:	4b11      	ldr	r3, [pc, #68]	; (800a804 <MX_USART2_UART_Init+0x4c>)
 800a7be:	4a12      	ldr	r2, [pc, #72]	; (800a808 <MX_USART2_UART_Init+0x50>)
 800a7c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a7c2:	4b10      	ldr	r3, [pc, #64]	; (800a804 <MX_USART2_UART_Init+0x4c>)
 800a7c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a7c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a7ca:	4b0e      	ldr	r3, [pc, #56]	; (800a804 <MX_USART2_UART_Init+0x4c>)
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a7d0:	4b0c      	ldr	r3, [pc, #48]	; (800a804 <MX_USART2_UART_Init+0x4c>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a7d6:	4b0b      	ldr	r3, [pc, #44]	; (800a804 <MX_USART2_UART_Init+0x4c>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a7dc:	4b09      	ldr	r3, [pc, #36]	; (800a804 <MX_USART2_UART_Init+0x4c>)
 800a7de:	220c      	movs	r2, #12
 800a7e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a7e2:	4b08      	ldr	r3, [pc, #32]	; (800a804 <MX_USART2_UART_Init+0x4c>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a7e8:	4b06      	ldr	r3, [pc, #24]	; (800a804 <MX_USART2_UART_Init+0x4c>)
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a7ee:	4805      	ldr	r0, [pc, #20]	; (800a804 <MX_USART2_UART_Init+0x4c>)
 800a7f0:	f7fc ff46 	bl	8007680 <HAL_UART_Init>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d001      	beq.n	800a7fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a7fa:	f000 f9a3 	bl	800ab44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a7fe:	bf00      	nop
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	2000088c 	.word	0x2000088c
 800a808:	40004400 	.word	0x40004400

0800a80c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a812:	2300      	movs	r3, #0
 800a814:	607b      	str	r3, [r7, #4]
 800a816:	4b10      	ldr	r3, [pc, #64]	; (800a858 <MX_DMA_Init+0x4c>)
 800a818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a81a:	4a0f      	ldr	r2, [pc, #60]	; (800a858 <MX_DMA_Init+0x4c>)
 800a81c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a820:	6313      	str	r3, [r2, #48]	; 0x30
 800a822:	4b0d      	ldr	r3, [pc, #52]	; (800a858 <MX_DMA_Init+0x4c>)
 800a824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a82a:	607b      	str	r3, [r7, #4]
 800a82c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800a82e:	2200      	movs	r2, #0
 800a830:	2100      	movs	r1, #0
 800a832:	2010      	movs	r0, #16
 800a834:	f7f6 fcc4 	bl	80011c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800a838:	2010      	movs	r0, #16
 800a83a:	f7f6 fced 	bl	8001218 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800a83e:	2200      	movs	r2, #0
 800a840:	2100      	movs	r1, #0
 800a842:	2011      	movs	r0, #17
 800a844:	f7f6 fcbc 	bl	80011c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800a848:	2011      	movs	r0, #17
 800a84a:	f7f6 fce5 	bl	8001218 <HAL_NVIC_EnableIRQ>

}
 800a84e:	bf00      	nop
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	40023800 	.word	0x40023800

0800a85c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b088      	sub	sp, #32
 800a860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a862:	f107 030c 	add.w	r3, r7, #12
 800a866:	2200      	movs	r2, #0
 800a868:	601a      	str	r2, [r3, #0]
 800a86a:	605a      	str	r2, [r3, #4]
 800a86c:	609a      	str	r2, [r3, #8]
 800a86e:	60da      	str	r2, [r3, #12]
 800a870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a872:	2300      	movs	r3, #0
 800a874:	60bb      	str	r3, [r7, #8]
 800a876:	4b29      	ldr	r3, [pc, #164]	; (800a91c <MX_GPIO_Init+0xc0>)
 800a878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a87a:	4a28      	ldr	r2, [pc, #160]	; (800a91c <MX_GPIO_Init+0xc0>)
 800a87c:	f043 0304 	orr.w	r3, r3, #4
 800a880:	6313      	str	r3, [r2, #48]	; 0x30
 800a882:	4b26      	ldr	r3, [pc, #152]	; (800a91c <MX_GPIO_Init+0xc0>)
 800a884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a886:	f003 0304 	and.w	r3, r3, #4
 800a88a:	60bb      	str	r3, [r7, #8]
 800a88c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a88e:	2300      	movs	r3, #0
 800a890:	607b      	str	r3, [r7, #4]
 800a892:	4b22      	ldr	r3, [pc, #136]	; (800a91c <MX_GPIO_Init+0xc0>)
 800a894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a896:	4a21      	ldr	r2, [pc, #132]	; (800a91c <MX_GPIO_Init+0xc0>)
 800a898:	f043 0301 	orr.w	r3, r3, #1
 800a89c:	6313      	str	r3, [r2, #48]	; 0x30
 800a89e:	4b1f      	ldr	r3, [pc, #124]	; (800a91c <MX_GPIO_Init+0xc0>)
 800a8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a2:	f003 0301 	and.w	r3, r3, #1
 800a8a6:	607b      	str	r3, [r7, #4]
 800a8a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	603b      	str	r3, [r7, #0]
 800a8ae:	4b1b      	ldr	r3, [pc, #108]	; (800a91c <MX_GPIO_Init+0xc0>)
 800a8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b2:	4a1a      	ldr	r2, [pc, #104]	; (800a91c <MX_GPIO_Init+0xc0>)
 800a8b4:	f043 0302 	orr.w	r3, r3, #2
 800a8b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a8ba:	4b18      	ldr	r3, [pc, #96]	; (800a91c <MX_GPIO_Init+0xc0>)
 800a8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8be:	f003 0302 	and.w	r3, r3, #2
 800a8c2:	603b      	str	r3, [r7, #0]
 800a8c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2120      	movs	r1, #32
 800a8ca:	4815      	ldr	r0, [pc, #84]	; (800a920 <MX_GPIO_Init+0xc4>)
 800a8cc:	f7f8 fa02 	bl	8002cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a8d0:	2320      	movs	r3, #32
 800a8d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8e0:	f107 030c 	add.w	r3, r7, #12
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	480e      	ldr	r0, [pc, #56]	; (800a920 <MX_GPIO_Init+0xc4>)
 800a8e8:	f7f7 ff4c 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a8ec:	2320      	movs	r3, #32
 800a8ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a8f0:	4b0c      	ldr	r3, [pc, #48]	; (800a924 <MX_GPIO_Init+0xc8>)
 800a8f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8f8:	f107 030c 	add.w	r3, r7, #12
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	480a      	ldr	r0, [pc, #40]	; (800a928 <MX_GPIO_Init+0xcc>)
 800a900:	f7f7 ff40 	bl	8002784 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800a904:	2200      	movs	r2, #0
 800a906:	2100      	movs	r1, #0
 800a908:	2017      	movs	r0, #23
 800a90a:	f7f6 fc59 	bl	80011c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a90e:	2017      	movs	r0, #23
 800a910:	f7f6 fc82 	bl	8001218 <HAL_NVIC_EnableIRQ>

}
 800a914:	bf00      	nop
 800a916:	3720      	adds	r7, #32
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	40023800 	.word	0x40023800
 800a920:	40020000 	.word	0x40020000
 800a924:	10210000 	.word	0x10210000
 800a928:	40020400 	.word	0x40020400

0800a92c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
  s_uart_buffer.tx_busy = false;
 800a934:	4b04      	ldr	r3, [pc, #16]	; (800a948 <HAL_UART_TxCpltCallback+0x1c>)
 800a936:	2200      	movs	r2, #0
 800a938:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	200007a0 	.word	0x200007a0

0800a94c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */

#ifdef UART_RX_DMA
  HAL_UART_Receive_DMA(&huart2, &s_uart_buffer._rx_single_char, 1);
 800a954:	2201      	movs	r2, #1
 800a956:	491f      	ldr	r1, [pc, #124]	; (800a9d4 <HAL_UART_RxCpltCallback+0x88>)
 800a958:	481f      	ldr	r0, [pc, #124]	; (800a9d8 <HAL_UART_RxCpltCallback+0x8c>)
 800a95a:	f7fc ffb3 	bl	80078c4 <HAL_UART_Receive_DMA>
#else
  HAL_UART_Receive_IT(&huart2, &s_uart_buffer._rx_single_char, 1);
#endif

  if (s_uart_buffer._rx_ready_command)
 800a95e:	4b1f      	ldr	r3, [pc, #124]	; (800a9dc <HAL_UART_RxCpltCallback+0x90>)
 800a960:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800a964:	2b00      	cmp	r3, #0
 800a966:	d131      	bne.n	800a9cc <HAL_UART_RxCpltCallback+0x80>
  {
	  return;
  }

  if (s_uart_buffer._rx_single_char != '\n')
 800a968:	4b1c      	ldr	r3, [pc, #112]	; (800a9dc <HAL_UART_RxCpltCallback+0x90>)
 800a96a:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800a96e:	2b0a      	cmp	r3, #10
 800a970:	d016      	beq.n	800a9a0 <HAL_UART_RxCpltCallback+0x54>
  {
	if(s_uart_buffer._rx_index < BUFFER_SIZE)
 800a972:	4b1a      	ldr	r3, [pc, #104]	; (800a9dc <HAL_UART_RxCpltCallback+0x90>)
 800a974:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a978:	2b63      	cmp	r3, #99	; 0x63
 800a97a:	d828      	bhi.n	800a9ce <HAL_UART_RxCpltCallback+0x82>
	{
		s_uart_buffer._p_rx_buffer[s_uart_buffer._rx_index] = s_uart_buffer._rx_single_char;
 800a97c:	4b17      	ldr	r3, [pc, #92]	; (800a9dc <HAL_UART_RxCpltCallback+0x90>)
 800a97e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a982:	461a      	mov	r2, r3
 800a984:	4b15      	ldr	r3, [pc, #84]	; (800a9dc <HAL_UART_RxCpltCallback+0x90>)
 800a986:	f893 1065 	ldrb.w	r1, [r3, #101]	; 0x65
 800a98a:	4b14      	ldr	r3, [pc, #80]	; (800a9dc <HAL_UART_RxCpltCallback+0x90>)
 800a98c:	5499      	strb	r1, [r3, r2]
		s_uart_buffer._rx_index++;
 800a98e:	4b13      	ldr	r3, [pc, #76]	; (800a9dc <HAL_UART_RxCpltCallback+0x90>)
 800a990:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a994:	3301      	adds	r3, #1
 800a996:	b2da      	uxtb	r2, r3
 800a998:	4b10      	ldr	r3, [pc, #64]	; (800a9dc <HAL_UART_RxCpltCallback+0x90>)
 800a99a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800a99e:	e016      	b.n	800a9ce <HAL_UART_RxCpltCallback+0x82>
	}
  }
  else
  {
	  s_uart_buffer._p_rx_buffer[s_uart_buffer._rx_index] = s_uart_buffer._rx_single_char;
 800a9a0:	4b0e      	ldr	r3, [pc, #56]	; (800a9dc <HAL_UART_RxCpltCallback+0x90>)
 800a9a2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	4b0c      	ldr	r3, [pc, #48]	; (800a9dc <HAL_UART_RxCpltCallback+0x90>)
 800a9aa:	f893 1065 	ldrb.w	r1, [r3, #101]	; 0x65
 800a9ae:	4b0b      	ldr	r3, [pc, #44]	; (800a9dc <HAL_UART_RxCpltCallback+0x90>)
 800a9b0:	5499      	strb	r1, [r3, r2]
	  s_uart_buffer._rx_index++;
 800a9b2:	4b0a      	ldr	r3, [pc, #40]	; (800a9dc <HAL_UART_RxCpltCallback+0x90>)
 800a9b4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	b2da      	uxtb	r2, r3
 800a9bc:	4b07      	ldr	r3, [pc, #28]	; (800a9dc <HAL_UART_RxCpltCallback+0x90>)
 800a9be:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	  s_uart_buffer._rx_ready_command = true;
 800a9c2:	4b06      	ldr	r3, [pc, #24]	; (800a9dc <HAL_UART_RxCpltCallback+0x90>)
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800a9ca:	e000      	b.n	800a9ce <HAL_UART_RxCpltCallback+0x82>
	  return;
 800a9cc:	bf00      	nop
  }
}
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	20000805 	.word	0x20000805
 800a9d8:	2000088c 	.word	0x2000088c
 800a9dc:	200007a0 	.word	0x200007a0

0800a9e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if (GPIO_Pin == GPIO_PIN_5)
 800a9ea:	88fb      	ldrh	r3, [r7, #6]
 800a9ec:	2b20      	cmp	r3, #32
 800a9ee:	d102      	bne.n	800a9f6 <HAL_GPIO_EXTI_Callback+0x16>
  {
	  int1_occurred = true;
 800a9f0:	4b04      	ldr	r3, [pc, #16]	; (800aa04 <HAL_GPIO_EXTI_Callback+0x24>)
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	701a      	strb	r2, [r3, #0]
  }
}
 800a9f6:	bf00      	nop
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	200005a9 	.word	0x200005a9

0800aa08 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
  uart_print(TICK);
 800aa10:	4803      	ldr	r0, [pc, #12]	; (800aa20 <HAL_RTC_AlarmAEventCallback+0x18>)
 800aa12:	f000 f85f 	bl	800aad4 <uart_print>
}
 800aa16:	bf00      	nop
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	0800db54 	.word	0x0800db54

0800aa24 <uart_rx_ready_command_handler>:

void uart_rx_ready_command_handler(void)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	af00      	add	r7, sp, #0
	whichCommand();
 800aa28:	f000 f810 	bl	800aa4c <whichCommand>
	BufferInit(s_uart_buffer._p_rx_buffer);
 800aa2c:	4806      	ldr	r0, [pc, #24]	; (800aa48 <uart_rx_ready_command_handler+0x24>)
 800aa2e:	f7fd fe9f 	bl	8008770 <BufferInit>
	s_uart_buffer._rx_index = 0;
 800aa32:	4b05      	ldr	r3, [pc, #20]	; (800aa48 <uart_rx_ready_command_handler+0x24>)
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	s_uart_buffer._rx_ready_command = false;
 800aa3a:	4b03      	ldr	r3, [pc, #12]	; (800aa48 <uart_rx_ready_command_handler+0x24>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 800aa42:	bf00      	nop
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	200007a0 	.word	0x200007a0

0800aa4c <whichCommand>:

void whichCommand (void)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
	char* token = strtok((char*)s_uart_buffer._p_rx_buffer, " ");
 800aa52:	491c      	ldr	r1, [pc, #112]	; (800aac4 <whichCommand+0x78>)
 800aa54:	481c      	ldr	r0, [pc, #112]	; (800aac8 <whichCommand+0x7c>)
 800aa56:	f001 f827 	bl	800baa8 <strtok>
 800aa5a:	6038      	str	r0, [r7, #0]

	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	71fb      	strb	r3, [r7, #7]
 800aa60:	e02a      	b.n	800aab8 <whichCommand+0x6c>
	{
		if (strncmp(token, commands[i]._name, commands[i]._size)==0)
 800aa62:	79fa      	ldrb	r2, [r7, #7]
 800aa64:	4919      	ldr	r1, [pc, #100]	; (800aacc <whichCommand+0x80>)
 800aa66:	4613      	mov	r3, r2
 800aa68:	005b      	lsls	r3, r3, #1
 800aa6a:	4413      	add	r3, r2
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	440b      	add	r3, r1
 800aa70:	6818      	ldr	r0, [r3, #0]
 800aa72:	79fa      	ldrb	r2, [r7, #7]
 800aa74:	4915      	ldr	r1, [pc, #84]	; (800aacc <whichCommand+0x80>)
 800aa76:	4613      	mov	r3, r2
 800aa78:	005b      	lsls	r3, r3, #1
 800aa7a:	4413      	add	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	440b      	add	r3, r1
 800aa80:	3304      	adds	r3, #4
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	461a      	mov	r2, r3
 800aa86:	4601      	mov	r1, r0
 800aa88:	6838      	ldr	r0, [r7, #0]
 800aa8a:	f000 ffe5 	bl	800ba58 <strncmp>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10e      	bne.n	800aab2 <whichCommand+0x66>
		{
			commands[i].func_ptr(token);
 800aa94:	79fa      	ldrb	r2, [r7, #7]
 800aa96:	490d      	ldr	r1, [pc, #52]	; (800aacc <whichCommand+0x80>)
 800aa98:	4613      	mov	r3, r2
 800aa9a:	005b      	lsls	r3, r3, #1
 800aa9c:	4413      	add	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	440b      	add	r3, r1
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	6838      	ldr	r0, [r7, #0]
 800aaa8:	4798      	blx	r3
			uart_print(OK);
 800aaaa:	4809      	ldr	r0, [pc, #36]	; (800aad0 <whichCommand+0x84>)
 800aaac:	f000 f812 	bl	800aad4 <uart_print>
			return;
 800aab0:	e005      	b.n	800aabe <whichCommand+0x72>
	for (uint8_t i = 0; i < NUM_OF_COMMANDS; i++)
 800aab2:	79fb      	ldrb	r3, [r7, #7]
 800aab4:	3301      	adds	r3, #1
 800aab6:	71fb      	strb	r3, [r7, #7]
 800aab8:	79fb      	ldrb	r3, [r7, #7]
 800aaba:	2b10      	cmp	r3, #16
 800aabc:	d9d1      	bls.n	800aa62 <whichCommand+0x16>
		}
	}
}
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	0800db5c 	.word	0x0800db5c
 800aac8:	200007a0 	.word	0x200007a0
 800aacc:	0800db74 	.word	0x0800db74
 800aad0:	0800db60 	.word	0x0800db60

0800aad4 <uart_print>:

void uart_print(char* token)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
	while (s_uart_buffer.tx_busy);
 800aadc:	bf00      	nop
 800aade:	4b11      	ldr	r3, [pc, #68]	; (800ab24 <uart_print+0x50>)
 800aae0:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1fa      	bne.n	800aade <uart_print+0xa>
	memcpy((char*)s_uart_buffer._p_tx_buffer, token, sizeof(s_uart_buffer._p_tx_buffer));
 800aae8:	4b0e      	ldr	r3, [pc, #56]	; (800ab24 <uart_print+0x50>)
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	3367      	adds	r3, #103	; 0x67
 800aaee:	4611      	mov	r1, r2
 800aaf0:	2264      	movs	r2, #100	; 0x64
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f000 fb20 	bl	800b138 <memcpy>

#ifdef UART_TX_DMA
	while (HAL_UART_Transmit_DMA(&huart2, s_uart_buffer._p_tx_buffer, strlen(token)) != HAL_OK);
 800aaf8:	bf00      	nop
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f7f5 fb70 	bl	80001e0 <strlen>
 800ab00:	4603      	mov	r3, r0
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	461a      	mov	r2, r3
 800ab06:	4908      	ldr	r1, [pc, #32]	; (800ab28 <uart_print+0x54>)
 800ab08:	4808      	ldr	r0, [pc, #32]	; (800ab2c <uart_print+0x58>)
 800ab0a:	f7fc fe6f 	bl	80077ec <HAL_UART_Transmit_DMA>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1f2      	bne.n	800aafa <uart_print+0x26>
#else
	HAL_UART_Transmit(&huart2, s_uart_buffer._p_tx_buffer, strlen(token), 10);
#endif
	s_uart_buffer.tx_busy = true;
 800ab14:	4b03      	ldr	r3, [pc, #12]	; (800ab24 <uart_print+0x50>)
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
}
 800ab1c:	bf00      	nop
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	200007a0 	.word	0x200007a0
 800ab28:	20000807 	.word	0x20000807
 800ab2c:	2000088c 	.word	0x2000088c

0800ab30 <kickDog>:

#ifdef IWDG_ENABLE
void kickDog(void)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 800ab34:	4802      	ldr	r0, [pc, #8]	; (800ab40 <kickDog+0x10>)
 800ab36:	f7f9 f9ff 	bl	8003f38 <HAL_IWDG_Refresh>
}
 800ab3a:	bf00      	nop
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	200006ec 	.word	0x200006ec

0800ab44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	uart_print("Error");
 800ab48:	4801      	ldr	r0, [pc, #4]	; (800ab50 <Error_Handler+0xc>)
 800ab4a:	f7ff ffc3 	bl	800aad4 <uart_print>
	while(1);
 800ab4e:	e7fe      	b.n	800ab4e <Error_Handler+0xa>
 800ab50:	0800db64 	.word	0x0800db64

0800ab54 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	s_assert_struct.flag = ASSERT_FLAG_ON;
 800ab5e:	4b0e      	ldr	r3, [pc, #56]	; (800ab98 <assert_failed+0x44>)
 800ab60:	22aa      	movs	r2, #170	; 0xaa
 800ab62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	for (int i = 0; i < sizeof(s_assert_struct._file); i++)
 800ab66:	2300      	movs	r3, #0
 800ab68:	60fb      	str	r3, [r7, #12]
 800ab6a:	e007      	b.n	800ab7c <assert_failed+0x28>
	{
		s_assert_struct._file [i]  = 0;
 800ab6c:	4a0a      	ldr	r2, [pc, #40]	; (800ab98 <assert_failed+0x44>)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	4413      	add	r3, r2
 800ab72:	2200      	movs	r2, #0
 800ab74:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(s_assert_struct._file); i++)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	60fb      	str	r3, [r7, #12]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2b3b      	cmp	r3, #59	; 0x3b
 800ab80:	d9f4      	bls.n	800ab6c <assert_failed+0x18>
	}

	strncpy((char*)s_assert_struct._file, (char*)file, sizeof(s_assert_struct._file));
 800ab82:	223c      	movs	r2, #60	; 0x3c
 800ab84:	6879      	ldr	r1, [r7, #4]
 800ab86:	4804      	ldr	r0, [pc, #16]	; (800ab98 <assert_failed+0x44>)
 800ab88:	f000 ff78 	bl	800ba7c <strncpy>
	s_assert_struct._line = line;
 800ab8c:	4a02      	ldr	r2, [pc, #8]	; (800ab98 <assert_failed+0x44>)
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	63d3      	str	r3, [r2, #60]	; 0x3c

	NVIC_SystemReset();
 800ab92:	f7ff fba9 	bl	800a2e8 <__NVIC_SystemReset>
 800ab96:	bf00      	nop
 800ab98:	20000000 	.word	0x20000000

0800ab9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aba2:	2300      	movs	r3, #0
 800aba4:	607b      	str	r3, [r7, #4]
 800aba6:	4b10      	ldr	r3, [pc, #64]	; (800abe8 <HAL_MspInit+0x4c>)
 800aba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abaa:	4a0f      	ldr	r2, [pc, #60]	; (800abe8 <HAL_MspInit+0x4c>)
 800abac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800abb0:	6453      	str	r3, [r2, #68]	; 0x44
 800abb2:	4b0d      	ldr	r3, [pc, #52]	; (800abe8 <HAL_MspInit+0x4c>)
 800abb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abba:	607b      	str	r3, [r7, #4]
 800abbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800abbe:	2300      	movs	r3, #0
 800abc0:	603b      	str	r3, [r7, #0]
 800abc2:	4b09      	ldr	r3, [pc, #36]	; (800abe8 <HAL_MspInit+0x4c>)
 800abc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc6:	4a08      	ldr	r2, [pc, #32]	; (800abe8 <HAL_MspInit+0x4c>)
 800abc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abcc:	6413      	str	r3, [r2, #64]	; 0x40
 800abce:	4b06      	ldr	r3, [pc, #24]	; (800abe8 <HAL_MspInit+0x4c>)
 800abd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abd6:	603b      	str	r3, [r7, #0]
 800abd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800abda:	2007      	movs	r0, #7
 800abdc:	f7f6 fad0 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800abe0:	bf00      	nop
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	40023800 	.word	0x40023800

0800abec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a0b      	ldr	r2, [pc, #44]	; (800ac28 <HAL_CRC_MspInit+0x3c>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d10d      	bne.n	800ac1a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800abfe:	2300      	movs	r3, #0
 800ac00:	60fb      	str	r3, [r7, #12]
 800ac02:	4b0a      	ldr	r3, [pc, #40]	; (800ac2c <HAL_CRC_MspInit+0x40>)
 800ac04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac06:	4a09      	ldr	r2, [pc, #36]	; (800ac2c <HAL_CRC_MspInit+0x40>)
 800ac08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac0c:	6313      	str	r3, [r2, #48]	; 0x30
 800ac0e:	4b07      	ldr	r3, [pc, #28]	; (800ac2c <HAL_CRC_MspInit+0x40>)
 800ac10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac16:	60fb      	str	r3, [r7, #12]
 800ac18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800ac1a:	bf00      	nop
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	40023000 	.word	0x40023000
 800ac2c:	40023800 	.word	0x40023800

0800ac30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b08a      	sub	sp, #40	; 0x28
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac38:	f107 0314 	add.w	r3, r7, #20
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	605a      	str	r2, [r3, #4]
 800ac42:	609a      	str	r2, [r3, #8]
 800ac44:	60da      	str	r2, [r3, #12]
 800ac46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a19      	ldr	r2, [pc, #100]	; (800acb4 <HAL_I2C_MspInit+0x84>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d12c      	bne.n	800acac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac52:	2300      	movs	r3, #0
 800ac54:	613b      	str	r3, [r7, #16]
 800ac56:	4b18      	ldr	r3, [pc, #96]	; (800acb8 <HAL_I2C_MspInit+0x88>)
 800ac58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac5a:	4a17      	ldr	r2, [pc, #92]	; (800acb8 <HAL_I2C_MspInit+0x88>)
 800ac5c:	f043 0302 	orr.w	r3, r3, #2
 800ac60:	6313      	str	r3, [r2, #48]	; 0x30
 800ac62:	4b15      	ldr	r3, [pc, #84]	; (800acb8 <HAL_I2C_MspInit+0x88>)
 800ac64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac66:	f003 0302 	and.w	r3, r3, #2
 800ac6a:	613b      	str	r3, [r7, #16]
 800ac6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800ac6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ac72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ac74:	2312      	movs	r3, #18
 800ac76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac7c:	2303      	movs	r3, #3
 800ac7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ac80:	2304      	movs	r3, #4
 800ac82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac84:	f107 0314 	add.w	r3, r7, #20
 800ac88:	4619      	mov	r1, r3
 800ac8a:	480c      	ldr	r0, [pc, #48]	; (800acbc <HAL_I2C_MspInit+0x8c>)
 800ac8c:	f7f7 fd7a 	bl	8002784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ac90:	2300      	movs	r3, #0
 800ac92:	60fb      	str	r3, [r7, #12]
 800ac94:	4b08      	ldr	r3, [pc, #32]	; (800acb8 <HAL_I2C_MspInit+0x88>)
 800ac96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac98:	4a07      	ldr	r2, [pc, #28]	; (800acb8 <HAL_I2C_MspInit+0x88>)
 800ac9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac9e:	6413      	str	r3, [r2, #64]	; 0x40
 800aca0:	4b05      	ldr	r3, [pc, #20]	; (800acb8 <HAL_I2C_MspInit+0x88>)
 800aca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aca8:	60fb      	str	r3, [r7, #12]
 800acaa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800acac:	bf00      	nop
 800acae:	3728      	adds	r7, #40	; 0x28
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	40005400 	.word	0x40005400
 800acb8:	40023800 	.word	0x40023800
 800acbc:	40020400 	.word	0x40020400

0800acc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a08      	ldr	r2, [pc, #32]	; (800acf0 <HAL_RTC_MspInit+0x30>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d10a      	bne.n	800ace8 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800acd2:	4b08      	ldr	r3, [pc, #32]	; (800acf4 <HAL_RTC_MspInit+0x34>)
 800acd4:	2201      	movs	r2, #1
 800acd6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800acd8:	2200      	movs	r2, #0
 800acda:	2100      	movs	r1, #0
 800acdc:	2029      	movs	r0, #41	; 0x29
 800acde:	f7f6 fa6f 	bl	80011c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800ace2:	2029      	movs	r0, #41	; 0x29
 800ace4:	f7f6 fa98 	bl	8001218 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800ace8:	bf00      	nop
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	40002800 	.word	0x40002800
 800acf4:	42470e3c 	.word	0x42470e3c

0800acf8 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a06      	ldr	r2, [pc, #24]	; (800ad20 <HAL_RTC_MspDeInit+0x28>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d105      	bne.n	800ad16 <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 800ad0a:	4b06      	ldr	r3, [pc, #24]	; (800ad24 <HAL_RTC_MspDeInit+0x2c>)
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	601a      	str	r2, [r3, #0]

    /* RTC interrupt DeInit */
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 800ad10:	2029      	movs	r0, #41	; 0x29
 800ad12:	f7f6 fa99 	bl	8001248 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 800ad16:	bf00      	nop
 800ad18:	3708      	adds	r7, #8
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	40002800 	.word	0x40002800
 800ad24:	42470e3c 	.word	0x42470e3c

0800ad28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a0b      	ldr	r2, [pc, #44]	; (800ad64 <HAL_TIM_Base_MspInit+0x3c>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d10d      	bne.n	800ad56 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60fb      	str	r3, [r7, #12]
 800ad3e:	4b0a      	ldr	r3, [pc, #40]	; (800ad68 <HAL_TIM_Base_MspInit+0x40>)
 800ad40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad42:	4a09      	ldr	r2, [pc, #36]	; (800ad68 <HAL_TIM_Base_MspInit+0x40>)
 800ad44:	f043 0302 	orr.w	r3, r3, #2
 800ad48:	6413      	str	r3, [r2, #64]	; 0x40
 800ad4a:	4b07      	ldr	r3, [pc, #28]	; (800ad68 <HAL_TIM_Base_MspInit+0x40>)
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4e:	f003 0302 	and.w	r3, r3, #2
 800ad52:	60fb      	str	r3, [r7, #12]
 800ad54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800ad56:	bf00      	nop
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	40000400 	.word	0x40000400
 800ad68:	40023800 	.word	0x40023800

0800ad6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b088      	sub	sp, #32
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad74:	f107 030c 	add.w	r3, r7, #12
 800ad78:	2200      	movs	r2, #0
 800ad7a:	601a      	str	r2, [r3, #0]
 800ad7c:	605a      	str	r2, [r3, #4]
 800ad7e:	609a      	str	r2, [r3, #8]
 800ad80:	60da      	str	r2, [r3, #12]
 800ad82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a12      	ldr	r2, [pc, #72]	; (800add4 <HAL_TIM_MspPostInit+0x68>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d11d      	bne.n	800adca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad8e:	2300      	movs	r3, #0
 800ad90:	60bb      	str	r3, [r7, #8]
 800ad92:	4b11      	ldr	r3, [pc, #68]	; (800add8 <HAL_TIM_MspPostInit+0x6c>)
 800ad94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad96:	4a10      	ldr	r2, [pc, #64]	; (800add8 <HAL_TIM_MspPostInit+0x6c>)
 800ad98:	f043 0301 	orr.w	r3, r3, #1
 800ad9c:	6313      	str	r3, [r2, #48]	; 0x30
 800ad9e:	4b0e      	ldr	r3, [pc, #56]	; (800add8 <HAL_TIM_MspPostInit+0x6c>)
 800ada0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada2:	f003 0301 	and.w	r3, r3, #1
 800ada6:	60bb      	str	r3, [r7, #8]
 800ada8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800adaa:	2340      	movs	r3, #64	; 0x40
 800adac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adae:	2302      	movs	r3, #2
 800adb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adb2:	2300      	movs	r3, #0
 800adb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adb6:	2300      	movs	r3, #0
 800adb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800adba:	2302      	movs	r3, #2
 800adbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adbe:	f107 030c 	add.w	r3, r7, #12
 800adc2:	4619      	mov	r1, r3
 800adc4:	4805      	ldr	r0, [pc, #20]	; (800addc <HAL_TIM_MspPostInit+0x70>)
 800adc6:	f7f7 fcdd 	bl	8002784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800adca:	bf00      	nop
 800adcc:	3720      	adds	r7, #32
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	40000400 	.word	0x40000400
 800add8:	40023800 	.word	0x40023800
 800addc:	40020000 	.word	0x40020000

0800ade0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08a      	sub	sp, #40	; 0x28
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ade8:	f107 0314 	add.w	r3, r7, #20
 800adec:	2200      	movs	r2, #0
 800adee:	601a      	str	r2, [r3, #0]
 800adf0:	605a      	str	r2, [r3, #4]
 800adf2:	609a      	str	r2, [r3, #8]
 800adf4:	60da      	str	r2, [r3, #12]
 800adf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a4b      	ldr	r2, [pc, #300]	; (800af2c <HAL_UART_MspInit+0x14c>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	f040 8090 	bne.w	800af24 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800ae04:	2300      	movs	r3, #0
 800ae06:	613b      	str	r3, [r7, #16]
 800ae08:	4b49      	ldr	r3, [pc, #292]	; (800af30 <HAL_UART_MspInit+0x150>)
 800ae0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0c:	4a48      	ldr	r2, [pc, #288]	; (800af30 <HAL_UART_MspInit+0x150>)
 800ae0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae12:	6413      	str	r3, [r2, #64]	; 0x40
 800ae14:	4b46      	ldr	r3, [pc, #280]	; (800af30 <HAL_UART_MspInit+0x150>)
 800ae16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae1c:	613b      	str	r3, [r7, #16]
 800ae1e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae20:	2300      	movs	r3, #0
 800ae22:	60fb      	str	r3, [r7, #12]
 800ae24:	4b42      	ldr	r3, [pc, #264]	; (800af30 <HAL_UART_MspInit+0x150>)
 800ae26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae28:	4a41      	ldr	r2, [pc, #260]	; (800af30 <HAL_UART_MspInit+0x150>)
 800ae2a:	f043 0301 	orr.w	r3, r3, #1
 800ae2e:	6313      	str	r3, [r2, #48]	; 0x30
 800ae30:	4b3f      	ldr	r3, [pc, #252]	; (800af30 <HAL_UART_MspInit+0x150>)
 800ae32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae34:	f003 0301 	and.w	r3, r3, #1
 800ae38:	60fb      	str	r3, [r7, #12]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800ae3c:	230c      	movs	r3, #12
 800ae3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae40:	2302      	movs	r3, #2
 800ae42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae44:	2300      	movs	r3, #0
 800ae46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae48:	2303      	movs	r3, #3
 800ae4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ae4c:	2307      	movs	r3, #7
 800ae4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae50:	f107 0314 	add.w	r3, r7, #20
 800ae54:	4619      	mov	r1, r3
 800ae56:	4837      	ldr	r0, [pc, #220]	; (800af34 <HAL_UART_MspInit+0x154>)
 800ae58:	f7f7 fc94 	bl	8002784 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800ae5c:	4b36      	ldr	r3, [pc, #216]	; (800af38 <HAL_UART_MspInit+0x158>)
 800ae5e:	4a37      	ldr	r2, [pc, #220]	; (800af3c <HAL_UART_MspInit+0x15c>)
 800ae60:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800ae62:	4b35      	ldr	r3, [pc, #212]	; (800af38 <HAL_UART_MspInit+0x158>)
 800ae64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ae68:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae6a:	4b33      	ldr	r3, [pc, #204]	; (800af38 <HAL_UART_MspInit+0x158>)
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae70:	4b31      	ldr	r3, [pc, #196]	; (800af38 <HAL_UART_MspInit+0x158>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ae76:	4b30      	ldr	r3, [pc, #192]	; (800af38 <HAL_UART_MspInit+0x158>)
 800ae78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ae7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae7e:	4b2e      	ldr	r3, [pc, #184]	; (800af38 <HAL_UART_MspInit+0x158>)
 800ae80:	2200      	movs	r2, #0
 800ae82:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae84:	4b2c      	ldr	r3, [pc, #176]	; (800af38 <HAL_UART_MspInit+0x158>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800ae8a:	4b2b      	ldr	r3, [pc, #172]	; (800af38 <HAL_UART_MspInit+0x158>)
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ae90:	4b29      	ldr	r3, [pc, #164]	; (800af38 <HAL_UART_MspInit+0x158>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ae96:	4b28      	ldr	r3, [pc, #160]	; (800af38 <HAL_UART_MspInit+0x158>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800ae9c:	4826      	ldr	r0, [pc, #152]	; (800af38 <HAL_UART_MspInit+0x158>)
 800ae9e:	f7f6 fa55 	bl	800134c <HAL_DMA_Init>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800aea8:	f7ff fe4c 	bl	800ab44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4a22      	ldr	r2, [pc, #136]	; (800af38 <HAL_UART_MspInit+0x158>)
 800aeb0:	635a      	str	r2, [r3, #52]	; 0x34
 800aeb2:	4a21      	ldr	r2, [pc, #132]	; (800af38 <HAL_UART_MspInit+0x158>)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800aeb8:	4b21      	ldr	r3, [pc, #132]	; (800af40 <HAL_UART_MspInit+0x160>)
 800aeba:	4a22      	ldr	r2, [pc, #136]	; (800af44 <HAL_UART_MspInit+0x164>)
 800aebc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800aebe:	4b20      	ldr	r3, [pc, #128]	; (800af40 <HAL_UART_MspInit+0x160>)
 800aec0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aec4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aec6:	4b1e      	ldr	r3, [pc, #120]	; (800af40 <HAL_UART_MspInit+0x160>)
 800aec8:	2240      	movs	r2, #64	; 0x40
 800aeca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aecc:	4b1c      	ldr	r3, [pc, #112]	; (800af40 <HAL_UART_MspInit+0x160>)
 800aece:	2200      	movs	r2, #0
 800aed0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800aed2:	4b1b      	ldr	r3, [pc, #108]	; (800af40 <HAL_UART_MspInit+0x160>)
 800aed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aed8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aeda:	4b19      	ldr	r3, [pc, #100]	; (800af40 <HAL_UART_MspInit+0x160>)
 800aedc:	2200      	movs	r2, #0
 800aede:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aee0:	4b17      	ldr	r3, [pc, #92]	; (800af40 <HAL_UART_MspInit+0x160>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800aee6:	4b16      	ldr	r3, [pc, #88]	; (800af40 <HAL_UART_MspInit+0x160>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800aeec:	4b14      	ldr	r3, [pc, #80]	; (800af40 <HAL_UART_MspInit+0x160>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aef2:	4b13      	ldr	r3, [pc, #76]	; (800af40 <HAL_UART_MspInit+0x160>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800aef8:	4811      	ldr	r0, [pc, #68]	; (800af40 <HAL_UART_MspInit+0x160>)
 800aefa:	f7f6 fa27 	bl	800134c <HAL_DMA_Init>
 800aefe:	4603      	mov	r3, r0
 800af00:	2b00      	cmp	r3, #0
 800af02:	d001      	beq.n	800af08 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800af04:	f7ff fe1e 	bl	800ab44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a0d      	ldr	r2, [pc, #52]	; (800af40 <HAL_UART_MspInit+0x160>)
 800af0c:	631a      	str	r2, [r3, #48]	; 0x30
 800af0e:	4a0c      	ldr	r2, [pc, #48]	; (800af40 <HAL_UART_MspInit+0x160>)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800af14:	2200      	movs	r2, #0
 800af16:	2100      	movs	r1, #0
 800af18:	2026      	movs	r0, #38	; 0x26
 800af1a:	f7f6 f951 	bl	80011c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800af1e:	2026      	movs	r0, #38	; 0x26
 800af20:	f7f6 f97a 	bl	8001218 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800af24:	bf00      	nop
 800af26:	3728      	adds	r7, #40	; 0x28
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	40004400 	.word	0x40004400
 800af30:	40023800 	.word	0x40023800
 800af34:	40020000 	.word	0x40020000
 800af38:	20000638 	.word	0x20000638
 800af3c:	40026088 	.word	0x40026088
 800af40:	20000740 	.word	0x20000740
 800af44:	400260a0 	.word	0x400260a0

0800af48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800af48:	b480      	push	{r7}
 800af4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800af4c:	bf00      	nop
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr

0800af56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800af56:	b480      	push	{r7}
 800af58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800af5a:	e7fe      	b.n	800af5a <HardFault_Handler+0x4>

0800af5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800af5c:	b480      	push	{r7}
 800af5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800af60:	e7fe      	b.n	800af60 <MemManage_Handler+0x4>

0800af62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800af62:	b480      	push	{r7}
 800af64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800af66:	e7fe      	b.n	800af66 <BusFault_Handler+0x4>

0800af68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800af68:	b480      	push	{r7}
 800af6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800af6c:	e7fe      	b.n	800af6c <UsageFault_Handler+0x4>

0800af6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800af6e:	b480      	push	{r7}
 800af70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800af72:	bf00      	nop
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800af7c:	b480      	push	{r7}
 800af7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800af80:	bf00      	nop
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800af8a:	b480      	push	{r7}
 800af8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800af8e:	bf00      	nop
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800af9c:	f7f5 ffde 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800afa0:	bf00      	nop
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800afa8:	4802      	ldr	r0, [pc, #8]	; (800afb4 <DMA1_Stream5_IRQHandler+0x10>)
 800afaa:	f7f6 fc73 	bl	8001894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800afae:	bf00      	nop
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20000638 	.word	0x20000638

0800afb8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800afbc:	4802      	ldr	r0, [pc, #8]	; (800afc8 <DMA1_Stream6_IRQHandler+0x10>)
 800afbe:	f7f6 fc69 	bl	8001894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800afc2:	bf00      	nop
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	20000740 	.word	0x20000740

0800afcc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800afd0:	2020      	movs	r0, #32
 800afd2:	f7f7 fed9 	bl	8002d88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800afd6:	bf00      	nop
 800afd8:	bd80      	pop	{r7, pc}
	...

0800afdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800afe0:	4802      	ldr	r0, [pc, #8]	; (800afec <USART2_IRQHandler+0x10>)
 800afe2:	f7fc fcef 	bl	80079c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800afe6:	bf00      	nop
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	2000088c 	.word	0x2000088c

0800aff0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800aff4:	4802      	ldr	r0, [pc, #8]	; (800b000 <RTC_Alarm_IRQHandler+0x10>)
 800aff6:	f7fa fe95 	bl	8005d24 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800affa:	bf00      	nop
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	2000086c 	.word	0x2000086c

0800b004 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b00c:	4b11      	ldr	r3, [pc, #68]	; (800b054 <_sbrk+0x50>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d102      	bne.n	800b01a <_sbrk+0x16>
		heap_end = &end;
 800b014:	4b0f      	ldr	r3, [pc, #60]	; (800b054 <_sbrk+0x50>)
 800b016:	4a10      	ldr	r2, [pc, #64]	; (800b058 <_sbrk+0x54>)
 800b018:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b01a:	4b0e      	ldr	r3, [pc, #56]	; (800b054 <_sbrk+0x50>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b020:	4b0c      	ldr	r3, [pc, #48]	; (800b054 <_sbrk+0x50>)
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4413      	add	r3, r2
 800b028:	466a      	mov	r2, sp
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d907      	bls.n	800b03e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b02e:	f000 f859 	bl	800b0e4 <__errno>
 800b032:	4602      	mov	r2, r0
 800b034:	230c      	movs	r3, #12
 800b036:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b038:	f04f 33ff 	mov.w	r3, #4294967295
 800b03c:	e006      	b.n	800b04c <_sbrk+0x48>
	}

	heap_end += incr;
 800b03e:	4b05      	ldr	r3, [pc, #20]	; (800b054 <_sbrk+0x50>)
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4413      	add	r3, r2
 800b046:	4a03      	ldr	r2, [pc, #12]	; (800b054 <_sbrk+0x50>)
 800b048:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b04a:	68fb      	ldr	r3, [r7, #12]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	20000280 	.word	0x20000280
 800b058:	200008d0 	.word	0x200008d0

0800b05c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b05c:	b480      	push	{r7}
 800b05e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b060:	4b08      	ldr	r3, [pc, #32]	; (800b084 <SystemInit+0x28>)
 800b062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b066:	4a07      	ldr	r2, [pc, #28]	; (800b084 <SystemInit+0x28>)
 800b068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b06c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b070:	4b04      	ldr	r3, [pc, #16]	; (800b084 <SystemInit+0x28>)
 800b072:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b076:	609a      	str	r2, [r3, #8]
#endif
}
 800b078:	bf00      	nop
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr
 800b082:	bf00      	nop
 800b084:	e000ed00 	.word	0xe000ed00

0800b088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800b088:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b0c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b08c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b08e:	e003      	b.n	800b098 <LoopCopyDataInit>

0800b090 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b090:	4b0c      	ldr	r3, [pc, #48]	; (800b0c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b092:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b094:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b096:	3104      	adds	r1, #4

0800b098 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b098:	480b      	ldr	r0, [pc, #44]	; (800b0c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b09a:	4b0c      	ldr	r3, [pc, #48]	; (800b0cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b09c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b09e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b0a0:	d3f6      	bcc.n	800b090 <CopyDataInit>
  ldr  r2, =_sbss
 800b0a2:	4a0b      	ldr	r2, [pc, #44]	; (800b0d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b0a4:	e002      	b.n	800b0ac <LoopFillZerobss>

0800b0a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b0a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b0a8:	f842 3b04 	str.w	r3, [r2], #4

0800b0ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b0ac:	4b09      	ldr	r3, [pc, #36]	; (800b0d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b0ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b0b0:	d3f9      	bcc.n	800b0a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b0b2:	f7ff ffd3 	bl	800b05c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b0b6:	f000 f81b 	bl	800b0f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b0ba:	f7ff f929 	bl	800a310 <main>
  bx  lr    
 800b0be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800b0c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b0c4:	0800dec8 	.word	0x0800dec8
  ldr  r0, =_sdata
 800b0c8:	20000080 	.word	0x20000080
  ldr  r3, =_edata
 800b0cc:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 800b0d0:	2000025c 	.word	0x2000025c
  ldr  r3, = _ebss
 800b0d4:	200008d0 	.word	0x200008d0

0800b0d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b0d8:	e7fe      	b.n	800b0d8 <ADC_IRQHandler>

0800b0da <atoi>:
 800b0da:	220a      	movs	r2, #10
 800b0dc:	2100      	movs	r1, #0
 800b0de:	f000 bdb3 	b.w	800bc48 <strtol>
	...

0800b0e4 <__errno>:
 800b0e4:	4b01      	ldr	r3, [pc, #4]	; (800b0ec <__errno+0x8>)
 800b0e6:	6818      	ldr	r0, [r3, #0]
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	2000008c 	.word	0x2000008c

0800b0f0 <__libc_init_array>:
 800b0f0:	b570      	push	{r4, r5, r6, lr}
 800b0f2:	4e0d      	ldr	r6, [pc, #52]	; (800b128 <__libc_init_array+0x38>)
 800b0f4:	4c0d      	ldr	r4, [pc, #52]	; (800b12c <__libc_init_array+0x3c>)
 800b0f6:	1ba4      	subs	r4, r4, r6
 800b0f8:	10a4      	asrs	r4, r4, #2
 800b0fa:	2500      	movs	r5, #0
 800b0fc:	42a5      	cmp	r5, r4
 800b0fe:	d109      	bne.n	800b114 <__libc_init_array+0x24>
 800b100:	4e0b      	ldr	r6, [pc, #44]	; (800b130 <__libc_init_array+0x40>)
 800b102:	4c0c      	ldr	r4, [pc, #48]	; (800b134 <__libc_init_array+0x44>)
 800b104:	f002 f972 	bl	800d3ec <_init>
 800b108:	1ba4      	subs	r4, r4, r6
 800b10a:	10a4      	asrs	r4, r4, #2
 800b10c:	2500      	movs	r5, #0
 800b10e:	42a5      	cmp	r5, r4
 800b110:	d105      	bne.n	800b11e <__libc_init_array+0x2e>
 800b112:	bd70      	pop	{r4, r5, r6, pc}
 800b114:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b118:	4798      	blx	r3
 800b11a:	3501      	adds	r5, #1
 800b11c:	e7ee      	b.n	800b0fc <__libc_init_array+0xc>
 800b11e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b122:	4798      	blx	r3
 800b124:	3501      	adds	r5, #1
 800b126:	e7f2      	b.n	800b10e <__libc_init_array+0x1e>
 800b128:	0800dec0 	.word	0x0800dec0
 800b12c:	0800dec0 	.word	0x0800dec0
 800b130:	0800dec0 	.word	0x0800dec0
 800b134:	0800dec4 	.word	0x0800dec4

0800b138 <memcpy>:
 800b138:	b510      	push	{r4, lr}
 800b13a:	1e43      	subs	r3, r0, #1
 800b13c:	440a      	add	r2, r1
 800b13e:	4291      	cmp	r1, r2
 800b140:	d100      	bne.n	800b144 <memcpy+0xc>
 800b142:	bd10      	pop	{r4, pc}
 800b144:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b148:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b14c:	e7f7      	b.n	800b13e <memcpy+0x6>

0800b14e <memset>:
 800b14e:	4402      	add	r2, r0
 800b150:	4603      	mov	r3, r0
 800b152:	4293      	cmp	r3, r2
 800b154:	d100      	bne.n	800b158 <memset+0xa>
 800b156:	4770      	bx	lr
 800b158:	f803 1b01 	strb.w	r1, [r3], #1
 800b15c:	e7f9      	b.n	800b152 <memset+0x4>

0800b15e <__cvt>:
 800b15e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b162:	ec55 4b10 	vmov	r4, r5, d0
 800b166:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b168:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b16c:	2d00      	cmp	r5, #0
 800b16e:	460e      	mov	r6, r1
 800b170:	4691      	mov	r9, r2
 800b172:	4619      	mov	r1, r3
 800b174:	bfb8      	it	lt
 800b176:	4622      	movlt	r2, r4
 800b178:	462b      	mov	r3, r5
 800b17a:	f027 0720 	bic.w	r7, r7, #32
 800b17e:	bfbb      	ittet	lt
 800b180:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b184:	461d      	movlt	r5, r3
 800b186:	2300      	movge	r3, #0
 800b188:	232d      	movlt	r3, #45	; 0x2d
 800b18a:	bfb8      	it	lt
 800b18c:	4614      	movlt	r4, r2
 800b18e:	2f46      	cmp	r7, #70	; 0x46
 800b190:	700b      	strb	r3, [r1, #0]
 800b192:	d004      	beq.n	800b19e <__cvt+0x40>
 800b194:	2f45      	cmp	r7, #69	; 0x45
 800b196:	d100      	bne.n	800b19a <__cvt+0x3c>
 800b198:	3601      	adds	r6, #1
 800b19a:	2102      	movs	r1, #2
 800b19c:	e000      	b.n	800b1a0 <__cvt+0x42>
 800b19e:	2103      	movs	r1, #3
 800b1a0:	ab03      	add	r3, sp, #12
 800b1a2:	9301      	str	r3, [sp, #4]
 800b1a4:	ab02      	add	r3, sp, #8
 800b1a6:	9300      	str	r3, [sp, #0]
 800b1a8:	4632      	mov	r2, r6
 800b1aa:	4653      	mov	r3, sl
 800b1ac:	ec45 4b10 	vmov	d0, r4, r5
 800b1b0:	f000 fdee 	bl	800bd90 <_dtoa_r>
 800b1b4:	2f47      	cmp	r7, #71	; 0x47
 800b1b6:	4680      	mov	r8, r0
 800b1b8:	d102      	bne.n	800b1c0 <__cvt+0x62>
 800b1ba:	f019 0f01 	tst.w	r9, #1
 800b1be:	d026      	beq.n	800b20e <__cvt+0xb0>
 800b1c0:	2f46      	cmp	r7, #70	; 0x46
 800b1c2:	eb08 0906 	add.w	r9, r8, r6
 800b1c6:	d111      	bne.n	800b1ec <__cvt+0x8e>
 800b1c8:	f898 3000 	ldrb.w	r3, [r8]
 800b1cc:	2b30      	cmp	r3, #48	; 0x30
 800b1ce:	d10a      	bne.n	800b1e6 <__cvt+0x88>
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	f7f5 fc7e 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1dc:	b918      	cbnz	r0, 800b1e6 <__cvt+0x88>
 800b1de:	f1c6 0601 	rsb	r6, r6, #1
 800b1e2:	f8ca 6000 	str.w	r6, [sl]
 800b1e6:	f8da 3000 	ldr.w	r3, [sl]
 800b1ea:	4499      	add	r9, r3
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	4629      	mov	r1, r5
 800b1f4:	f7f5 fc70 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1f8:	b938      	cbnz	r0, 800b20a <__cvt+0xac>
 800b1fa:	2230      	movs	r2, #48	; 0x30
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	454b      	cmp	r3, r9
 800b200:	d205      	bcs.n	800b20e <__cvt+0xb0>
 800b202:	1c59      	adds	r1, r3, #1
 800b204:	9103      	str	r1, [sp, #12]
 800b206:	701a      	strb	r2, [r3, #0]
 800b208:	e7f8      	b.n	800b1fc <__cvt+0x9e>
 800b20a:	f8cd 900c 	str.w	r9, [sp, #12]
 800b20e:	9b03      	ldr	r3, [sp, #12]
 800b210:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b212:	eba3 0308 	sub.w	r3, r3, r8
 800b216:	4640      	mov	r0, r8
 800b218:	6013      	str	r3, [r2, #0]
 800b21a:	b004      	add	sp, #16
 800b21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b220 <__exponent>:
 800b220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b222:	2900      	cmp	r1, #0
 800b224:	4604      	mov	r4, r0
 800b226:	bfba      	itte	lt
 800b228:	4249      	neglt	r1, r1
 800b22a:	232d      	movlt	r3, #45	; 0x2d
 800b22c:	232b      	movge	r3, #43	; 0x2b
 800b22e:	2909      	cmp	r1, #9
 800b230:	f804 2b02 	strb.w	r2, [r4], #2
 800b234:	7043      	strb	r3, [r0, #1]
 800b236:	dd20      	ble.n	800b27a <__exponent+0x5a>
 800b238:	f10d 0307 	add.w	r3, sp, #7
 800b23c:	461f      	mov	r7, r3
 800b23e:	260a      	movs	r6, #10
 800b240:	fb91 f5f6 	sdiv	r5, r1, r6
 800b244:	fb06 1115 	mls	r1, r6, r5, r1
 800b248:	3130      	adds	r1, #48	; 0x30
 800b24a:	2d09      	cmp	r5, #9
 800b24c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b250:	f103 32ff 	add.w	r2, r3, #4294967295
 800b254:	4629      	mov	r1, r5
 800b256:	dc09      	bgt.n	800b26c <__exponent+0x4c>
 800b258:	3130      	adds	r1, #48	; 0x30
 800b25a:	3b02      	subs	r3, #2
 800b25c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b260:	42bb      	cmp	r3, r7
 800b262:	4622      	mov	r2, r4
 800b264:	d304      	bcc.n	800b270 <__exponent+0x50>
 800b266:	1a10      	subs	r0, r2, r0
 800b268:	b003      	add	sp, #12
 800b26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b26c:	4613      	mov	r3, r2
 800b26e:	e7e7      	b.n	800b240 <__exponent+0x20>
 800b270:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b274:	f804 2b01 	strb.w	r2, [r4], #1
 800b278:	e7f2      	b.n	800b260 <__exponent+0x40>
 800b27a:	2330      	movs	r3, #48	; 0x30
 800b27c:	4419      	add	r1, r3
 800b27e:	7083      	strb	r3, [r0, #2]
 800b280:	1d02      	adds	r2, r0, #4
 800b282:	70c1      	strb	r1, [r0, #3]
 800b284:	e7ef      	b.n	800b266 <__exponent+0x46>
	...

0800b288 <_printf_float>:
 800b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28c:	b08d      	sub	sp, #52	; 0x34
 800b28e:	460c      	mov	r4, r1
 800b290:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b294:	4616      	mov	r6, r2
 800b296:	461f      	mov	r7, r3
 800b298:	4605      	mov	r5, r0
 800b29a:	f001 fb35 	bl	800c908 <_localeconv_r>
 800b29e:	6803      	ldr	r3, [r0, #0]
 800b2a0:	9304      	str	r3, [sp, #16]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7f4 ff9c 	bl	80001e0 <strlen>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	930a      	str	r3, [sp, #40]	; 0x28
 800b2ac:	f8d8 3000 	ldr.w	r3, [r8]
 800b2b0:	9005      	str	r0, [sp, #20]
 800b2b2:	3307      	adds	r3, #7
 800b2b4:	f023 0307 	bic.w	r3, r3, #7
 800b2b8:	f103 0208 	add.w	r2, r3, #8
 800b2bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b2c0:	f8d4 b000 	ldr.w	fp, [r4]
 800b2c4:	f8c8 2000 	str.w	r2, [r8]
 800b2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b2d0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b2d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b2d8:	9307      	str	r3, [sp, #28]
 800b2da:	f8cd 8018 	str.w	r8, [sp, #24]
 800b2de:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e2:	4ba7      	ldr	r3, [pc, #668]	; (800b580 <_printf_float+0x2f8>)
 800b2e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2e8:	f7f5 fc28 	bl	8000b3c <__aeabi_dcmpun>
 800b2ec:	bb70      	cbnz	r0, 800b34c <_printf_float+0xc4>
 800b2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f2:	4ba3      	ldr	r3, [pc, #652]	; (800b580 <_printf_float+0x2f8>)
 800b2f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2f8:	f7f5 fc02 	bl	8000b00 <__aeabi_dcmple>
 800b2fc:	bb30      	cbnz	r0, 800b34c <_printf_float+0xc4>
 800b2fe:	2200      	movs	r2, #0
 800b300:	2300      	movs	r3, #0
 800b302:	4640      	mov	r0, r8
 800b304:	4649      	mov	r1, r9
 800b306:	f7f5 fbf1 	bl	8000aec <__aeabi_dcmplt>
 800b30a:	b110      	cbz	r0, 800b312 <_printf_float+0x8a>
 800b30c:	232d      	movs	r3, #45	; 0x2d
 800b30e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b312:	4a9c      	ldr	r2, [pc, #624]	; (800b584 <_printf_float+0x2fc>)
 800b314:	4b9c      	ldr	r3, [pc, #624]	; (800b588 <_printf_float+0x300>)
 800b316:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b31a:	bf8c      	ite	hi
 800b31c:	4690      	movhi	r8, r2
 800b31e:	4698      	movls	r8, r3
 800b320:	2303      	movs	r3, #3
 800b322:	f02b 0204 	bic.w	r2, fp, #4
 800b326:	6123      	str	r3, [r4, #16]
 800b328:	6022      	str	r2, [r4, #0]
 800b32a:	f04f 0900 	mov.w	r9, #0
 800b32e:	9700      	str	r7, [sp, #0]
 800b330:	4633      	mov	r3, r6
 800b332:	aa0b      	add	r2, sp, #44	; 0x2c
 800b334:	4621      	mov	r1, r4
 800b336:	4628      	mov	r0, r5
 800b338:	f000 f9e6 	bl	800b708 <_printf_common>
 800b33c:	3001      	adds	r0, #1
 800b33e:	f040 808d 	bne.w	800b45c <_printf_float+0x1d4>
 800b342:	f04f 30ff 	mov.w	r0, #4294967295
 800b346:	b00d      	add	sp, #52	; 0x34
 800b348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34c:	4642      	mov	r2, r8
 800b34e:	464b      	mov	r3, r9
 800b350:	4640      	mov	r0, r8
 800b352:	4649      	mov	r1, r9
 800b354:	f7f5 fbf2 	bl	8000b3c <__aeabi_dcmpun>
 800b358:	b110      	cbz	r0, 800b360 <_printf_float+0xd8>
 800b35a:	4a8c      	ldr	r2, [pc, #560]	; (800b58c <_printf_float+0x304>)
 800b35c:	4b8c      	ldr	r3, [pc, #560]	; (800b590 <_printf_float+0x308>)
 800b35e:	e7da      	b.n	800b316 <_printf_float+0x8e>
 800b360:	6861      	ldr	r1, [r4, #4]
 800b362:	1c4b      	adds	r3, r1, #1
 800b364:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b368:	a80a      	add	r0, sp, #40	; 0x28
 800b36a:	d13e      	bne.n	800b3ea <_printf_float+0x162>
 800b36c:	2306      	movs	r3, #6
 800b36e:	6063      	str	r3, [r4, #4]
 800b370:	2300      	movs	r3, #0
 800b372:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b376:	ab09      	add	r3, sp, #36	; 0x24
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	ec49 8b10 	vmov	d0, r8, r9
 800b37e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b382:	6022      	str	r2, [r4, #0]
 800b384:	f8cd a004 	str.w	sl, [sp, #4]
 800b388:	6861      	ldr	r1, [r4, #4]
 800b38a:	4628      	mov	r0, r5
 800b38c:	f7ff fee7 	bl	800b15e <__cvt>
 800b390:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b394:	2b47      	cmp	r3, #71	; 0x47
 800b396:	4680      	mov	r8, r0
 800b398:	d109      	bne.n	800b3ae <_printf_float+0x126>
 800b39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b39c:	1cd8      	adds	r0, r3, #3
 800b39e:	db02      	blt.n	800b3a6 <_printf_float+0x11e>
 800b3a0:	6862      	ldr	r2, [r4, #4]
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	dd47      	ble.n	800b436 <_printf_float+0x1ae>
 800b3a6:	f1aa 0a02 	sub.w	sl, sl, #2
 800b3aa:	fa5f fa8a 	uxtb.w	sl, sl
 800b3ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b3b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3b4:	d824      	bhi.n	800b400 <_printf_float+0x178>
 800b3b6:	3901      	subs	r1, #1
 800b3b8:	4652      	mov	r2, sl
 800b3ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b3be:	9109      	str	r1, [sp, #36]	; 0x24
 800b3c0:	f7ff ff2e 	bl	800b220 <__exponent>
 800b3c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3c6:	1813      	adds	r3, r2, r0
 800b3c8:	2a01      	cmp	r2, #1
 800b3ca:	4681      	mov	r9, r0
 800b3cc:	6123      	str	r3, [r4, #16]
 800b3ce:	dc02      	bgt.n	800b3d6 <_printf_float+0x14e>
 800b3d0:	6822      	ldr	r2, [r4, #0]
 800b3d2:	07d1      	lsls	r1, r2, #31
 800b3d4:	d501      	bpl.n	800b3da <_printf_float+0x152>
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	6123      	str	r3, [r4, #16]
 800b3da:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d0a5      	beq.n	800b32e <_printf_float+0xa6>
 800b3e2:	232d      	movs	r3, #45	; 0x2d
 800b3e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3e8:	e7a1      	b.n	800b32e <_printf_float+0xa6>
 800b3ea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b3ee:	f000 8177 	beq.w	800b6e0 <_printf_float+0x458>
 800b3f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b3f6:	d1bb      	bne.n	800b370 <_printf_float+0xe8>
 800b3f8:	2900      	cmp	r1, #0
 800b3fa:	d1b9      	bne.n	800b370 <_printf_float+0xe8>
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e7b6      	b.n	800b36e <_printf_float+0xe6>
 800b400:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b404:	d119      	bne.n	800b43a <_printf_float+0x1b2>
 800b406:	2900      	cmp	r1, #0
 800b408:	6863      	ldr	r3, [r4, #4]
 800b40a:	dd0c      	ble.n	800b426 <_printf_float+0x19e>
 800b40c:	6121      	str	r1, [r4, #16]
 800b40e:	b913      	cbnz	r3, 800b416 <_printf_float+0x18e>
 800b410:	6822      	ldr	r2, [r4, #0]
 800b412:	07d2      	lsls	r2, r2, #31
 800b414:	d502      	bpl.n	800b41c <_printf_float+0x194>
 800b416:	3301      	adds	r3, #1
 800b418:	440b      	add	r3, r1
 800b41a:	6123      	str	r3, [r4, #16]
 800b41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b41e:	65a3      	str	r3, [r4, #88]	; 0x58
 800b420:	f04f 0900 	mov.w	r9, #0
 800b424:	e7d9      	b.n	800b3da <_printf_float+0x152>
 800b426:	b913      	cbnz	r3, 800b42e <_printf_float+0x1a6>
 800b428:	6822      	ldr	r2, [r4, #0]
 800b42a:	07d0      	lsls	r0, r2, #31
 800b42c:	d501      	bpl.n	800b432 <_printf_float+0x1aa>
 800b42e:	3302      	adds	r3, #2
 800b430:	e7f3      	b.n	800b41a <_printf_float+0x192>
 800b432:	2301      	movs	r3, #1
 800b434:	e7f1      	b.n	800b41a <_printf_float+0x192>
 800b436:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b43a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b43e:	4293      	cmp	r3, r2
 800b440:	db05      	blt.n	800b44e <_printf_float+0x1c6>
 800b442:	6822      	ldr	r2, [r4, #0]
 800b444:	6123      	str	r3, [r4, #16]
 800b446:	07d1      	lsls	r1, r2, #31
 800b448:	d5e8      	bpl.n	800b41c <_printf_float+0x194>
 800b44a:	3301      	adds	r3, #1
 800b44c:	e7e5      	b.n	800b41a <_printf_float+0x192>
 800b44e:	2b00      	cmp	r3, #0
 800b450:	bfd4      	ite	le
 800b452:	f1c3 0302 	rsble	r3, r3, #2
 800b456:	2301      	movgt	r3, #1
 800b458:	4413      	add	r3, r2
 800b45a:	e7de      	b.n	800b41a <_printf_float+0x192>
 800b45c:	6823      	ldr	r3, [r4, #0]
 800b45e:	055a      	lsls	r2, r3, #21
 800b460:	d407      	bmi.n	800b472 <_printf_float+0x1ea>
 800b462:	6923      	ldr	r3, [r4, #16]
 800b464:	4642      	mov	r2, r8
 800b466:	4631      	mov	r1, r6
 800b468:	4628      	mov	r0, r5
 800b46a:	47b8      	blx	r7
 800b46c:	3001      	adds	r0, #1
 800b46e:	d12b      	bne.n	800b4c8 <_printf_float+0x240>
 800b470:	e767      	b.n	800b342 <_printf_float+0xba>
 800b472:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b476:	f240 80dc 	bls.w	800b632 <_printf_float+0x3aa>
 800b47a:	2200      	movs	r2, #0
 800b47c:	2300      	movs	r3, #0
 800b47e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b482:	f7f5 fb29 	bl	8000ad8 <__aeabi_dcmpeq>
 800b486:	2800      	cmp	r0, #0
 800b488:	d033      	beq.n	800b4f2 <_printf_float+0x26a>
 800b48a:	2301      	movs	r3, #1
 800b48c:	4a41      	ldr	r2, [pc, #260]	; (800b594 <_printf_float+0x30c>)
 800b48e:	4631      	mov	r1, r6
 800b490:	4628      	mov	r0, r5
 800b492:	47b8      	blx	r7
 800b494:	3001      	adds	r0, #1
 800b496:	f43f af54 	beq.w	800b342 <_printf_float+0xba>
 800b49a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	db02      	blt.n	800b4a8 <_printf_float+0x220>
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	07d8      	lsls	r0, r3, #31
 800b4a6:	d50f      	bpl.n	800b4c8 <_printf_float+0x240>
 800b4a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4ac:	4631      	mov	r1, r6
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	47b8      	blx	r7
 800b4b2:	3001      	adds	r0, #1
 800b4b4:	f43f af45 	beq.w	800b342 <_printf_float+0xba>
 800b4b8:	f04f 0800 	mov.w	r8, #0
 800b4bc:	f104 091a 	add.w	r9, r4, #26
 800b4c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	4543      	cmp	r3, r8
 800b4c6:	dc09      	bgt.n	800b4dc <_printf_float+0x254>
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	079b      	lsls	r3, r3, #30
 800b4cc:	f100 8103 	bmi.w	800b6d6 <_printf_float+0x44e>
 800b4d0:	68e0      	ldr	r0, [r4, #12]
 800b4d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4d4:	4298      	cmp	r0, r3
 800b4d6:	bfb8      	it	lt
 800b4d8:	4618      	movlt	r0, r3
 800b4da:	e734      	b.n	800b346 <_printf_float+0xbe>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	464a      	mov	r2, r9
 800b4e0:	4631      	mov	r1, r6
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	47b8      	blx	r7
 800b4e6:	3001      	adds	r0, #1
 800b4e8:	f43f af2b 	beq.w	800b342 <_printf_float+0xba>
 800b4ec:	f108 0801 	add.w	r8, r8, #1
 800b4f0:	e7e6      	b.n	800b4c0 <_printf_float+0x238>
 800b4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	dc2b      	bgt.n	800b550 <_printf_float+0x2c8>
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	4a26      	ldr	r2, [pc, #152]	; (800b594 <_printf_float+0x30c>)
 800b4fc:	4631      	mov	r1, r6
 800b4fe:	4628      	mov	r0, r5
 800b500:	47b8      	blx	r7
 800b502:	3001      	adds	r0, #1
 800b504:	f43f af1d 	beq.w	800b342 <_printf_float+0xba>
 800b508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b50a:	b923      	cbnz	r3, 800b516 <_printf_float+0x28e>
 800b50c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b50e:	b913      	cbnz	r3, 800b516 <_printf_float+0x28e>
 800b510:	6823      	ldr	r3, [r4, #0]
 800b512:	07d9      	lsls	r1, r3, #31
 800b514:	d5d8      	bpl.n	800b4c8 <_printf_float+0x240>
 800b516:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b51a:	4631      	mov	r1, r6
 800b51c:	4628      	mov	r0, r5
 800b51e:	47b8      	blx	r7
 800b520:	3001      	adds	r0, #1
 800b522:	f43f af0e 	beq.w	800b342 <_printf_float+0xba>
 800b526:	f04f 0900 	mov.w	r9, #0
 800b52a:	f104 0a1a 	add.w	sl, r4, #26
 800b52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b530:	425b      	negs	r3, r3
 800b532:	454b      	cmp	r3, r9
 800b534:	dc01      	bgt.n	800b53a <_printf_float+0x2b2>
 800b536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b538:	e794      	b.n	800b464 <_printf_float+0x1dc>
 800b53a:	2301      	movs	r3, #1
 800b53c:	4652      	mov	r2, sl
 800b53e:	4631      	mov	r1, r6
 800b540:	4628      	mov	r0, r5
 800b542:	47b8      	blx	r7
 800b544:	3001      	adds	r0, #1
 800b546:	f43f aefc 	beq.w	800b342 <_printf_float+0xba>
 800b54a:	f109 0901 	add.w	r9, r9, #1
 800b54e:	e7ee      	b.n	800b52e <_printf_float+0x2a6>
 800b550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b552:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b554:	429a      	cmp	r2, r3
 800b556:	bfa8      	it	ge
 800b558:	461a      	movge	r2, r3
 800b55a:	2a00      	cmp	r2, #0
 800b55c:	4691      	mov	r9, r2
 800b55e:	dd07      	ble.n	800b570 <_printf_float+0x2e8>
 800b560:	4613      	mov	r3, r2
 800b562:	4631      	mov	r1, r6
 800b564:	4642      	mov	r2, r8
 800b566:	4628      	mov	r0, r5
 800b568:	47b8      	blx	r7
 800b56a:	3001      	adds	r0, #1
 800b56c:	f43f aee9 	beq.w	800b342 <_printf_float+0xba>
 800b570:	f104 031a 	add.w	r3, r4, #26
 800b574:	f04f 0b00 	mov.w	fp, #0
 800b578:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b57c:	9306      	str	r3, [sp, #24]
 800b57e:	e015      	b.n	800b5ac <_printf_float+0x324>
 800b580:	7fefffff 	.word	0x7fefffff
 800b584:	0800dc5c 	.word	0x0800dc5c
 800b588:	0800dc58 	.word	0x0800dc58
 800b58c:	0800dc64 	.word	0x0800dc64
 800b590:	0800dc60 	.word	0x0800dc60
 800b594:	0800dc68 	.word	0x0800dc68
 800b598:	2301      	movs	r3, #1
 800b59a:	9a06      	ldr	r2, [sp, #24]
 800b59c:	4631      	mov	r1, r6
 800b59e:	4628      	mov	r0, r5
 800b5a0:	47b8      	blx	r7
 800b5a2:	3001      	adds	r0, #1
 800b5a4:	f43f aecd 	beq.w	800b342 <_printf_float+0xba>
 800b5a8:	f10b 0b01 	add.w	fp, fp, #1
 800b5ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b5b0:	ebaa 0309 	sub.w	r3, sl, r9
 800b5b4:	455b      	cmp	r3, fp
 800b5b6:	dcef      	bgt.n	800b598 <_printf_float+0x310>
 800b5b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	44d0      	add	r8, sl
 800b5c0:	db15      	blt.n	800b5ee <_printf_float+0x366>
 800b5c2:	6823      	ldr	r3, [r4, #0]
 800b5c4:	07da      	lsls	r2, r3, #31
 800b5c6:	d412      	bmi.n	800b5ee <_printf_float+0x366>
 800b5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5cc:	eba3 020a 	sub.w	r2, r3, sl
 800b5d0:	eba3 0a01 	sub.w	sl, r3, r1
 800b5d4:	4592      	cmp	sl, r2
 800b5d6:	bfa8      	it	ge
 800b5d8:	4692      	movge	sl, r2
 800b5da:	f1ba 0f00 	cmp.w	sl, #0
 800b5de:	dc0e      	bgt.n	800b5fe <_printf_float+0x376>
 800b5e0:	f04f 0800 	mov.w	r8, #0
 800b5e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5e8:	f104 091a 	add.w	r9, r4, #26
 800b5ec:	e019      	b.n	800b622 <_printf_float+0x39a>
 800b5ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5f2:	4631      	mov	r1, r6
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	47b8      	blx	r7
 800b5f8:	3001      	adds	r0, #1
 800b5fa:	d1e5      	bne.n	800b5c8 <_printf_float+0x340>
 800b5fc:	e6a1      	b.n	800b342 <_printf_float+0xba>
 800b5fe:	4653      	mov	r3, sl
 800b600:	4642      	mov	r2, r8
 800b602:	4631      	mov	r1, r6
 800b604:	4628      	mov	r0, r5
 800b606:	47b8      	blx	r7
 800b608:	3001      	adds	r0, #1
 800b60a:	d1e9      	bne.n	800b5e0 <_printf_float+0x358>
 800b60c:	e699      	b.n	800b342 <_printf_float+0xba>
 800b60e:	2301      	movs	r3, #1
 800b610:	464a      	mov	r2, r9
 800b612:	4631      	mov	r1, r6
 800b614:	4628      	mov	r0, r5
 800b616:	47b8      	blx	r7
 800b618:	3001      	adds	r0, #1
 800b61a:	f43f ae92 	beq.w	800b342 <_printf_float+0xba>
 800b61e:	f108 0801 	add.w	r8, r8, #1
 800b622:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b626:	1a9b      	subs	r3, r3, r2
 800b628:	eba3 030a 	sub.w	r3, r3, sl
 800b62c:	4543      	cmp	r3, r8
 800b62e:	dcee      	bgt.n	800b60e <_printf_float+0x386>
 800b630:	e74a      	b.n	800b4c8 <_printf_float+0x240>
 800b632:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b634:	2a01      	cmp	r2, #1
 800b636:	dc01      	bgt.n	800b63c <_printf_float+0x3b4>
 800b638:	07db      	lsls	r3, r3, #31
 800b63a:	d53a      	bpl.n	800b6b2 <_printf_float+0x42a>
 800b63c:	2301      	movs	r3, #1
 800b63e:	4642      	mov	r2, r8
 800b640:	4631      	mov	r1, r6
 800b642:	4628      	mov	r0, r5
 800b644:	47b8      	blx	r7
 800b646:	3001      	adds	r0, #1
 800b648:	f43f ae7b 	beq.w	800b342 <_printf_float+0xba>
 800b64c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b650:	4631      	mov	r1, r6
 800b652:	4628      	mov	r0, r5
 800b654:	47b8      	blx	r7
 800b656:	3001      	adds	r0, #1
 800b658:	f108 0801 	add.w	r8, r8, #1
 800b65c:	f43f ae71 	beq.w	800b342 <_printf_float+0xba>
 800b660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b662:	2200      	movs	r2, #0
 800b664:	f103 3aff 	add.w	sl, r3, #4294967295
 800b668:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b66c:	2300      	movs	r3, #0
 800b66e:	f7f5 fa33 	bl	8000ad8 <__aeabi_dcmpeq>
 800b672:	b9c8      	cbnz	r0, 800b6a8 <_printf_float+0x420>
 800b674:	4653      	mov	r3, sl
 800b676:	4642      	mov	r2, r8
 800b678:	4631      	mov	r1, r6
 800b67a:	4628      	mov	r0, r5
 800b67c:	47b8      	blx	r7
 800b67e:	3001      	adds	r0, #1
 800b680:	d10e      	bne.n	800b6a0 <_printf_float+0x418>
 800b682:	e65e      	b.n	800b342 <_printf_float+0xba>
 800b684:	2301      	movs	r3, #1
 800b686:	4652      	mov	r2, sl
 800b688:	4631      	mov	r1, r6
 800b68a:	4628      	mov	r0, r5
 800b68c:	47b8      	blx	r7
 800b68e:	3001      	adds	r0, #1
 800b690:	f43f ae57 	beq.w	800b342 <_printf_float+0xba>
 800b694:	f108 0801 	add.w	r8, r8, #1
 800b698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b69a:	3b01      	subs	r3, #1
 800b69c:	4543      	cmp	r3, r8
 800b69e:	dcf1      	bgt.n	800b684 <_printf_float+0x3fc>
 800b6a0:	464b      	mov	r3, r9
 800b6a2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b6a6:	e6de      	b.n	800b466 <_printf_float+0x1de>
 800b6a8:	f04f 0800 	mov.w	r8, #0
 800b6ac:	f104 0a1a 	add.w	sl, r4, #26
 800b6b0:	e7f2      	b.n	800b698 <_printf_float+0x410>
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e7df      	b.n	800b676 <_printf_float+0x3ee>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	464a      	mov	r2, r9
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	4628      	mov	r0, r5
 800b6be:	47b8      	blx	r7
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	f43f ae3e 	beq.w	800b342 <_printf_float+0xba>
 800b6c6:	f108 0801 	add.w	r8, r8, #1
 800b6ca:	68e3      	ldr	r3, [r4, #12]
 800b6cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6ce:	1a9b      	subs	r3, r3, r2
 800b6d0:	4543      	cmp	r3, r8
 800b6d2:	dcf0      	bgt.n	800b6b6 <_printf_float+0x42e>
 800b6d4:	e6fc      	b.n	800b4d0 <_printf_float+0x248>
 800b6d6:	f04f 0800 	mov.w	r8, #0
 800b6da:	f104 0919 	add.w	r9, r4, #25
 800b6de:	e7f4      	b.n	800b6ca <_printf_float+0x442>
 800b6e0:	2900      	cmp	r1, #0
 800b6e2:	f43f ae8b 	beq.w	800b3fc <_printf_float+0x174>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b6ec:	ab09      	add	r3, sp, #36	; 0x24
 800b6ee:	9300      	str	r3, [sp, #0]
 800b6f0:	ec49 8b10 	vmov	d0, r8, r9
 800b6f4:	6022      	str	r2, [r4, #0]
 800b6f6:	f8cd a004 	str.w	sl, [sp, #4]
 800b6fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b6fe:	4628      	mov	r0, r5
 800b700:	f7ff fd2d 	bl	800b15e <__cvt>
 800b704:	4680      	mov	r8, r0
 800b706:	e648      	b.n	800b39a <_printf_float+0x112>

0800b708 <_printf_common>:
 800b708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b70c:	4691      	mov	r9, r2
 800b70e:	461f      	mov	r7, r3
 800b710:	688a      	ldr	r2, [r1, #8]
 800b712:	690b      	ldr	r3, [r1, #16]
 800b714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b718:	4293      	cmp	r3, r2
 800b71a:	bfb8      	it	lt
 800b71c:	4613      	movlt	r3, r2
 800b71e:	f8c9 3000 	str.w	r3, [r9]
 800b722:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b726:	4606      	mov	r6, r0
 800b728:	460c      	mov	r4, r1
 800b72a:	b112      	cbz	r2, 800b732 <_printf_common+0x2a>
 800b72c:	3301      	adds	r3, #1
 800b72e:	f8c9 3000 	str.w	r3, [r9]
 800b732:	6823      	ldr	r3, [r4, #0]
 800b734:	0699      	lsls	r1, r3, #26
 800b736:	bf42      	ittt	mi
 800b738:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b73c:	3302      	addmi	r3, #2
 800b73e:	f8c9 3000 	strmi.w	r3, [r9]
 800b742:	6825      	ldr	r5, [r4, #0]
 800b744:	f015 0506 	ands.w	r5, r5, #6
 800b748:	d107      	bne.n	800b75a <_printf_common+0x52>
 800b74a:	f104 0a19 	add.w	sl, r4, #25
 800b74e:	68e3      	ldr	r3, [r4, #12]
 800b750:	f8d9 2000 	ldr.w	r2, [r9]
 800b754:	1a9b      	subs	r3, r3, r2
 800b756:	42ab      	cmp	r3, r5
 800b758:	dc28      	bgt.n	800b7ac <_printf_common+0xa4>
 800b75a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b75e:	6822      	ldr	r2, [r4, #0]
 800b760:	3300      	adds	r3, #0
 800b762:	bf18      	it	ne
 800b764:	2301      	movne	r3, #1
 800b766:	0692      	lsls	r2, r2, #26
 800b768:	d42d      	bmi.n	800b7c6 <_printf_common+0xbe>
 800b76a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b76e:	4639      	mov	r1, r7
 800b770:	4630      	mov	r0, r6
 800b772:	47c0      	blx	r8
 800b774:	3001      	adds	r0, #1
 800b776:	d020      	beq.n	800b7ba <_printf_common+0xb2>
 800b778:	6823      	ldr	r3, [r4, #0]
 800b77a:	68e5      	ldr	r5, [r4, #12]
 800b77c:	f8d9 2000 	ldr.w	r2, [r9]
 800b780:	f003 0306 	and.w	r3, r3, #6
 800b784:	2b04      	cmp	r3, #4
 800b786:	bf08      	it	eq
 800b788:	1aad      	subeq	r5, r5, r2
 800b78a:	68a3      	ldr	r3, [r4, #8]
 800b78c:	6922      	ldr	r2, [r4, #16]
 800b78e:	bf0c      	ite	eq
 800b790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b794:	2500      	movne	r5, #0
 800b796:	4293      	cmp	r3, r2
 800b798:	bfc4      	itt	gt
 800b79a:	1a9b      	subgt	r3, r3, r2
 800b79c:	18ed      	addgt	r5, r5, r3
 800b79e:	f04f 0900 	mov.w	r9, #0
 800b7a2:	341a      	adds	r4, #26
 800b7a4:	454d      	cmp	r5, r9
 800b7a6:	d11a      	bne.n	800b7de <_printf_common+0xd6>
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	e008      	b.n	800b7be <_printf_common+0xb6>
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	4652      	mov	r2, sl
 800b7b0:	4639      	mov	r1, r7
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	47c0      	blx	r8
 800b7b6:	3001      	adds	r0, #1
 800b7b8:	d103      	bne.n	800b7c2 <_printf_common+0xba>
 800b7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c2:	3501      	adds	r5, #1
 800b7c4:	e7c3      	b.n	800b74e <_printf_common+0x46>
 800b7c6:	18e1      	adds	r1, r4, r3
 800b7c8:	1c5a      	adds	r2, r3, #1
 800b7ca:	2030      	movs	r0, #48	; 0x30
 800b7cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7d0:	4422      	add	r2, r4
 800b7d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7da:	3302      	adds	r3, #2
 800b7dc:	e7c5      	b.n	800b76a <_printf_common+0x62>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	4622      	mov	r2, r4
 800b7e2:	4639      	mov	r1, r7
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	47c0      	blx	r8
 800b7e8:	3001      	adds	r0, #1
 800b7ea:	d0e6      	beq.n	800b7ba <_printf_common+0xb2>
 800b7ec:	f109 0901 	add.w	r9, r9, #1
 800b7f0:	e7d8      	b.n	800b7a4 <_printf_common+0x9c>
	...

0800b7f4 <_printf_i>:
 800b7f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b7fc:	460c      	mov	r4, r1
 800b7fe:	7e09      	ldrb	r1, [r1, #24]
 800b800:	b085      	sub	sp, #20
 800b802:	296e      	cmp	r1, #110	; 0x6e
 800b804:	4617      	mov	r7, r2
 800b806:	4606      	mov	r6, r0
 800b808:	4698      	mov	r8, r3
 800b80a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b80c:	f000 80b3 	beq.w	800b976 <_printf_i+0x182>
 800b810:	d822      	bhi.n	800b858 <_printf_i+0x64>
 800b812:	2963      	cmp	r1, #99	; 0x63
 800b814:	d036      	beq.n	800b884 <_printf_i+0x90>
 800b816:	d80a      	bhi.n	800b82e <_printf_i+0x3a>
 800b818:	2900      	cmp	r1, #0
 800b81a:	f000 80b9 	beq.w	800b990 <_printf_i+0x19c>
 800b81e:	2958      	cmp	r1, #88	; 0x58
 800b820:	f000 8083 	beq.w	800b92a <_printf_i+0x136>
 800b824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b828:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b82c:	e032      	b.n	800b894 <_printf_i+0xa0>
 800b82e:	2964      	cmp	r1, #100	; 0x64
 800b830:	d001      	beq.n	800b836 <_printf_i+0x42>
 800b832:	2969      	cmp	r1, #105	; 0x69
 800b834:	d1f6      	bne.n	800b824 <_printf_i+0x30>
 800b836:	6820      	ldr	r0, [r4, #0]
 800b838:	6813      	ldr	r3, [r2, #0]
 800b83a:	0605      	lsls	r5, r0, #24
 800b83c:	f103 0104 	add.w	r1, r3, #4
 800b840:	d52a      	bpl.n	800b898 <_printf_i+0xa4>
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	6011      	str	r1, [r2, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	da03      	bge.n	800b852 <_printf_i+0x5e>
 800b84a:	222d      	movs	r2, #45	; 0x2d
 800b84c:	425b      	negs	r3, r3
 800b84e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b852:	486f      	ldr	r0, [pc, #444]	; (800ba10 <_printf_i+0x21c>)
 800b854:	220a      	movs	r2, #10
 800b856:	e039      	b.n	800b8cc <_printf_i+0xd8>
 800b858:	2973      	cmp	r1, #115	; 0x73
 800b85a:	f000 809d 	beq.w	800b998 <_printf_i+0x1a4>
 800b85e:	d808      	bhi.n	800b872 <_printf_i+0x7e>
 800b860:	296f      	cmp	r1, #111	; 0x6f
 800b862:	d020      	beq.n	800b8a6 <_printf_i+0xb2>
 800b864:	2970      	cmp	r1, #112	; 0x70
 800b866:	d1dd      	bne.n	800b824 <_printf_i+0x30>
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	f043 0320 	orr.w	r3, r3, #32
 800b86e:	6023      	str	r3, [r4, #0]
 800b870:	e003      	b.n	800b87a <_printf_i+0x86>
 800b872:	2975      	cmp	r1, #117	; 0x75
 800b874:	d017      	beq.n	800b8a6 <_printf_i+0xb2>
 800b876:	2978      	cmp	r1, #120	; 0x78
 800b878:	d1d4      	bne.n	800b824 <_printf_i+0x30>
 800b87a:	2378      	movs	r3, #120	; 0x78
 800b87c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b880:	4864      	ldr	r0, [pc, #400]	; (800ba14 <_printf_i+0x220>)
 800b882:	e055      	b.n	800b930 <_printf_i+0x13c>
 800b884:	6813      	ldr	r3, [r2, #0]
 800b886:	1d19      	adds	r1, r3, #4
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	6011      	str	r1, [r2, #0]
 800b88c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b894:	2301      	movs	r3, #1
 800b896:	e08c      	b.n	800b9b2 <_printf_i+0x1be>
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	6011      	str	r1, [r2, #0]
 800b89c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b8a0:	bf18      	it	ne
 800b8a2:	b21b      	sxthne	r3, r3
 800b8a4:	e7cf      	b.n	800b846 <_printf_i+0x52>
 800b8a6:	6813      	ldr	r3, [r2, #0]
 800b8a8:	6825      	ldr	r5, [r4, #0]
 800b8aa:	1d18      	adds	r0, r3, #4
 800b8ac:	6010      	str	r0, [r2, #0]
 800b8ae:	0628      	lsls	r0, r5, #24
 800b8b0:	d501      	bpl.n	800b8b6 <_printf_i+0xc2>
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	e002      	b.n	800b8bc <_printf_i+0xc8>
 800b8b6:	0668      	lsls	r0, r5, #25
 800b8b8:	d5fb      	bpl.n	800b8b2 <_printf_i+0xbe>
 800b8ba:	881b      	ldrh	r3, [r3, #0]
 800b8bc:	4854      	ldr	r0, [pc, #336]	; (800ba10 <_printf_i+0x21c>)
 800b8be:	296f      	cmp	r1, #111	; 0x6f
 800b8c0:	bf14      	ite	ne
 800b8c2:	220a      	movne	r2, #10
 800b8c4:	2208      	moveq	r2, #8
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8cc:	6865      	ldr	r5, [r4, #4]
 800b8ce:	60a5      	str	r5, [r4, #8]
 800b8d0:	2d00      	cmp	r5, #0
 800b8d2:	f2c0 8095 	blt.w	800ba00 <_printf_i+0x20c>
 800b8d6:	6821      	ldr	r1, [r4, #0]
 800b8d8:	f021 0104 	bic.w	r1, r1, #4
 800b8dc:	6021      	str	r1, [r4, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d13d      	bne.n	800b95e <_printf_i+0x16a>
 800b8e2:	2d00      	cmp	r5, #0
 800b8e4:	f040 808e 	bne.w	800ba04 <_printf_i+0x210>
 800b8e8:	4665      	mov	r5, ip
 800b8ea:	2a08      	cmp	r2, #8
 800b8ec:	d10b      	bne.n	800b906 <_printf_i+0x112>
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	07db      	lsls	r3, r3, #31
 800b8f2:	d508      	bpl.n	800b906 <_printf_i+0x112>
 800b8f4:	6923      	ldr	r3, [r4, #16]
 800b8f6:	6862      	ldr	r2, [r4, #4]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	bfde      	ittt	le
 800b8fc:	2330      	movle	r3, #48	; 0x30
 800b8fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b902:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b906:	ebac 0305 	sub.w	r3, ip, r5
 800b90a:	6123      	str	r3, [r4, #16]
 800b90c:	f8cd 8000 	str.w	r8, [sp]
 800b910:	463b      	mov	r3, r7
 800b912:	aa03      	add	r2, sp, #12
 800b914:	4621      	mov	r1, r4
 800b916:	4630      	mov	r0, r6
 800b918:	f7ff fef6 	bl	800b708 <_printf_common>
 800b91c:	3001      	adds	r0, #1
 800b91e:	d14d      	bne.n	800b9bc <_printf_i+0x1c8>
 800b920:	f04f 30ff 	mov.w	r0, #4294967295
 800b924:	b005      	add	sp, #20
 800b926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b92a:	4839      	ldr	r0, [pc, #228]	; (800ba10 <_printf_i+0x21c>)
 800b92c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b930:	6813      	ldr	r3, [r2, #0]
 800b932:	6821      	ldr	r1, [r4, #0]
 800b934:	1d1d      	adds	r5, r3, #4
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	6015      	str	r5, [r2, #0]
 800b93a:	060a      	lsls	r2, r1, #24
 800b93c:	d50b      	bpl.n	800b956 <_printf_i+0x162>
 800b93e:	07ca      	lsls	r2, r1, #31
 800b940:	bf44      	itt	mi
 800b942:	f041 0120 	orrmi.w	r1, r1, #32
 800b946:	6021      	strmi	r1, [r4, #0]
 800b948:	b91b      	cbnz	r3, 800b952 <_printf_i+0x15e>
 800b94a:	6822      	ldr	r2, [r4, #0]
 800b94c:	f022 0220 	bic.w	r2, r2, #32
 800b950:	6022      	str	r2, [r4, #0]
 800b952:	2210      	movs	r2, #16
 800b954:	e7b7      	b.n	800b8c6 <_printf_i+0xd2>
 800b956:	064d      	lsls	r5, r1, #25
 800b958:	bf48      	it	mi
 800b95a:	b29b      	uxthmi	r3, r3
 800b95c:	e7ef      	b.n	800b93e <_printf_i+0x14a>
 800b95e:	4665      	mov	r5, ip
 800b960:	fbb3 f1f2 	udiv	r1, r3, r2
 800b964:	fb02 3311 	mls	r3, r2, r1, r3
 800b968:	5cc3      	ldrb	r3, [r0, r3]
 800b96a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b96e:	460b      	mov	r3, r1
 800b970:	2900      	cmp	r1, #0
 800b972:	d1f5      	bne.n	800b960 <_printf_i+0x16c>
 800b974:	e7b9      	b.n	800b8ea <_printf_i+0xf6>
 800b976:	6813      	ldr	r3, [r2, #0]
 800b978:	6825      	ldr	r5, [r4, #0]
 800b97a:	6961      	ldr	r1, [r4, #20]
 800b97c:	1d18      	adds	r0, r3, #4
 800b97e:	6010      	str	r0, [r2, #0]
 800b980:	0628      	lsls	r0, r5, #24
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	d501      	bpl.n	800b98a <_printf_i+0x196>
 800b986:	6019      	str	r1, [r3, #0]
 800b988:	e002      	b.n	800b990 <_printf_i+0x19c>
 800b98a:	066a      	lsls	r2, r5, #25
 800b98c:	d5fb      	bpl.n	800b986 <_printf_i+0x192>
 800b98e:	8019      	strh	r1, [r3, #0]
 800b990:	2300      	movs	r3, #0
 800b992:	6123      	str	r3, [r4, #16]
 800b994:	4665      	mov	r5, ip
 800b996:	e7b9      	b.n	800b90c <_printf_i+0x118>
 800b998:	6813      	ldr	r3, [r2, #0]
 800b99a:	1d19      	adds	r1, r3, #4
 800b99c:	6011      	str	r1, [r2, #0]
 800b99e:	681d      	ldr	r5, [r3, #0]
 800b9a0:	6862      	ldr	r2, [r4, #4]
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	f7f4 fc23 	bl	80001f0 <memchr>
 800b9aa:	b108      	cbz	r0, 800b9b0 <_printf_i+0x1bc>
 800b9ac:	1b40      	subs	r0, r0, r5
 800b9ae:	6060      	str	r0, [r4, #4]
 800b9b0:	6863      	ldr	r3, [r4, #4]
 800b9b2:	6123      	str	r3, [r4, #16]
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9ba:	e7a7      	b.n	800b90c <_printf_i+0x118>
 800b9bc:	6923      	ldr	r3, [r4, #16]
 800b9be:	462a      	mov	r2, r5
 800b9c0:	4639      	mov	r1, r7
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	47c0      	blx	r8
 800b9c6:	3001      	adds	r0, #1
 800b9c8:	d0aa      	beq.n	800b920 <_printf_i+0x12c>
 800b9ca:	6823      	ldr	r3, [r4, #0]
 800b9cc:	079b      	lsls	r3, r3, #30
 800b9ce:	d413      	bmi.n	800b9f8 <_printf_i+0x204>
 800b9d0:	68e0      	ldr	r0, [r4, #12]
 800b9d2:	9b03      	ldr	r3, [sp, #12]
 800b9d4:	4298      	cmp	r0, r3
 800b9d6:	bfb8      	it	lt
 800b9d8:	4618      	movlt	r0, r3
 800b9da:	e7a3      	b.n	800b924 <_printf_i+0x130>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	464a      	mov	r2, r9
 800b9e0:	4639      	mov	r1, r7
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	47c0      	blx	r8
 800b9e6:	3001      	adds	r0, #1
 800b9e8:	d09a      	beq.n	800b920 <_printf_i+0x12c>
 800b9ea:	3501      	adds	r5, #1
 800b9ec:	68e3      	ldr	r3, [r4, #12]
 800b9ee:	9a03      	ldr	r2, [sp, #12]
 800b9f0:	1a9b      	subs	r3, r3, r2
 800b9f2:	42ab      	cmp	r3, r5
 800b9f4:	dcf2      	bgt.n	800b9dc <_printf_i+0x1e8>
 800b9f6:	e7eb      	b.n	800b9d0 <_printf_i+0x1dc>
 800b9f8:	2500      	movs	r5, #0
 800b9fa:	f104 0919 	add.w	r9, r4, #25
 800b9fe:	e7f5      	b.n	800b9ec <_printf_i+0x1f8>
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1ac      	bne.n	800b95e <_printf_i+0x16a>
 800ba04:	7803      	ldrb	r3, [r0, #0]
 800ba06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba0e:	e76c      	b.n	800b8ea <_printf_i+0xf6>
 800ba10:	0800dc6a 	.word	0x0800dc6a
 800ba14:	0800dc7b 	.word	0x0800dc7b

0800ba18 <siprintf>:
 800ba18:	b40e      	push	{r1, r2, r3}
 800ba1a:	b500      	push	{lr}
 800ba1c:	b09c      	sub	sp, #112	; 0x70
 800ba1e:	ab1d      	add	r3, sp, #116	; 0x74
 800ba20:	9002      	str	r0, [sp, #8]
 800ba22:	9006      	str	r0, [sp, #24]
 800ba24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba28:	4809      	ldr	r0, [pc, #36]	; (800ba50 <siprintf+0x38>)
 800ba2a:	9107      	str	r1, [sp, #28]
 800ba2c:	9104      	str	r1, [sp, #16]
 800ba2e:	4909      	ldr	r1, [pc, #36]	; (800ba54 <siprintf+0x3c>)
 800ba30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba34:	9105      	str	r1, [sp, #20]
 800ba36:	6800      	ldr	r0, [r0, #0]
 800ba38:	9301      	str	r3, [sp, #4]
 800ba3a:	a902      	add	r1, sp, #8
 800ba3c:	f001 fb78 	bl	800d130 <_svfiprintf_r>
 800ba40:	9b02      	ldr	r3, [sp, #8]
 800ba42:	2200      	movs	r2, #0
 800ba44:	701a      	strb	r2, [r3, #0]
 800ba46:	b01c      	add	sp, #112	; 0x70
 800ba48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba4c:	b003      	add	sp, #12
 800ba4e:	4770      	bx	lr
 800ba50:	2000008c 	.word	0x2000008c
 800ba54:	ffff0208 	.word	0xffff0208

0800ba58 <strncmp>:
 800ba58:	b510      	push	{r4, lr}
 800ba5a:	b16a      	cbz	r2, 800ba78 <strncmp+0x20>
 800ba5c:	3901      	subs	r1, #1
 800ba5e:	1884      	adds	r4, r0, r2
 800ba60:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ba64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d103      	bne.n	800ba74 <strncmp+0x1c>
 800ba6c:	42a0      	cmp	r0, r4
 800ba6e:	d001      	beq.n	800ba74 <strncmp+0x1c>
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1f5      	bne.n	800ba60 <strncmp+0x8>
 800ba74:	1a98      	subs	r0, r3, r2
 800ba76:	bd10      	pop	{r4, pc}
 800ba78:	4610      	mov	r0, r2
 800ba7a:	e7fc      	b.n	800ba76 <strncmp+0x1e>

0800ba7c <strncpy>:
 800ba7c:	b570      	push	{r4, r5, r6, lr}
 800ba7e:	3901      	subs	r1, #1
 800ba80:	4604      	mov	r4, r0
 800ba82:	b902      	cbnz	r2, 800ba86 <strncpy+0xa>
 800ba84:	bd70      	pop	{r4, r5, r6, pc}
 800ba86:	4623      	mov	r3, r4
 800ba88:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800ba8c:	f803 5b01 	strb.w	r5, [r3], #1
 800ba90:	1e56      	subs	r6, r2, #1
 800ba92:	b92d      	cbnz	r5, 800baa0 <strncpy+0x24>
 800ba94:	4414      	add	r4, r2
 800ba96:	42a3      	cmp	r3, r4
 800ba98:	d0f4      	beq.n	800ba84 <strncpy+0x8>
 800ba9a:	f803 5b01 	strb.w	r5, [r3], #1
 800ba9e:	e7fa      	b.n	800ba96 <strncpy+0x1a>
 800baa0:	461c      	mov	r4, r3
 800baa2:	4632      	mov	r2, r6
 800baa4:	e7ed      	b.n	800ba82 <strncpy+0x6>
	...

0800baa8 <strtok>:
 800baa8:	4b13      	ldr	r3, [pc, #76]	; (800baf8 <strtok+0x50>)
 800baaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baae:	681d      	ldr	r5, [r3, #0]
 800bab0:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800bab2:	4606      	mov	r6, r0
 800bab4:	460f      	mov	r7, r1
 800bab6:	b9b4      	cbnz	r4, 800bae6 <strtok+0x3e>
 800bab8:	2050      	movs	r0, #80	; 0x50
 800baba:	f000 ff33 	bl	800c924 <malloc>
 800babe:	65a8      	str	r0, [r5, #88]	; 0x58
 800bac0:	e9c0 4400 	strd	r4, r4, [r0]
 800bac4:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bac8:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bacc:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800bad0:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800bad4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800bad8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800badc:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800bae0:	6184      	str	r4, [r0, #24]
 800bae2:	7704      	strb	r4, [r0, #28]
 800bae4:	6244      	str	r4, [r0, #36]	; 0x24
 800bae6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800bae8:	4639      	mov	r1, r7
 800baea:	4630      	mov	r0, r6
 800baec:	2301      	movs	r3, #1
 800baee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baf2:	f000 b803 	b.w	800bafc <__strtok_r>
 800baf6:	bf00      	nop
 800baf8:	2000008c 	.word	0x2000008c

0800bafc <__strtok_r>:
 800bafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bafe:	b918      	cbnz	r0, 800bb08 <__strtok_r+0xc>
 800bb00:	6810      	ldr	r0, [r2, #0]
 800bb02:	b908      	cbnz	r0, 800bb08 <__strtok_r+0xc>
 800bb04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb06:	4620      	mov	r0, r4
 800bb08:	4604      	mov	r4, r0
 800bb0a:	460f      	mov	r7, r1
 800bb0c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bb10:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bb14:	b91e      	cbnz	r6, 800bb1e <__strtok_r+0x22>
 800bb16:	b96d      	cbnz	r5, 800bb34 <__strtok_r+0x38>
 800bb18:	6015      	str	r5, [r2, #0]
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	e7f2      	b.n	800bb04 <__strtok_r+0x8>
 800bb1e:	42b5      	cmp	r5, r6
 800bb20:	d1f6      	bne.n	800bb10 <__strtok_r+0x14>
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d1ef      	bne.n	800bb06 <__strtok_r+0xa>
 800bb26:	6014      	str	r4, [r2, #0]
 800bb28:	7003      	strb	r3, [r0, #0]
 800bb2a:	e7eb      	b.n	800bb04 <__strtok_r+0x8>
 800bb2c:	462b      	mov	r3, r5
 800bb2e:	e00d      	b.n	800bb4c <__strtok_r+0x50>
 800bb30:	b926      	cbnz	r6, 800bb3c <__strtok_r+0x40>
 800bb32:	461c      	mov	r4, r3
 800bb34:	4623      	mov	r3, r4
 800bb36:	460f      	mov	r7, r1
 800bb38:	f813 5b01 	ldrb.w	r5, [r3], #1
 800bb3c:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bb40:	42b5      	cmp	r5, r6
 800bb42:	d1f5      	bne.n	800bb30 <__strtok_r+0x34>
 800bb44:	2d00      	cmp	r5, #0
 800bb46:	d0f1      	beq.n	800bb2c <__strtok_r+0x30>
 800bb48:	2100      	movs	r1, #0
 800bb4a:	7021      	strb	r1, [r4, #0]
 800bb4c:	6013      	str	r3, [r2, #0]
 800bb4e:	e7d9      	b.n	800bb04 <__strtok_r+0x8>

0800bb50 <_strtol_l.isra.0>:
 800bb50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb54:	4680      	mov	r8, r0
 800bb56:	4689      	mov	r9, r1
 800bb58:	4692      	mov	sl, r2
 800bb5a:	461e      	mov	r6, r3
 800bb5c:	460f      	mov	r7, r1
 800bb5e:	463d      	mov	r5, r7
 800bb60:	9808      	ldr	r0, [sp, #32]
 800bb62:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb66:	f000 fecb 	bl	800c900 <__locale_ctype_ptr_l>
 800bb6a:	4420      	add	r0, r4
 800bb6c:	7843      	ldrb	r3, [r0, #1]
 800bb6e:	f013 0308 	ands.w	r3, r3, #8
 800bb72:	d132      	bne.n	800bbda <_strtol_l.isra.0+0x8a>
 800bb74:	2c2d      	cmp	r4, #45	; 0x2d
 800bb76:	d132      	bne.n	800bbde <_strtol_l.isra.0+0x8e>
 800bb78:	787c      	ldrb	r4, [r7, #1]
 800bb7a:	1cbd      	adds	r5, r7, #2
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	2e00      	cmp	r6, #0
 800bb80:	d05d      	beq.n	800bc3e <_strtol_l.isra.0+0xee>
 800bb82:	2e10      	cmp	r6, #16
 800bb84:	d109      	bne.n	800bb9a <_strtol_l.isra.0+0x4a>
 800bb86:	2c30      	cmp	r4, #48	; 0x30
 800bb88:	d107      	bne.n	800bb9a <_strtol_l.isra.0+0x4a>
 800bb8a:	782b      	ldrb	r3, [r5, #0]
 800bb8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bb90:	2b58      	cmp	r3, #88	; 0x58
 800bb92:	d14f      	bne.n	800bc34 <_strtol_l.isra.0+0xe4>
 800bb94:	786c      	ldrb	r4, [r5, #1]
 800bb96:	2610      	movs	r6, #16
 800bb98:	3502      	adds	r5, #2
 800bb9a:	2a00      	cmp	r2, #0
 800bb9c:	bf14      	ite	ne
 800bb9e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800bba2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800bba6:	2700      	movs	r7, #0
 800bba8:	fbb1 fcf6 	udiv	ip, r1, r6
 800bbac:	4638      	mov	r0, r7
 800bbae:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bbb2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800bbb6:	2b09      	cmp	r3, #9
 800bbb8:	d817      	bhi.n	800bbea <_strtol_l.isra.0+0x9a>
 800bbba:	461c      	mov	r4, r3
 800bbbc:	42a6      	cmp	r6, r4
 800bbbe:	dd23      	ble.n	800bc08 <_strtol_l.isra.0+0xb8>
 800bbc0:	1c7b      	adds	r3, r7, #1
 800bbc2:	d007      	beq.n	800bbd4 <_strtol_l.isra.0+0x84>
 800bbc4:	4584      	cmp	ip, r0
 800bbc6:	d31c      	bcc.n	800bc02 <_strtol_l.isra.0+0xb2>
 800bbc8:	d101      	bne.n	800bbce <_strtol_l.isra.0+0x7e>
 800bbca:	45a6      	cmp	lr, r4
 800bbcc:	db19      	blt.n	800bc02 <_strtol_l.isra.0+0xb2>
 800bbce:	fb00 4006 	mla	r0, r0, r6, r4
 800bbd2:	2701      	movs	r7, #1
 800bbd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbd8:	e7eb      	b.n	800bbb2 <_strtol_l.isra.0+0x62>
 800bbda:	462f      	mov	r7, r5
 800bbdc:	e7bf      	b.n	800bb5e <_strtol_l.isra.0+0xe>
 800bbde:	2c2b      	cmp	r4, #43	; 0x2b
 800bbe0:	bf04      	itt	eq
 800bbe2:	1cbd      	addeq	r5, r7, #2
 800bbe4:	787c      	ldrbeq	r4, [r7, #1]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	e7c9      	b.n	800bb7e <_strtol_l.isra.0+0x2e>
 800bbea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bbee:	2b19      	cmp	r3, #25
 800bbf0:	d801      	bhi.n	800bbf6 <_strtol_l.isra.0+0xa6>
 800bbf2:	3c37      	subs	r4, #55	; 0x37
 800bbf4:	e7e2      	b.n	800bbbc <_strtol_l.isra.0+0x6c>
 800bbf6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bbfa:	2b19      	cmp	r3, #25
 800bbfc:	d804      	bhi.n	800bc08 <_strtol_l.isra.0+0xb8>
 800bbfe:	3c57      	subs	r4, #87	; 0x57
 800bc00:	e7dc      	b.n	800bbbc <_strtol_l.isra.0+0x6c>
 800bc02:	f04f 37ff 	mov.w	r7, #4294967295
 800bc06:	e7e5      	b.n	800bbd4 <_strtol_l.isra.0+0x84>
 800bc08:	1c7b      	adds	r3, r7, #1
 800bc0a:	d108      	bne.n	800bc1e <_strtol_l.isra.0+0xce>
 800bc0c:	2322      	movs	r3, #34	; 0x22
 800bc0e:	f8c8 3000 	str.w	r3, [r8]
 800bc12:	4608      	mov	r0, r1
 800bc14:	f1ba 0f00 	cmp.w	sl, #0
 800bc18:	d107      	bne.n	800bc2a <_strtol_l.isra.0+0xda>
 800bc1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc1e:	b102      	cbz	r2, 800bc22 <_strtol_l.isra.0+0xd2>
 800bc20:	4240      	negs	r0, r0
 800bc22:	f1ba 0f00 	cmp.w	sl, #0
 800bc26:	d0f8      	beq.n	800bc1a <_strtol_l.isra.0+0xca>
 800bc28:	b10f      	cbz	r7, 800bc2e <_strtol_l.isra.0+0xde>
 800bc2a:	f105 39ff 	add.w	r9, r5, #4294967295
 800bc2e:	f8ca 9000 	str.w	r9, [sl]
 800bc32:	e7f2      	b.n	800bc1a <_strtol_l.isra.0+0xca>
 800bc34:	2430      	movs	r4, #48	; 0x30
 800bc36:	2e00      	cmp	r6, #0
 800bc38:	d1af      	bne.n	800bb9a <_strtol_l.isra.0+0x4a>
 800bc3a:	2608      	movs	r6, #8
 800bc3c:	e7ad      	b.n	800bb9a <_strtol_l.isra.0+0x4a>
 800bc3e:	2c30      	cmp	r4, #48	; 0x30
 800bc40:	d0a3      	beq.n	800bb8a <_strtol_l.isra.0+0x3a>
 800bc42:	260a      	movs	r6, #10
 800bc44:	e7a9      	b.n	800bb9a <_strtol_l.isra.0+0x4a>
	...

0800bc48 <strtol>:
 800bc48:	4b08      	ldr	r3, [pc, #32]	; (800bc6c <strtol+0x24>)
 800bc4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc4c:	681c      	ldr	r4, [r3, #0]
 800bc4e:	4d08      	ldr	r5, [pc, #32]	; (800bc70 <strtol+0x28>)
 800bc50:	6a23      	ldr	r3, [r4, #32]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	bf08      	it	eq
 800bc56:	462b      	moveq	r3, r5
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	460a      	mov	r2, r1
 800bc5e:	4601      	mov	r1, r0
 800bc60:	4620      	mov	r0, r4
 800bc62:	f7ff ff75 	bl	800bb50 <_strtol_l.isra.0>
 800bc66:	b003      	add	sp, #12
 800bc68:	bd30      	pop	{r4, r5, pc}
 800bc6a:	bf00      	nop
 800bc6c:	2000008c 	.word	0x2000008c
 800bc70:	200000f0 	.word	0x200000f0

0800bc74 <quorem>:
 800bc74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc78:	6903      	ldr	r3, [r0, #16]
 800bc7a:	690c      	ldr	r4, [r1, #16]
 800bc7c:	42a3      	cmp	r3, r4
 800bc7e:	4680      	mov	r8, r0
 800bc80:	f2c0 8082 	blt.w	800bd88 <quorem+0x114>
 800bc84:	3c01      	subs	r4, #1
 800bc86:	f101 0714 	add.w	r7, r1, #20
 800bc8a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bc8e:	f100 0614 	add.w	r6, r0, #20
 800bc92:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bc96:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bc9a:	eb06 030c 	add.w	r3, r6, ip
 800bc9e:	3501      	adds	r5, #1
 800bca0:	eb07 090c 	add.w	r9, r7, ip
 800bca4:	9301      	str	r3, [sp, #4]
 800bca6:	fbb0 f5f5 	udiv	r5, r0, r5
 800bcaa:	b395      	cbz	r5, 800bd12 <quorem+0x9e>
 800bcac:	f04f 0a00 	mov.w	sl, #0
 800bcb0:	4638      	mov	r0, r7
 800bcb2:	46b6      	mov	lr, r6
 800bcb4:	46d3      	mov	fp, sl
 800bcb6:	f850 2b04 	ldr.w	r2, [r0], #4
 800bcba:	b293      	uxth	r3, r2
 800bcbc:	fb05 a303 	mla	r3, r5, r3, sl
 800bcc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	ebab 0303 	sub.w	r3, fp, r3
 800bcca:	0c12      	lsrs	r2, r2, #16
 800bccc:	f8de b000 	ldr.w	fp, [lr]
 800bcd0:	fb05 a202 	mla	r2, r5, r2, sl
 800bcd4:	fa13 f38b 	uxtah	r3, r3, fp
 800bcd8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bcdc:	fa1f fb82 	uxth.w	fp, r2
 800bce0:	f8de 2000 	ldr.w	r2, [lr]
 800bce4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bce8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcf2:	4581      	cmp	r9, r0
 800bcf4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bcf8:	f84e 3b04 	str.w	r3, [lr], #4
 800bcfc:	d2db      	bcs.n	800bcb6 <quorem+0x42>
 800bcfe:	f856 300c 	ldr.w	r3, [r6, ip]
 800bd02:	b933      	cbnz	r3, 800bd12 <quorem+0x9e>
 800bd04:	9b01      	ldr	r3, [sp, #4]
 800bd06:	3b04      	subs	r3, #4
 800bd08:	429e      	cmp	r6, r3
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	d330      	bcc.n	800bd70 <quorem+0xfc>
 800bd0e:	f8c8 4010 	str.w	r4, [r8, #16]
 800bd12:	4640      	mov	r0, r8
 800bd14:	f001 f836 	bl	800cd84 <__mcmp>
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	db25      	blt.n	800bd68 <quorem+0xf4>
 800bd1c:	3501      	adds	r5, #1
 800bd1e:	4630      	mov	r0, r6
 800bd20:	f04f 0c00 	mov.w	ip, #0
 800bd24:	f857 2b04 	ldr.w	r2, [r7], #4
 800bd28:	f8d0 e000 	ldr.w	lr, [r0]
 800bd2c:	b293      	uxth	r3, r2
 800bd2e:	ebac 0303 	sub.w	r3, ip, r3
 800bd32:	0c12      	lsrs	r2, r2, #16
 800bd34:	fa13 f38e 	uxtah	r3, r3, lr
 800bd38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd46:	45b9      	cmp	r9, r7
 800bd48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bd4c:	f840 3b04 	str.w	r3, [r0], #4
 800bd50:	d2e8      	bcs.n	800bd24 <quorem+0xb0>
 800bd52:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bd56:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bd5a:	b92a      	cbnz	r2, 800bd68 <quorem+0xf4>
 800bd5c:	3b04      	subs	r3, #4
 800bd5e:	429e      	cmp	r6, r3
 800bd60:	461a      	mov	r2, r3
 800bd62:	d30b      	bcc.n	800bd7c <quorem+0x108>
 800bd64:	f8c8 4010 	str.w	r4, [r8, #16]
 800bd68:	4628      	mov	r0, r5
 800bd6a:	b003      	add	sp, #12
 800bd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd70:	6812      	ldr	r2, [r2, #0]
 800bd72:	3b04      	subs	r3, #4
 800bd74:	2a00      	cmp	r2, #0
 800bd76:	d1ca      	bne.n	800bd0e <quorem+0x9a>
 800bd78:	3c01      	subs	r4, #1
 800bd7a:	e7c5      	b.n	800bd08 <quorem+0x94>
 800bd7c:	6812      	ldr	r2, [r2, #0]
 800bd7e:	3b04      	subs	r3, #4
 800bd80:	2a00      	cmp	r2, #0
 800bd82:	d1ef      	bne.n	800bd64 <quorem+0xf0>
 800bd84:	3c01      	subs	r4, #1
 800bd86:	e7ea      	b.n	800bd5e <quorem+0xea>
 800bd88:	2000      	movs	r0, #0
 800bd8a:	e7ee      	b.n	800bd6a <quorem+0xf6>
 800bd8c:	0000      	movs	r0, r0
	...

0800bd90 <_dtoa_r>:
 800bd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd94:	ec57 6b10 	vmov	r6, r7, d0
 800bd98:	b097      	sub	sp, #92	; 0x5c
 800bd9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd9c:	9106      	str	r1, [sp, #24]
 800bd9e:	4604      	mov	r4, r0
 800bda0:	920b      	str	r2, [sp, #44]	; 0x2c
 800bda2:	9312      	str	r3, [sp, #72]	; 0x48
 800bda4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bda8:	e9cd 6700 	strd	r6, r7, [sp]
 800bdac:	b93d      	cbnz	r5, 800bdbe <_dtoa_r+0x2e>
 800bdae:	2010      	movs	r0, #16
 800bdb0:	f000 fdb8 	bl	800c924 <malloc>
 800bdb4:	6260      	str	r0, [r4, #36]	; 0x24
 800bdb6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bdba:	6005      	str	r5, [r0, #0]
 800bdbc:	60c5      	str	r5, [r0, #12]
 800bdbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdc0:	6819      	ldr	r1, [r3, #0]
 800bdc2:	b151      	cbz	r1, 800bdda <_dtoa_r+0x4a>
 800bdc4:	685a      	ldr	r2, [r3, #4]
 800bdc6:	604a      	str	r2, [r1, #4]
 800bdc8:	2301      	movs	r3, #1
 800bdca:	4093      	lsls	r3, r2
 800bdcc:	608b      	str	r3, [r1, #8]
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f000 fdf6 	bl	800c9c0 <_Bfree>
 800bdd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	601a      	str	r2, [r3, #0]
 800bdda:	1e3b      	subs	r3, r7, #0
 800bddc:	bfbb      	ittet	lt
 800bdde:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bde2:	9301      	strlt	r3, [sp, #4]
 800bde4:	2300      	movge	r3, #0
 800bde6:	2201      	movlt	r2, #1
 800bde8:	bfac      	ite	ge
 800bdea:	f8c8 3000 	strge.w	r3, [r8]
 800bdee:	f8c8 2000 	strlt.w	r2, [r8]
 800bdf2:	4baf      	ldr	r3, [pc, #700]	; (800c0b0 <_dtoa_r+0x320>)
 800bdf4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bdf8:	ea33 0308 	bics.w	r3, r3, r8
 800bdfc:	d114      	bne.n	800be28 <_dtoa_r+0x98>
 800bdfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be00:	f242 730f 	movw	r3, #9999	; 0x270f
 800be04:	6013      	str	r3, [r2, #0]
 800be06:	9b00      	ldr	r3, [sp, #0]
 800be08:	b923      	cbnz	r3, 800be14 <_dtoa_r+0x84>
 800be0a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800be0e:	2800      	cmp	r0, #0
 800be10:	f000 8542 	beq.w	800c898 <_dtoa_r+0xb08>
 800be14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be16:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c0c4 <_dtoa_r+0x334>
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f000 8544 	beq.w	800c8a8 <_dtoa_r+0xb18>
 800be20:	f10b 0303 	add.w	r3, fp, #3
 800be24:	f000 bd3e 	b.w	800c8a4 <_dtoa_r+0xb14>
 800be28:	e9dd 6700 	ldrd	r6, r7, [sp]
 800be2c:	2200      	movs	r2, #0
 800be2e:	2300      	movs	r3, #0
 800be30:	4630      	mov	r0, r6
 800be32:	4639      	mov	r1, r7
 800be34:	f7f4 fe50 	bl	8000ad8 <__aeabi_dcmpeq>
 800be38:	4681      	mov	r9, r0
 800be3a:	b168      	cbz	r0, 800be58 <_dtoa_r+0xc8>
 800be3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be3e:	2301      	movs	r3, #1
 800be40:	6013      	str	r3, [r2, #0]
 800be42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be44:	2b00      	cmp	r3, #0
 800be46:	f000 8524 	beq.w	800c892 <_dtoa_r+0xb02>
 800be4a:	4b9a      	ldr	r3, [pc, #616]	; (800c0b4 <_dtoa_r+0x324>)
 800be4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be4e:	f103 3bff 	add.w	fp, r3, #4294967295
 800be52:	6013      	str	r3, [r2, #0]
 800be54:	f000 bd28 	b.w	800c8a8 <_dtoa_r+0xb18>
 800be58:	aa14      	add	r2, sp, #80	; 0x50
 800be5a:	a915      	add	r1, sp, #84	; 0x54
 800be5c:	ec47 6b10 	vmov	d0, r6, r7
 800be60:	4620      	mov	r0, r4
 800be62:	f001 f806 	bl	800ce72 <__d2b>
 800be66:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800be6a:	9004      	str	r0, [sp, #16]
 800be6c:	2d00      	cmp	r5, #0
 800be6e:	d07c      	beq.n	800bf6a <_dtoa_r+0x1da>
 800be70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be74:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800be78:	46b2      	mov	sl, r6
 800be7a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800be7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be82:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800be86:	2200      	movs	r2, #0
 800be88:	4b8b      	ldr	r3, [pc, #556]	; (800c0b8 <_dtoa_r+0x328>)
 800be8a:	4650      	mov	r0, sl
 800be8c:	4659      	mov	r1, fp
 800be8e:	f7f4 fa03 	bl	8000298 <__aeabi_dsub>
 800be92:	a381      	add	r3, pc, #516	; (adr r3, 800c098 <_dtoa_r+0x308>)
 800be94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be98:	f7f4 fbb6 	bl	8000608 <__aeabi_dmul>
 800be9c:	a380      	add	r3, pc, #512	; (adr r3, 800c0a0 <_dtoa_r+0x310>)
 800be9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea2:	f7f4 f9fb 	bl	800029c <__adddf3>
 800bea6:	4606      	mov	r6, r0
 800bea8:	4628      	mov	r0, r5
 800beaa:	460f      	mov	r7, r1
 800beac:	f7f4 fb42 	bl	8000534 <__aeabi_i2d>
 800beb0:	a37d      	add	r3, pc, #500	; (adr r3, 800c0a8 <_dtoa_r+0x318>)
 800beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb6:	f7f4 fba7 	bl	8000608 <__aeabi_dmul>
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	4630      	mov	r0, r6
 800bec0:	4639      	mov	r1, r7
 800bec2:	f7f4 f9eb 	bl	800029c <__adddf3>
 800bec6:	4606      	mov	r6, r0
 800bec8:	460f      	mov	r7, r1
 800beca:	f7f4 fe4d 	bl	8000b68 <__aeabi_d2iz>
 800bece:	2200      	movs	r2, #0
 800bed0:	4682      	mov	sl, r0
 800bed2:	2300      	movs	r3, #0
 800bed4:	4630      	mov	r0, r6
 800bed6:	4639      	mov	r1, r7
 800bed8:	f7f4 fe08 	bl	8000aec <__aeabi_dcmplt>
 800bedc:	b148      	cbz	r0, 800bef2 <_dtoa_r+0x162>
 800bede:	4650      	mov	r0, sl
 800bee0:	f7f4 fb28 	bl	8000534 <__aeabi_i2d>
 800bee4:	4632      	mov	r2, r6
 800bee6:	463b      	mov	r3, r7
 800bee8:	f7f4 fdf6 	bl	8000ad8 <__aeabi_dcmpeq>
 800beec:	b908      	cbnz	r0, 800bef2 <_dtoa_r+0x162>
 800beee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bef2:	f1ba 0f16 	cmp.w	sl, #22
 800bef6:	d859      	bhi.n	800bfac <_dtoa_r+0x21c>
 800bef8:	4970      	ldr	r1, [pc, #448]	; (800c0bc <_dtoa_r+0x32c>)
 800befa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800befe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf06:	f7f4 fe0f 	bl	8000b28 <__aeabi_dcmpgt>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d050      	beq.n	800bfb0 <_dtoa_r+0x220>
 800bf0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf12:	2300      	movs	r3, #0
 800bf14:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf18:	1b5d      	subs	r5, r3, r5
 800bf1a:	f1b5 0801 	subs.w	r8, r5, #1
 800bf1e:	bf49      	itett	mi
 800bf20:	f1c5 0301 	rsbmi	r3, r5, #1
 800bf24:	2300      	movpl	r3, #0
 800bf26:	9305      	strmi	r3, [sp, #20]
 800bf28:	f04f 0800 	movmi.w	r8, #0
 800bf2c:	bf58      	it	pl
 800bf2e:	9305      	strpl	r3, [sp, #20]
 800bf30:	f1ba 0f00 	cmp.w	sl, #0
 800bf34:	db3e      	blt.n	800bfb4 <_dtoa_r+0x224>
 800bf36:	2300      	movs	r3, #0
 800bf38:	44d0      	add	r8, sl
 800bf3a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bf3e:	9307      	str	r3, [sp, #28]
 800bf40:	9b06      	ldr	r3, [sp, #24]
 800bf42:	2b09      	cmp	r3, #9
 800bf44:	f200 8090 	bhi.w	800c068 <_dtoa_r+0x2d8>
 800bf48:	2b05      	cmp	r3, #5
 800bf4a:	bfc4      	itt	gt
 800bf4c:	3b04      	subgt	r3, #4
 800bf4e:	9306      	strgt	r3, [sp, #24]
 800bf50:	9b06      	ldr	r3, [sp, #24]
 800bf52:	f1a3 0302 	sub.w	r3, r3, #2
 800bf56:	bfcc      	ite	gt
 800bf58:	2500      	movgt	r5, #0
 800bf5a:	2501      	movle	r5, #1
 800bf5c:	2b03      	cmp	r3, #3
 800bf5e:	f200 808f 	bhi.w	800c080 <_dtoa_r+0x2f0>
 800bf62:	e8df f003 	tbb	[pc, r3]
 800bf66:	7f7d      	.short	0x7f7d
 800bf68:	7131      	.short	0x7131
 800bf6a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800bf6e:	441d      	add	r5, r3
 800bf70:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800bf74:	2820      	cmp	r0, #32
 800bf76:	dd13      	ble.n	800bfa0 <_dtoa_r+0x210>
 800bf78:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bf7c:	9b00      	ldr	r3, [sp, #0]
 800bf7e:	fa08 f800 	lsl.w	r8, r8, r0
 800bf82:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bf86:	fa23 f000 	lsr.w	r0, r3, r0
 800bf8a:	ea48 0000 	orr.w	r0, r8, r0
 800bf8e:	f7f4 fac1 	bl	8000514 <__aeabi_ui2d>
 800bf92:	2301      	movs	r3, #1
 800bf94:	4682      	mov	sl, r0
 800bf96:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bf9a:	3d01      	subs	r5, #1
 800bf9c:	9313      	str	r3, [sp, #76]	; 0x4c
 800bf9e:	e772      	b.n	800be86 <_dtoa_r+0xf6>
 800bfa0:	9b00      	ldr	r3, [sp, #0]
 800bfa2:	f1c0 0020 	rsb	r0, r0, #32
 800bfa6:	fa03 f000 	lsl.w	r0, r3, r0
 800bfaa:	e7f0      	b.n	800bf8e <_dtoa_r+0x1fe>
 800bfac:	2301      	movs	r3, #1
 800bfae:	e7b1      	b.n	800bf14 <_dtoa_r+0x184>
 800bfb0:	900f      	str	r0, [sp, #60]	; 0x3c
 800bfb2:	e7b0      	b.n	800bf16 <_dtoa_r+0x186>
 800bfb4:	9b05      	ldr	r3, [sp, #20]
 800bfb6:	eba3 030a 	sub.w	r3, r3, sl
 800bfba:	9305      	str	r3, [sp, #20]
 800bfbc:	f1ca 0300 	rsb	r3, sl, #0
 800bfc0:	9307      	str	r3, [sp, #28]
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	930e      	str	r3, [sp, #56]	; 0x38
 800bfc6:	e7bb      	b.n	800bf40 <_dtoa_r+0x1b0>
 800bfc8:	2301      	movs	r3, #1
 800bfca:	930a      	str	r3, [sp, #40]	; 0x28
 800bfcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	dd59      	ble.n	800c086 <_dtoa_r+0x2f6>
 800bfd2:	9302      	str	r3, [sp, #8]
 800bfd4:	4699      	mov	r9, r3
 800bfd6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bfd8:	2200      	movs	r2, #0
 800bfda:	6072      	str	r2, [r6, #4]
 800bfdc:	2204      	movs	r2, #4
 800bfde:	f102 0014 	add.w	r0, r2, #20
 800bfe2:	4298      	cmp	r0, r3
 800bfe4:	6871      	ldr	r1, [r6, #4]
 800bfe6:	d953      	bls.n	800c090 <_dtoa_r+0x300>
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f000 fcb5 	bl	800c958 <_Balloc>
 800bfee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bff0:	6030      	str	r0, [r6, #0]
 800bff2:	f1b9 0f0e 	cmp.w	r9, #14
 800bff6:	f8d3 b000 	ldr.w	fp, [r3]
 800bffa:	f200 80e6 	bhi.w	800c1ca <_dtoa_r+0x43a>
 800bffe:	2d00      	cmp	r5, #0
 800c000:	f000 80e3 	beq.w	800c1ca <_dtoa_r+0x43a>
 800c004:	ed9d 7b00 	vldr	d7, [sp]
 800c008:	f1ba 0f00 	cmp.w	sl, #0
 800c00c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c010:	dd74      	ble.n	800c0fc <_dtoa_r+0x36c>
 800c012:	4a2a      	ldr	r2, [pc, #168]	; (800c0bc <_dtoa_r+0x32c>)
 800c014:	f00a 030f 	and.w	r3, sl, #15
 800c018:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c01c:	ed93 7b00 	vldr	d7, [r3]
 800c020:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c024:	06f0      	lsls	r0, r6, #27
 800c026:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c02a:	d565      	bpl.n	800c0f8 <_dtoa_r+0x368>
 800c02c:	4b24      	ldr	r3, [pc, #144]	; (800c0c0 <_dtoa_r+0x330>)
 800c02e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c032:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c036:	f7f4 fc11 	bl	800085c <__aeabi_ddiv>
 800c03a:	e9cd 0100 	strd	r0, r1, [sp]
 800c03e:	f006 060f 	and.w	r6, r6, #15
 800c042:	2503      	movs	r5, #3
 800c044:	4f1e      	ldr	r7, [pc, #120]	; (800c0c0 <_dtoa_r+0x330>)
 800c046:	e04c      	b.n	800c0e2 <_dtoa_r+0x352>
 800c048:	2301      	movs	r3, #1
 800c04a:	930a      	str	r3, [sp, #40]	; 0x28
 800c04c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c04e:	4453      	add	r3, sl
 800c050:	f103 0901 	add.w	r9, r3, #1
 800c054:	9302      	str	r3, [sp, #8]
 800c056:	464b      	mov	r3, r9
 800c058:	2b01      	cmp	r3, #1
 800c05a:	bfb8      	it	lt
 800c05c:	2301      	movlt	r3, #1
 800c05e:	e7ba      	b.n	800bfd6 <_dtoa_r+0x246>
 800c060:	2300      	movs	r3, #0
 800c062:	e7b2      	b.n	800bfca <_dtoa_r+0x23a>
 800c064:	2300      	movs	r3, #0
 800c066:	e7f0      	b.n	800c04a <_dtoa_r+0x2ba>
 800c068:	2501      	movs	r5, #1
 800c06a:	2300      	movs	r3, #0
 800c06c:	9306      	str	r3, [sp, #24]
 800c06e:	950a      	str	r5, [sp, #40]	; 0x28
 800c070:	f04f 33ff 	mov.w	r3, #4294967295
 800c074:	9302      	str	r3, [sp, #8]
 800c076:	4699      	mov	r9, r3
 800c078:	2200      	movs	r2, #0
 800c07a:	2312      	movs	r3, #18
 800c07c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c07e:	e7aa      	b.n	800bfd6 <_dtoa_r+0x246>
 800c080:	2301      	movs	r3, #1
 800c082:	930a      	str	r3, [sp, #40]	; 0x28
 800c084:	e7f4      	b.n	800c070 <_dtoa_r+0x2e0>
 800c086:	2301      	movs	r3, #1
 800c088:	9302      	str	r3, [sp, #8]
 800c08a:	4699      	mov	r9, r3
 800c08c:	461a      	mov	r2, r3
 800c08e:	e7f5      	b.n	800c07c <_dtoa_r+0x2ec>
 800c090:	3101      	adds	r1, #1
 800c092:	6071      	str	r1, [r6, #4]
 800c094:	0052      	lsls	r2, r2, #1
 800c096:	e7a2      	b.n	800bfde <_dtoa_r+0x24e>
 800c098:	636f4361 	.word	0x636f4361
 800c09c:	3fd287a7 	.word	0x3fd287a7
 800c0a0:	8b60c8b3 	.word	0x8b60c8b3
 800c0a4:	3fc68a28 	.word	0x3fc68a28
 800c0a8:	509f79fb 	.word	0x509f79fb
 800c0ac:	3fd34413 	.word	0x3fd34413
 800c0b0:	7ff00000 	.word	0x7ff00000
 800c0b4:	0800dc69 	.word	0x0800dc69
 800c0b8:	3ff80000 	.word	0x3ff80000
 800c0bc:	0800dcd0 	.word	0x0800dcd0
 800c0c0:	0800dca8 	.word	0x0800dca8
 800c0c4:	0800dc95 	.word	0x0800dc95
 800c0c8:	07f1      	lsls	r1, r6, #31
 800c0ca:	d508      	bpl.n	800c0de <_dtoa_r+0x34e>
 800c0cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0d4:	f7f4 fa98 	bl	8000608 <__aeabi_dmul>
 800c0d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c0dc:	3501      	adds	r5, #1
 800c0de:	1076      	asrs	r6, r6, #1
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	2e00      	cmp	r6, #0
 800c0e4:	d1f0      	bne.n	800c0c8 <_dtoa_r+0x338>
 800c0e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c0ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0ee:	f7f4 fbb5 	bl	800085c <__aeabi_ddiv>
 800c0f2:	e9cd 0100 	strd	r0, r1, [sp]
 800c0f6:	e01a      	b.n	800c12e <_dtoa_r+0x39e>
 800c0f8:	2502      	movs	r5, #2
 800c0fa:	e7a3      	b.n	800c044 <_dtoa_r+0x2b4>
 800c0fc:	f000 80a0 	beq.w	800c240 <_dtoa_r+0x4b0>
 800c100:	f1ca 0600 	rsb	r6, sl, #0
 800c104:	4b9f      	ldr	r3, [pc, #636]	; (800c384 <_dtoa_r+0x5f4>)
 800c106:	4fa0      	ldr	r7, [pc, #640]	; (800c388 <_dtoa_r+0x5f8>)
 800c108:	f006 020f 	and.w	r2, r6, #15
 800c10c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c114:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c118:	f7f4 fa76 	bl	8000608 <__aeabi_dmul>
 800c11c:	e9cd 0100 	strd	r0, r1, [sp]
 800c120:	1136      	asrs	r6, r6, #4
 800c122:	2300      	movs	r3, #0
 800c124:	2502      	movs	r5, #2
 800c126:	2e00      	cmp	r6, #0
 800c128:	d17f      	bne.n	800c22a <_dtoa_r+0x49a>
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1e1      	bne.n	800c0f2 <_dtoa_r+0x362>
 800c12e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c130:	2b00      	cmp	r3, #0
 800c132:	f000 8087 	beq.w	800c244 <_dtoa_r+0x4b4>
 800c136:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c13a:	2200      	movs	r2, #0
 800c13c:	4b93      	ldr	r3, [pc, #588]	; (800c38c <_dtoa_r+0x5fc>)
 800c13e:	4630      	mov	r0, r6
 800c140:	4639      	mov	r1, r7
 800c142:	f7f4 fcd3 	bl	8000aec <__aeabi_dcmplt>
 800c146:	2800      	cmp	r0, #0
 800c148:	d07c      	beq.n	800c244 <_dtoa_r+0x4b4>
 800c14a:	f1b9 0f00 	cmp.w	r9, #0
 800c14e:	d079      	beq.n	800c244 <_dtoa_r+0x4b4>
 800c150:	9b02      	ldr	r3, [sp, #8]
 800c152:	2b00      	cmp	r3, #0
 800c154:	dd35      	ble.n	800c1c2 <_dtoa_r+0x432>
 800c156:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c15a:	9308      	str	r3, [sp, #32]
 800c15c:	4639      	mov	r1, r7
 800c15e:	2200      	movs	r2, #0
 800c160:	4b8b      	ldr	r3, [pc, #556]	; (800c390 <_dtoa_r+0x600>)
 800c162:	4630      	mov	r0, r6
 800c164:	f7f4 fa50 	bl	8000608 <__aeabi_dmul>
 800c168:	e9cd 0100 	strd	r0, r1, [sp]
 800c16c:	9f02      	ldr	r7, [sp, #8]
 800c16e:	3501      	adds	r5, #1
 800c170:	4628      	mov	r0, r5
 800c172:	f7f4 f9df 	bl	8000534 <__aeabi_i2d>
 800c176:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c17a:	f7f4 fa45 	bl	8000608 <__aeabi_dmul>
 800c17e:	2200      	movs	r2, #0
 800c180:	4b84      	ldr	r3, [pc, #528]	; (800c394 <_dtoa_r+0x604>)
 800c182:	f7f4 f88b 	bl	800029c <__adddf3>
 800c186:	4605      	mov	r5, r0
 800c188:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c18c:	2f00      	cmp	r7, #0
 800c18e:	d15d      	bne.n	800c24c <_dtoa_r+0x4bc>
 800c190:	2200      	movs	r2, #0
 800c192:	4b81      	ldr	r3, [pc, #516]	; (800c398 <_dtoa_r+0x608>)
 800c194:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c198:	f7f4 f87e 	bl	8000298 <__aeabi_dsub>
 800c19c:	462a      	mov	r2, r5
 800c19e:	4633      	mov	r3, r6
 800c1a0:	e9cd 0100 	strd	r0, r1, [sp]
 800c1a4:	f7f4 fcc0 	bl	8000b28 <__aeabi_dcmpgt>
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	f040 8288 	bne.w	800c6be <_dtoa_r+0x92e>
 800c1ae:	462a      	mov	r2, r5
 800c1b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c1b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1b8:	f7f4 fc98 	bl	8000aec <__aeabi_dcmplt>
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	f040 827c 	bne.w	800c6ba <_dtoa_r+0x92a>
 800c1c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c1c6:	e9cd 2300 	strd	r2, r3, [sp]
 800c1ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f2c0 8150 	blt.w	800c472 <_dtoa_r+0x6e2>
 800c1d2:	f1ba 0f0e 	cmp.w	sl, #14
 800c1d6:	f300 814c 	bgt.w	800c472 <_dtoa_r+0x6e2>
 800c1da:	4b6a      	ldr	r3, [pc, #424]	; (800c384 <_dtoa_r+0x5f4>)
 800c1dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c1e0:	ed93 7b00 	vldr	d7, [r3]
 800c1e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c1ec:	f280 80d8 	bge.w	800c3a0 <_dtoa_r+0x610>
 800c1f0:	f1b9 0f00 	cmp.w	r9, #0
 800c1f4:	f300 80d4 	bgt.w	800c3a0 <_dtoa_r+0x610>
 800c1f8:	f040 825e 	bne.w	800c6b8 <_dtoa_r+0x928>
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	4b66      	ldr	r3, [pc, #408]	; (800c398 <_dtoa_r+0x608>)
 800c200:	ec51 0b17 	vmov	r0, r1, d7
 800c204:	f7f4 fa00 	bl	8000608 <__aeabi_dmul>
 800c208:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c20c:	f7f4 fc82 	bl	8000b14 <__aeabi_dcmpge>
 800c210:	464f      	mov	r7, r9
 800c212:	464e      	mov	r6, r9
 800c214:	2800      	cmp	r0, #0
 800c216:	f040 8234 	bne.w	800c682 <_dtoa_r+0x8f2>
 800c21a:	2331      	movs	r3, #49	; 0x31
 800c21c:	f10b 0501 	add.w	r5, fp, #1
 800c220:	f88b 3000 	strb.w	r3, [fp]
 800c224:	f10a 0a01 	add.w	sl, sl, #1
 800c228:	e22f      	b.n	800c68a <_dtoa_r+0x8fa>
 800c22a:	07f2      	lsls	r2, r6, #31
 800c22c:	d505      	bpl.n	800c23a <_dtoa_r+0x4aa>
 800c22e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c232:	f7f4 f9e9 	bl	8000608 <__aeabi_dmul>
 800c236:	3501      	adds	r5, #1
 800c238:	2301      	movs	r3, #1
 800c23a:	1076      	asrs	r6, r6, #1
 800c23c:	3708      	adds	r7, #8
 800c23e:	e772      	b.n	800c126 <_dtoa_r+0x396>
 800c240:	2502      	movs	r5, #2
 800c242:	e774      	b.n	800c12e <_dtoa_r+0x39e>
 800c244:	f8cd a020 	str.w	sl, [sp, #32]
 800c248:	464f      	mov	r7, r9
 800c24a:	e791      	b.n	800c170 <_dtoa_r+0x3e0>
 800c24c:	4b4d      	ldr	r3, [pc, #308]	; (800c384 <_dtoa_r+0x5f4>)
 800c24e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c252:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d047      	beq.n	800c2ec <_dtoa_r+0x55c>
 800c25c:	4602      	mov	r2, r0
 800c25e:	460b      	mov	r3, r1
 800c260:	2000      	movs	r0, #0
 800c262:	494e      	ldr	r1, [pc, #312]	; (800c39c <_dtoa_r+0x60c>)
 800c264:	f7f4 fafa 	bl	800085c <__aeabi_ddiv>
 800c268:	462a      	mov	r2, r5
 800c26a:	4633      	mov	r3, r6
 800c26c:	f7f4 f814 	bl	8000298 <__aeabi_dsub>
 800c270:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c274:	465d      	mov	r5, fp
 800c276:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c27a:	f7f4 fc75 	bl	8000b68 <__aeabi_d2iz>
 800c27e:	4606      	mov	r6, r0
 800c280:	f7f4 f958 	bl	8000534 <__aeabi_i2d>
 800c284:	4602      	mov	r2, r0
 800c286:	460b      	mov	r3, r1
 800c288:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c28c:	f7f4 f804 	bl	8000298 <__aeabi_dsub>
 800c290:	3630      	adds	r6, #48	; 0x30
 800c292:	f805 6b01 	strb.w	r6, [r5], #1
 800c296:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c29a:	e9cd 0100 	strd	r0, r1, [sp]
 800c29e:	f7f4 fc25 	bl	8000aec <__aeabi_dcmplt>
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	d163      	bne.n	800c36e <_dtoa_r+0x5de>
 800c2a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	4937      	ldr	r1, [pc, #220]	; (800c38c <_dtoa_r+0x5fc>)
 800c2ae:	f7f3 fff3 	bl	8000298 <__aeabi_dsub>
 800c2b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c2b6:	f7f4 fc19 	bl	8000aec <__aeabi_dcmplt>
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	f040 80b7 	bne.w	800c42e <_dtoa_r+0x69e>
 800c2c0:	eba5 030b 	sub.w	r3, r5, fp
 800c2c4:	429f      	cmp	r7, r3
 800c2c6:	f77f af7c 	ble.w	800c1c2 <_dtoa_r+0x432>
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	4b30      	ldr	r3, [pc, #192]	; (800c390 <_dtoa_r+0x600>)
 800c2ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c2d2:	f7f4 f999 	bl	8000608 <__aeabi_dmul>
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c2dc:	4b2c      	ldr	r3, [pc, #176]	; (800c390 <_dtoa_r+0x600>)
 800c2de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2e2:	f7f4 f991 	bl	8000608 <__aeabi_dmul>
 800c2e6:	e9cd 0100 	strd	r0, r1, [sp]
 800c2ea:	e7c4      	b.n	800c276 <_dtoa_r+0x4e6>
 800c2ec:	462a      	mov	r2, r5
 800c2ee:	4633      	mov	r3, r6
 800c2f0:	f7f4 f98a 	bl	8000608 <__aeabi_dmul>
 800c2f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c2f8:	eb0b 0507 	add.w	r5, fp, r7
 800c2fc:	465e      	mov	r6, fp
 800c2fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c302:	f7f4 fc31 	bl	8000b68 <__aeabi_d2iz>
 800c306:	4607      	mov	r7, r0
 800c308:	f7f4 f914 	bl	8000534 <__aeabi_i2d>
 800c30c:	3730      	adds	r7, #48	; 0x30
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c316:	f7f3 ffbf 	bl	8000298 <__aeabi_dsub>
 800c31a:	f806 7b01 	strb.w	r7, [r6], #1
 800c31e:	42ae      	cmp	r6, r5
 800c320:	e9cd 0100 	strd	r0, r1, [sp]
 800c324:	f04f 0200 	mov.w	r2, #0
 800c328:	d126      	bne.n	800c378 <_dtoa_r+0x5e8>
 800c32a:	4b1c      	ldr	r3, [pc, #112]	; (800c39c <_dtoa_r+0x60c>)
 800c32c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c330:	f7f3 ffb4 	bl	800029c <__adddf3>
 800c334:	4602      	mov	r2, r0
 800c336:	460b      	mov	r3, r1
 800c338:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c33c:	f7f4 fbf4 	bl	8000b28 <__aeabi_dcmpgt>
 800c340:	2800      	cmp	r0, #0
 800c342:	d174      	bne.n	800c42e <_dtoa_r+0x69e>
 800c344:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c348:	2000      	movs	r0, #0
 800c34a:	4914      	ldr	r1, [pc, #80]	; (800c39c <_dtoa_r+0x60c>)
 800c34c:	f7f3 ffa4 	bl	8000298 <__aeabi_dsub>
 800c350:	4602      	mov	r2, r0
 800c352:	460b      	mov	r3, r1
 800c354:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c358:	f7f4 fbc8 	bl	8000aec <__aeabi_dcmplt>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	f43f af30 	beq.w	800c1c2 <_dtoa_r+0x432>
 800c362:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c366:	2b30      	cmp	r3, #48	; 0x30
 800c368:	f105 32ff 	add.w	r2, r5, #4294967295
 800c36c:	d002      	beq.n	800c374 <_dtoa_r+0x5e4>
 800c36e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c372:	e04a      	b.n	800c40a <_dtoa_r+0x67a>
 800c374:	4615      	mov	r5, r2
 800c376:	e7f4      	b.n	800c362 <_dtoa_r+0x5d2>
 800c378:	4b05      	ldr	r3, [pc, #20]	; (800c390 <_dtoa_r+0x600>)
 800c37a:	f7f4 f945 	bl	8000608 <__aeabi_dmul>
 800c37e:	e9cd 0100 	strd	r0, r1, [sp]
 800c382:	e7bc      	b.n	800c2fe <_dtoa_r+0x56e>
 800c384:	0800dcd0 	.word	0x0800dcd0
 800c388:	0800dca8 	.word	0x0800dca8
 800c38c:	3ff00000 	.word	0x3ff00000
 800c390:	40240000 	.word	0x40240000
 800c394:	401c0000 	.word	0x401c0000
 800c398:	40140000 	.word	0x40140000
 800c39c:	3fe00000 	.word	0x3fe00000
 800c3a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c3a4:	465d      	mov	r5, fp
 800c3a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	4639      	mov	r1, r7
 800c3ae:	f7f4 fa55 	bl	800085c <__aeabi_ddiv>
 800c3b2:	f7f4 fbd9 	bl	8000b68 <__aeabi_d2iz>
 800c3b6:	4680      	mov	r8, r0
 800c3b8:	f7f4 f8bc 	bl	8000534 <__aeabi_i2d>
 800c3bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3c0:	f7f4 f922 	bl	8000608 <__aeabi_dmul>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	4639      	mov	r1, r7
 800c3cc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c3d0:	f7f3 ff62 	bl	8000298 <__aeabi_dsub>
 800c3d4:	f805 6b01 	strb.w	r6, [r5], #1
 800c3d8:	eba5 060b 	sub.w	r6, r5, fp
 800c3dc:	45b1      	cmp	r9, r6
 800c3de:	4602      	mov	r2, r0
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	d139      	bne.n	800c458 <_dtoa_r+0x6c8>
 800c3e4:	f7f3 ff5a 	bl	800029c <__adddf3>
 800c3e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3ec:	4606      	mov	r6, r0
 800c3ee:	460f      	mov	r7, r1
 800c3f0:	f7f4 fb9a 	bl	8000b28 <__aeabi_dcmpgt>
 800c3f4:	b9c8      	cbnz	r0, 800c42a <_dtoa_r+0x69a>
 800c3f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	4639      	mov	r1, r7
 800c3fe:	f7f4 fb6b 	bl	8000ad8 <__aeabi_dcmpeq>
 800c402:	b110      	cbz	r0, 800c40a <_dtoa_r+0x67a>
 800c404:	f018 0f01 	tst.w	r8, #1
 800c408:	d10f      	bne.n	800c42a <_dtoa_r+0x69a>
 800c40a:	9904      	ldr	r1, [sp, #16]
 800c40c:	4620      	mov	r0, r4
 800c40e:	f000 fad7 	bl	800c9c0 <_Bfree>
 800c412:	2300      	movs	r3, #0
 800c414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c416:	702b      	strb	r3, [r5, #0]
 800c418:	f10a 0301 	add.w	r3, sl, #1
 800c41c:	6013      	str	r3, [r2, #0]
 800c41e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c420:	2b00      	cmp	r3, #0
 800c422:	f000 8241 	beq.w	800c8a8 <_dtoa_r+0xb18>
 800c426:	601d      	str	r5, [r3, #0]
 800c428:	e23e      	b.n	800c8a8 <_dtoa_r+0xb18>
 800c42a:	f8cd a020 	str.w	sl, [sp, #32]
 800c42e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c432:	2a39      	cmp	r2, #57	; 0x39
 800c434:	f105 33ff 	add.w	r3, r5, #4294967295
 800c438:	d108      	bne.n	800c44c <_dtoa_r+0x6bc>
 800c43a:	459b      	cmp	fp, r3
 800c43c:	d10a      	bne.n	800c454 <_dtoa_r+0x6c4>
 800c43e:	9b08      	ldr	r3, [sp, #32]
 800c440:	3301      	adds	r3, #1
 800c442:	9308      	str	r3, [sp, #32]
 800c444:	2330      	movs	r3, #48	; 0x30
 800c446:	f88b 3000 	strb.w	r3, [fp]
 800c44a:	465b      	mov	r3, fp
 800c44c:	781a      	ldrb	r2, [r3, #0]
 800c44e:	3201      	adds	r2, #1
 800c450:	701a      	strb	r2, [r3, #0]
 800c452:	e78c      	b.n	800c36e <_dtoa_r+0x5de>
 800c454:	461d      	mov	r5, r3
 800c456:	e7ea      	b.n	800c42e <_dtoa_r+0x69e>
 800c458:	2200      	movs	r2, #0
 800c45a:	4b9b      	ldr	r3, [pc, #620]	; (800c6c8 <_dtoa_r+0x938>)
 800c45c:	f7f4 f8d4 	bl	8000608 <__aeabi_dmul>
 800c460:	2200      	movs	r2, #0
 800c462:	2300      	movs	r3, #0
 800c464:	4606      	mov	r6, r0
 800c466:	460f      	mov	r7, r1
 800c468:	f7f4 fb36 	bl	8000ad8 <__aeabi_dcmpeq>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d09a      	beq.n	800c3a6 <_dtoa_r+0x616>
 800c470:	e7cb      	b.n	800c40a <_dtoa_r+0x67a>
 800c472:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c474:	2a00      	cmp	r2, #0
 800c476:	f000 808b 	beq.w	800c590 <_dtoa_r+0x800>
 800c47a:	9a06      	ldr	r2, [sp, #24]
 800c47c:	2a01      	cmp	r2, #1
 800c47e:	dc6e      	bgt.n	800c55e <_dtoa_r+0x7ce>
 800c480:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c482:	2a00      	cmp	r2, #0
 800c484:	d067      	beq.n	800c556 <_dtoa_r+0x7c6>
 800c486:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c48a:	9f07      	ldr	r7, [sp, #28]
 800c48c:	9d05      	ldr	r5, [sp, #20]
 800c48e:	9a05      	ldr	r2, [sp, #20]
 800c490:	2101      	movs	r1, #1
 800c492:	441a      	add	r2, r3
 800c494:	4620      	mov	r0, r4
 800c496:	9205      	str	r2, [sp, #20]
 800c498:	4498      	add	r8, r3
 800c49a:	f000 fb31 	bl	800cb00 <__i2b>
 800c49e:	4606      	mov	r6, r0
 800c4a0:	2d00      	cmp	r5, #0
 800c4a2:	dd0c      	ble.n	800c4be <_dtoa_r+0x72e>
 800c4a4:	f1b8 0f00 	cmp.w	r8, #0
 800c4a8:	dd09      	ble.n	800c4be <_dtoa_r+0x72e>
 800c4aa:	4545      	cmp	r5, r8
 800c4ac:	9a05      	ldr	r2, [sp, #20]
 800c4ae:	462b      	mov	r3, r5
 800c4b0:	bfa8      	it	ge
 800c4b2:	4643      	movge	r3, r8
 800c4b4:	1ad2      	subs	r2, r2, r3
 800c4b6:	9205      	str	r2, [sp, #20]
 800c4b8:	1aed      	subs	r5, r5, r3
 800c4ba:	eba8 0803 	sub.w	r8, r8, r3
 800c4be:	9b07      	ldr	r3, [sp, #28]
 800c4c0:	b1eb      	cbz	r3, 800c4fe <_dtoa_r+0x76e>
 800c4c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d067      	beq.n	800c598 <_dtoa_r+0x808>
 800c4c8:	b18f      	cbz	r7, 800c4ee <_dtoa_r+0x75e>
 800c4ca:	4631      	mov	r1, r6
 800c4cc:	463a      	mov	r2, r7
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	f000 fbb6 	bl	800cc40 <__pow5mult>
 800c4d4:	9a04      	ldr	r2, [sp, #16]
 800c4d6:	4601      	mov	r1, r0
 800c4d8:	4606      	mov	r6, r0
 800c4da:	4620      	mov	r0, r4
 800c4dc:	f000 fb19 	bl	800cb12 <__multiply>
 800c4e0:	9904      	ldr	r1, [sp, #16]
 800c4e2:	9008      	str	r0, [sp, #32]
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f000 fa6b 	bl	800c9c0 <_Bfree>
 800c4ea:	9b08      	ldr	r3, [sp, #32]
 800c4ec:	9304      	str	r3, [sp, #16]
 800c4ee:	9b07      	ldr	r3, [sp, #28]
 800c4f0:	1bda      	subs	r2, r3, r7
 800c4f2:	d004      	beq.n	800c4fe <_dtoa_r+0x76e>
 800c4f4:	9904      	ldr	r1, [sp, #16]
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f000 fba2 	bl	800cc40 <__pow5mult>
 800c4fc:	9004      	str	r0, [sp, #16]
 800c4fe:	2101      	movs	r1, #1
 800c500:	4620      	mov	r0, r4
 800c502:	f000 fafd 	bl	800cb00 <__i2b>
 800c506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c508:	4607      	mov	r7, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f000 81d0 	beq.w	800c8b0 <_dtoa_r+0xb20>
 800c510:	461a      	mov	r2, r3
 800c512:	4601      	mov	r1, r0
 800c514:	4620      	mov	r0, r4
 800c516:	f000 fb93 	bl	800cc40 <__pow5mult>
 800c51a:	9b06      	ldr	r3, [sp, #24]
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	4607      	mov	r7, r0
 800c520:	dc40      	bgt.n	800c5a4 <_dtoa_r+0x814>
 800c522:	9b00      	ldr	r3, [sp, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d139      	bne.n	800c59c <_dtoa_r+0x80c>
 800c528:	9b01      	ldr	r3, [sp, #4]
 800c52a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d136      	bne.n	800c5a0 <_dtoa_r+0x810>
 800c532:	9b01      	ldr	r3, [sp, #4]
 800c534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c538:	0d1b      	lsrs	r3, r3, #20
 800c53a:	051b      	lsls	r3, r3, #20
 800c53c:	b12b      	cbz	r3, 800c54a <_dtoa_r+0x7ba>
 800c53e:	9b05      	ldr	r3, [sp, #20]
 800c540:	3301      	adds	r3, #1
 800c542:	9305      	str	r3, [sp, #20]
 800c544:	f108 0801 	add.w	r8, r8, #1
 800c548:	2301      	movs	r3, #1
 800c54a:	9307      	str	r3, [sp, #28]
 800c54c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d12a      	bne.n	800c5a8 <_dtoa_r+0x818>
 800c552:	2001      	movs	r0, #1
 800c554:	e030      	b.n	800c5b8 <_dtoa_r+0x828>
 800c556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c558:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c55c:	e795      	b.n	800c48a <_dtoa_r+0x6fa>
 800c55e:	9b07      	ldr	r3, [sp, #28]
 800c560:	f109 37ff 	add.w	r7, r9, #4294967295
 800c564:	42bb      	cmp	r3, r7
 800c566:	bfbf      	itttt	lt
 800c568:	9b07      	ldrlt	r3, [sp, #28]
 800c56a:	9707      	strlt	r7, [sp, #28]
 800c56c:	1afa      	sublt	r2, r7, r3
 800c56e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c570:	bfbb      	ittet	lt
 800c572:	189b      	addlt	r3, r3, r2
 800c574:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c576:	1bdf      	subge	r7, r3, r7
 800c578:	2700      	movlt	r7, #0
 800c57a:	f1b9 0f00 	cmp.w	r9, #0
 800c57e:	bfb5      	itete	lt
 800c580:	9b05      	ldrlt	r3, [sp, #20]
 800c582:	9d05      	ldrge	r5, [sp, #20]
 800c584:	eba3 0509 	sublt.w	r5, r3, r9
 800c588:	464b      	movge	r3, r9
 800c58a:	bfb8      	it	lt
 800c58c:	2300      	movlt	r3, #0
 800c58e:	e77e      	b.n	800c48e <_dtoa_r+0x6fe>
 800c590:	9f07      	ldr	r7, [sp, #28]
 800c592:	9d05      	ldr	r5, [sp, #20]
 800c594:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c596:	e783      	b.n	800c4a0 <_dtoa_r+0x710>
 800c598:	9a07      	ldr	r2, [sp, #28]
 800c59a:	e7ab      	b.n	800c4f4 <_dtoa_r+0x764>
 800c59c:	2300      	movs	r3, #0
 800c59e:	e7d4      	b.n	800c54a <_dtoa_r+0x7ba>
 800c5a0:	9b00      	ldr	r3, [sp, #0]
 800c5a2:	e7d2      	b.n	800c54a <_dtoa_r+0x7ba>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	9307      	str	r3, [sp, #28]
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c5ae:	6918      	ldr	r0, [r3, #16]
 800c5b0:	f000 fa58 	bl	800ca64 <__hi0bits>
 800c5b4:	f1c0 0020 	rsb	r0, r0, #32
 800c5b8:	4440      	add	r0, r8
 800c5ba:	f010 001f 	ands.w	r0, r0, #31
 800c5be:	d047      	beq.n	800c650 <_dtoa_r+0x8c0>
 800c5c0:	f1c0 0320 	rsb	r3, r0, #32
 800c5c4:	2b04      	cmp	r3, #4
 800c5c6:	dd3b      	ble.n	800c640 <_dtoa_r+0x8b0>
 800c5c8:	9b05      	ldr	r3, [sp, #20]
 800c5ca:	f1c0 001c 	rsb	r0, r0, #28
 800c5ce:	4403      	add	r3, r0
 800c5d0:	9305      	str	r3, [sp, #20]
 800c5d2:	4405      	add	r5, r0
 800c5d4:	4480      	add	r8, r0
 800c5d6:	9b05      	ldr	r3, [sp, #20]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	dd05      	ble.n	800c5e8 <_dtoa_r+0x858>
 800c5dc:	461a      	mov	r2, r3
 800c5de:	9904      	ldr	r1, [sp, #16]
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f000 fb7b 	bl	800ccdc <__lshift>
 800c5e6:	9004      	str	r0, [sp, #16]
 800c5e8:	f1b8 0f00 	cmp.w	r8, #0
 800c5ec:	dd05      	ble.n	800c5fa <_dtoa_r+0x86a>
 800c5ee:	4639      	mov	r1, r7
 800c5f0:	4642      	mov	r2, r8
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f000 fb72 	bl	800ccdc <__lshift>
 800c5f8:	4607      	mov	r7, r0
 800c5fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5fc:	b353      	cbz	r3, 800c654 <_dtoa_r+0x8c4>
 800c5fe:	4639      	mov	r1, r7
 800c600:	9804      	ldr	r0, [sp, #16]
 800c602:	f000 fbbf 	bl	800cd84 <__mcmp>
 800c606:	2800      	cmp	r0, #0
 800c608:	da24      	bge.n	800c654 <_dtoa_r+0x8c4>
 800c60a:	2300      	movs	r3, #0
 800c60c:	220a      	movs	r2, #10
 800c60e:	9904      	ldr	r1, [sp, #16]
 800c610:	4620      	mov	r0, r4
 800c612:	f000 f9ec 	bl	800c9ee <__multadd>
 800c616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c618:	9004      	str	r0, [sp, #16]
 800c61a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c61e:	2b00      	cmp	r3, #0
 800c620:	f000 814d 	beq.w	800c8be <_dtoa_r+0xb2e>
 800c624:	2300      	movs	r3, #0
 800c626:	4631      	mov	r1, r6
 800c628:	220a      	movs	r2, #10
 800c62a:	4620      	mov	r0, r4
 800c62c:	f000 f9df 	bl	800c9ee <__multadd>
 800c630:	9b02      	ldr	r3, [sp, #8]
 800c632:	2b00      	cmp	r3, #0
 800c634:	4606      	mov	r6, r0
 800c636:	dc4f      	bgt.n	800c6d8 <_dtoa_r+0x948>
 800c638:	9b06      	ldr	r3, [sp, #24]
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	dd4c      	ble.n	800c6d8 <_dtoa_r+0x948>
 800c63e:	e011      	b.n	800c664 <_dtoa_r+0x8d4>
 800c640:	d0c9      	beq.n	800c5d6 <_dtoa_r+0x846>
 800c642:	9a05      	ldr	r2, [sp, #20]
 800c644:	331c      	adds	r3, #28
 800c646:	441a      	add	r2, r3
 800c648:	9205      	str	r2, [sp, #20]
 800c64a:	441d      	add	r5, r3
 800c64c:	4498      	add	r8, r3
 800c64e:	e7c2      	b.n	800c5d6 <_dtoa_r+0x846>
 800c650:	4603      	mov	r3, r0
 800c652:	e7f6      	b.n	800c642 <_dtoa_r+0x8b2>
 800c654:	f1b9 0f00 	cmp.w	r9, #0
 800c658:	dc38      	bgt.n	800c6cc <_dtoa_r+0x93c>
 800c65a:	9b06      	ldr	r3, [sp, #24]
 800c65c:	2b02      	cmp	r3, #2
 800c65e:	dd35      	ble.n	800c6cc <_dtoa_r+0x93c>
 800c660:	f8cd 9008 	str.w	r9, [sp, #8]
 800c664:	9b02      	ldr	r3, [sp, #8]
 800c666:	b963      	cbnz	r3, 800c682 <_dtoa_r+0x8f2>
 800c668:	4639      	mov	r1, r7
 800c66a:	2205      	movs	r2, #5
 800c66c:	4620      	mov	r0, r4
 800c66e:	f000 f9be 	bl	800c9ee <__multadd>
 800c672:	4601      	mov	r1, r0
 800c674:	4607      	mov	r7, r0
 800c676:	9804      	ldr	r0, [sp, #16]
 800c678:	f000 fb84 	bl	800cd84 <__mcmp>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	f73f adcc 	bgt.w	800c21a <_dtoa_r+0x48a>
 800c682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c684:	465d      	mov	r5, fp
 800c686:	ea6f 0a03 	mvn.w	sl, r3
 800c68a:	f04f 0900 	mov.w	r9, #0
 800c68e:	4639      	mov	r1, r7
 800c690:	4620      	mov	r0, r4
 800c692:	f000 f995 	bl	800c9c0 <_Bfree>
 800c696:	2e00      	cmp	r6, #0
 800c698:	f43f aeb7 	beq.w	800c40a <_dtoa_r+0x67a>
 800c69c:	f1b9 0f00 	cmp.w	r9, #0
 800c6a0:	d005      	beq.n	800c6ae <_dtoa_r+0x91e>
 800c6a2:	45b1      	cmp	r9, r6
 800c6a4:	d003      	beq.n	800c6ae <_dtoa_r+0x91e>
 800c6a6:	4649      	mov	r1, r9
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f000 f989 	bl	800c9c0 <_Bfree>
 800c6ae:	4631      	mov	r1, r6
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	f000 f985 	bl	800c9c0 <_Bfree>
 800c6b6:	e6a8      	b.n	800c40a <_dtoa_r+0x67a>
 800c6b8:	2700      	movs	r7, #0
 800c6ba:	463e      	mov	r6, r7
 800c6bc:	e7e1      	b.n	800c682 <_dtoa_r+0x8f2>
 800c6be:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c6c2:	463e      	mov	r6, r7
 800c6c4:	e5a9      	b.n	800c21a <_dtoa_r+0x48a>
 800c6c6:	bf00      	nop
 800c6c8:	40240000 	.word	0x40240000
 800c6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6ce:	f8cd 9008 	str.w	r9, [sp, #8]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f000 80fa 	beq.w	800c8cc <_dtoa_r+0xb3c>
 800c6d8:	2d00      	cmp	r5, #0
 800c6da:	dd05      	ble.n	800c6e8 <_dtoa_r+0x958>
 800c6dc:	4631      	mov	r1, r6
 800c6de:	462a      	mov	r2, r5
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f000 fafb 	bl	800ccdc <__lshift>
 800c6e6:	4606      	mov	r6, r0
 800c6e8:	9b07      	ldr	r3, [sp, #28]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d04c      	beq.n	800c788 <_dtoa_r+0x9f8>
 800c6ee:	6871      	ldr	r1, [r6, #4]
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	f000 f931 	bl	800c958 <_Balloc>
 800c6f6:	6932      	ldr	r2, [r6, #16]
 800c6f8:	3202      	adds	r2, #2
 800c6fa:	4605      	mov	r5, r0
 800c6fc:	0092      	lsls	r2, r2, #2
 800c6fe:	f106 010c 	add.w	r1, r6, #12
 800c702:	300c      	adds	r0, #12
 800c704:	f7fe fd18 	bl	800b138 <memcpy>
 800c708:	2201      	movs	r2, #1
 800c70a:	4629      	mov	r1, r5
 800c70c:	4620      	mov	r0, r4
 800c70e:	f000 fae5 	bl	800ccdc <__lshift>
 800c712:	9b00      	ldr	r3, [sp, #0]
 800c714:	f8cd b014 	str.w	fp, [sp, #20]
 800c718:	f003 0301 	and.w	r3, r3, #1
 800c71c:	46b1      	mov	r9, r6
 800c71e:	9307      	str	r3, [sp, #28]
 800c720:	4606      	mov	r6, r0
 800c722:	4639      	mov	r1, r7
 800c724:	9804      	ldr	r0, [sp, #16]
 800c726:	f7ff faa5 	bl	800bc74 <quorem>
 800c72a:	4649      	mov	r1, r9
 800c72c:	4605      	mov	r5, r0
 800c72e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c732:	9804      	ldr	r0, [sp, #16]
 800c734:	f000 fb26 	bl	800cd84 <__mcmp>
 800c738:	4632      	mov	r2, r6
 800c73a:	9000      	str	r0, [sp, #0]
 800c73c:	4639      	mov	r1, r7
 800c73e:	4620      	mov	r0, r4
 800c740:	f000 fb3a 	bl	800cdb8 <__mdiff>
 800c744:	68c3      	ldr	r3, [r0, #12]
 800c746:	4602      	mov	r2, r0
 800c748:	bb03      	cbnz	r3, 800c78c <_dtoa_r+0x9fc>
 800c74a:	4601      	mov	r1, r0
 800c74c:	9008      	str	r0, [sp, #32]
 800c74e:	9804      	ldr	r0, [sp, #16]
 800c750:	f000 fb18 	bl	800cd84 <__mcmp>
 800c754:	9a08      	ldr	r2, [sp, #32]
 800c756:	4603      	mov	r3, r0
 800c758:	4611      	mov	r1, r2
 800c75a:	4620      	mov	r0, r4
 800c75c:	9308      	str	r3, [sp, #32]
 800c75e:	f000 f92f 	bl	800c9c0 <_Bfree>
 800c762:	9b08      	ldr	r3, [sp, #32]
 800c764:	b9a3      	cbnz	r3, 800c790 <_dtoa_r+0xa00>
 800c766:	9a06      	ldr	r2, [sp, #24]
 800c768:	b992      	cbnz	r2, 800c790 <_dtoa_r+0xa00>
 800c76a:	9a07      	ldr	r2, [sp, #28]
 800c76c:	b982      	cbnz	r2, 800c790 <_dtoa_r+0xa00>
 800c76e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c772:	d029      	beq.n	800c7c8 <_dtoa_r+0xa38>
 800c774:	9b00      	ldr	r3, [sp, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	dd01      	ble.n	800c77e <_dtoa_r+0x9ee>
 800c77a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c77e:	9b05      	ldr	r3, [sp, #20]
 800c780:	1c5d      	adds	r5, r3, #1
 800c782:	f883 8000 	strb.w	r8, [r3]
 800c786:	e782      	b.n	800c68e <_dtoa_r+0x8fe>
 800c788:	4630      	mov	r0, r6
 800c78a:	e7c2      	b.n	800c712 <_dtoa_r+0x982>
 800c78c:	2301      	movs	r3, #1
 800c78e:	e7e3      	b.n	800c758 <_dtoa_r+0x9c8>
 800c790:	9a00      	ldr	r2, [sp, #0]
 800c792:	2a00      	cmp	r2, #0
 800c794:	db04      	blt.n	800c7a0 <_dtoa_r+0xa10>
 800c796:	d125      	bne.n	800c7e4 <_dtoa_r+0xa54>
 800c798:	9a06      	ldr	r2, [sp, #24]
 800c79a:	bb1a      	cbnz	r2, 800c7e4 <_dtoa_r+0xa54>
 800c79c:	9a07      	ldr	r2, [sp, #28]
 800c79e:	bb0a      	cbnz	r2, 800c7e4 <_dtoa_r+0xa54>
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	ddec      	ble.n	800c77e <_dtoa_r+0x9ee>
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	9904      	ldr	r1, [sp, #16]
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f000 fa97 	bl	800ccdc <__lshift>
 800c7ae:	4639      	mov	r1, r7
 800c7b0:	9004      	str	r0, [sp, #16]
 800c7b2:	f000 fae7 	bl	800cd84 <__mcmp>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	dc03      	bgt.n	800c7c2 <_dtoa_r+0xa32>
 800c7ba:	d1e0      	bne.n	800c77e <_dtoa_r+0x9ee>
 800c7bc:	f018 0f01 	tst.w	r8, #1
 800c7c0:	d0dd      	beq.n	800c77e <_dtoa_r+0x9ee>
 800c7c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c7c6:	d1d8      	bne.n	800c77a <_dtoa_r+0x9ea>
 800c7c8:	9b05      	ldr	r3, [sp, #20]
 800c7ca:	9a05      	ldr	r2, [sp, #20]
 800c7cc:	1c5d      	adds	r5, r3, #1
 800c7ce:	2339      	movs	r3, #57	; 0x39
 800c7d0:	7013      	strb	r3, [r2, #0]
 800c7d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c7d6:	2b39      	cmp	r3, #57	; 0x39
 800c7d8:	f105 32ff 	add.w	r2, r5, #4294967295
 800c7dc:	d04f      	beq.n	800c87e <_dtoa_r+0xaee>
 800c7de:	3301      	adds	r3, #1
 800c7e0:	7013      	strb	r3, [r2, #0]
 800c7e2:	e754      	b.n	800c68e <_dtoa_r+0x8fe>
 800c7e4:	9a05      	ldr	r2, [sp, #20]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f102 0501 	add.w	r5, r2, #1
 800c7ec:	dd06      	ble.n	800c7fc <_dtoa_r+0xa6c>
 800c7ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c7f2:	d0e9      	beq.n	800c7c8 <_dtoa_r+0xa38>
 800c7f4:	f108 0801 	add.w	r8, r8, #1
 800c7f8:	9b05      	ldr	r3, [sp, #20]
 800c7fa:	e7c2      	b.n	800c782 <_dtoa_r+0x9f2>
 800c7fc:	9a02      	ldr	r2, [sp, #8]
 800c7fe:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c802:	eba5 030b 	sub.w	r3, r5, fp
 800c806:	4293      	cmp	r3, r2
 800c808:	d021      	beq.n	800c84e <_dtoa_r+0xabe>
 800c80a:	2300      	movs	r3, #0
 800c80c:	220a      	movs	r2, #10
 800c80e:	9904      	ldr	r1, [sp, #16]
 800c810:	4620      	mov	r0, r4
 800c812:	f000 f8ec 	bl	800c9ee <__multadd>
 800c816:	45b1      	cmp	r9, r6
 800c818:	9004      	str	r0, [sp, #16]
 800c81a:	f04f 0300 	mov.w	r3, #0
 800c81e:	f04f 020a 	mov.w	r2, #10
 800c822:	4649      	mov	r1, r9
 800c824:	4620      	mov	r0, r4
 800c826:	d105      	bne.n	800c834 <_dtoa_r+0xaa4>
 800c828:	f000 f8e1 	bl	800c9ee <__multadd>
 800c82c:	4681      	mov	r9, r0
 800c82e:	4606      	mov	r6, r0
 800c830:	9505      	str	r5, [sp, #20]
 800c832:	e776      	b.n	800c722 <_dtoa_r+0x992>
 800c834:	f000 f8db 	bl	800c9ee <__multadd>
 800c838:	4631      	mov	r1, r6
 800c83a:	4681      	mov	r9, r0
 800c83c:	2300      	movs	r3, #0
 800c83e:	220a      	movs	r2, #10
 800c840:	4620      	mov	r0, r4
 800c842:	f000 f8d4 	bl	800c9ee <__multadd>
 800c846:	4606      	mov	r6, r0
 800c848:	e7f2      	b.n	800c830 <_dtoa_r+0xaa0>
 800c84a:	f04f 0900 	mov.w	r9, #0
 800c84e:	2201      	movs	r2, #1
 800c850:	9904      	ldr	r1, [sp, #16]
 800c852:	4620      	mov	r0, r4
 800c854:	f000 fa42 	bl	800ccdc <__lshift>
 800c858:	4639      	mov	r1, r7
 800c85a:	9004      	str	r0, [sp, #16]
 800c85c:	f000 fa92 	bl	800cd84 <__mcmp>
 800c860:	2800      	cmp	r0, #0
 800c862:	dcb6      	bgt.n	800c7d2 <_dtoa_r+0xa42>
 800c864:	d102      	bne.n	800c86c <_dtoa_r+0xadc>
 800c866:	f018 0f01 	tst.w	r8, #1
 800c86a:	d1b2      	bne.n	800c7d2 <_dtoa_r+0xa42>
 800c86c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c870:	2b30      	cmp	r3, #48	; 0x30
 800c872:	f105 32ff 	add.w	r2, r5, #4294967295
 800c876:	f47f af0a 	bne.w	800c68e <_dtoa_r+0x8fe>
 800c87a:	4615      	mov	r5, r2
 800c87c:	e7f6      	b.n	800c86c <_dtoa_r+0xadc>
 800c87e:	4593      	cmp	fp, r2
 800c880:	d105      	bne.n	800c88e <_dtoa_r+0xafe>
 800c882:	2331      	movs	r3, #49	; 0x31
 800c884:	f10a 0a01 	add.w	sl, sl, #1
 800c888:	f88b 3000 	strb.w	r3, [fp]
 800c88c:	e6ff      	b.n	800c68e <_dtoa_r+0x8fe>
 800c88e:	4615      	mov	r5, r2
 800c890:	e79f      	b.n	800c7d2 <_dtoa_r+0xa42>
 800c892:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c8f8 <_dtoa_r+0xb68>
 800c896:	e007      	b.n	800c8a8 <_dtoa_r+0xb18>
 800c898:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c89a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c8fc <_dtoa_r+0xb6c>
 800c89e:	b11b      	cbz	r3, 800c8a8 <_dtoa_r+0xb18>
 800c8a0:	f10b 0308 	add.w	r3, fp, #8
 800c8a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c8a6:	6013      	str	r3, [r2, #0]
 800c8a8:	4658      	mov	r0, fp
 800c8aa:	b017      	add	sp, #92	; 0x5c
 800c8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b0:	9b06      	ldr	r3, [sp, #24]
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	f77f ae35 	ble.w	800c522 <_dtoa_r+0x792>
 800c8b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8ba:	9307      	str	r3, [sp, #28]
 800c8bc:	e649      	b.n	800c552 <_dtoa_r+0x7c2>
 800c8be:	9b02      	ldr	r3, [sp, #8]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	dc03      	bgt.n	800c8cc <_dtoa_r+0xb3c>
 800c8c4:	9b06      	ldr	r3, [sp, #24]
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	f73f aecc 	bgt.w	800c664 <_dtoa_r+0x8d4>
 800c8cc:	465d      	mov	r5, fp
 800c8ce:	4639      	mov	r1, r7
 800c8d0:	9804      	ldr	r0, [sp, #16]
 800c8d2:	f7ff f9cf 	bl	800bc74 <quorem>
 800c8d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c8da:	f805 8b01 	strb.w	r8, [r5], #1
 800c8de:	9a02      	ldr	r2, [sp, #8]
 800c8e0:	eba5 030b 	sub.w	r3, r5, fp
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	ddb0      	ble.n	800c84a <_dtoa_r+0xaba>
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	220a      	movs	r2, #10
 800c8ec:	9904      	ldr	r1, [sp, #16]
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	f000 f87d 	bl	800c9ee <__multadd>
 800c8f4:	9004      	str	r0, [sp, #16]
 800c8f6:	e7ea      	b.n	800c8ce <_dtoa_r+0xb3e>
 800c8f8:	0800dc68 	.word	0x0800dc68
 800c8fc:	0800dc8c 	.word	0x0800dc8c

0800c900 <__locale_ctype_ptr_l>:
 800c900:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c904:	4770      	bx	lr
	...

0800c908 <_localeconv_r>:
 800c908:	4b04      	ldr	r3, [pc, #16]	; (800c91c <_localeconv_r+0x14>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	6a18      	ldr	r0, [r3, #32]
 800c90e:	4b04      	ldr	r3, [pc, #16]	; (800c920 <_localeconv_r+0x18>)
 800c910:	2800      	cmp	r0, #0
 800c912:	bf08      	it	eq
 800c914:	4618      	moveq	r0, r3
 800c916:	30f0      	adds	r0, #240	; 0xf0
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	2000008c 	.word	0x2000008c
 800c920:	200000f0 	.word	0x200000f0

0800c924 <malloc>:
 800c924:	4b02      	ldr	r3, [pc, #8]	; (800c930 <malloc+0xc>)
 800c926:	4601      	mov	r1, r0
 800c928:	6818      	ldr	r0, [r3, #0]
 800c92a:	f000 bb4d 	b.w	800cfc8 <_malloc_r>
 800c92e:	bf00      	nop
 800c930:	2000008c 	.word	0x2000008c

0800c934 <__ascii_mbtowc>:
 800c934:	b082      	sub	sp, #8
 800c936:	b901      	cbnz	r1, 800c93a <__ascii_mbtowc+0x6>
 800c938:	a901      	add	r1, sp, #4
 800c93a:	b142      	cbz	r2, 800c94e <__ascii_mbtowc+0x1a>
 800c93c:	b14b      	cbz	r3, 800c952 <__ascii_mbtowc+0x1e>
 800c93e:	7813      	ldrb	r3, [r2, #0]
 800c940:	600b      	str	r3, [r1, #0]
 800c942:	7812      	ldrb	r2, [r2, #0]
 800c944:	1c10      	adds	r0, r2, #0
 800c946:	bf18      	it	ne
 800c948:	2001      	movne	r0, #1
 800c94a:	b002      	add	sp, #8
 800c94c:	4770      	bx	lr
 800c94e:	4610      	mov	r0, r2
 800c950:	e7fb      	b.n	800c94a <__ascii_mbtowc+0x16>
 800c952:	f06f 0001 	mvn.w	r0, #1
 800c956:	e7f8      	b.n	800c94a <__ascii_mbtowc+0x16>

0800c958 <_Balloc>:
 800c958:	b570      	push	{r4, r5, r6, lr}
 800c95a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c95c:	4604      	mov	r4, r0
 800c95e:	460e      	mov	r6, r1
 800c960:	b93d      	cbnz	r5, 800c972 <_Balloc+0x1a>
 800c962:	2010      	movs	r0, #16
 800c964:	f7ff ffde 	bl	800c924 <malloc>
 800c968:	6260      	str	r0, [r4, #36]	; 0x24
 800c96a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c96e:	6005      	str	r5, [r0, #0]
 800c970:	60c5      	str	r5, [r0, #12]
 800c972:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c974:	68eb      	ldr	r3, [r5, #12]
 800c976:	b183      	cbz	r3, 800c99a <_Balloc+0x42>
 800c978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c980:	b9b8      	cbnz	r0, 800c9b2 <_Balloc+0x5a>
 800c982:	2101      	movs	r1, #1
 800c984:	fa01 f506 	lsl.w	r5, r1, r6
 800c988:	1d6a      	adds	r2, r5, #5
 800c98a:	0092      	lsls	r2, r2, #2
 800c98c:	4620      	mov	r0, r4
 800c98e:	f000 fabf 	bl	800cf10 <_calloc_r>
 800c992:	b160      	cbz	r0, 800c9ae <_Balloc+0x56>
 800c994:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c998:	e00e      	b.n	800c9b8 <_Balloc+0x60>
 800c99a:	2221      	movs	r2, #33	; 0x21
 800c99c:	2104      	movs	r1, #4
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f000 fab6 	bl	800cf10 <_calloc_r>
 800c9a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9a6:	60e8      	str	r0, [r5, #12]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d1e4      	bne.n	800c978 <_Balloc+0x20>
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	bd70      	pop	{r4, r5, r6, pc}
 800c9b2:	6802      	ldr	r2, [r0, #0]
 800c9b4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c9be:	e7f7      	b.n	800c9b0 <_Balloc+0x58>

0800c9c0 <_Bfree>:
 800c9c0:	b570      	push	{r4, r5, r6, lr}
 800c9c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c9c4:	4606      	mov	r6, r0
 800c9c6:	460d      	mov	r5, r1
 800c9c8:	b93c      	cbnz	r4, 800c9da <_Bfree+0x1a>
 800c9ca:	2010      	movs	r0, #16
 800c9cc:	f7ff ffaa 	bl	800c924 <malloc>
 800c9d0:	6270      	str	r0, [r6, #36]	; 0x24
 800c9d2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9d6:	6004      	str	r4, [r0, #0]
 800c9d8:	60c4      	str	r4, [r0, #12]
 800c9da:	b13d      	cbz	r5, 800c9ec <_Bfree+0x2c>
 800c9dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c9de:	686a      	ldr	r2, [r5, #4]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c9e6:	6029      	str	r1, [r5, #0]
 800c9e8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c9ec:	bd70      	pop	{r4, r5, r6, pc}

0800c9ee <__multadd>:
 800c9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f2:	690d      	ldr	r5, [r1, #16]
 800c9f4:	461f      	mov	r7, r3
 800c9f6:	4606      	mov	r6, r0
 800c9f8:	460c      	mov	r4, r1
 800c9fa:	f101 0c14 	add.w	ip, r1, #20
 800c9fe:	2300      	movs	r3, #0
 800ca00:	f8dc 0000 	ldr.w	r0, [ip]
 800ca04:	b281      	uxth	r1, r0
 800ca06:	fb02 7101 	mla	r1, r2, r1, r7
 800ca0a:	0c0f      	lsrs	r7, r1, #16
 800ca0c:	0c00      	lsrs	r0, r0, #16
 800ca0e:	fb02 7000 	mla	r0, r2, r0, r7
 800ca12:	b289      	uxth	r1, r1
 800ca14:	3301      	adds	r3, #1
 800ca16:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ca1a:	429d      	cmp	r5, r3
 800ca1c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ca20:	f84c 1b04 	str.w	r1, [ip], #4
 800ca24:	dcec      	bgt.n	800ca00 <__multadd+0x12>
 800ca26:	b1d7      	cbz	r7, 800ca5e <__multadd+0x70>
 800ca28:	68a3      	ldr	r3, [r4, #8]
 800ca2a:	42ab      	cmp	r3, r5
 800ca2c:	dc12      	bgt.n	800ca54 <__multadd+0x66>
 800ca2e:	6861      	ldr	r1, [r4, #4]
 800ca30:	4630      	mov	r0, r6
 800ca32:	3101      	adds	r1, #1
 800ca34:	f7ff ff90 	bl	800c958 <_Balloc>
 800ca38:	6922      	ldr	r2, [r4, #16]
 800ca3a:	3202      	adds	r2, #2
 800ca3c:	f104 010c 	add.w	r1, r4, #12
 800ca40:	4680      	mov	r8, r0
 800ca42:	0092      	lsls	r2, r2, #2
 800ca44:	300c      	adds	r0, #12
 800ca46:	f7fe fb77 	bl	800b138 <memcpy>
 800ca4a:	4621      	mov	r1, r4
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	f7ff ffb7 	bl	800c9c0 <_Bfree>
 800ca52:	4644      	mov	r4, r8
 800ca54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca58:	3501      	adds	r5, #1
 800ca5a:	615f      	str	r7, [r3, #20]
 800ca5c:	6125      	str	r5, [r4, #16]
 800ca5e:	4620      	mov	r0, r4
 800ca60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ca64 <__hi0bits>:
 800ca64:	0c02      	lsrs	r2, r0, #16
 800ca66:	0412      	lsls	r2, r2, #16
 800ca68:	4603      	mov	r3, r0
 800ca6a:	b9b2      	cbnz	r2, 800ca9a <__hi0bits+0x36>
 800ca6c:	0403      	lsls	r3, r0, #16
 800ca6e:	2010      	movs	r0, #16
 800ca70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ca74:	bf04      	itt	eq
 800ca76:	021b      	lsleq	r3, r3, #8
 800ca78:	3008      	addeq	r0, #8
 800ca7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ca7e:	bf04      	itt	eq
 800ca80:	011b      	lsleq	r3, r3, #4
 800ca82:	3004      	addeq	r0, #4
 800ca84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ca88:	bf04      	itt	eq
 800ca8a:	009b      	lsleq	r3, r3, #2
 800ca8c:	3002      	addeq	r0, #2
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	db06      	blt.n	800caa0 <__hi0bits+0x3c>
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	d503      	bpl.n	800ca9e <__hi0bits+0x3a>
 800ca96:	3001      	adds	r0, #1
 800ca98:	4770      	bx	lr
 800ca9a:	2000      	movs	r0, #0
 800ca9c:	e7e8      	b.n	800ca70 <__hi0bits+0xc>
 800ca9e:	2020      	movs	r0, #32
 800caa0:	4770      	bx	lr

0800caa2 <__lo0bits>:
 800caa2:	6803      	ldr	r3, [r0, #0]
 800caa4:	f013 0207 	ands.w	r2, r3, #7
 800caa8:	4601      	mov	r1, r0
 800caaa:	d00b      	beq.n	800cac4 <__lo0bits+0x22>
 800caac:	07da      	lsls	r2, r3, #31
 800caae:	d423      	bmi.n	800caf8 <__lo0bits+0x56>
 800cab0:	0798      	lsls	r0, r3, #30
 800cab2:	bf49      	itett	mi
 800cab4:	085b      	lsrmi	r3, r3, #1
 800cab6:	089b      	lsrpl	r3, r3, #2
 800cab8:	2001      	movmi	r0, #1
 800caba:	600b      	strmi	r3, [r1, #0]
 800cabc:	bf5c      	itt	pl
 800cabe:	600b      	strpl	r3, [r1, #0]
 800cac0:	2002      	movpl	r0, #2
 800cac2:	4770      	bx	lr
 800cac4:	b298      	uxth	r0, r3
 800cac6:	b9a8      	cbnz	r0, 800caf4 <__lo0bits+0x52>
 800cac8:	0c1b      	lsrs	r3, r3, #16
 800caca:	2010      	movs	r0, #16
 800cacc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cad0:	bf04      	itt	eq
 800cad2:	0a1b      	lsreq	r3, r3, #8
 800cad4:	3008      	addeq	r0, #8
 800cad6:	071a      	lsls	r2, r3, #28
 800cad8:	bf04      	itt	eq
 800cada:	091b      	lsreq	r3, r3, #4
 800cadc:	3004      	addeq	r0, #4
 800cade:	079a      	lsls	r2, r3, #30
 800cae0:	bf04      	itt	eq
 800cae2:	089b      	lsreq	r3, r3, #2
 800cae4:	3002      	addeq	r0, #2
 800cae6:	07da      	lsls	r2, r3, #31
 800cae8:	d402      	bmi.n	800caf0 <__lo0bits+0x4e>
 800caea:	085b      	lsrs	r3, r3, #1
 800caec:	d006      	beq.n	800cafc <__lo0bits+0x5a>
 800caee:	3001      	adds	r0, #1
 800caf0:	600b      	str	r3, [r1, #0]
 800caf2:	4770      	bx	lr
 800caf4:	4610      	mov	r0, r2
 800caf6:	e7e9      	b.n	800cacc <__lo0bits+0x2a>
 800caf8:	2000      	movs	r0, #0
 800cafa:	4770      	bx	lr
 800cafc:	2020      	movs	r0, #32
 800cafe:	4770      	bx	lr

0800cb00 <__i2b>:
 800cb00:	b510      	push	{r4, lr}
 800cb02:	460c      	mov	r4, r1
 800cb04:	2101      	movs	r1, #1
 800cb06:	f7ff ff27 	bl	800c958 <_Balloc>
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	6144      	str	r4, [r0, #20]
 800cb0e:	6102      	str	r2, [r0, #16]
 800cb10:	bd10      	pop	{r4, pc}

0800cb12 <__multiply>:
 800cb12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb16:	4614      	mov	r4, r2
 800cb18:	690a      	ldr	r2, [r1, #16]
 800cb1a:	6923      	ldr	r3, [r4, #16]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	bfb8      	it	lt
 800cb20:	460b      	movlt	r3, r1
 800cb22:	4688      	mov	r8, r1
 800cb24:	bfbc      	itt	lt
 800cb26:	46a0      	movlt	r8, r4
 800cb28:	461c      	movlt	r4, r3
 800cb2a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cb2e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cb32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb36:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cb3a:	eb07 0609 	add.w	r6, r7, r9
 800cb3e:	42b3      	cmp	r3, r6
 800cb40:	bfb8      	it	lt
 800cb42:	3101      	addlt	r1, #1
 800cb44:	f7ff ff08 	bl	800c958 <_Balloc>
 800cb48:	f100 0514 	add.w	r5, r0, #20
 800cb4c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800cb50:	462b      	mov	r3, r5
 800cb52:	2200      	movs	r2, #0
 800cb54:	4573      	cmp	r3, lr
 800cb56:	d316      	bcc.n	800cb86 <__multiply+0x74>
 800cb58:	f104 0214 	add.w	r2, r4, #20
 800cb5c:	f108 0114 	add.w	r1, r8, #20
 800cb60:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800cb64:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	9b00      	ldr	r3, [sp, #0]
 800cb6c:	9201      	str	r2, [sp, #4]
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d80c      	bhi.n	800cb8c <__multiply+0x7a>
 800cb72:	2e00      	cmp	r6, #0
 800cb74:	dd03      	ble.n	800cb7e <__multiply+0x6c>
 800cb76:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d05d      	beq.n	800cc3a <__multiply+0x128>
 800cb7e:	6106      	str	r6, [r0, #16]
 800cb80:	b003      	add	sp, #12
 800cb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb86:	f843 2b04 	str.w	r2, [r3], #4
 800cb8a:	e7e3      	b.n	800cb54 <__multiply+0x42>
 800cb8c:	f8b2 b000 	ldrh.w	fp, [r2]
 800cb90:	f1bb 0f00 	cmp.w	fp, #0
 800cb94:	d023      	beq.n	800cbde <__multiply+0xcc>
 800cb96:	4689      	mov	r9, r1
 800cb98:	46ac      	mov	ip, r5
 800cb9a:	f04f 0800 	mov.w	r8, #0
 800cb9e:	f859 4b04 	ldr.w	r4, [r9], #4
 800cba2:	f8dc a000 	ldr.w	sl, [ip]
 800cba6:	b2a3      	uxth	r3, r4
 800cba8:	fa1f fa8a 	uxth.w	sl, sl
 800cbac:	fb0b a303 	mla	r3, fp, r3, sl
 800cbb0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cbb4:	f8dc 4000 	ldr.w	r4, [ip]
 800cbb8:	4443      	add	r3, r8
 800cbba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cbbe:	fb0b 840a 	mla	r4, fp, sl, r8
 800cbc2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800cbc6:	46e2      	mov	sl, ip
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cbce:	454f      	cmp	r7, r9
 800cbd0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cbd4:	f84a 3b04 	str.w	r3, [sl], #4
 800cbd8:	d82b      	bhi.n	800cc32 <__multiply+0x120>
 800cbda:	f8cc 8004 	str.w	r8, [ip, #4]
 800cbde:	9b01      	ldr	r3, [sp, #4]
 800cbe0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cbe4:	3204      	adds	r2, #4
 800cbe6:	f1ba 0f00 	cmp.w	sl, #0
 800cbea:	d020      	beq.n	800cc2e <__multiply+0x11c>
 800cbec:	682b      	ldr	r3, [r5, #0]
 800cbee:	4689      	mov	r9, r1
 800cbf0:	46a8      	mov	r8, r5
 800cbf2:	f04f 0b00 	mov.w	fp, #0
 800cbf6:	f8b9 c000 	ldrh.w	ip, [r9]
 800cbfa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cbfe:	fb0a 440c 	mla	r4, sl, ip, r4
 800cc02:	445c      	add	r4, fp
 800cc04:	46c4      	mov	ip, r8
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cc0c:	f84c 3b04 	str.w	r3, [ip], #4
 800cc10:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc14:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cc18:	0c1b      	lsrs	r3, r3, #16
 800cc1a:	fb0a b303 	mla	r3, sl, r3, fp
 800cc1e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cc22:	454f      	cmp	r7, r9
 800cc24:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cc28:	d805      	bhi.n	800cc36 <__multiply+0x124>
 800cc2a:	f8c8 3004 	str.w	r3, [r8, #4]
 800cc2e:	3504      	adds	r5, #4
 800cc30:	e79b      	b.n	800cb6a <__multiply+0x58>
 800cc32:	46d4      	mov	ip, sl
 800cc34:	e7b3      	b.n	800cb9e <__multiply+0x8c>
 800cc36:	46e0      	mov	r8, ip
 800cc38:	e7dd      	b.n	800cbf6 <__multiply+0xe4>
 800cc3a:	3e01      	subs	r6, #1
 800cc3c:	e799      	b.n	800cb72 <__multiply+0x60>
	...

0800cc40 <__pow5mult>:
 800cc40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc44:	4615      	mov	r5, r2
 800cc46:	f012 0203 	ands.w	r2, r2, #3
 800cc4a:	4606      	mov	r6, r0
 800cc4c:	460f      	mov	r7, r1
 800cc4e:	d007      	beq.n	800cc60 <__pow5mult+0x20>
 800cc50:	3a01      	subs	r2, #1
 800cc52:	4c21      	ldr	r4, [pc, #132]	; (800ccd8 <__pow5mult+0x98>)
 800cc54:	2300      	movs	r3, #0
 800cc56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc5a:	f7ff fec8 	bl	800c9ee <__multadd>
 800cc5e:	4607      	mov	r7, r0
 800cc60:	10ad      	asrs	r5, r5, #2
 800cc62:	d035      	beq.n	800ccd0 <__pow5mult+0x90>
 800cc64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cc66:	b93c      	cbnz	r4, 800cc78 <__pow5mult+0x38>
 800cc68:	2010      	movs	r0, #16
 800cc6a:	f7ff fe5b 	bl	800c924 <malloc>
 800cc6e:	6270      	str	r0, [r6, #36]	; 0x24
 800cc70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc74:	6004      	str	r4, [r0, #0]
 800cc76:	60c4      	str	r4, [r0, #12]
 800cc78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cc7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc80:	b94c      	cbnz	r4, 800cc96 <__pow5mult+0x56>
 800cc82:	f240 2171 	movw	r1, #625	; 0x271
 800cc86:	4630      	mov	r0, r6
 800cc88:	f7ff ff3a 	bl	800cb00 <__i2b>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc92:	4604      	mov	r4, r0
 800cc94:	6003      	str	r3, [r0, #0]
 800cc96:	f04f 0800 	mov.w	r8, #0
 800cc9a:	07eb      	lsls	r3, r5, #31
 800cc9c:	d50a      	bpl.n	800ccb4 <__pow5mult+0x74>
 800cc9e:	4639      	mov	r1, r7
 800cca0:	4622      	mov	r2, r4
 800cca2:	4630      	mov	r0, r6
 800cca4:	f7ff ff35 	bl	800cb12 <__multiply>
 800cca8:	4639      	mov	r1, r7
 800ccaa:	4681      	mov	r9, r0
 800ccac:	4630      	mov	r0, r6
 800ccae:	f7ff fe87 	bl	800c9c0 <_Bfree>
 800ccb2:	464f      	mov	r7, r9
 800ccb4:	106d      	asrs	r5, r5, #1
 800ccb6:	d00b      	beq.n	800ccd0 <__pow5mult+0x90>
 800ccb8:	6820      	ldr	r0, [r4, #0]
 800ccba:	b938      	cbnz	r0, 800cccc <__pow5mult+0x8c>
 800ccbc:	4622      	mov	r2, r4
 800ccbe:	4621      	mov	r1, r4
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	f7ff ff26 	bl	800cb12 <__multiply>
 800ccc6:	6020      	str	r0, [r4, #0]
 800ccc8:	f8c0 8000 	str.w	r8, [r0]
 800cccc:	4604      	mov	r4, r0
 800ccce:	e7e4      	b.n	800cc9a <__pow5mult+0x5a>
 800ccd0:	4638      	mov	r0, r7
 800ccd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccd6:	bf00      	nop
 800ccd8:	0800dd98 	.word	0x0800dd98

0800ccdc <__lshift>:
 800ccdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cce0:	460c      	mov	r4, r1
 800cce2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cce6:	6923      	ldr	r3, [r4, #16]
 800cce8:	6849      	ldr	r1, [r1, #4]
 800ccea:	eb0a 0903 	add.w	r9, sl, r3
 800ccee:	68a3      	ldr	r3, [r4, #8]
 800ccf0:	4607      	mov	r7, r0
 800ccf2:	4616      	mov	r6, r2
 800ccf4:	f109 0501 	add.w	r5, r9, #1
 800ccf8:	42ab      	cmp	r3, r5
 800ccfa:	db32      	blt.n	800cd62 <__lshift+0x86>
 800ccfc:	4638      	mov	r0, r7
 800ccfe:	f7ff fe2b 	bl	800c958 <_Balloc>
 800cd02:	2300      	movs	r3, #0
 800cd04:	4680      	mov	r8, r0
 800cd06:	f100 0114 	add.w	r1, r0, #20
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	4553      	cmp	r3, sl
 800cd0e:	db2b      	blt.n	800cd68 <__lshift+0x8c>
 800cd10:	6920      	ldr	r0, [r4, #16]
 800cd12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd16:	f104 0314 	add.w	r3, r4, #20
 800cd1a:	f016 021f 	ands.w	r2, r6, #31
 800cd1e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cd22:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cd26:	d025      	beq.n	800cd74 <__lshift+0x98>
 800cd28:	f1c2 0e20 	rsb	lr, r2, #32
 800cd2c:	2000      	movs	r0, #0
 800cd2e:	681e      	ldr	r6, [r3, #0]
 800cd30:	468a      	mov	sl, r1
 800cd32:	4096      	lsls	r6, r2
 800cd34:	4330      	orrs	r0, r6
 800cd36:	f84a 0b04 	str.w	r0, [sl], #4
 800cd3a:	f853 0b04 	ldr.w	r0, [r3], #4
 800cd3e:	459c      	cmp	ip, r3
 800cd40:	fa20 f00e 	lsr.w	r0, r0, lr
 800cd44:	d814      	bhi.n	800cd70 <__lshift+0x94>
 800cd46:	6048      	str	r0, [r1, #4]
 800cd48:	b108      	cbz	r0, 800cd4e <__lshift+0x72>
 800cd4a:	f109 0502 	add.w	r5, r9, #2
 800cd4e:	3d01      	subs	r5, #1
 800cd50:	4638      	mov	r0, r7
 800cd52:	f8c8 5010 	str.w	r5, [r8, #16]
 800cd56:	4621      	mov	r1, r4
 800cd58:	f7ff fe32 	bl	800c9c0 <_Bfree>
 800cd5c:	4640      	mov	r0, r8
 800cd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd62:	3101      	adds	r1, #1
 800cd64:	005b      	lsls	r3, r3, #1
 800cd66:	e7c7      	b.n	800ccf8 <__lshift+0x1c>
 800cd68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	e7cd      	b.n	800cd0c <__lshift+0x30>
 800cd70:	4651      	mov	r1, sl
 800cd72:	e7dc      	b.n	800cd2e <__lshift+0x52>
 800cd74:	3904      	subs	r1, #4
 800cd76:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd7a:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd7e:	459c      	cmp	ip, r3
 800cd80:	d8f9      	bhi.n	800cd76 <__lshift+0x9a>
 800cd82:	e7e4      	b.n	800cd4e <__lshift+0x72>

0800cd84 <__mcmp>:
 800cd84:	6903      	ldr	r3, [r0, #16]
 800cd86:	690a      	ldr	r2, [r1, #16]
 800cd88:	1a9b      	subs	r3, r3, r2
 800cd8a:	b530      	push	{r4, r5, lr}
 800cd8c:	d10c      	bne.n	800cda8 <__mcmp+0x24>
 800cd8e:	0092      	lsls	r2, r2, #2
 800cd90:	3014      	adds	r0, #20
 800cd92:	3114      	adds	r1, #20
 800cd94:	1884      	adds	r4, r0, r2
 800cd96:	4411      	add	r1, r2
 800cd98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cd9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cda0:	4295      	cmp	r5, r2
 800cda2:	d003      	beq.n	800cdac <__mcmp+0x28>
 800cda4:	d305      	bcc.n	800cdb2 <__mcmp+0x2e>
 800cda6:	2301      	movs	r3, #1
 800cda8:	4618      	mov	r0, r3
 800cdaa:	bd30      	pop	{r4, r5, pc}
 800cdac:	42a0      	cmp	r0, r4
 800cdae:	d3f3      	bcc.n	800cd98 <__mcmp+0x14>
 800cdb0:	e7fa      	b.n	800cda8 <__mcmp+0x24>
 800cdb2:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb6:	e7f7      	b.n	800cda8 <__mcmp+0x24>

0800cdb8 <__mdiff>:
 800cdb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdbc:	460d      	mov	r5, r1
 800cdbe:	4607      	mov	r7, r0
 800cdc0:	4611      	mov	r1, r2
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	4614      	mov	r4, r2
 800cdc6:	f7ff ffdd 	bl	800cd84 <__mcmp>
 800cdca:	1e06      	subs	r6, r0, #0
 800cdcc:	d108      	bne.n	800cde0 <__mdiff+0x28>
 800cdce:	4631      	mov	r1, r6
 800cdd0:	4638      	mov	r0, r7
 800cdd2:	f7ff fdc1 	bl	800c958 <_Balloc>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cde0:	bfa4      	itt	ge
 800cde2:	4623      	movge	r3, r4
 800cde4:	462c      	movge	r4, r5
 800cde6:	4638      	mov	r0, r7
 800cde8:	6861      	ldr	r1, [r4, #4]
 800cdea:	bfa6      	itte	ge
 800cdec:	461d      	movge	r5, r3
 800cdee:	2600      	movge	r6, #0
 800cdf0:	2601      	movlt	r6, #1
 800cdf2:	f7ff fdb1 	bl	800c958 <_Balloc>
 800cdf6:	692b      	ldr	r3, [r5, #16]
 800cdf8:	60c6      	str	r6, [r0, #12]
 800cdfa:	6926      	ldr	r6, [r4, #16]
 800cdfc:	f105 0914 	add.w	r9, r5, #20
 800ce00:	f104 0214 	add.w	r2, r4, #20
 800ce04:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ce08:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ce0c:	f100 0514 	add.w	r5, r0, #20
 800ce10:	f04f 0e00 	mov.w	lr, #0
 800ce14:	f852 ab04 	ldr.w	sl, [r2], #4
 800ce18:	f859 4b04 	ldr.w	r4, [r9], #4
 800ce1c:	fa1e f18a 	uxtah	r1, lr, sl
 800ce20:	b2a3      	uxth	r3, r4
 800ce22:	1ac9      	subs	r1, r1, r3
 800ce24:	0c23      	lsrs	r3, r4, #16
 800ce26:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ce2a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ce2e:	b289      	uxth	r1, r1
 800ce30:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ce34:	45c8      	cmp	r8, r9
 800ce36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ce3a:	4694      	mov	ip, r2
 800ce3c:	f845 3b04 	str.w	r3, [r5], #4
 800ce40:	d8e8      	bhi.n	800ce14 <__mdiff+0x5c>
 800ce42:	45bc      	cmp	ip, r7
 800ce44:	d304      	bcc.n	800ce50 <__mdiff+0x98>
 800ce46:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ce4a:	b183      	cbz	r3, 800ce6e <__mdiff+0xb6>
 800ce4c:	6106      	str	r6, [r0, #16]
 800ce4e:	e7c5      	b.n	800cddc <__mdiff+0x24>
 800ce50:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ce54:	fa1e f381 	uxtah	r3, lr, r1
 800ce58:	141a      	asrs	r2, r3, #16
 800ce5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce64:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ce68:	f845 3b04 	str.w	r3, [r5], #4
 800ce6c:	e7e9      	b.n	800ce42 <__mdiff+0x8a>
 800ce6e:	3e01      	subs	r6, #1
 800ce70:	e7e9      	b.n	800ce46 <__mdiff+0x8e>

0800ce72 <__d2b>:
 800ce72:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce76:	460e      	mov	r6, r1
 800ce78:	2101      	movs	r1, #1
 800ce7a:	ec59 8b10 	vmov	r8, r9, d0
 800ce7e:	4615      	mov	r5, r2
 800ce80:	f7ff fd6a 	bl	800c958 <_Balloc>
 800ce84:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ce88:	4607      	mov	r7, r0
 800ce8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ce8e:	bb34      	cbnz	r4, 800cede <__d2b+0x6c>
 800ce90:	9301      	str	r3, [sp, #4]
 800ce92:	f1b8 0300 	subs.w	r3, r8, #0
 800ce96:	d027      	beq.n	800cee8 <__d2b+0x76>
 800ce98:	a802      	add	r0, sp, #8
 800ce9a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ce9e:	f7ff fe00 	bl	800caa2 <__lo0bits>
 800cea2:	9900      	ldr	r1, [sp, #0]
 800cea4:	b1f0      	cbz	r0, 800cee4 <__d2b+0x72>
 800cea6:	9a01      	ldr	r2, [sp, #4]
 800cea8:	f1c0 0320 	rsb	r3, r0, #32
 800ceac:	fa02 f303 	lsl.w	r3, r2, r3
 800ceb0:	430b      	orrs	r3, r1
 800ceb2:	40c2      	lsrs	r2, r0
 800ceb4:	617b      	str	r3, [r7, #20]
 800ceb6:	9201      	str	r2, [sp, #4]
 800ceb8:	9b01      	ldr	r3, [sp, #4]
 800ceba:	61bb      	str	r3, [r7, #24]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	bf14      	ite	ne
 800cec0:	2102      	movne	r1, #2
 800cec2:	2101      	moveq	r1, #1
 800cec4:	6139      	str	r1, [r7, #16]
 800cec6:	b1c4      	cbz	r4, 800cefa <__d2b+0x88>
 800cec8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cecc:	4404      	add	r4, r0
 800cece:	6034      	str	r4, [r6, #0]
 800ced0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ced4:	6028      	str	r0, [r5, #0]
 800ced6:	4638      	mov	r0, r7
 800ced8:	b003      	add	sp, #12
 800ceda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cee2:	e7d5      	b.n	800ce90 <__d2b+0x1e>
 800cee4:	6179      	str	r1, [r7, #20]
 800cee6:	e7e7      	b.n	800ceb8 <__d2b+0x46>
 800cee8:	a801      	add	r0, sp, #4
 800ceea:	f7ff fdda 	bl	800caa2 <__lo0bits>
 800ceee:	9b01      	ldr	r3, [sp, #4]
 800cef0:	617b      	str	r3, [r7, #20]
 800cef2:	2101      	movs	r1, #1
 800cef4:	6139      	str	r1, [r7, #16]
 800cef6:	3020      	adds	r0, #32
 800cef8:	e7e5      	b.n	800cec6 <__d2b+0x54>
 800cefa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cefe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cf02:	6030      	str	r0, [r6, #0]
 800cf04:	6918      	ldr	r0, [r3, #16]
 800cf06:	f7ff fdad 	bl	800ca64 <__hi0bits>
 800cf0a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cf0e:	e7e1      	b.n	800ced4 <__d2b+0x62>

0800cf10 <_calloc_r>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	fb02 f401 	mul.w	r4, r2, r1
 800cf16:	4621      	mov	r1, r4
 800cf18:	f000 f856 	bl	800cfc8 <_malloc_r>
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	b118      	cbz	r0, 800cf28 <_calloc_r+0x18>
 800cf20:	4622      	mov	r2, r4
 800cf22:	2100      	movs	r1, #0
 800cf24:	f7fe f913 	bl	800b14e <memset>
 800cf28:	4628      	mov	r0, r5
 800cf2a:	bd38      	pop	{r3, r4, r5, pc}

0800cf2c <_free_r>:
 800cf2c:	b538      	push	{r3, r4, r5, lr}
 800cf2e:	4605      	mov	r5, r0
 800cf30:	2900      	cmp	r1, #0
 800cf32:	d045      	beq.n	800cfc0 <_free_r+0x94>
 800cf34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf38:	1f0c      	subs	r4, r1, #4
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	bfb8      	it	lt
 800cf3e:	18e4      	addlt	r4, r4, r3
 800cf40:	f000 fa24 	bl	800d38c <__malloc_lock>
 800cf44:	4a1f      	ldr	r2, [pc, #124]	; (800cfc4 <_free_r+0x98>)
 800cf46:	6813      	ldr	r3, [r2, #0]
 800cf48:	4610      	mov	r0, r2
 800cf4a:	b933      	cbnz	r3, 800cf5a <_free_r+0x2e>
 800cf4c:	6063      	str	r3, [r4, #4]
 800cf4e:	6014      	str	r4, [r2, #0]
 800cf50:	4628      	mov	r0, r5
 800cf52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf56:	f000 ba1a 	b.w	800d38e <__malloc_unlock>
 800cf5a:	42a3      	cmp	r3, r4
 800cf5c:	d90c      	bls.n	800cf78 <_free_r+0x4c>
 800cf5e:	6821      	ldr	r1, [r4, #0]
 800cf60:	1862      	adds	r2, r4, r1
 800cf62:	4293      	cmp	r3, r2
 800cf64:	bf04      	itt	eq
 800cf66:	681a      	ldreq	r2, [r3, #0]
 800cf68:	685b      	ldreq	r3, [r3, #4]
 800cf6a:	6063      	str	r3, [r4, #4]
 800cf6c:	bf04      	itt	eq
 800cf6e:	1852      	addeq	r2, r2, r1
 800cf70:	6022      	streq	r2, [r4, #0]
 800cf72:	6004      	str	r4, [r0, #0]
 800cf74:	e7ec      	b.n	800cf50 <_free_r+0x24>
 800cf76:	4613      	mov	r3, r2
 800cf78:	685a      	ldr	r2, [r3, #4]
 800cf7a:	b10a      	cbz	r2, 800cf80 <_free_r+0x54>
 800cf7c:	42a2      	cmp	r2, r4
 800cf7e:	d9fa      	bls.n	800cf76 <_free_r+0x4a>
 800cf80:	6819      	ldr	r1, [r3, #0]
 800cf82:	1858      	adds	r0, r3, r1
 800cf84:	42a0      	cmp	r0, r4
 800cf86:	d10b      	bne.n	800cfa0 <_free_r+0x74>
 800cf88:	6820      	ldr	r0, [r4, #0]
 800cf8a:	4401      	add	r1, r0
 800cf8c:	1858      	adds	r0, r3, r1
 800cf8e:	4282      	cmp	r2, r0
 800cf90:	6019      	str	r1, [r3, #0]
 800cf92:	d1dd      	bne.n	800cf50 <_free_r+0x24>
 800cf94:	6810      	ldr	r0, [r2, #0]
 800cf96:	6852      	ldr	r2, [r2, #4]
 800cf98:	605a      	str	r2, [r3, #4]
 800cf9a:	4401      	add	r1, r0
 800cf9c:	6019      	str	r1, [r3, #0]
 800cf9e:	e7d7      	b.n	800cf50 <_free_r+0x24>
 800cfa0:	d902      	bls.n	800cfa8 <_free_r+0x7c>
 800cfa2:	230c      	movs	r3, #12
 800cfa4:	602b      	str	r3, [r5, #0]
 800cfa6:	e7d3      	b.n	800cf50 <_free_r+0x24>
 800cfa8:	6820      	ldr	r0, [r4, #0]
 800cfaa:	1821      	adds	r1, r4, r0
 800cfac:	428a      	cmp	r2, r1
 800cfae:	bf04      	itt	eq
 800cfb0:	6811      	ldreq	r1, [r2, #0]
 800cfb2:	6852      	ldreq	r2, [r2, #4]
 800cfb4:	6062      	str	r2, [r4, #4]
 800cfb6:	bf04      	itt	eq
 800cfb8:	1809      	addeq	r1, r1, r0
 800cfba:	6021      	streq	r1, [r4, #0]
 800cfbc:	605c      	str	r4, [r3, #4]
 800cfbe:	e7c7      	b.n	800cf50 <_free_r+0x24>
 800cfc0:	bd38      	pop	{r3, r4, r5, pc}
 800cfc2:	bf00      	nop
 800cfc4:	20000284 	.word	0x20000284

0800cfc8 <_malloc_r>:
 800cfc8:	b570      	push	{r4, r5, r6, lr}
 800cfca:	1ccd      	adds	r5, r1, #3
 800cfcc:	f025 0503 	bic.w	r5, r5, #3
 800cfd0:	3508      	adds	r5, #8
 800cfd2:	2d0c      	cmp	r5, #12
 800cfd4:	bf38      	it	cc
 800cfd6:	250c      	movcc	r5, #12
 800cfd8:	2d00      	cmp	r5, #0
 800cfda:	4606      	mov	r6, r0
 800cfdc:	db01      	blt.n	800cfe2 <_malloc_r+0x1a>
 800cfde:	42a9      	cmp	r1, r5
 800cfe0:	d903      	bls.n	800cfea <_malloc_r+0x22>
 800cfe2:	230c      	movs	r3, #12
 800cfe4:	6033      	str	r3, [r6, #0]
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	bd70      	pop	{r4, r5, r6, pc}
 800cfea:	f000 f9cf 	bl	800d38c <__malloc_lock>
 800cfee:	4a21      	ldr	r2, [pc, #132]	; (800d074 <_malloc_r+0xac>)
 800cff0:	6814      	ldr	r4, [r2, #0]
 800cff2:	4621      	mov	r1, r4
 800cff4:	b991      	cbnz	r1, 800d01c <_malloc_r+0x54>
 800cff6:	4c20      	ldr	r4, [pc, #128]	; (800d078 <_malloc_r+0xb0>)
 800cff8:	6823      	ldr	r3, [r4, #0]
 800cffa:	b91b      	cbnz	r3, 800d004 <_malloc_r+0x3c>
 800cffc:	4630      	mov	r0, r6
 800cffe:	f000 f98f 	bl	800d320 <_sbrk_r>
 800d002:	6020      	str	r0, [r4, #0]
 800d004:	4629      	mov	r1, r5
 800d006:	4630      	mov	r0, r6
 800d008:	f000 f98a 	bl	800d320 <_sbrk_r>
 800d00c:	1c43      	adds	r3, r0, #1
 800d00e:	d124      	bne.n	800d05a <_malloc_r+0x92>
 800d010:	230c      	movs	r3, #12
 800d012:	6033      	str	r3, [r6, #0]
 800d014:	4630      	mov	r0, r6
 800d016:	f000 f9ba 	bl	800d38e <__malloc_unlock>
 800d01a:	e7e4      	b.n	800cfe6 <_malloc_r+0x1e>
 800d01c:	680b      	ldr	r3, [r1, #0]
 800d01e:	1b5b      	subs	r3, r3, r5
 800d020:	d418      	bmi.n	800d054 <_malloc_r+0x8c>
 800d022:	2b0b      	cmp	r3, #11
 800d024:	d90f      	bls.n	800d046 <_malloc_r+0x7e>
 800d026:	600b      	str	r3, [r1, #0]
 800d028:	50cd      	str	r5, [r1, r3]
 800d02a:	18cc      	adds	r4, r1, r3
 800d02c:	4630      	mov	r0, r6
 800d02e:	f000 f9ae 	bl	800d38e <__malloc_unlock>
 800d032:	f104 000b 	add.w	r0, r4, #11
 800d036:	1d23      	adds	r3, r4, #4
 800d038:	f020 0007 	bic.w	r0, r0, #7
 800d03c:	1ac3      	subs	r3, r0, r3
 800d03e:	d0d3      	beq.n	800cfe8 <_malloc_r+0x20>
 800d040:	425a      	negs	r2, r3
 800d042:	50e2      	str	r2, [r4, r3]
 800d044:	e7d0      	b.n	800cfe8 <_malloc_r+0x20>
 800d046:	428c      	cmp	r4, r1
 800d048:	684b      	ldr	r3, [r1, #4]
 800d04a:	bf16      	itet	ne
 800d04c:	6063      	strne	r3, [r4, #4]
 800d04e:	6013      	streq	r3, [r2, #0]
 800d050:	460c      	movne	r4, r1
 800d052:	e7eb      	b.n	800d02c <_malloc_r+0x64>
 800d054:	460c      	mov	r4, r1
 800d056:	6849      	ldr	r1, [r1, #4]
 800d058:	e7cc      	b.n	800cff4 <_malloc_r+0x2c>
 800d05a:	1cc4      	adds	r4, r0, #3
 800d05c:	f024 0403 	bic.w	r4, r4, #3
 800d060:	42a0      	cmp	r0, r4
 800d062:	d005      	beq.n	800d070 <_malloc_r+0xa8>
 800d064:	1a21      	subs	r1, r4, r0
 800d066:	4630      	mov	r0, r6
 800d068:	f000 f95a 	bl	800d320 <_sbrk_r>
 800d06c:	3001      	adds	r0, #1
 800d06e:	d0cf      	beq.n	800d010 <_malloc_r+0x48>
 800d070:	6025      	str	r5, [r4, #0]
 800d072:	e7db      	b.n	800d02c <_malloc_r+0x64>
 800d074:	20000284 	.word	0x20000284
 800d078:	20000288 	.word	0x20000288

0800d07c <__ssputs_r>:
 800d07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d080:	688e      	ldr	r6, [r1, #8]
 800d082:	429e      	cmp	r6, r3
 800d084:	4682      	mov	sl, r0
 800d086:	460c      	mov	r4, r1
 800d088:	4690      	mov	r8, r2
 800d08a:	4699      	mov	r9, r3
 800d08c:	d837      	bhi.n	800d0fe <__ssputs_r+0x82>
 800d08e:	898a      	ldrh	r2, [r1, #12]
 800d090:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d094:	d031      	beq.n	800d0fa <__ssputs_r+0x7e>
 800d096:	6825      	ldr	r5, [r4, #0]
 800d098:	6909      	ldr	r1, [r1, #16]
 800d09a:	1a6f      	subs	r7, r5, r1
 800d09c:	6965      	ldr	r5, [r4, #20]
 800d09e:	2302      	movs	r3, #2
 800d0a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0a4:	fb95 f5f3 	sdiv	r5, r5, r3
 800d0a8:	f109 0301 	add.w	r3, r9, #1
 800d0ac:	443b      	add	r3, r7
 800d0ae:	429d      	cmp	r5, r3
 800d0b0:	bf38      	it	cc
 800d0b2:	461d      	movcc	r5, r3
 800d0b4:	0553      	lsls	r3, r2, #21
 800d0b6:	d530      	bpl.n	800d11a <__ssputs_r+0x9e>
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	f7ff ff85 	bl	800cfc8 <_malloc_r>
 800d0be:	4606      	mov	r6, r0
 800d0c0:	b950      	cbnz	r0, 800d0d8 <__ssputs_r+0x5c>
 800d0c2:	230c      	movs	r3, #12
 800d0c4:	f8ca 3000 	str.w	r3, [sl]
 800d0c8:	89a3      	ldrh	r3, [r4, #12]
 800d0ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0ce:	81a3      	strh	r3, [r4, #12]
 800d0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0d8:	463a      	mov	r2, r7
 800d0da:	6921      	ldr	r1, [r4, #16]
 800d0dc:	f7fe f82c 	bl	800b138 <memcpy>
 800d0e0:	89a3      	ldrh	r3, [r4, #12]
 800d0e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d0e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0ea:	81a3      	strh	r3, [r4, #12]
 800d0ec:	6126      	str	r6, [r4, #16]
 800d0ee:	6165      	str	r5, [r4, #20]
 800d0f0:	443e      	add	r6, r7
 800d0f2:	1bed      	subs	r5, r5, r7
 800d0f4:	6026      	str	r6, [r4, #0]
 800d0f6:	60a5      	str	r5, [r4, #8]
 800d0f8:	464e      	mov	r6, r9
 800d0fa:	454e      	cmp	r6, r9
 800d0fc:	d900      	bls.n	800d100 <__ssputs_r+0x84>
 800d0fe:	464e      	mov	r6, r9
 800d100:	4632      	mov	r2, r6
 800d102:	4641      	mov	r1, r8
 800d104:	6820      	ldr	r0, [r4, #0]
 800d106:	f000 f928 	bl	800d35a <memmove>
 800d10a:	68a3      	ldr	r3, [r4, #8]
 800d10c:	1b9b      	subs	r3, r3, r6
 800d10e:	60a3      	str	r3, [r4, #8]
 800d110:	6823      	ldr	r3, [r4, #0]
 800d112:	441e      	add	r6, r3
 800d114:	6026      	str	r6, [r4, #0]
 800d116:	2000      	movs	r0, #0
 800d118:	e7dc      	b.n	800d0d4 <__ssputs_r+0x58>
 800d11a:	462a      	mov	r2, r5
 800d11c:	f000 f938 	bl	800d390 <_realloc_r>
 800d120:	4606      	mov	r6, r0
 800d122:	2800      	cmp	r0, #0
 800d124:	d1e2      	bne.n	800d0ec <__ssputs_r+0x70>
 800d126:	6921      	ldr	r1, [r4, #16]
 800d128:	4650      	mov	r0, sl
 800d12a:	f7ff feff 	bl	800cf2c <_free_r>
 800d12e:	e7c8      	b.n	800d0c2 <__ssputs_r+0x46>

0800d130 <_svfiprintf_r>:
 800d130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d134:	461d      	mov	r5, r3
 800d136:	898b      	ldrh	r3, [r1, #12]
 800d138:	061f      	lsls	r7, r3, #24
 800d13a:	b09d      	sub	sp, #116	; 0x74
 800d13c:	4680      	mov	r8, r0
 800d13e:	460c      	mov	r4, r1
 800d140:	4616      	mov	r6, r2
 800d142:	d50f      	bpl.n	800d164 <_svfiprintf_r+0x34>
 800d144:	690b      	ldr	r3, [r1, #16]
 800d146:	b96b      	cbnz	r3, 800d164 <_svfiprintf_r+0x34>
 800d148:	2140      	movs	r1, #64	; 0x40
 800d14a:	f7ff ff3d 	bl	800cfc8 <_malloc_r>
 800d14e:	6020      	str	r0, [r4, #0]
 800d150:	6120      	str	r0, [r4, #16]
 800d152:	b928      	cbnz	r0, 800d160 <_svfiprintf_r+0x30>
 800d154:	230c      	movs	r3, #12
 800d156:	f8c8 3000 	str.w	r3, [r8]
 800d15a:	f04f 30ff 	mov.w	r0, #4294967295
 800d15e:	e0c8      	b.n	800d2f2 <_svfiprintf_r+0x1c2>
 800d160:	2340      	movs	r3, #64	; 0x40
 800d162:	6163      	str	r3, [r4, #20]
 800d164:	2300      	movs	r3, #0
 800d166:	9309      	str	r3, [sp, #36]	; 0x24
 800d168:	2320      	movs	r3, #32
 800d16a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d16e:	2330      	movs	r3, #48	; 0x30
 800d170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d174:	9503      	str	r5, [sp, #12]
 800d176:	f04f 0b01 	mov.w	fp, #1
 800d17a:	4637      	mov	r7, r6
 800d17c:	463d      	mov	r5, r7
 800d17e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d182:	b10b      	cbz	r3, 800d188 <_svfiprintf_r+0x58>
 800d184:	2b25      	cmp	r3, #37	; 0x25
 800d186:	d13e      	bne.n	800d206 <_svfiprintf_r+0xd6>
 800d188:	ebb7 0a06 	subs.w	sl, r7, r6
 800d18c:	d00b      	beq.n	800d1a6 <_svfiprintf_r+0x76>
 800d18e:	4653      	mov	r3, sl
 800d190:	4632      	mov	r2, r6
 800d192:	4621      	mov	r1, r4
 800d194:	4640      	mov	r0, r8
 800d196:	f7ff ff71 	bl	800d07c <__ssputs_r>
 800d19a:	3001      	adds	r0, #1
 800d19c:	f000 80a4 	beq.w	800d2e8 <_svfiprintf_r+0x1b8>
 800d1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1a2:	4453      	add	r3, sl
 800d1a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a6:	783b      	ldrb	r3, [r7, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f000 809d 	beq.w	800d2e8 <_svfiprintf_r+0x1b8>
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1b8:	9304      	str	r3, [sp, #16]
 800d1ba:	9307      	str	r3, [sp, #28]
 800d1bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1c0:	931a      	str	r3, [sp, #104]	; 0x68
 800d1c2:	462f      	mov	r7, r5
 800d1c4:	2205      	movs	r2, #5
 800d1c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d1ca:	4850      	ldr	r0, [pc, #320]	; (800d30c <_svfiprintf_r+0x1dc>)
 800d1cc:	f7f3 f810 	bl	80001f0 <memchr>
 800d1d0:	9b04      	ldr	r3, [sp, #16]
 800d1d2:	b9d0      	cbnz	r0, 800d20a <_svfiprintf_r+0xda>
 800d1d4:	06d9      	lsls	r1, r3, #27
 800d1d6:	bf44      	itt	mi
 800d1d8:	2220      	movmi	r2, #32
 800d1da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d1de:	071a      	lsls	r2, r3, #28
 800d1e0:	bf44      	itt	mi
 800d1e2:	222b      	movmi	r2, #43	; 0x2b
 800d1e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d1e8:	782a      	ldrb	r2, [r5, #0]
 800d1ea:	2a2a      	cmp	r2, #42	; 0x2a
 800d1ec:	d015      	beq.n	800d21a <_svfiprintf_r+0xea>
 800d1ee:	9a07      	ldr	r2, [sp, #28]
 800d1f0:	462f      	mov	r7, r5
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	250a      	movs	r5, #10
 800d1f6:	4639      	mov	r1, r7
 800d1f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1fc:	3b30      	subs	r3, #48	; 0x30
 800d1fe:	2b09      	cmp	r3, #9
 800d200:	d94d      	bls.n	800d29e <_svfiprintf_r+0x16e>
 800d202:	b1b8      	cbz	r0, 800d234 <_svfiprintf_r+0x104>
 800d204:	e00f      	b.n	800d226 <_svfiprintf_r+0xf6>
 800d206:	462f      	mov	r7, r5
 800d208:	e7b8      	b.n	800d17c <_svfiprintf_r+0x4c>
 800d20a:	4a40      	ldr	r2, [pc, #256]	; (800d30c <_svfiprintf_r+0x1dc>)
 800d20c:	1a80      	subs	r0, r0, r2
 800d20e:	fa0b f000 	lsl.w	r0, fp, r0
 800d212:	4318      	orrs	r0, r3
 800d214:	9004      	str	r0, [sp, #16]
 800d216:	463d      	mov	r5, r7
 800d218:	e7d3      	b.n	800d1c2 <_svfiprintf_r+0x92>
 800d21a:	9a03      	ldr	r2, [sp, #12]
 800d21c:	1d11      	adds	r1, r2, #4
 800d21e:	6812      	ldr	r2, [r2, #0]
 800d220:	9103      	str	r1, [sp, #12]
 800d222:	2a00      	cmp	r2, #0
 800d224:	db01      	blt.n	800d22a <_svfiprintf_r+0xfa>
 800d226:	9207      	str	r2, [sp, #28]
 800d228:	e004      	b.n	800d234 <_svfiprintf_r+0x104>
 800d22a:	4252      	negs	r2, r2
 800d22c:	f043 0302 	orr.w	r3, r3, #2
 800d230:	9207      	str	r2, [sp, #28]
 800d232:	9304      	str	r3, [sp, #16]
 800d234:	783b      	ldrb	r3, [r7, #0]
 800d236:	2b2e      	cmp	r3, #46	; 0x2e
 800d238:	d10c      	bne.n	800d254 <_svfiprintf_r+0x124>
 800d23a:	787b      	ldrb	r3, [r7, #1]
 800d23c:	2b2a      	cmp	r3, #42	; 0x2a
 800d23e:	d133      	bne.n	800d2a8 <_svfiprintf_r+0x178>
 800d240:	9b03      	ldr	r3, [sp, #12]
 800d242:	1d1a      	adds	r2, r3, #4
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	9203      	str	r2, [sp, #12]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	bfb8      	it	lt
 800d24c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d250:	3702      	adds	r7, #2
 800d252:	9305      	str	r3, [sp, #20]
 800d254:	4d2e      	ldr	r5, [pc, #184]	; (800d310 <_svfiprintf_r+0x1e0>)
 800d256:	7839      	ldrb	r1, [r7, #0]
 800d258:	2203      	movs	r2, #3
 800d25a:	4628      	mov	r0, r5
 800d25c:	f7f2 ffc8 	bl	80001f0 <memchr>
 800d260:	b138      	cbz	r0, 800d272 <_svfiprintf_r+0x142>
 800d262:	2340      	movs	r3, #64	; 0x40
 800d264:	1b40      	subs	r0, r0, r5
 800d266:	fa03 f000 	lsl.w	r0, r3, r0
 800d26a:	9b04      	ldr	r3, [sp, #16]
 800d26c:	4303      	orrs	r3, r0
 800d26e:	3701      	adds	r7, #1
 800d270:	9304      	str	r3, [sp, #16]
 800d272:	7839      	ldrb	r1, [r7, #0]
 800d274:	4827      	ldr	r0, [pc, #156]	; (800d314 <_svfiprintf_r+0x1e4>)
 800d276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d27a:	2206      	movs	r2, #6
 800d27c:	1c7e      	adds	r6, r7, #1
 800d27e:	f7f2 ffb7 	bl	80001f0 <memchr>
 800d282:	2800      	cmp	r0, #0
 800d284:	d038      	beq.n	800d2f8 <_svfiprintf_r+0x1c8>
 800d286:	4b24      	ldr	r3, [pc, #144]	; (800d318 <_svfiprintf_r+0x1e8>)
 800d288:	bb13      	cbnz	r3, 800d2d0 <_svfiprintf_r+0x1a0>
 800d28a:	9b03      	ldr	r3, [sp, #12]
 800d28c:	3307      	adds	r3, #7
 800d28e:	f023 0307 	bic.w	r3, r3, #7
 800d292:	3308      	adds	r3, #8
 800d294:	9303      	str	r3, [sp, #12]
 800d296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d298:	444b      	add	r3, r9
 800d29a:	9309      	str	r3, [sp, #36]	; 0x24
 800d29c:	e76d      	b.n	800d17a <_svfiprintf_r+0x4a>
 800d29e:	fb05 3202 	mla	r2, r5, r2, r3
 800d2a2:	2001      	movs	r0, #1
 800d2a4:	460f      	mov	r7, r1
 800d2a6:	e7a6      	b.n	800d1f6 <_svfiprintf_r+0xc6>
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	3701      	adds	r7, #1
 800d2ac:	9305      	str	r3, [sp, #20]
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	250a      	movs	r5, #10
 800d2b2:	4638      	mov	r0, r7
 800d2b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2b8:	3a30      	subs	r2, #48	; 0x30
 800d2ba:	2a09      	cmp	r2, #9
 800d2bc:	d903      	bls.n	800d2c6 <_svfiprintf_r+0x196>
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d0c8      	beq.n	800d254 <_svfiprintf_r+0x124>
 800d2c2:	9105      	str	r1, [sp, #20]
 800d2c4:	e7c6      	b.n	800d254 <_svfiprintf_r+0x124>
 800d2c6:	fb05 2101 	mla	r1, r5, r1, r2
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	4607      	mov	r7, r0
 800d2ce:	e7f0      	b.n	800d2b2 <_svfiprintf_r+0x182>
 800d2d0:	ab03      	add	r3, sp, #12
 800d2d2:	9300      	str	r3, [sp, #0]
 800d2d4:	4622      	mov	r2, r4
 800d2d6:	4b11      	ldr	r3, [pc, #68]	; (800d31c <_svfiprintf_r+0x1ec>)
 800d2d8:	a904      	add	r1, sp, #16
 800d2da:	4640      	mov	r0, r8
 800d2dc:	f7fd ffd4 	bl	800b288 <_printf_float>
 800d2e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d2e4:	4681      	mov	r9, r0
 800d2e6:	d1d6      	bne.n	800d296 <_svfiprintf_r+0x166>
 800d2e8:	89a3      	ldrh	r3, [r4, #12]
 800d2ea:	065b      	lsls	r3, r3, #25
 800d2ec:	f53f af35 	bmi.w	800d15a <_svfiprintf_r+0x2a>
 800d2f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2f2:	b01d      	add	sp, #116	; 0x74
 800d2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f8:	ab03      	add	r3, sp, #12
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	4622      	mov	r2, r4
 800d2fe:	4b07      	ldr	r3, [pc, #28]	; (800d31c <_svfiprintf_r+0x1ec>)
 800d300:	a904      	add	r1, sp, #16
 800d302:	4640      	mov	r0, r8
 800d304:	f7fe fa76 	bl	800b7f4 <_printf_i>
 800d308:	e7ea      	b.n	800d2e0 <_svfiprintf_r+0x1b0>
 800d30a:	bf00      	nop
 800d30c:	0800dda4 	.word	0x0800dda4
 800d310:	0800ddaa 	.word	0x0800ddaa
 800d314:	0800ddae 	.word	0x0800ddae
 800d318:	0800b289 	.word	0x0800b289
 800d31c:	0800d07d 	.word	0x0800d07d

0800d320 <_sbrk_r>:
 800d320:	b538      	push	{r3, r4, r5, lr}
 800d322:	4c06      	ldr	r4, [pc, #24]	; (800d33c <_sbrk_r+0x1c>)
 800d324:	2300      	movs	r3, #0
 800d326:	4605      	mov	r5, r0
 800d328:	4608      	mov	r0, r1
 800d32a:	6023      	str	r3, [r4, #0]
 800d32c:	f7fd fe6a 	bl	800b004 <_sbrk>
 800d330:	1c43      	adds	r3, r0, #1
 800d332:	d102      	bne.n	800d33a <_sbrk_r+0x1a>
 800d334:	6823      	ldr	r3, [r4, #0]
 800d336:	b103      	cbz	r3, 800d33a <_sbrk_r+0x1a>
 800d338:	602b      	str	r3, [r5, #0]
 800d33a:	bd38      	pop	{r3, r4, r5, pc}
 800d33c:	200008cc 	.word	0x200008cc

0800d340 <__ascii_wctomb>:
 800d340:	b149      	cbz	r1, 800d356 <__ascii_wctomb+0x16>
 800d342:	2aff      	cmp	r2, #255	; 0xff
 800d344:	bf85      	ittet	hi
 800d346:	238a      	movhi	r3, #138	; 0x8a
 800d348:	6003      	strhi	r3, [r0, #0]
 800d34a:	700a      	strbls	r2, [r1, #0]
 800d34c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d350:	bf98      	it	ls
 800d352:	2001      	movls	r0, #1
 800d354:	4770      	bx	lr
 800d356:	4608      	mov	r0, r1
 800d358:	4770      	bx	lr

0800d35a <memmove>:
 800d35a:	4288      	cmp	r0, r1
 800d35c:	b510      	push	{r4, lr}
 800d35e:	eb01 0302 	add.w	r3, r1, r2
 800d362:	d807      	bhi.n	800d374 <memmove+0x1a>
 800d364:	1e42      	subs	r2, r0, #1
 800d366:	4299      	cmp	r1, r3
 800d368:	d00a      	beq.n	800d380 <memmove+0x26>
 800d36a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d36e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d372:	e7f8      	b.n	800d366 <memmove+0xc>
 800d374:	4283      	cmp	r3, r0
 800d376:	d9f5      	bls.n	800d364 <memmove+0xa>
 800d378:	1881      	adds	r1, r0, r2
 800d37a:	1ad2      	subs	r2, r2, r3
 800d37c:	42d3      	cmn	r3, r2
 800d37e:	d100      	bne.n	800d382 <memmove+0x28>
 800d380:	bd10      	pop	{r4, pc}
 800d382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d386:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d38a:	e7f7      	b.n	800d37c <memmove+0x22>

0800d38c <__malloc_lock>:
 800d38c:	4770      	bx	lr

0800d38e <__malloc_unlock>:
 800d38e:	4770      	bx	lr

0800d390 <_realloc_r>:
 800d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d392:	4607      	mov	r7, r0
 800d394:	4614      	mov	r4, r2
 800d396:	460e      	mov	r6, r1
 800d398:	b921      	cbnz	r1, 800d3a4 <_realloc_r+0x14>
 800d39a:	4611      	mov	r1, r2
 800d39c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d3a0:	f7ff be12 	b.w	800cfc8 <_malloc_r>
 800d3a4:	b922      	cbnz	r2, 800d3b0 <_realloc_r+0x20>
 800d3a6:	f7ff fdc1 	bl	800cf2c <_free_r>
 800d3aa:	4625      	mov	r5, r4
 800d3ac:	4628      	mov	r0, r5
 800d3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3b0:	f000 f814 	bl	800d3dc <_malloc_usable_size_r>
 800d3b4:	42a0      	cmp	r0, r4
 800d3b6:	d20f      	bcs.n	800d3d8 <_realloc_r+0x48>
 800d3b8:	4621      	mov	r1, r4
 800d3ba:	4638      	mov	r0, r7
 800d3bc:	f7ff fe04 	bl	800cfc8 <_malloc_r>
 800d3c0:	4605      	mov	r5, r0
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	d0f2      	beq.n	800d3ac <_realloc_r+0x1c>
 800d3c6:	4631      	mov	r1, r6
 800d3c8:	4622      	mov	r2, r4
 800d3ca:	f7fd feb5 	bl	800b138 <memcpy>
 800d3ce:	4631      	mov	r1, r6
 800d3d0:	4638      	mov	r0, r7
 800d3d2:	f7ff fdab 	bl	800cf2c <_free_r>
 800d3d6:	e7e9      	b.n	800d3ac <_realloc_r+0x1c>
 800d3d8:	4635      	mov	r5, r6
 800d3da:	e7e7      	b.n	800d3ac <_realloc_r+0x1c>

0800d3dc <_malloc_usable_size_r>:
 800d3dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3e0:	1f18      	subs	r0, r3, #4
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	bfbc      	itt	lt
 800d3e6:	580b      	ldrlt	r3, [r1, r0]
 800d3e8:	18c0      	addlt	r0, r0, r3
 800d3ea:	4770      	bx	lr

0800d3ec <_init>:
 800d3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ee:	bf00      	nop
 800d3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3f2:	bc08      	pop	{r3}
 800d3f4:	469e      	mov	lr, r3
 800d3f6:	4770      	bx	lr

0800d3f8 <_fini>:
 800d3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3fa:	bf00      	nop
 800d3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3fe:	bc08      	pop	{r3}
 800d400:	469e      	mov	lr, r3
 800d402:	4770      	bx	lr
